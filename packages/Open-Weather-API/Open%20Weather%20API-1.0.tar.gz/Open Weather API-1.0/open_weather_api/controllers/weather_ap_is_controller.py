# -*- coding: utf-8 -*-

"""
    open_weather_api

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from open_weather_api.api_helper import APIHelper
from open_weather_api.configuration import Configuration
from open_weather_api.controllers.base_controller import BaseController
from open_weather_api.http.auth.custom_query_auth import CustomQueryAuth
from open_weather_api.models.weather_api_response import WeatherAPIResponse

class WeatherAPIsController(BaseController):

    """A Controller to access Endpoints in the open_weather_api API."""


    def get_weather_by_city_name(self,
                                 q,
                                 mode=None,
                                 units=None,
                                 lang=None):
        """Does a GET request to /weather.

        This is a weather API endpoint which returns the current weather of a
        location by city name.

        Args:
            q (string): City name, state code and country code divided by
                comma, use ISO 3166 country codes.
            mode (MODEEnum, optional): Response format. Possible values are
                xml and html. If you don't use the mode parameter format is
                JSON by default.
            units (UNITSEnum, optional): Units of measurement. standard,
                metric and imperial units are available. If you do not use the
                units parameter, standard units will be applied by default.
            lang (LANGEnum, optional): You can use this parameter to get the
                output in your language.

        Returns:
            WeatherAPIResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/weather'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'q': q,
            'mode': mode,
            'units': units,
            'lang': lang
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, WeatherAPIResponse.from_dictionary)

    def get_weather_by_latitude_and_longitude(self,
                                              lat,
                                              lon,
                                              mode=None,
                                              units=None,
                                              lang=None):
        """Does a GET request to /weather.

        This is a weather API endpoint which returns the current weather of a
        location by latitude and longitude.

        Args:
            lat (float): This field will contain the latitude of city
            lon (float): This field will contain the longitude of city
            mode (MODEEnum, optional): Response format. Possible values are
                xml and html. If you don't use the mode parameter format is
                JSON by default.
            units (UNITSEnum, optional): Units of measurement. standard,
                metric and imperial units are available. If you do not use the
                units parameter, standard units will be applied by default.
            lang (string, optional): You can use this parameter to get the
                output in your language.

        Returns:
            WeatherAPIResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/weather'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'lat': lat,
            'lon': lon,
            'mode': mode,
            'units': units,
            'lang': lang
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, WeatherAPIResponse.from_dictionary)
