# -*- coding: utf-8 -*-

"""
    open_weather_api

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class Main(object):

    """Implementation of the 'main' model.

    This model contains the digital values of weather.

    Attributes:
        temp (float): This field contains the current temperature
        feels_like (float): This field contains the feels like attribute of
            temperature
        pressure (float): This field contains the pressure
        humidity (float): This field contains the humidity
        temp_min (float): This field contains the minimum temperature
        temp_max (float): This field contains the maximum temperature
        sea_level (float): This field contains the information height with
            respect to sea level
        grnd_level (float): This field contains the information height with
            respect to ground level

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "temp":'temp',
        "pressure":'pressure',
        "humidity":'humidity',
        "temp_min":'temp_min',
        "temp_max":'temp_max',
        "feels_like":'feels_like',
        "sea_level":'sea_level',
        "grnd_level":'grnd_level'
    }

    def __init__(self,
                 temp=None,
                 pressure=None,
                 humidity=None,
                 temp_min=None,
                 temp_max=None,
                 feels_like=None,
                 sea_level=None,
                 grnd_level=None):
        """Constructor for the Main class"""

        # Initialize members of the class
        self.temp = temp
        self.feels_like = feels_like
        self.pressure = pressure
        self.humidity = humidity
        self.temp_min = temp_min
        self.temp_max = temp_max
        self.sea_level = sea_level
        self.grnd_level = grnd_level


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        temp = dictionary.get('temp')
        pressure = dictionary.get('pressure')
        humidity = dictionary.get('humidity')
        temp_min = dictionary.get('temp_min')
        temp_max = dictionary.get('temp_max')
        feels_like = dictionary.get('feels_like')
        sea_level = dictionary.get('sea_level')
        grnd_level = dictionary.get('grnd_level')

        # Return an object of this model
        return cls(temp,
                   pressure,
                   humidity,
                   temp_min,
                   temp_max,
                   feels_like,
                   sea_level,
                   grnd_level)


