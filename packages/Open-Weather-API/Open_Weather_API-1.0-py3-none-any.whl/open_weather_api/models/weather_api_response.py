# -*- coding: utf-8 -*-

"""
    open_weather_api

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import open_weather_api.models.coord
import open_weather_api.models.weather
import open_weather_api.models.main
import open_weather_api.models.wind
import open_weather_api.models.clouds
import open_weather_api.models.sys

class WeatherAPIResponse(object):

    """Implementation of the 'Weather API Response' model.

    Weather API overall response model

    Attributes:
        coord (Coord): This field contains information of longitude and
            latitude
        weather (list of Weather): This field contains list of weather
            information object
        base (string): This field contains the base
        main (Main): This field contains the digital stats of current weather
        visibility (long|int): This field contains the visibility value
        wind (Wind): This field contains the wind information of current
            weather
        clouds (Clouds): This field contains the information about clouds
        dt (long|int): This is current date and time
        sys (Sys): This field contains information about country, sunrise and
            sunset
        id (long|int): This is an identifier
        name (string): This is the name of city
        cod (int): This information is about cod
        timezone (int): This field contains information of time zone Id of
            city

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "coord":'coord',
        "weather":'weather',
        "base":'base',
        "main":'main',
        "wind":'wind',
        "clouds":'clouds',
        "dt":'dt',
        "sys":'sys',
        "id":'id',
        "name":'name',
        "cod":'cod',
        "visibility":'visibility',
        "timezone":'timezone'
    }

    def __init__(self,
                 coord=None,
                 weather=None,
                 base=None,
                 main=None,
                 wind=None,
                 clouds=None,
                 dt=None,
                 sys=None,
                 id=None,
                 name=None,
                 cod=None,
                 visibility=None,
                 timezone=None):
        """Constructor for the WeatherAPIResponse class"""

        # Initialize members of the class
        self.coord = coord
        self.weather = weather
        self.base = base
        self.main = main
        self.visibility = visibility
        self.wind = wind
        self.clouds = clouds
        self.dt = dt
        self.sys = sys
        self.id = id
        self.name = name
        self.cod = cod
        self.timezone = timezone


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        coord = open_weather_api.models.coord.Coord.from_dictionary(dictionary.get('coord')) if dictionary.get('coord') else None
        weather = None
        if dictionary.get('weather') != None:
            weather = list()
            for structure in dictionary.get('weather'):
                weather.append(open_weather_api.models.weather.Weather.from_dictionary(structure))
        base = dictionary.get('base')
        main = open_weather_api.models.main.Main.from_dictionary(dictionary.get('main')) if dictionary.get('main') else None
        wind = open_weather_api.models.wind.Wind.from_dictionary(dictionary.get('wind')) if dictionary.get('wind') else None
        clouds = open_weather_api.models.clouds.Clouds.from_dictionary(dictionary.get('clouds')) if dictionary.get('clouds') else None
        dt = dictionary.get('dt')
        sys = open_weather_api.models.sys.Sys.from_dictionary(dictionary.get('sys')) if dictionary.get('sys') else None
        id = dictionary.get('id')
        name = dictionary.get('name')
        cod = dictionary.get('cod')
        visibility = dictionary.get('visibility')
        timezone = dictionary.get('timezone')

        # Return an object of this model
        return cls(coord,
                   weather,
                   base,
                   main,
                   wind,
                   clouds,
                   dt,
                   sys,
                   id,
                   name,
                   cod,
                   visibility,
                   timezone)


