# test_project.machinable.yaml
name: test_project
+:
  - fooba: foo.bar
scientific: 5e-6
outsource: $/outsourced.yaml
${envvarkey:-default}: $envvarvalue
mixins:
  - mixins.trait=trait:
      key:
        mixing: will be
        very: powerful
  - extended^mixins.trait:
      key:
        mixing: is
        overwritten: cool
  - mixin_module:
      hello: there
  - +.fooba.test=test:
  - +.fooba.mixins.nested=nested:
  - +.fooba.experiments.base=experiment_mixin:
  - version_mixin:
      mixed_in: true
      ba: 1
      foo: False
      ~test:
        foo: 1
        ~nest:
          mixed_in:
          ba: 2
      ~three:
        alpha: 5
        ~nested:
          added: blocker
          beta: override
components:
  - thenode:
      timeout: 0
      a: through_config_method(1)
      b:
      alpha: 0
      works:
      nested:
      added:
      unaffected: true
      q:
      key:
        mixing:
        very:
      beta:
        test:
      ~one:
        alpha: 1
        beta:
          test: True
      ~two:
        alpha: 2
      ~three:
        alpha: 3
        unaffected: value
        ~nested:
          works: False
          alpha: 4
          beta: nested
          ~nestednested:
            beta: overwritten
            alpha: 5
            added: value
        ~second_nested:
          should_not_be: selected
      ~nested:
        nested: True
        works: True
  - childexp^thenode:
      a: 2
      b: 3
  - inherit^+.fooba.experiments.start:
      blub: bla
  - +.fooba.experiments.dependent=test_dependent:
      overwrite_me:
        nested: here
  - mixexp:
      _mixins_:
        - experiment_mixin
        - extended
        - test
        - nested
      key:
        extension: enabled
      hello: there
  - +.fooba.experiments.miximp=miximp:
      c: 1
  - inherited_mixin^miximp:
  - direct_mixin_inheritance^+.fooba.experiments.miximp:
  - thechildren=cool:
      alpha: 0
      bla: blub
      key:
        mixing:
        very:
        overwritten:
      beta:
        test: False
      ~local:
        bla: boo
        a: 5
      ~one:
        alpha: 1
        beta:
          test: True
      ~two:
        alpha: 2
      ~three:
        alpha: 3
  - dryrun:
  - tunemodel:
      tuning: True
  - export_model^thechildren:
      _mixins_:
        - mixin_module
      exported: True
  - +.fooba.models.baseline=justhere:
      q: just
  - ^+.fooba.models.baseline:
      test: 1
  - +.fooba.models.baseline^cool=fromouterspace:
      overwrite: yes
  - +.fooba.models.config_inheritance:
  - +.fooba.models.config_dependency_inheritance:
  - +.fooba.models.chained_inheritance:
  - configmethods:
      method: hello()
      argmethod: arghello('world')
      nested:
        method: hello()
      global_method: global_conf(works=True)
  - inherited_flatness:
      flat.can.be.useful: False
      inherited.flat: value
  - flattened_notation^inherited_flatness:
      flat:
        nested: True
        merge:
      flat.can.be.useful: True
      flat.can_also_save_space: ' '
      flat.version: 1
      more.nested.values: False
      ~flat_version:
        flat:
          nested: False
        flat.version: 2
  - uses_default_module:
      works: True
components:nodes:
  - observations:
      id: -1
      some:
        config:
          - 1
          - 2
          - 3
      to_test: 'observations'
      test: False
      corrupt: False
      attr:
      version:
      ~test:
        version: 0
  - timings:
      test: 1
  - continuation:
components:workers:
  - interactive:
      id: 1
      attr: worker
      version:
      ~test:
        version: 1
  - inheritance_from_other_section^thenode:
  - inheritance_from_outer_section^nodes.observations:
components:failure:
  - exceptions:
includes:
  test: $/include_me.yaml