python module _fortran

    interface

        module meshparams
            integer :: nlocal
            integer, allocatable,dimension(:,:) :: gnid
            integer, allocatable,dimension(:,:) :: fvnid
            integer, allocatable,dimension(:) :: fvnnb
            double precision, allocatable,dimension(:) :: fvarea
            double precision, allocatable,dimension(:,:) :: fvelgt
            double precision, allocatable,dimension(:,:) :: fvvdist
        end module meshparams

        subroutine euclid(p1,p2,norm)
            double precision dimension(3),intent(in) :: p1
            double precision dimension(3),intent(in) :: p2
            double precision intent(out) :: norm
        end subroutine euclid

        subroutine quicksort(array,first,last,indices)
            double precision dimension(:),intent(inout) :: array
            integer intent(in) :: first
            integer intent(in) :: last
            integer dimension(:),intent(inout) :: indices
        end subroutine quicksort

        subroutine split(array,low,high,mid,indices)
            double precision dimension(:),intent(inout) :: array
            integer intent(in) :: low
            integer intent(in) :: high
            integer intent(out) :: mid
            integer dimension(:),intent(inout) :: indices
        end subroutine split

        subroutine setmaxnb(nb,maxnb) ! in :_fortran:functions.f90
            use meshparams
            integer :: nb
            integer intent(out) :: maxnb
        end subroutine setmaxnb

        subroutine sethillslopecoeff(nb,kd,dcoeff)
            use meshparams
            integer :: nb
            double precision dimension(nb),intent(in),depend(nb) :: kd
            double precision dimension(nb,9),intent(out),depend(nb) :: dcoeff
        end subroutine sethillslopecoeff

        subroutine marinecoeff(nb,kd,dcoeff)
            use meshparams
            integer :: nb
            double precision dimension(nb),intent(in),depend(nb) :: kd
            double precision dimension(nb,9),intent(out),depend(nb) :: dcoeff
        end subroutine marinecoeff

        subroutine mfdreceivers(nrcv,inids,elev,sl,rcv,dist,wgt,nb)
            use meshparams
            integer intent(in) :: nrcv
            double precision intent(in) :: sl
            integer dimension(nb),intent(in) :: inids
            double precision dimension(nb),intent(in),depend(nb) :: elev
            integer dimension(nb,nrcv),intent(out),depend(nb,nrcv) :: rcv
            double precision dimension(nb,nrcv),intent(out),depend(nb,nrcv) :: dist
            double precision dimension(nb,nrcv),intent(out),depend(nb,nrcv) :: wgt
            integer, optional,check(len(inids)>=nb),depend(inids) :: nb=len(inids)
        end subroutine mfdreceivers

        subroutine stratabuild(nb,stratnb,ids,weights,strath,stratz,stratf,phis,phif,nstrath,nstratz,nstratf,nphis,nphif)
            integer intent(in) :: nb
            integer intent(in) :: stratnb
            integer dimension(nb,3),intent(in),depend(nb) :: ids
            double precision dimension(nb,3),intent(in),depend(nb) :: weights
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: strath
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: stratz
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: stratf
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: phis
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: phif
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nstrath
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nstratz
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nstratf
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nphis
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nphif
        end subroutine stratabuild

        subroutine stratabuildcarb(nb,stratnb,ids,weights,strath,stratz,stratf,stratc,phis,phif,phic,nstrath,nstratz,nstratf,nstratc,nphis,nphif,nphic)
            integer intent(in) :: nb
            integer intent(in) :: stratnb
            integer dimension(nb,3),intent(in),depend(nb) :: ids
            double precision dimension(nb,3),intent(in),depend(nb) :: weights
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: strath
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: stratz
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: stratf
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: stratc
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: phis
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: phif
            double precision dimension(nb,stratnb),intent(in),depend(nb,stratnb) :: phic
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nstrath
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nstratz
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nstratf
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nstratc
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nphis
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nphif
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nphic
        end subroutine stratabuildcarb

        subroutine fillpit(sl,elev,hmax,fillz,pits,nb)
            use meshparams
            double precision intent(in) :: sl
            double precision dimension(nb),intent(in) :: elev
            double precision intent(in) :: hmax
            double precision dimension(nb),intent(out) :: fillz
            integer dimension(nb,2),intent(out) :: pits
            integer, optional,check(len(elev)>=nb),depend(elev) :: nb=len(elev)
        end subroutine fillpit

        subroutine filllabel(sl,elev,fillz,labels,nb)
            use meshparams
            double precision intent(in) :: sl
            double precision dimension(nb),intent(in) :: elev
            double precision dimension(nb),intent(out) :: fillz
            integer dimension(nb),intent(out) :: labels
            integer, optional,check(len(elev)>=nb),depend(elev) :: nb=len(elev)
        end subroutine filllabel

        subroutine ngbglob(nb,ngbid)
            use meshparams
            integer intent(in) :: nb
            integer dimension(nb,8),intent(in),depend(nb) :: ngbid
        end subroutine ngbglob

        subroutine definetin(coords,cells_nodes,cells_edges,edges_nodes,area,circumcenter,ngbid,edgemax,n,nb,m)
            use meshparams
            double precision dimension(nb,3),intent(in) :: coords
            integer dimension(n,3),intent(in) :: cells_nodes
            integer dimension(n,3),intent(in),depend(n) :: cells_edges
            integer dimension(m,2),intent(in) :: edges_nodes
            double precision dimension(nb),intent(in),depend(nb) :: area
            double precision dimension(3,n),intent(in),depend(n) :: circumcenter
            integer dimension(nb,8),intent(out),depend(nb) :: ngbid
            double precision intent(out) :: edgemax
            integer, optional,check(shape(cells_nodes,0)==n),depend(cells_nodes) :: n=shape(cells_nodes,0)
            integer, optional,check(shape(coords,0)==nb),depend(coords) :: nb=shape(coords,0)
            integer, optional,check(shape(edges_nodes,0)==m),depend(edges_nodes) :: m=shape(edges_nodes,0)
        end subroutine definetin

        subroutine definegtin(nb,cells_nodes,edges_nodes,ngbnb,ngbid,n,m)
            use meshparams
            integer intent(in) :: nb
            integer dimension(n,3),intent(in) :: cells_nodes
            integer dimension(m,2),intent(in) :: edges_nodes
            integer dimension(nb),intent(out),depend(nb) :: ngbnb
            integer dimension(nb,12),intent(out),depend(nb) :: ngbid
            integer, optional,check(shape(cells_nodes,0)==n),depend(cells_nodes) :: n=shape(cells_nodes,0)
            integer, optional,check(shape(edges_nodes,0)==m),depend(edges_nodes) :: m=shape(edges_nodes,0)
        end subroutine definegtin

    end interface

end python module _fortran
