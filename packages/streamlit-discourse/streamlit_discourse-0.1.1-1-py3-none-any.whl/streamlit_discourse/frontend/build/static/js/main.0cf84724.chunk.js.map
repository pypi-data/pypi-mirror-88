{"version":3,"sources":["height-observer.tsx","streamlit-discourse.tsx","index.tsx"],"names":["HeightObserver","children","fixedHeight","onChange","useState","container","setContainer","changeCallback","useCallback","useEffect","document","body","scrollHeight","ro","ResizeObserver","entries","entry","find","target","contentRect","height","observe","disconnect","ref","node","withStreamlitConnection","args","window","DiscourseEmbed","discourseUrl","replace","topicId","discourseReferrerPolicy","discourse","script","createElement","type","async","src","head","appendChild","removeChild","firstChild","Streamlit","setFrameHeight","id","ReactDOM","render","StrictMode","getElementById"],"mappings":"yNA+CeA,EAtCQ,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,SAAUC,EAAiD,EAAjDA,YAAaC,EAAoC,EAApCA,SAAoC,EACjDC,mBAAgC,MADiB,mBAC5EC,EAD4E,KACjEC,EADiE,KAI7EC,EAAiBC,sBAAYL,EAAU,IA2B7C,OAzBAM,qBAAU,WAKR,GAHAF,EAAeL,GAAeQ,SAASC,KAAKC,eAGvCV,GAAeG,EAAW,CAG7B,IAAMQ,EAAK,IAAIC,KAAe,SAAAC,GAC5B,IAAMC,EAAQD,EAAQE,MAAK,SAAAD,GAAK,OAAIA,EAAME,SAAWb,KACjDW,GACFT,EAAeS,EAAMG,YAAYC,WAQrC,OAHAP,EAAGQ,QAAQhB,GAGJ,WACLQ,EAAGS,iBAGN,CAACjB,EAAWH,EAAaK,IAG1B,yBAAKgB,IA9Bc,SAACC,GAAD,OAA0BlB,EAAakB,KA+BvDvB,ICkBQwB,eAtCY,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,KAAoC,EAC9BtB,mBAAgC,MADF,mBACzDC,EADyD,KAC9CC,EAD8C,KA+BhE,OA3BAG,qBAAU,WACR,GAAIJ,EAAW,CACbsB,OAAOC,eAAiB,CACtBC,aAAcH,EAAKG,aAAaC,QAAQ,OAAQ,KAChDC,QAASL,EAAKK,QACdC,wBAAyB,mCAG3B,IAAMC,EAAY5B,EAEZ6B,EAASxB,SAASyB,cAAc,UAOtC,OANAD,EAAOE,KAAO,kBACdF,EAAOG,OAAQ,EACfH,EAAOI,IAAMX,OAAOC,eAAeC,aAAe,uBAElDnB,SAAS6B,KAAKC,YAAYN,GAEnB,WAGL,IAFAxB,SAAS6B,KAAKE,YAAYP,GAEnBD,EAAUS,YACfT,EAAUQ,YAAYR,EAAUS,gBAIrC,CAACrC,EAAWqB,EAAKG,aAAcH,EAAKK,UAGrC,kBAAC,EAAD,CAAgB5B,SAAUwC,IAAUC,gBAClC,yBAAKrB,IA/BY,SAACC,GAAD,OAA0BlB,EAAakB,IA+BhCqB,GAAG,2BCnDjCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtC,SAASuC,eAAe,W","file":"static/js/main.0cf84724.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\"\nimport ResizeObserver from \"resize-observer-polyfill\"\n\ninterface HeightObserverProps {\n  children?: any\n  fixedHeight?: number\n  onChange: (height: number) => void\n}\n\nconst HeightObserver = ({ children, fixedHeight, onChange }: HeightObserverProps) => {\n  const [container, setContainer] = useState<HTMLDivElement | null>(null)\n  const containerRef = (node: HTMLDivElement) => setContainer(node)\n\n  const changeCallback = useCallback(onChange, [])\n\n  useEffect(() => {\n    // Initialize height\n    changeCallback(fixedHeight || document.body.scrollHeight)\n\n    // Change height dynamically if fixedHeight is not set\n    if (!fixedHeight && container) {\n\n      // Call onChange with new height as parameter\n      const ro = new ResizeObserver(entries => {\n        const entry = entries.find(entry => entry.target === container)\n        if (entry) {\n          changeCallback(entry.contentRect.height)\n        }\n      })\n\n      // Start observing div height changes\n      ro.observe(container)\n\n      // Unobserve div on unmount\n      return () => {\n        ro.disconnect()\n      }\n    }\n  }, [container, fixedHeight, changeCallback])\n\n  return (\n    <div ref={containerRef}>\n      {children}\n    </div>\n  )\n}\n\nexport default HeightObserver\n","import React, { useEffect, useState } from \"react\"\nimport {\n  ComponentProps,\n  Streamlit, \n  withStreamlitConnection\n} from \"streamlit-component-lib\"\n\nimport HeightObserver from \"./height-observer\"\n\ndeclare global {\n  interface Window {\n    DiscourseEmbed: any\n  }\n}\n\ninterface StreamlitDiscourseProps extends ComponentProps {\n  args: {\n    discourseUrl: string\n    topicId: number\n  }\n}\n\nconst StreamlitDiscourse = ({ args }: StreamlitDiscourseProps) => {\n  const [container, setContainer] = useState<HTMLDivElement | null>(null)\n  const containerRef = (node: HTMLDivElement) => setContainer(node)\n\n  useEffect(() => {\n    if (container) {\n      window.DiscourseEmbed = {\n        discourseUrl: args.discourseUrl.replace(/\\/*$/, \"/\"),\n        topicId: args.topicId,\n        discourseReferrerPolicy: \"strict-origin-when-cross-origin\"\n      }\n\n      const discourse = container\n\n      const script = document.createElement(\"script\")\n      script.type = \"text/javascript\"\n      script.async = true\n      script.src = window.DiscourseEmbed.discourseUrl + \"javascripts/embed.js\"\n\n      document.head.appendChild(script)\n\n      return () => {\n        document.head.removeChild(script)\n\n        while (discourse.firstChild) {\n          discourse.removeChild(discourse.firstChild)\n        }\n      }\n    }\n  }, [container, args.discourseUrl, args.topicId])\n\n  return (\n    <HeightObserver onChange={Streamlit.setFrameHeight}>\n      <div ref={containerRef} id=\"discourse-comments\"></div>\n    </HeightObserver>\n  )\n}\n\nexport default withStreamlitConnection(StreamlitDiscourse)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StreamlitDiscourse from \"./streamlit-discourse\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitDiscourse />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}