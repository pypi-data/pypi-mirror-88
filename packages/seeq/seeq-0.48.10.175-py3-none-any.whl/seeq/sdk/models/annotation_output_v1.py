# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.48.10-BETA
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AnnotationOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'backups': 'list[DocumentBackupOutputV1]',
        'created_at': 'str',
        'created_by': 'ItemPreviewV1',
        'description': 'str',
        'discoverable': 'bool',
        'document': 'str',
        'effective_permissions': 'PermissionsV1',
        'href': 'str',
        'id': 'str',
        'interests': 'list[AnnotationInterestOutputV1]',
        'is_archived': 'bool',
        'is_redacted': 'bool',
        'name': 'str',
        'published_at': 'str',
        'replies': 'list[AnnotationOutputV1]',
        'replies_to': 'str',
        'status_message': 'str',
        'type': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'backups': 'backups',
        'created_at': 'createdAt',
        'created_by': 'createdBy',
        'description': 'description',
        'discoverable': 'discoverable',
        'document': 'document',
        'effective_permissions': 'effectivePermissions',
        'href': 'href',
        'id': 'id',
        'interests': 'interests',
        'is_archived': 'isArchived',
        'is_redacted': 'isRedacted',
        'name': 'name',
        'published_at': 'publishedAt',
        'replies': 'replies',
        'replies_to': 'repliesTo',
        'status_message': 'statusMessage',
        'type': 'type',
        'updated_at': 'updatedAt'
    }

    def __init__(self, backups=None, created_at=None, created_by=None, description=None, discoverable=False, document=None, effective_permissions=None, href=None, id=None, interests=None, is_archived=False, is_redacted=False, name=None, published_at=None, replies=None, replies_to=None, status_message=None, type=None, updated_at=None):
        """
        AnnotationOutputV1 - a model defined in Swagger
        """

        self._backups = None
        self._created_at = None
        self._created_by = None
        self._description = None
        self._discoverable = None
        self._document = None
        self._effective_permissions = None
        self._href = None
        self._id = None
        self._interests = None
        self._is_archived = None
        self._is_redacted = None
        self._name = None
        self._published_at = None
        self._replies = None
        self._replies_to = None
        self._status_message = None
        self._type = None
        self._updated_at = None

        if backups is not None:
          self.backups = backups
        if created_at is not None:
          self.created_at = created_at
        if created_by is not None:
          self.created_by = created_by
        if description is not None:
          self.description = description
        if discoverable is not None:
          self.discoverable = discoverable
        if document is not None:
          self.document = document
        if effective_permissions is not None:
          self.effective_permissions = effective_permissions
        if href is not None:
          self.href = href
        if id is not None:
          self.id = id
        if interests is not None:
          self.interests = interests
        if is_archived is not None:
          self.is_archived = is_archived
        if is_redacted is not None:
          self.is_redacted = is_redacted
        if name is not None:
          self.name = name
        if published_at is not None:
          self.published_at = published_at
        if replies is not None:
          self.replies = replies
        if replies_to is not None:
          self.replies_to = replies_to
        if status_message is not None:
          self.status_message = status_message
        if type is not None:
          self.type = type
        if updated_at is not None:
          self.updated_at = updated_at

    @property
    def backups(self):
        """
        Gets the backups of this AnnotationOutputV1.
        The list of backups for this Annotation's Document property

        :return: The backups of this AnnotationOutputV1.
        :rtype: list[DocumentBackupOutputV1]
        """
        return self._backups

    @backups.setter
    def backups(self, backups):
        """
        Sets the backups of this AnnotationOutputV1.
        The list of backups for this Annotation's Document property

        :param backups: The backups of this AnnotationOutputV1.
        :type: list[DocumentBackupOutputV1]
        """

        self._backups = backups

    @property
    def created_at(self):
        """
        Gets the created_at of this AnnotationOutputV1.
        The ISO 8601 date of when the annotation was created (YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm)

        :return: The created_at of this AnnotationOutputV1.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this AnnotationOutputV1.
        The ISO 8601 date of when the annotation was created (YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm)

        :param created_at: The created_at of this AnnotationOutputV1.
        :type: str
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """
        Gets the created_by of this AnnotationOutputV1.
        The creator of this annotation

        :return: The created_by of this AnnotationOutputV1.
        :rtype: ItemPreviewV1
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """
        Sets the created_by of this AnnotationOutputV1.
        The creator of this annotation

        :param created_by: The created_by of this AnnotationOutputV1.
        :type: ItemPreviewV1
        """

        self._created_by = created_by

    @property
    def description(self):
        """
        Gets the description of this AnnotationOutputV1.
        Clarifying information or other plain language description of this item

        :return: The description of this AnnotationOutputV1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this AnnotationOutputV1.
        Clarifying information or other plain language description of this item

        :param description: The description of this AnnotationOutputV1.
        :type: str
        """

        self._description = description

    @property
    def discoverable(self):
        """
        Gets the discoverable of this AnnotationOutputV1.
        Flag indicating whether this annotation is discoverable

        :return: The discoverable of this AnnotationOutputV1.
        :rtype: bool
        """
        return self._discoverable

    @discoverable.setter
    def discoverable(self, discoverable):
        """
        Sets the discoverable of this AnnotationOutputV1.
        Flag indicating whether this annotation is discoverable

        :param discoverable: The discoverable of this AnnotationOutputV1.
        :type: bool
        """

        self._discoverable = discoverable

    @property
    def document(self):
        """
        Gets the document of this AnnotationOutputV1.
        This annotation's document.

        :return: The document of this AnnotationOutputV1.
        :rtype: str
        """
        return self._document

    @document.setter
    def document(self, document):
        """
        Sets the document of this AnnotationOutputV1.
        This annotation's document.

        :param document: The document of this AnnotationOutputV1.
        :type: str
        """

        self._document = document

    @property
    def effective_permissions(self):
        """
        Gets the effective_permissions of this AnnotationOutputV1.
        The permissions the current user has to the item.

        :return: The effective_permissions of this AnnotationOutputV1.
        :rtype: PermissionsV1
        """
        return self._effective_permissions

    @effective_permissions.setter
    def effective_permissions(self, effective_permissions):
        """
        Sets the effective_permissions of this AnnotationOutputV1.
        The permissions the current user has to the item.

        :param effective_permissions: The effective_permissions of this AnnotationOutputV1.
        :type: PermissionsV1
        """

        self._effective_permissions = effective_permissions

    @property
    def href(self):
        """
        Gets the href of this AnnotationOutputV1.
        The href that can be used to interact with the item

        :return: The href of this AnnotationOutputV1.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this AnnotationOutputV1.
        The href that can be used to interact with the item

        :param href: The href of this AnnotationOutputV1.
        :type: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")

        self._href = href

    @property
    def id(self):
        """
        Gets the id of this AnnotationOutputV1.
        The ID that can be used to interact with the item

        :return: The id of this AnnotationOutputV1.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AnnotationOutputV1.
        The ID that can be used to interact with the item

        :param id: The id of this AnnotationOutputV1.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def interests(self):
        """
        Gets the interests of this AnnotationOutputV1.
        The list of the annotation's items of interest

        :return: The interests of this AnnotationOutputV1.
        :rtype: list[AnnotationInterestOutputV1]
        """
        return self._interests

    @interests.setter
    def interests(self, interests):
        """
        Sets the interests of this AnnotationOutputV1.
        The list of the annotation's items of interest

        :param interests: The interests of this AnnotationOutputV1.
        :type: list[AnnotationInterestOutputV1]
        """

        self._interests = interests

    @property
    def is_archived(self):
        """
        Gets the is_archived of this AnnotationOutputV1.
        Whether item is archived

        :return: The is_archived of this AnnotationOutputV1.
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """
        Sets the is_archived of this AnnotationOutputV1.
        Whether item is archived

        :param is_archived: The is_archived of this AnnotationOutputV1.
        :type: bool
        """

        self._is_archived = is_archived

    @property
    def is_redacted(self):
        """
        Gets the is_redacted of this AnnotationOutputV1.
        Whether item is redacted

        :return: The is_redacted of this AnnotationOutputV1.
        :rtype: bool
        """
        return self._is_redacted

    @is_redacted.setter
    def is_redacted(self, is_redacted):
        """
        Sets the is_redacted of this AnnotationOutputV1.
        Whether item is redacted

        :param is_redacted: The is_redacted of this AnnotationOutputV1.
        :type: bool
        """

        self._is_redacted = is_redacted

    @property
    def name(self):
        """
        Gets the name of this AnnotationOutputV1.
        The human readable name

        :return: The name of this AnnotationOutputV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AnnotationOutputV1.
        The human readable name

        :param name: The name of this AnnotationOutputV1.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def published_at(self):
        """
        Gets the published_at of this AnnotationOutputV1.
        The ISO 8601 date of when the report was published (YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm)

        :return: The published_at of this AnnotationOutputV1.
        :rtype: str
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at):
        """
        Sets the published_at of this AnnotationOutputV1.
        The ISO 8601 date of when the report was published (YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm)

        :param published_at: The published_at of this AnnotationOutputV1.
        :type: str
        """

        self._published_at = published_at

    @property
    def replies(self):
        """
        Gets the replies of this AnnotationOutputV1.
        The list of Annotations that are replies to this one

        :return: The replies of this AnnotationOutputV1.
        :rtype: list[AnnotationOutputV1]
        """
        return self._replies

    @replies.setter
    def replies(self, replies):
        """
        Sets the replies of this AnnotationOutputV1.
        The list of Annotations that are replies to this one

        :param replies: The replies of this AnnotationOutputV1.
        :type: list[AnnotationOutputV1]
        """

        self._replies = replies

    @property
    def replies_to(self):
        """
        Gets the replies_to of this AnnotationOutputV1.
        ID of the Annotation to which this is a reply

        :return: The replies_to of this AnnotationOutputV1.
        :rtype: str
        """
        return self._replies_to

    @replies_to.setter
    def replies_to(self, replies_to):
        """
        Sets the replies_to of this AnnotationOutputV1.
        ID of the Annotation to which this is a reply

        :param replies_to: The replies_to of this AnnotationOutputV1.
        :type: str
        """

        self._replies_to = replies_to

    @property
    def status_message(self):
        """
        Gets the status_message of this AnnotationOutputV1.
        A plain language status message with information about any issues that may have been encountered during an operation

        :return: The status_message of this AnnotationOutputV1.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """
        Sets the status_message of this AnnotationOutputV1.
        A plain language status message with information about any issues that may have been encountered during an operation

        :param status_message: The status_message of this AnnotationOutputV1.
        :type: str
        """

        self._status_message = status_message

    @property
    def type(self):
        """
        Gets the type of this AnnotationOutputV1.
        The type of the item

        :return: The type of this AnnotationOutputV1.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this AnnotationOutputV1.
        The type of the item

        :param type: The type of this AnnotationOutputV1.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def updated_at(self):
        """
        Gets the updated_at of this AnnotationOutputV1.
        The ISO 8601 date of when the annotation was updated (YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm)

        :return: The updated_at of this AnnotationOutputV1.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this AnnotationOutputV1.
        The ISO 8601 date of when the annotation was updated (YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm)

        :param updated_at: The updated_at of this AnnotationOutputV1.
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AnnotationOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
