Metadata-Version: 2.1
Name: aiopioneer
Version: 0.1.2
Summary: Asyncio Python library for controlling a Pioneer AVR via its API
Home-page: https://github.com/crowbarz/aiopioneer.git
Author: Crowbar Z
Author-email: crowbarz@outlook.com
License: UNKNOWN
Description: <!-- markdownlint-disable MD041 -->
        Python library for controlling a Pioneer AVI via its built-in API.
        
        Inspired by the [original Pioneer Home Assistant integration](https://www.home-assistant.io/integrations/pioneer/).
        Tested on a VSX-930 (Main Zone and HDZone outputs).
        
        ## Features
        
        - Implemented in asyncio.
        - Maintains single continuous telnet session to AVR, with automatic reconnect.
        - Eliminates status polling where AVR sends keepalive responses (on port 8102).
        - Auto-detects Zones 1, 2, 3 and HDZONE.
        - Automatically polls AVR for source names - no longer need to manually code them in your config any more if your AVR supports their retrieval. Can also set source names manually.
        - Ignore specific zones, for AVRs that report phantom zones.
        - Queries device parameters: MAC address, software version, model.
        - Ability to set internal parameters to change the API functionality, eg. maximum volume, volume step change delta.
        - Defaults for internal parameters can be changed based on custom profiles based on AVR model.
        - Includes workaround for AVRs with an initial volume set on the Main Zone (eg. VSX-930).
        - Supports AVRs that do not support setting the volume level by emulating using up/down commands (eg. VSX-S510).
        
        ## Known issues and future plans
        
        - Document PioneerAVR API
        - Implement a command line to send commands and receive responses from the AVR, though this appears to be tricky as console I/O isn't well supported in asyncio.
        
        ## Breaking changes
        
        - **0.1**\
          `_PioneerAVR.__init__()` no longer accepts `command_delay`, `volume_workaround` and `volume_steps` arguments. Configure these parameters using the equivalent `PARAM_*` keys in the `params` dict, passed in via the constructure or set via `set_user_params()`.
        
        ## References
        
        - Home Assistant Pioneer integration: [https://www.home-assistant.io/integrations/pioneer/](https://www.home-assistant.io/integrations/pioneer/)
        - Pioneer commands references: [https://github.com/rwifall/pioneer-receiver-notes](https://github.com/rwifall/pioneer-receiver-notes)
        - Another asyncio Pioneer HA component: [https://github.com/realthk/asyncpioneer](https://github.com/realthk/asyncpioneer)
        
Keywords: pioneer avr asyncio
Platform: UNKNOWN
Classifier: Framework :: AsyncIO
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: Home Automation
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.6
Description-Content-Type: text/markdown
