define ([
    'require'
], function(requirejs) {
    "use strict";

    /**
     * path separator
     */
    const PATH_SEPARATOR = "/";

    /**
     * base path
     */
    const BASE_PATH = "nbextensions" + PATH_SEPARATOR + "visualpython" + PATH_SEPARATOR;

    /**
     * source path
     */
    const SOURCE_PATH = "src" + PATH_SEPARATOR;

    /**
     * resource path
     */
    const RESOURCE_PATH = "resource" + PATH_SEPARATOR;

    /**
     * style sheet path
     */
    const STYLE_PATH = "css" + PATH_SEPARATOR;

    /**
     * data path
     */
    const DATA_PATH = "data" + PATH_SEPARATOR;

    /**
     * main style path
     */
    const MAIN_CSS_URL = "main.css";

    /**
     * libraries data path
     */
    const VP_LIBRARIES_XML_URL = "libraries.xml";
    // const VP_LIBRARIES_XML_URL = "libraries_dev.xml";

    /**
     * toolbar btn properties
     */
    const TOOLBAR_BTN_INFO = {
        HELP: "Visual Python 0.5.0"
        , ICON: "fa-angellist"
        , ID: "vpBtnToggle"
        , NAME: "toggle-vp"
        , PREFIX: "vp"
        , ICON_CONTAINER: ""
    }

    /**
     * prefix code signature
     */
    const PREFIX_CODE_SIGNATURE = "# Auto-Generated by VisualPython";

    /**
     * VisualPython position metadata name
     */
    const VP_POSITION_META_NAME = "vpPosition";

    /**
     * VisualPython container id
     */
    const VP_CONTAINER_ID = "vp-wrapper";

    /**
     * container html path
     */
    const VP_CONTAINER_PAGE_URL = "container" + PATH_SEPARATOR + "vpContainer.html";

    /**
     * VisualPython tag id prefix
     */
    const VP_ID_PREFIX = "vp_";
    
    /**
     * VisualPython tag class prefix FIXME: old 제거
     */
    const VP_CLASS_PREFIX = "vp-";
    const VP_CLASS_PREFIX_OLD = ".vp-";

    /**
     * html tag data attribute prefix
     */
    const TAG_DATA_PREFIX = "data-";

    /**
     * class for except event bind
     */
    const VP_EXCEPT_BIND = VP_CLASS_PREFIX + "except-bind";

    /**
     * api Mode toggle btn id
     */
    const API_PALETTE_MODE_BTN = VP_ID_PREFIX + "apiModeBtn";

    /**
     * note Mode toggle btn id
     */
    const NOTE_PALETTE_MODE_BTN = VP_ID_PREFIX + "NoteModeBtn"

    /**
     * API Mode container id
     */
    const API_MODE_CONTAINER = VP_ID_PREFIX + "apiContainer";

    /**
     * note Mode container id
     */
    const NOTE_MODE_CONTAINER = VP_ID_PREFIX + "noteContainer";

    /**
     * API List caption
     */
    const API_LIST_CAPTION = "API List";

    /**
     * API Block caption
     */
    const API_BLOCK_CAPTION = "API Block";

    /**
     * vp note caption
     */
    const VP_NOTE_CAPTION = "Note";

    /**
     * workflow caption
     */
    const WORKFLOW_CAPTION = "Workflow";

    /**
     * tab control class
     */
    const TAB_CONTAINER = VP_CLASS_PREFIX + "tab-wrap";

    /**
     * tab header control class
     */
    const TAB_HEAD_CONTROL = VP_CLASS_PREFIX + "tab-header";

    /**
     * icon input text class name
     */
    const ICON_INPUT_TEXT = VP_CLASS_PREFIX + "icon-input-text"

    /**
     * Accordion continer class name
     */
    const ACCORDION_CONTAINER = VP_CLASS_PREFIX + "accordion-container";

    /**
     * Accordion head class name
     */
    const ACCORDION_HEADER = VP_CLASS_PREFIX + "accordion-header"

    /**
     * Accordion head caption class
     */
    const ACCORDION_HEADER_CAPTION = VP_CLASS_PREFIX + "accordion-caption";
    
    /**
     * Accordion box opened class
     */
    const ACCORDION_OPEN_CLASS = VP_CLASS_PREFIX + "accordion-open";

    /**
     * Accordion box content class
     */
    const ACCORDION_CONTENT_CLASS = VP_CLASS_PREFIX + "accordion-content";

    /**
     * Accordion box gray color class
     */
    const ACCORDION_GRAY_COLOR = VP_CLASS_PREFIX + "accordion-gray-color";

    /**
     * Accordion box gray background color class
     */
    const ACCORDION_GRAY_BGCOLOR = VP_CLASS_PREFIX + "accordion-gray-bgcolor";

    /**
     * Accordion box small arrow class
     */
    const ACCORDION_SMALL_ARROW = VP_CLASS_PREFIX + "accordion-small-arrow";

    /**
     * library item mother wrap node
     */
    const LIBRARY_ITEM_WRAP_NODE = "library";

    /**
     * library item type : package
     */
    const LIBRARY_ITEM_TYPE_PACKAGE = "package";

    /**
     * library item type : fucntion
     */
    const LIBRARY_ITEM_TYPE_FUNCTION = "function";

    /**
     * library xml item node name
     */
    const LIBRARY_ITEM_TAG = "item";

    /**
     * library xml item depth attribute
     */
    const LIBRARY_ITEM_DEPTH_ATTR = "level";

    /**
     * library xml item id attribute
     */
    const LIBRARY_ITEM_ID_ATTR = "id";

    /**
     * library xml item type attribute
     */
    const LIBRARY_ITEM_TYPE_ATTR = "type";

    /**
     * library xml item name attribute
     */
    const LIBRARY_ITEM_NAME_ATTR = "name";

    /**
     * library xml item tag attribute
     */
    const LIBRARY_ITEM_TAG_ATTR = "tag";

    /**
     * library xml item file url node
     */
    const LIBRARY_ITEM_FILE_URL_NODE = "file";

    /**
     * library xml item path url node
     */
    const LIBRARY_ITEM_PATH_NODE = "path";

    /**
     * library xml item desc url node
     */
    const LIBRARY_ITEM_DESCRIPTION_NODE = "desc";

    /**
     * attribute for library item content for html tag
     */
    const LIBRARY_ITEM_DATA_ID = TAG_DATA_PREFIX + "item-id";

    /**
     * api library list control class for group node
     */
    const LIST_ITEM_LIBRARY = VP_CLASS_PREFIX + "libraries-list";

    /**
     * api library list item class for group node
     */
    const LIST_ITEM_LIBRARY_GROUP = VP_CLASS_PREFIX + "libraries-group";

    /**
     * api library list item class for function node
     */
    const LIST_ITEM_LIBRARY_FUNCTION = VP_CLASS_PREFIX + "libraries-items";

    /**
     * api list library list container id
     */
    const API_LIST_LIBRARY_LIST_CONTAINER = VP_ID_PREFIX + "apiListLibContainer";

    /**
     * api block main container id
     */
    const API_BLOCK_CONTAINER = VP_ID_PREFIX + "apiBlockMainContainer";

    /**
     * temporary area for load option
     */
    const OPTION_GREEN_ROOM = VP_ID_PREFIX + "optionGreenRoom";

    /**
     * container for loaded option
     */
    const OPTION_CONTAINER = VP_ID_PREFIX + "optionBook";

    /**
     * option control button panel
     */
    const OPTION_CONTROL_PANEL = VP_ID_PREFIX + "optionBookControl";

    /**
     * loaded option navigator info panel
     */
    const OPTION_NAVIGATOR_INFO_PANEL = VP_ID_PREFIX + "optionNaviInfo";

    /**
     * loaded option navigator info panel node
     */
    const OPTION_NAVIGATOR_INFO_NODE = VP_CLASS_PREFIX + "navi-node";

    /**
     * loaded option close button
     */
    const CLOSE_OPTION_BUTTON = VP_ID_PREFIX + "OptionBookClose";

    /**
     * loaded option action button container
     */
    const ACTION_OPTION_BUTTON_PANEL = VP_ID_PREFIX + "OptionActionContainer";

    /**
     * loaded option action button
     */
    const ACTION_OPTION_BUTTON = VP_CLASS_PREFIX + "opt-action-btn";

    /**
     * orange fore color class
     */
    const COLOR_FONT_ORANGE = VP_CLASS_PREFIX + "orange-text";

    /**
     * orange border class
     */
    const COLOR_BORDER_ORANGE = VP_CLASS_PREFIX + "orange-border";

    /**
     * white box orange font color button class
     */
    const COLOR_BUTTON_WHITE_ORANGE = VP_CLASS_PREFIX + "cbtn-white-orange";

    /**
     * orange box white font color button class
     */
    const COLOR_BUTTON_ORANGE_WHITE = VP_CLASS_PREFIX + "cbtn-orange-white";

    /**
     * gray box white font color button class
     */
    const COLOR_BUTTON_GRAY_WHITE = VP_CLASS_PREFIX + "cbtn-gray-white";

    /**
     * loaded option add on cell btn
     */
    const OPTION_BTN_ADD_CELL = VP_ID_PREFIX + "addOnCell";
    
    /**
     * loaded option add on cell and run btn
     */
    const OPTION_BTN_RUN_CELL = VP_ID_PREFIX + "runCell";

    /**
     * loaded block add on cell btn
     */
    const BLOCK_BTN_ADD_CELL = VP_ID_PREFIX + "blockAddOnCell";
    
    /**
     * loaded block add on cell and run btn
     */
    const BLOCK_BTN_RUN_CELL = VP_ID_PREFIX + "blockRunCell";
    
    /**
     * loaded option save on note btn
     */
    const OPTION_BTN_SAVE_ON_NOTE = VP_ID_PREFIX + "saveOnNote";

    /**
     * loaded option container
     */
    const OPTION_LOAD_AREA = VP_ID_PREFIX + "optionLoadArea";

    /**
     * option per tab page
     */
    const API_OPTION_PAGE = VP_CLASS_PREFIX + "option-page";
    /**
     * FIXME: 항목 삭제 필요
     */
    const OPTION_PAGE = "." + VP_CLASS_PREFIX + "option-page";
    
    /**
     * note save file extension
     */
    const VP_NOTE_EXTENSION = "vp";

    /**
     * note save file keys
     */
    const VP_NOTE_NODE_DATA_CAPTION ="caption";
    const VP_NOTE_NODE_DATA_CODE ="gencode";
    const VP_NOTE_NODE_DATA_META ="genmeta";
    const VP_NOTE_NODE_DATA_TYPE ="nodetype";

    /**
     * vp note main menu(first page)
     */
    const VP_NOTE_MENU_CONTAINER = VP_ID_PREFIX + "noteMenu";

    /**
     * vp note main menu list class
     */
    const VP_NOTE_MENU_LIST = VP_CLASS_PREFIX + "note-menu-list";

    /**
     * vp note main menu item icon
     */
    const VP_NOTE_MENU_ICON = VP_CLASS_PREFIX + "note-menu-icon";

    /**
     * vp note contents (node list) container id
     */
    const VP_NOTE_NODE_CONTAINER = VP_ID_PREFIX + "noteContents";

    /**
     * vp note file info container id
     */
    const VP_NOTE_FILE_INFO_CONTAINER = VP_ID_PREFIX + "noteFileInfo";

    /**
     * vp note file name control id
     */
    const VP_NOTE_FILE_PATH_CONTROL = VP_ID_PREFIX + "noteFilePath";

    /**
     * vp note file real path control id(hidden)
     */    
    const VP_NOTE_REAL_FILE_PATH = VP_ID_PREFIX + "noteRealFilePath";
    /**
     * vp note node item list container id
     */
    const VP_NOTE_NODE_LIST_CONTAINER = VP_ID_PREFIX + "noteNodeList";

    /**
     * vp note node item wrap class
     */
    const VP_NOTE_NODE_ITEM = VP_CLASS_PREFIX + "note-node-item";

    /**
     * vp note node type indicator
     */
    const VP_NOTE_NODE_TYPE_NODE = "NODE";
    const VP_NOTE_NODE_TYPE_MARKDOWN = "MARKDOWN";
    /**
     * vp note node type default caption
     */
    const VP_NOTE_NODE_TYPE_NODE_DEFAULT_CAPTION = "Node";
    const VP_NOTE_NODE_TYPE_MARKDOWN_DEFAULT_CAPTION = "Text Node";
    /**
     * vp note markdown node item wrap indicator class
     */
    const VP_NOTE_MARKDOWN_NODE = VP_CLASS_PREFIX + "note-markdown-node";

    /**
     * note node genereted code
     */
    const NOTE_NODE_GENERATE_CODE = VP_CLASS_PREFIX + "gene-code";

    /**
     * note node genereted meta
     */
    const NOTE_NODE_GENERATE_META = VP_CLASS_PREFIX + "gene-meta";

    /**
     * vp note node icon header class
     */
    const VP_NOTE_NODE_ICON_HEADER = VP_CLASS_PREFIX + "note-node-head-icon";

    /**
     * vp note node text header class
     */
    const VP_NOTE_NODE_TEXT_HEADER = VP_CLASS_PREFIX + "note-node-head-text";

    /**
     * vp note node body class
     */
    const VP_NOTE_NODE_BODY = VP_CLASS_PREFIX + "note-node-body";

    /**
     * vp note node caption class
     */
    const VP_NOTE_NODE_CAPTION = VP_CLASS_PREFIX + "note-node-caption";

    /**
     * vp note empty node class
     */
    const VP_NOTE_EMPTY_NODE = VP_CLASS_PREFIX + "empty-node";

    /**
     * vp note node caption input class
     */
    const VP_NOTE_NODE_CAPTION_INPUT = VP_CLASS_PREFIX + "node-caption-input";

    /**
     * vp note node additional control
     */
    const VP_NOTE_NODE_ADDITIONAL_CONTROLS = VP_CLASS_PREFIX + "note-node-controls";

    /**
     * vp note node move up button class
     */
    const VP_NOTE_NODE_MOVE_UP = VP_CLASS_PREFIX + "node-control-up";
    
    /**
     * vp note node move down button class
     */
    const VP_NOTE_NODE_MOVE_DOWN = VP_CLASS_PREFIX + "node-control-down";
        
    /**
     * vp note node modify button class
     */
    const VP_NOTE_NODE_MODIFY = VP_CLASS_PREFIX + "node-control-modify";
        
    /**
     * vp note node clone button class
     */
    const VP_NOTE_NODE_CLONE = VP_CLASS_PREFIX + "node-control-clone";

    /**
     * vp note node clone caption postfix
     */
    const VP_NOTE_NODE_CLONE_POSTFIX = "_copy";
            
    /**
     * vp note node remove button class
     */
    const VP_NOTE_NODE_REMOVE = VP_CLASS_PREFIX + "node-control-remove";

    /**
     * vp note node remove confirm message
     */
    const VP_NOTE_NODE_REMOVE_CONFIRM_MESSAGE = "Are you sure you want to delete this node?";

    /**
     * vp note mode extra menu btn id
     */
    const VP_NOTE_EXTRA_MENU_BTN = VP_ID_PREFIX + "noteModeExtraMenuBtn";
    
    /**
     * vp note mode extra menu container id
     */
    const VP_NOTE_EXTRA_MENU_CONTAINER = VP_ID_PREFIX + "noteModeExtraMenu";

    /**
     * vp note mode extra menu list class
     */
    const VP_NOTE_EXTRA_MENU_LIST = VP_CLASS_PREFIX + "note-mode-extra-menu-list";

    /**
     * vp note mode extra menu list line divider class
     */
    const VP_NOTE_EXTRA_MENU_LINE = VP_CLASS_PREFIX + "extra-menu-line";

    /**
     * vp note mode extra menu new note id
     */
    const VP_NOTE_EXTRA_MENU_NEW_NOTE = VP_ID_PREFIX + "extraMenuNewNote";

    /**
     * vp note mode extra menu new note caption
     */
    const VP_NOTE_EXTRA_MENU_NEW_NOTE_CAPTION = "New Note";
    
    /**
     * vp note mode extra menu open note id
     */
    const VP_NOTE_EXTRA_MENU_OPEN_NOTE = VP_ID_PREFIX + "extraMenuOpenNote";

    /**
     * vp note mode extra menu open note caption
     */
    const VP_NOTE_EXTRA_MENU_OPEN_NOTE_CAPTION = "Open...";
    
    /**
     * vp note mode extra menu save note id
     */
    const VP_NOTE_EXTRA_MENU_SAVE_NOTE = VP_ID_PREFIX + "extraMenuSaveNote";

    /**
     * vp note mode extra menu save note caption
     */
    const VP_NOTE_EXTRA_MENU_SAVE_NOTE_CAPTION = "Save";
    
    /**
     * vp note mode extra menu save as note id
     */
    const VP_NOTE_EXTRA_MENU_SAVE_AS_NOTE = VP_ID_PREFIX + "extraMenuSaveAsNote";

    /**
     * vp note mode extra menu save as note caption
     */
    const VP_NOTE_EXTRA_MENU_SAVE_AS_NOTE_CAPTION = "Save as...";
    
    /**
     * vp note mode extra menu close note id
     */
    const VP_NOTE_EXTRA_MENU_CLOSE_NOTE = VP_ID_PREFIX + "extraMenuCloseNote";

    /**
     * vp note mode extra menu close note caption
     */
    const VP_NOTE_EXTRA_MENU_CLOSE_NOTE_CAPTION = "Close";
    
    /**
     * vp note mode extra menu undo note id
     */
    const VP_NOTE_EXTRA_MENU_UNDO_NOTE = VP_ID_PREFIX + "extraMenuUndoNote";

    /**
     * vp note mode extra menu undo note caption
     */
    const VP_NOTE_EXTRA_MENU_UNDO_NOTE_CAPTION = "Undo";
    
    /**
     * vp note mode extra menu redo note id
     */
    const VP_NOTE_EXTRA_MENU_REDO_NOTE = VP_ID_PREFIX + "extraMenuRedoNote";

    /**
     * vp note mode extra menu undo note caption
     */
    const VP_NOTE_EXTRA_MENU_REDO_NOTE_CAPTION = "Redo";
    
    /**
     * vp note mode extra menu run all note id
     */
    const VP_NOTE_EXTRA_MENU_RUN_ALL_NOTE = VP_ID_PREFIX + "extraMenuRunAllNote";

    /**
     * vp note mode extra menu run all note caption
     */
    const VP_NOTE_EXTRA_MENU_RUN_ALL_NOTE_CAPTION = "Run All";

    /**
     * vp note mode extra menu show detail note id
     */
    const VP_NOTE_EXTRA_MENU_SHOW_DETAIL_NOTE = VP_ID_PREFIX + "extraMenuShowDetailNote";

    /**
     * vp note mode extra menu show detail note caption
     */
    const VP_NOTE_EXTRA_MENU_SHOW_DETAIL_NOTE_CAPTION = "Show Node Detail";

    /**
     * vp note mode extra menu hide detail note id
     */
    const VP_NOTE_EXTRA_MENU_HIDE_DETAIL_NOTE = VP_ID_PREFIX + "extraMenuHideDetailNote";

    /**
     * vp note mode extra menu hide detail note caption
     */
    const VP_NOTE_EXTRA_MENU_HIDE_DETAIL_NOTE_CAPTION = "Hide Node Detail";

    /**
     * vp note main menu new note item id
     */
    const VP_NOTE_MENU_NEW_NOTE = VP_ID_PREFIX + "noteMenuNew";

    /**
     * vp note main menu new note item caption
     */
    const VP_NOTE_MENU_NEW_NOTE_CAPTION = "New Note";

    /**
     * vp note main menu open note item id
     */
    const VP_NOTE_MENU_OPEN_NOTE = VP_ID_PREFIX + "noteMenuOpen";

    /**
     * vp note main menu open note item caption
     */
    const VP_NOTE_MENU_OPEN_NOTE_CAPTION = "Open";

    /**
     * vp note menu new node container id
     */
    const VP_NOTE_MENU_NEW_NODE_CONTAINER = VP_ID_PREFIX + "noteNewNodeContainer";

    /**
     * vp note munu new node type item class
     */
    const VP_NOTE_NEW_NODE_TYPE = VP_CLASS_PREFIX + "note-new-node-type";

    /**
     * vp note menu new node, text type button id
     */
    const VP_NOTE_NEW_NOTE_TYPE_TEXT = VP_ID_PREFIX + "noteNodeTypeText";

    /**
     * vp note menu new node, text type button caption
     */
    const VP_NOTE_NEW_NOTE_TYPE_TEXT_CAPTION = "+ Text";

    /**
     * vp note menu new node, node type button id
     */
    const VP_NOTE_NEW_NOTE_TYPE_NODE = VP_ID_PREFIX + "noteNodeTypeNode";

    /**
     * vp note menu new node, node type button caption
     */
    const VP_NOTE_NEW_NOTE_TYPE_NODE_CAPTION = "+ Node";

    /**
     * api option prefix code textarea id
     */
    const API_OPTION_PREFIX_CODE_ID = VP_ID_PREFIX + "prefixCodeArea";

    /**
     * api option prefix code caption
     */
    const API_OPTION_PREFIX_CAPTION = "Prefix Code";

    /**
     * api option postfix code textarea id
     */
    const API_OPTION_POSTFIX_CODE_ID = VP_ID_PREFIX + "postfixCodeArea";

    /**
     * api option prefix code caption
     */
    const API_OPTION_POSTFIX_CAPTION = "Postfix Code";

    /**
     * manual code input textline area class
     */
    const MANUAL_CODE_INPUT_AREA_LINE = VP_CLASS_PREFIX + "manual-code-area-line";

    /**
     * manual code input text area class
     */
    const MANUAL_CODE_INPUT_AREA = VP_CLASS_PREFIX + "manual-code-area";

    /**
     * api required option accordion box caption
     */
    const API_REQUIRE_OPTION_BOX_CAPTION = "Required Input";

    /**
     * api additional option accordion box caption
     */
    const API_ADDITIONAL_OPTION_BOX_CAPTION = "Additional Option";

    /**
     * table layout th highliget class
     */
    const OPTION_TABLE_LAYOUT_HEAD_HIGHLIGHT = VP_CLASS_PREFIX + "th-highlight";

    /**
     * table layout class vertical head style
     */
    const OPTION_VERTICAL_TABLE_LAYOUT = VP_CLASS_PREFIX + "option-vertical-table-layout";

    /**
     * table layout class horizontal head style
     */
    const OPTION_HORIZONTAL_TABLE_LAYOUT = VP_CLASS_PREFIX + "option-horizontal-table-layout";

    /**
     * table layout cell center align style class
     */
    const TABLE_LAYOUT_CELL_CENTER_ALIGN = VP_CLASS_PREFIX + "merged-center-align";

    /**
     * merged cell indicator. use in table layout
     */
    const TABLE_LAYOUT_MERGED_CELL = "&VPMERGEDCELL&";

    /**
     * file browser display input class
     */
    const FILE_BROWSER_INPUT = VP_CLASS_PREFIX + "file-browser";

    /**
     * file browser open button class
     */
    const FILE_BROWSER_INPUT_BUTTON = VP_CLASS_PREFIX + "file-browser-button";

    /**
     * suggest input uninitialized autocomplete class
     */
    const VP_SUGGEST_INPUT_UNINIT = VP_CLASS_PREFIX + "suggest-input-uninit";

    /**
     * suggest input initialized autocomplete class
     */
    const VP_SUGGEST_INPUT = VP_CLASS_PREFIX + "suggest-input";

    /**
     * plot select box
     */
    const VP_PLOT_SELECT_BOX_ID = "vp_varViewBox";

// FIXME: 이하 버림

// const vpClassPrefix = ".vp-"
// const vpIDPrefix = "#vp_";
// const tagDataPrefix = "data-";
//     /**
//      * container style path
//      */
//     const vpContainerCssURL = "container" + PATH_SEPARATOR + "vpContainer.css";

//     /**
//      * VisualPython tag class prefix (private)
//      */
//     const vpClassPrefixNotSelector = "vp-";

//     /**
//      * main container header text
//      */
//     const vpHeaderText = vpClassPrefix + "header";

//     /**
//      * main container header buttons
//      */
//     const vpHeaderButtons = vpClassPrefix + "header-buttons";

//     /**
//      * arrow style change btn shape class
//      */
//     const arrowBtnUp = vpClassPrefixNotSelector + "arrow-up";

//     /**
//      * arrow style change btn shape class
//      */
//     const arrowBtnDown = vpClassPrefixNotSelector + "arrow-down";

//     /**
//      * arrow style change btn shape class
//      */
//     const arrowBtnLeft = vpClassPrefixNotSelector + "arrow-left";

//     /**
//      * arrow style change btn shape class
//      */
//     const arrowBtnRight = vpClassPrefixNotSelector + "arrow-right";

//     /**
//      * main container
//      */
//     const vpMainContainer = vpClassPrefix + "main-container";

//     /**
//      * body container
//      */
//     const vpBodyContainer = vpClassPrefix + "body-container";

//     /**
//      * body container
//      */
//     const vpNoteContainer = vpClassPrefix + "note-container";

//     /**
//      * home btn id
//      */
//     const btnModeSelector = vpIDPrefix + "goModeSelector";

//     /**
//      * mode selector page
//      */
//     const pageModeSelector = vpIDPrefix + "modeSelector";

//     /**
//      * api browser page
//      */
//     const pageAPIBrowser = vpIDPrefix + "APIBrowser";

//     /**
//      * api browser page
//      */
//     const pageWorkflow = vpIDPrefix + "workflow";

//     /**
//      * api group box
//      */
//     const apiGroupBox = vpClassPrefix + "api-group";

//     /**
//      * page header class
//      */
//     const pageHeader = vpClassPrefix + "page-header";

//     /**
//      * api browser function button class
//      */
//     const naviFuncionButton = vpClassPrefix + "navi-func-btn";
    
//     /**
//      * api browser function span class
//      */
//     const naviFunctionSpan = vpClassPrefix + "span-func";

//     /**
//      * api browser group span class
//      */
//     const naviGroupSpan = vpClassPrefix + "span-group";

//     /**
//      * api browser group hidden class
//      */
//     const naviGroupHidden = "vp-hidden";

//     /**
//      * api browser group show class
//      */
//     const naviGroupShow = "vp-show";

//     /**
//      * api browser group show toggle btn class
//      */
//     const naviGroupToggle = vpClassPrefix + "navi-group-toggle";

//     /**
//      * open note button
//      */
//     const loadNoteBtn = vpIDPrefix + "openNote";

//     /**
//      * note node button container
//      */
//     const noteNodeClass = vpClassPrefix + "note-node";
    
//     /**
//      * note node index class
//      */
//     const noteNodeIndex = vpClassPrefix + "node-index";
    
//     /**
//      * note node type selector class
//      */
//     const noteNodeType = vpClassPrefix + "node-type";

//     /**
//      * note node button container
//      */
//     const noteBtnContainer = vpClassPrefix + "note-node-btns";

//     /**
//      * note node of generated code
//      */
//     const noteNodeCode = vpClassPrefix + "node-gene-code";

//     /**
//      * note node of generated code ellipsis
//      */
//     const noteNodeCodeEllipsis = vpClassPrefix + "node-ellipsis";

//     /**
//      * note node of generated code ellipsis
//      */
//     const noteNodeCodeAll = vpClassPrefix + "node-all";

// /**
//  * area division container
//  */
// const areaDivContainer = vpIDPrefix + "divisionContainer";

// /**
//  * top container of task area
//  */
// const areaTaskManage = vpIDPrefix + "taskArea";

// /**
//  * top container of option area
//  */
// const areaGeneOption = vpIDPrefix + "optionArea";

// /**
//  * top container of blueprint area
//  */
// const areaBP = vpIDPrefix + "blueprintArea";

// /**
//  * top container of generate area
//  */
// const areaGene = vpIDPrefix + "generateArea";

// /**
//  * top container of library area
//  */
// const areaLib = vpIDPrefix + "libraryArea";

// /**
//  * library area child container
//  */
// const libSubContainer = vpClassPrefix + "library-sub";

// /**
//  * search result continer
//  */
// const srchRsltContainer = vpIDPrefix + "searchResults";

// /**
//  * user define variable list container
//  */
// const variableList = vpIDPrefix + "variableList";

// /**
//  * list grid header
//  */
// const listGridHeader = vpClassPrefix + "grid-header";

// /**
//  * search result item class
//  */
// const srchRsltItemClass = vpClassPrefix + "search-func";

// /**
//  * variable list item class
//  */
// const varListItemClass = vpClassPrefix + "var-list-item";

// /**
//  * naviagtor path item container
//  */
// const naviPathContainer = vpIDPrefix + "navigatorPath";

// /**
//  * naviagtor path item
//  */
// const naviPathItemClass = vpClassPrefix + "navi-path-item";

// /**
//  * naviagtor path item
//  */
// const naviPathItemDividerClass = vpClassPrefix + "navi-path-item-divider";

// /**
//  * navigator buttons container
//  */
// const naviBtnContainer = vpIDPrefix + "navigatorButtons";

// /**
//  * navigator button class
//  */
// const naviBtnClass = vpClassPrefix + "navi-btn";

// /**
//  * attribute for navi button content level
//  */
// const naviItemLevel = tagDataPrefix + "nav-class";

// /**
//  * attribute type navi button group content level
//  */
// const naviItemLevelGrp = "grp";

// /**
//  * attribute type navi button function content level
//  */
// const naviItemLevelFunc = "func";

// /**
//  * attribute type navi button prev group content level
//  */
// const naviItemLevelPrev = "prev";

// /**
//  * option tab header 
//  */
// const optTabItem = vpClassPrefix + "option-tab-page";

// /**
//  * container for loaded option tab header
//  */
// const optTabContainer = vpIDPrefix + "optionTab";

// /**
//  * container for loaded option blueprint
//  */
// const optBPContainer = vpClassPrefix + "blueprint-container";

// /**
//  * option blueprint item
//  */
// const optBPItem = vpClassPrefix + "blueprint-item";

// /**
//  * option blueprint item destroy
//  */
// const optBPItemClose = vpClassPrefix + "blueprint-item-destroy";

// /**
//  * showing loaded item style
//  */
// const optBPFocusedItem = vpClassPrefixNotSelector + "focused";

// /**
//  * task index label
//  */
// const optTaskIdxLabel = vpIDPrefix + "lblOptIdx";

// /**
//  * option kind label
//  */
// const optKindLabel = vpIDPrefix + "lblOptKind";

// /**
//  * temp cation for load new option
//  */
// const optHeaderTempCaption = tagDataPrefix + "temp-caption";

// /**
//  * option paging btn class
//  */
// const optPagingBtn = vpClassPrefix + "option-paging-btn";

// /**
//  * option save button id
//  */
// const optSaveBtn = vpIDPrefix + "optSave";

// /**
//  * option save and execute button id
//  */
// const optSaveExeBtn = vpIDPrefix + "optSaveExe";

// /**
//  * option cancel button id
//  */
// const optCancelBtn = vpIDPrefix + "optCancel";

// /**
//  * option page prev button id
//  */
// const optPrevPageBtn = vpIDPrefix + "optPrevPage";

// /**
//  * option page next button id
//  */
// const optNextPageBtn = vpIDPrefix + "optNextPage";

// /**
//  * opened area style class
//  */
// const openedAreaClass = vpClassPrefixNotSelector + "spread";

// /**
//  * closed area style class
//  */
// const closedAreaClass = vpClassPrefixNotSelector + "minimize";

// /**
//  * vertical text style
//  */
// const verticalTextClass = vpClassPrefixNotSelector + "vertical";

// /**
//  * multi language tag class
//  */
// const multiLangTagClass = vpClassPrefix + "multilang";

// /**
//  * tag attribute for multi language id
//  */
// const multiLangCaptionID = tagDataPrefix + "caption-id";

// /**
//  * sortable table class
//  */
// const sortableTableClass = vpClassPrefix + "tbl-sortable";

// /**
//  * sortable column class
//  */
// const sortableColumnClass = vpClassPrefix + "sortable-column";

// /**
//  * sort value wrapper class
//  */
// const sortValueWrapClass = vpClassPrefix + "sort-value";

// /**
//  * arrow up shape class
//  */
// const arrowUpClass = vpClassPrefix + "arrow-up";

// /**
//  * arrow down shape class
//  */
// const arrowDownClass = vpClassPrefix + "arrow-down";

// /**
//  * new task btn id
//  */
// const newTaskBtn = vpIDPrefix + "btnNewTask";

// /**
//  * task index cell class
//  */
// const taskIndexCell = vpClassPrefix + "task-index";

// /**
//  * task button class
//  */
// const taskBtn = vpClassPrefix + "task-btn";

// /**
//  * task index caption prefix
//  */
// const taskIndexPrefix = "T";

// /**
//  * task label class
//  */
// const taskLabelClass = vpClassPrefix + "task-src-view";

// /**
//  * task list class
//  */
// const taskListTable = vpClassPrefix + "task-tbl";

// /**
//  * task list item class
//  */
// const taskListRow = vpClassPrefix + "task-row";

// /**
//  * task command cell class
//  */
// const taskCmdCell = vpClassPrefix + "task-command-cell";

// /**
//  * task command btn class
//  */
// const taskCmdBtn = vpClassPrefix + "task-command";

// /**
//  * task command run btn class
//  */
// const taskCmdExeBtn = vpClassPrefix + "task-execute";

// /**
//  * task command stop btn class
//  */
// const taskCmdStopBtn = vpClassPrefix + "task-stop";

// /**
//  * task add line class
//  */
// const taskAddCmd = vpClassPrefix + "add-task";

    return {
        PATH_SEPARATOR: PATH_SEPARATOR
        , BASE_PATH: BASE_PATH
        , SOURCE_PATH: SOURCE_PATH
        , RESOURCE_PATH: RESOURCE_PATH
        , STYLE_PATH: STYLE_PATH
        , DATA_PATH: DATA_PATH
        , MAIN_CSS_URL: MAIN_CSS_URL
        , VP_LIBRARIES_XML_URL: VP_LIBRARIES_XML_URL
        , TOOLBAR_BTN_INFO: TOOLBAR_BTN_INFO
        , PREFIX_CODE_SIGNATURE: PREFIX_CODE_SIGNATURE
        , VP_POSITION_META_NAME: VP_POSITION_META_NAME
        , VP_CONTAINER_ID: VP_CONTAINER_ID
        , VP_CONTAINER_PAGE_URL: VP_CONTAINER_PAGE_URL
        , VP_ID_PREFIX: VP_ID_PREFIX
        , VP_CLASS_PREFIX: VP_CLASS_PREFIX
		, VP_CLASS_PREFIX_OLD: VP_CLASS_PREFIX_OLD
        , TAG_DATA_PREFIX: TAG_DATA_PREFIX
        , VP_EXCEPT_BIND: VP_EXCEPT_BIND
        , API_PALETTE_MODE_BTN: API_PALETTE_MODE_BTN
        , NOTE_PALETTE_MODE_BTN: NOTE_PALETTE_MODE_BTN
        , API_MODE_CONTAINER: API_MODE_CONTAINER
        , NOTE_MODE_CONTAINER: NOTE_MODE_CONTAINER
        , API_LIST_CAPTION: API_LIST_CAPTION
        , API_BLOCK_CAPTION: API_BLOCK_CAPTION
        , VP_NOTE_CAPTION: VP_NOTE_CAPTION
        , WORKFLOW_CAPTION: WORKFLOW_CAPTION
        , TAB_CONTAINER: TAB_CONTAINER
        , TAB_HEAD_CONTROL: TAB_HEAD_CONTROL
        , ICON_INPUT_TEXT: ICON_INPUT_TEXT
        , ACCORDION_CONTAINER: ACCORDION_CONTAINER
        , ACCORDION_HEADER: ACCORDION_HEADER
        , ACCORDION_HEADER_CAPTION: ACCORDION_HEADER_CAPTION
        , ACCORDION_OPEN_CLASS: ACCORDION_OPEN_CLASS
        , ACCORDION_CONTENT_CLASS: ACCORDION_CONTENT_CLASS
        , ACCORDION_GRAY_COLOR: ACCORDION_GRAY_COLOR
        , ACCORDION_GRAY_BGCOLOR: ACCORDION_GRAY_BGCOLOR
        , ACCORDION_SMALL_ARROW: ACCORDION_SMALL_ARROW 
        , LIBRARY_ITEM_WRAP_NODE: LIBRARY_ITEM_WRAP_NODE
        , LIBRARY_ITEM_TYPE_PACKAGE: LIBRARY_ITEM_TYPE_PACKAGE
        , LIBRARY_ITEM_TYPE_FUNCTION: LIBRARY_ITEM_TYPE_FUNCTION
        , LIBRARY_ITEM_TAG: LIBRARY_ITEM_TAG
        , LIBRARY_ITEM_DEPTH_ATTR: LIBRARY_ITEM_DEPTH_ATTR
        , LIBRARY_ITEM_ID_ATTR: LIBRARY_ITEM_ID_ATTR
        , LIBRARY_ITEM_TYPE_ATTR: LIBRARY_ITEM_TYPE_ATTR
        , LIBRARY_ITEM_NAME_ATTR: LIBRARY_ITEM_NAME_ATTR
        , LIBRARY_ITEM_TAG_ATTR: LIBRARY_ITEM_TAG_ATTR
        , LIBRARY_ITEM_FILE_URL_NODE: LIBRARY_ITEM_FILE_URL_NODE
        , LIBRARY_ITEM_PATH_NODE: LIBRARY_ITEM_PATH_NODE
        , LIBRARY_ITEM_DESCRIPTION_NODE: LIBRARY_ITEM_DESCRIPTION_NODE
        , LIBRARY_ITEM_DATA_ID: LIBRARY_ITEM_DATA_ID
        , LIST_ITEM_LIBRARY: LIST_ITEM_LIBRARY
        , LIST_ITEM_LIBRARY_GROUP: LIST_ITEM_LIBRARY_GROUP
        , LIST_ITEM_LIBRARY_FUNCTION: LIST_ITEM_LIBRARY_FUNCTION
        , API_LIST_LIBRARY_LIST_CONTAINER: API_LIST_LIBRARY_LIST_CONTAINER
        , API_BLOCK_CONTAINER: API_BLOCK_CONTAINER
        , OPTION_GREEN_ROOM: OPTION_GREEN_ROOM
        , OPTION_PAGE: OPTION_PAGE
        , OPTION_CONTAINER: OPTION_CONTAINER
        , OPTION_CONTROL_PANEL: OPTION_CONTROL_PANEL
        , OPTION_NAVIGATOR_INFO_PANEL: OPTION_NAVIGATOR_INFO_PANEL
        , OPTION_NAVIGATOR_INFO_NODE: OPTION_NAVIGATOR_INFO_NODE
        , CLOSE_OPTION_BUTTON: CLOSE_OPTION_BUTTON
        , ACTION_OPTION_BUTTON_PANEL: ACTION_OPTION_BUTTON_PANEL
        , ACTION_OPTION_BUTTON: ACTION_OPTION_BUTTON
        , COLOR_FONT_ORANGE: COLOR_FONT_ORANGE
        , COLOR_BORDER_ORANGE: COLOR_BORDER_ORANGE
        , COLOR_BUTTON_WHITE_ORANGE: COLOR_BUTTON_WHITE_ORANGE
        , COLOR_BUTTON_ORANGE_WHITE: COLOR_BUTTON_ORANGE_WHITE
        , COLOR_BUTTON_GRAY_WHITE: COLOR_BUTTON_GRAY_WHITE
        , OPTION_BTN_ADD_CELL: OPTION_BTN_ADD_CELL
        , OPTION_BTN_RUN_CELL: OPTION_BTN_RUN_CELL
        , BLOCK_BTN_ADD_CELL: BLOCK_BTN_ADD_CELL
        , BLOCK_BTN_RUN_CELL: BLOCK_BTN_RUN_CELL
        , OPTION_BTN_SAVE_ON_NOTE: OPTION_BTN_SAVE_ON_NOTE
        , OPTION_LOAD_AREA: OPTION_LOAD_AREA
        , API_OPTION_PAGE: API_OPTION_PAGE
        , VP_NOTE_EXTENSION: VP_NOTE_EXTENSION
        , VP_NOTE_NODE_DATA_CAPTION: VP_NOTE_NODE_DATA_CAPTION
        , VP_NOTE_NODE_DATA_CODE: VP_NOTE_NODE_DATA_CODE
        , VP_NOTE_NODE_DATA_META: VP_NOTE_NODE_DATA_META
        , VP_NOTE_NODE_DATA_TYPE: VP_NOTE_NODE_DATA_TYPE
        , VP_NOTE_MENU_CONTAINER: VP_NOTE_MENU_CONTAINER
        , VP_NOTE_MENU_LIST: VP_NOTE_MENU_LIST
        , VP_NOTE_MENU_ICON: VP_NOTE_MENU_ICON
        , VP_NOTE_NODE_CONTAINER: VP_NOTE_NODE_CONTAINER
        , VP_NOTE_FILE_PATH_CONTROL: VP_NOTE_FILE_PATH_CONTROL
        , VP_NOTE_REAL_FILE_PATH: VP_NOTE_REAL_FILE_PATH
        , VP_NOTE_NODE_LIST_CONTAINER: VP_NOTE_NODE_LIST_CONTAINER
        , VP_NOTE_NODE_ITEM: VP_NOTE_NODE_ITEM
        , VP_NOTE_NODE_TYPE_NODE: VP_NOTE_NODE_TYPE_NODE
        , VP_NOTE_NODE_TYPE_MARKDOWN: VP_NOTE_NODE_TYPE_MARKDOWN
        , VP_NOTE_NODE_TYPE_NODE_DEFAULT_CAPTION: VP_NOTE_NODE_TYPE_NODE_DEFAULT_CAPTION
        , VP_NOTE_NODE_TYPE_MARKDOWN_DEFAULT_CAPTION: VP_NOTE_NODE_TYPE_MARKDOWN_DEFAULT_CAPTION
        , VP_NOTE_MARKDOWN_NODE: VP_NOTE_MARKDOWN_NODE
        , NOTE_NODE_GENERATE_CODE: NOTE_NODE_GENERATE_CODE
        , NOTE_NODE_GENERATE_META: NOTE_NODE_GENERATE_META
        , VP_NOTE_NODE_ICON_HEADER: VP_NOTE_NODE_ICON_HEADER
        , VP_NOTE_NODE_TEXT_HEADER: VP_NOTE_NODE_TEXT_HEADER
        , VP_NOTE_NODE_BODY: VP_NOTE_NODE_BODY
        , VP_NOTE_NODE_CAPTION: VP_NOTE_NODE_CAPTION
        , VP_NOTE_EMPTY_NODE: VP_NOTE_EMPTY_NODE
        , VP_NOTE_NODE_CAPTION_INPUT: VP_NOTE_NODE_CAPTION_INPUT
        , VP_NOTE_NODE_ADDITIONAL_CONTROLS: VP_NOTE_NODE_ADDITIONAL_CONTROLS
        , VP_NOTE_NODE_MOVE_UP: VP_NOTE_NODE_MOVE_UP
        , VP_NOTE_NODE_MOVE_DOWN: VP_NOTE_NODE_MOVE_DOWN
        , VP_NOTE_NODE_MODIFY: VP_NOTE_NODE_MODIFY
        , VP_NOTE_NODE_CLONE: VP_NOTE_NODE_CLONE
        , VP_NOTE_NODE_CLONE_POSTFIX: VP_NOTE_NODE_CLONE_POSTFIX
        , VP_NOTE_NODE_REMOVE: VP_NOTE_NODE_REMOVE
        , VP_NOTE_NODE_REMOVE_CONFIRM_MESSAGE: VP_NOTE_NODE_REMOVE_CONFIRM_MESSAGE
        , VP_NOTE_EXTRA_MENU_BTN: VP_NOTE_EXTRA_MENU_BTN
        , VP_NOTE_EXTRA_MENU_CONTAINER: VP_NOTE_EXTRA_MENU_CONTAINER
        , VP_NOTE_EXTRA_MENU_LIST: VP_NOTE_EXTRA_MENU_LIST
        , VP_NOTE_EXTRA_MENU_LINE: VP_NOTE_EXTRA_MENU_LINE
        , VP_NOTE_EXTRA_MENU_NEW_NOTE: VP_NOTE_EXTRA_MENU_NEW_NOTE
        , VP_NOTE_EXTRA_MENU_NEW_NOTE_CAPTION: VP_NOTE_EXTRA_MENU_NEW_NOTE_CAPTION
        , VP_NOTE_EXTRA_MENU_OPEN_NOTE: VP_NOTE_EXTRA_MENU_OPEN_NOTE
        , VP_NOTE_EXTRA_MENU_OPEN_NOTE_CAPTION: VP_NOTE_EXTRA_MENU_OPEN_NOTE_CAPTION
        , VP_NOTE_EXTRA_MENU_SAVE_NOTE: VP_NOTE_EXTRA_MENU_SAVE_NOTE
        , VP_NOTE_EXTRA_MENU_SAVE_NOTE_CAPTION: VP_NOTE_EXTRA_MENU_SAVE_NOTE_CAPTION
        , VP_NOTE_EXTRA_MENU_SAVE_AS_NOTE: VP_NOTE_EXTRA_MENU_SAVE_AS_NOTE
        , VP_NOTE_EXTRA_MENU_SAVE_AS_NOTE_CAPTION: VP_NOTE_EXTRA_MENU_SAVE_AS_NOTE_CAPTION
        , VP_NOTE_EXTRA_MENU_CLOSE_NOTE: VP_NOTE_EXTRA_MENU_CLOSE_NOTE
        , VP_NOTE_EXTRA_MENU_CLOSE_NOTE_CAPTION: VP_NOTE_EXTRA_MENU_CLOSE_NOTE_CAPTION
        , VP_NOTE_EXTRA_MENU_UNDO_NOTE: VP_NOTE_EXTRA_MENU_UNDO_NOTE
        , VP_NOTE_EXTRA_MENU_UNDO_NOTE_CAPTION: VP_NOTE_EXTRA_MENU_UNDO_NOTE_CAPTION
        , VP_NOTE_EXTRA_MENU_REDO_NOTE: VP_NOTE_EXTRA_MENU_REDO_NOTE
        , VP_NOTE_EXTRA_MENU_REDO_NOTE_CAPTION: VP_NOTE_EXTRA_MENU_REDO_NOTE_CAPTION
        , VP_NOTE_EXTRA_MENU_RUN_ALL_NOTE: VP_NOTE_EXTRA_MENU_RUN_ALL_NOTE
        , VP_NOTE_EXTRA_MENU_RUN_ALL_NOTE_CAPTION: VP_NOTE_EXTRA_MENU_RUN_ALL_NOTE_CAPTION
        , VP_NOTE_EXTRA_MENU_SHOW_DETAIL_NOTE: VP_NOTE_EXTRA_MENU_SHOW_DETAIL_NOTE
        , VP_NOTE_EXTRA_MENU_SHOW_DETAIL_NOTE_CAPTION: VP_NOTE_EXTRA_MENU_SHOW_DETAIL_NOTE_CAPTION
        , VP_NOTE_EXTRA_MENU_HIDE_DETAIL_NOTE: VP_NOTE_EXTRA_MENU_HIDE_DETAIL_NOTE
        , VP_NOTE_EXTRA_MENU_HIDE_DETAIL_NOTE_CAPTION: VP_NOTE_EXTRA_MENU_HIDE_DETAIL_NOTE_CAPTION
        , VP_NOTE_FILE_INFO_CONTAINER: VP_NOTE_FILE_INFO_CONTAINER
        , VP_NOTE_MENU_NEW_NOTE: VP_NOTE_MENU_NEW_NOTE
        , VP_NOTE_MENU_NEW_NOTE_CAPTION: VP_NOTE_MENU_NEW_NOTE_CAPTION
        , VP_NOTE_MENU_OPEN_NOTE: VP_NOTE_MENU_OPEN_NOTE
        , VP_NOTE_MENU_OPEN_NOTE_CAPTION: VP_NOTE_MENU_OPEN_NOTE_CAPTION
        , VP_NOTE_MENU_NEW_NODE_CONTAINER: VP_NOTE_MENU_NEW_NODE_CONTAINER
        , VP_NOTE_NEW_NODE_TYPE: VP_NOTE_NEW_NODE_TYPE
        , VP_NOTE_NEW_NOTE_TYPE_TEXT: VP_NOTE_NEW_NOTE_TYPE_TEXT
        , VP_NOTE_NEW_NOTE_TYPE_TEXT_CAPTION: VP_NOTE_NEW_NOTE_TYPE_TEXT_CAPTION
        , VP_NOTE_NEW_NOTE_TYPE_NODE: VP_NOTE_NEW_NOTE_TYPE_NODE
        , VP_NOTE_NEW_NOTE_TYPE_NODE_CAPTION: VP_NOTE_NEW_NOTE_TYPE_NODE_CAPTION
        , API_OPTION_PREFIX_CODE_ID: API_OPTION_PREFIX_CODE_ID
        , API_OPTION_PREFIX_CAPTION: API_OPTION_PREFIX_CAPTION
        , API_OPTION_POSTFIX_CODE_ID: API_OPTION_POSTFIX_CODE_ID
        , API_OPTION_POSTFIX_CAPTION: API_OPTION_POSTFIX_CAPTION
        , MANUAL_CODE_INPUT_AREA_LINE: MANUAL_CODE_INPUT_AREA_LINE
        , MANUAL_CODE_INPUT_AREA: MANUAL_CODE_INPUT_AREA
        , API_REQUIRE_OPTION_BOX_CAPTION: API_REQUIRE_OPTION_BOX_CAPTION
        , API_ADDITIONAL_OPTION_BOX_CAPTION: API_ADDITIONAL_OPTION_BOX_CAPTION
        , OPTION_TABLE_LAYOUT_HEAD_HIGHLIGHT: OPTION_TABLE_LAYOUT_HEAD_HIGHLIGHT
        , OPTION_VERTICAL_TABLE_LAYOUT: OPTION_VERTICAL_TABLE_LAYOUT
        , OPTION_HORIZONTAL_TABLE_LAYOUT: OPTION_HORIZONTAL_TABLE_LAYOUT
        , TABLE_LAYOUT_CELL_CENTER_ALIGN: TABLE_LAYOUT_CELL_CENTER_ALIGN
        , TABLE_LAYOUT_MERGED_CELL: TABLE_LAYOUT_MERGED_CELL
        , FILE_BROWSER_INPUT: FILE_BROWSER_INPUT
        , FILE_BROWSER_INPUT_BUTTON: FILE_BROWSER_INPUT_BUTTON
        , VP_SUGGEST_INPUT_UNINIT: VP_SUGGEST_INPUT_UNINIT
        , VP_SUGGEST_INPUT: VP_SUGGEST_INPUT
        , VP_PLOT_SELECT_BOX_ID: VP_PLOT_SELECT_BOX_ID
    };
    // return {
    //     , VP_CONTAINER_CSS_URL: vpContainerCssURL
    //     , VP_LIBRARIES_XML_URL: vpLibrariesURL

    //     , VP_HEADER_TEXT: vpHeaderText
    //     , VP_HEADER_BUTTONS: vpHeaderButtons
    //     , ARROW_BTN_UP: arrowBtnUp
    //     , ARROW_BTN_DOWN: arrowBtnDown
    //     , ARROW_BTN_LEFT: arrowBtnLeft
    //     , ARROW_BTN_RIGHT: arrowBtnRight

    //     , VP_MAIN_CONTAINER: vpMainContainer
    //     , VP_BODY_CONTAINER: vpBodyContainer
    //     , VP_NOTE_CONTAINER: vpNoteContainer
    //     , BTN_MODE_SELECTOR: btnModeSelector
    //     , PAGE_MODE_SELECTOR: pageModeSelector
    //     , PAGE_API_BROWSER: pageAPIBrowser
    //     , PAGE_WORKFLOW: pageWorkflow
    //     , API_GROUP_BOX: apiGroupBox
    //     , VP_PAGE_HEADER: pageHeader
    //     , NAVI_FUNCION_BUTTON: naviFuncionButton
    //     , NAVI_FUNCTION_SPAN: naviFunctionSpan
    //     , NAVI_GROUP_SPAN: naviGroupSpan
    //     , NAVI_GROUP_HIDDEN: naviGroupHidden
    //     , NAVI_GROUP_SHOW: naviGroupShow
    //     , NAVI_GROUP_TOGGLE: naviGroupToggle
    //     , LOAD_NOTE_BTN: loadNoteBtn
    //     , NOTE_NODE_CLASS: noteNodeClass
    //     , NOTE_NODE_INDEX: noteNodeIndex
    //     , NOTE_NODE_TYPE: noteNodeType
    //     , NOTE_BTN_CONTAINER: noteBtnContainer
    //     , NOTE_NODE_CODE: noteNodeCode
    //     , NOTE_NODE_CODE_ELLIPSIS: noteNodeCodeEllipsis
    //     , NOTE_NODE_CODE_ALL: noteNodeCodeAll

    // , AREA_DIVISION_CONTAINER: areaDivContainer
    // , AREA_TASK_MANAGEMENT: areaTaskManage
    // , AREA_GENERATE_OPTION: areaGeneOption
    // , AREA_BLUEPRINT: areaBP
    // , AREA_GENERATE: areaGene
    // , AREA_LIBRARY: areaLib
    // , LIBRARY_SUB_CONTAINER: libSubContainer
    // , SEARCH_RESULT_CONTAINER: srchRsltContainer
    // , VARIABLE_LIST_CONTAINER: variableList
    // , LIST_GRID_HEADER: listGridHeader
    // , SEARCH_RESULT_ITEM_CLASS: srchRsltItemClass
    // , VARIABLE_LIST_ITEM_CLASS: varListItemClass
    // , NAVIGATOR_PATH_ITEM_CONTAINER: naviPathContainer
    // , NAVIGATOR_PATH_ITEM_CLASS: naviPathItemClass
    // , NAVIGATOR_PATH_ITEM_DIVIDER: naviPathItemDividerClass
    // , NAVIGATOR_BUTTON_CONTAINER: naviBtnContainer
    // , NAVIGATOR_BUTTON_CLASS: naviBtnClass
    // , NAVIGATOR_BUTTON_LEVEL: naviItemLevel
    // , NAVIGATOR_BUTTON_LEVEL_GROUP: naviItemLevelGrp
    // , NAVIGATOR_BUTTON_LEVEL_FUNCTION: naviItemLevelFunc
    // , NAVIGATOR_BUTTON_LEVEL_PREV_GROUP: naviItemLevelPrev
    // , OPTION_TAB_ITEM: optTabItem
    // , OPTION_TAB_CONTAINER: optTabContainer
    // , OPTION_BLUEPRINT_CONTAINER: optBPContainer
    // , OPTION_BLUEPRINT_ITEM: optBPItem
    // , OPTION_BLUEPRINT_ITEM_CLOSE: optBPItemClose
    // , OPTION_BLUEPRINT_FOCUSED_ITEM: optBPFocusedItem
    // , OPTION_TASK_INDEX_LABEL: optTaskIdxLabel
    // , OPTION_KIND_LABEL: optKindLabel
    // , OPTION_HEADER_TEMP_CAPTION: optHeaderTempCaption
    // , OPTION_PAGING_BUTTON: optPagingBtn
    // , OPTION_SAVE_BUTTON: optSaveBtn
    // , OPTION_SAVE_EXECUTE_BUTTON: optSaveExeBtn
    // , OPTION_CANCEL_BUTTON: optCancelBtn
    // , OPTION_PREV_PAGE_BUTTON: optPrevPageBtn
    // , OPTION_NEXT_PAGE_BUTTON: optNextPageBtn
    // , OPENED_AREA_CLASS: openedAreaClass
    // , CLOSED_AREA_CLASS: closedAreaClass
    // , VERTICAL_TEXT_CLASS: verticalTextClass
    // , MULTI_LANGUAGE_CLASS: multiLangTagClass
    // , LANGUAGE_CAPTION_ID: multiLangCaptionID
    // , SORTABLE_TABLE_CLASS: sortableTableClass
    // , SORTABLE_COLUMN_CLASS: sortableColumnClass
    // , SORT_VALUE_WRAP_CLASS: sortValueWrapClass
    // , ARROW_UP_CLASS: arrowUpClass
    // , ARROW_DOWN_CLASS: arrowDownClass
    // , NEW_TASK_BUTTON: newTaskBtn
    // , TASK_INDEX_CELL: taskIndexCell
    // , TASK_BUTTON: taskBtn
    // , TASK_INDEX_PREFIX: taskIndexPrefix
    // , TASK_LABEL_CONTROL: taskLabelClass
    // , TASK_LIST_TABLE: taskListTable
    // , TASK_LIST_ROW: taskListRow
    // , TASK_COMMAND_CELL: taskCmdCell
    // , TASK_COMMAND_BUTTON: taskCmdBtn
    // , TASK_COMMAND_EXECUTE_BUTTON: taskCmdExeBtn
    // , TASK_COMMAND_STOP_BUTTON: taskCmdStopBtn
    // , TASK_ADD_CMD: taskAddCmd
    // };
});
