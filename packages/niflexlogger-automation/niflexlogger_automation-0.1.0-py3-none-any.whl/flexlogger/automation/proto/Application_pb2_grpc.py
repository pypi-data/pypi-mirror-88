# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flexlogger.automation.proto import Application_pb2 as flexlogger_dot_automation_dot_proto_dot_Application__pb2


class ApplicationStub(object):
    """Service interface for a service side Log.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Connect = channel.unary_unary(
                '/national_instruments.core.automation.protocols.Application/Connect',
                request_serializer=flexlogger_dot_automation_dot_proto_dot_Application__pb2.ConnectRequest.SerializeToString,
                response_deserializer=flexlogger_dot_automation_dot_proto_dot_Application__pb2.ConnectResponse.FromString,
                )
        self.Disconnect = channel.unary_unary(
                '/national_instruments.core.automation.protocols.Application/Disconnect',
                request_serializer=flexlogger_dot_automation_dot_proto_dot_Application__pb2.DisconnectRequest.SerializeToString,
                response_deserializer=flexlogger_dot_automation_dot_proto_dot_Application__pb2.DisconnectResponse.FromString,
                )
        self.GetPreferencesDirectory = channel.unary_unary(
                '/national_instruments.core.automation.protocols.Application/GetPreferencesDirectory',
                request_serializer=flexlogger_dot_automation_dot_proto_dot_Application__pb2.GetPreferencesDirectoryRequest.SerializeToString,
                response_deserializer=flexlogger_dot_automation_dot_proto_dot_Application__pb2.GetPreferencesDirectoryResponse.FromString,
                )


class ApplicationServicer(object):
    """Service interface for a service side Log.
    """

    def Connect(self, request, context):
        """RPC call to connect from the client to the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Disconnect(self, request, context):
        """RPC call to shutdown the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPreferencesDirectory(self, request, context):
        """RPT call to get the preferences directory for the application
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApplicationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=flexlogger_dot_automation_dot_proto_dot_Application__pb2.ConnectRequest.FromString,
                    response_serializer=flexlogger_dot_automation_dot_proto_dot_Application__pb2.ConnectResponse.SerializeToString,
            ),
            'Disconnect': grpc.unary_unary_rpc_method_handler(
                    servicer.Disconnect,
                    request_deserializer=flexlogger_dot_automation_dot_proto_dot_Application__pb2.DisconnectRequest.FromString,
                    response_serializer=flexlogger_dot_automation_dot_proto_dot_Application__pb2.DisconnectResponse.SerializeToString,
            ),
            'GetPreferencesDirectory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPreferencesDirectory,
                    request_deserializer=flexlogger_dot_automation_dot_proto_dot_Application__pb2.GetPreferencesDirectoryRequest.FromString,
                    response_serializer=flexlogger_dot_automation_dot_proto_dot_Application__pb2.GetPreferencesDirectoryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'national_instruments.core.automation.protocols.Application', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Application(object):
    """Service interface for a service side Log.
    """

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/national_instruments.core.automation.protocols.Application/Connect',
            flexlogger_dot_automation_dot_proto_dot_Application__pb2.ConnectRequest.SerializeToString,
            flexlogger_dot_automation_dot_proto_dot_Application__pb2.ConnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Disconnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/national_instruments.core.automation.protocols.Application/Disconnect',
            flexlogger_dot_automation_dot_proto_dot_Application__pb2.DisconnectRequest.SerializeToString,
            flexlogger_dot_automation_dot_proto_dot_Application__pb2.DisconnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPreferencesDirectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/national_instruments.core.automation.protocols.Application/GetPreferencesDirectory',
            flexlogger_dot_automation_dot_proto_dot_Application__pb2.GetPreferencesDirectoryRequest.SerializeToString,
            flexlogger_dot_automation_dot_proto_dot_Application__pb2.GetPreferencesDirectoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
