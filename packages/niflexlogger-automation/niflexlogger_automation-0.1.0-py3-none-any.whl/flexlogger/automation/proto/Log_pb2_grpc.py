# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flexlogger.automation.proto import Log_pb2 as flexlogger_dot_automation_dot_proto_dot_Log__pb2


class LogStub(object):
    """Service interface for a service side Log.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Listen = channel.unary_stream(
                '/national_instruments.core.automation.protocols.Log/Listen',
                request_serializer=flexlogger_dot_automation_dot_proto_dot_Log__pb2.ListenRequest.SerializeToString,
                response_deserializer=flexlogger_dot_automation_dot_proto_dot_Log__pb2.ListenResponse.FromString,
                )
        self.StopListening = channel.unary_unary(
                '/national_instruments.core.automation.protocols.Log/StopListening',
                request_serializer=flexlogger_dot_automation_dot_proto_dot_Log__pb2.StopListeningRequest.SerializeToString,
                response_deserializer=flexlogger_dot_automation_dot_proto_dot_Log__pb2.StopListeningResponse.FromString,
                )


class LogServicer(object):
    """Service interface for a service side Log.
    """

    def Listen(self, request, context):
        """RPC Call initiate listening to a server side Log.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopListening(self, request, context):
        """RPC call to stop listening to a server side log.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LogServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Listen': grpc.unary_stream_rpc_method_handler(
                    servicer.Listen,
                    request_deserializer=flexlogger_dot_automation_dot_proto_dot_Log__pb2.ListenRequest.FromString,
                    response_serializer=flexlogger_dot_automation_dot_proto_dot_Log__pb2.ListenResponse.SerializeToString,
            ),
            'StopListening': grpc.unary_unary_rpc_method_handler(
                    servicer.StopListening,
                    request_deserializer=flexlogger_dot_automation_dot_proto_dot_Log__pb2.StopListeningRequest.FromString,
                    response_serializer=flexlogger_dot_automation_dot_proto_dot_Log__pb2.StopListeningResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'national_instruments.core.automation.protocols.Log', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Log(object):
    """Service interface for a service side Log.
    """

    @staticmethod
    def Listen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/national_instruments.core.automation.protocols.Log/Listen',
            flexlogger_dot_automation_dot_proto_dot_Log__pb2.ListenRequest.SerializeToString,
            flexlogger_dot_automation_dot_proto_dot_Log__pb2.ListenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopListening(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/national_instruments.core.automation.protocols.Log/StopListening',
            flexlogger_dot_automation_dot_proto_dot_Log__pb2.StopListeningRequest.SerializeToString,
            flexlogger_dot_automation_dot_proto_dot_Log__pb2.StopListeningResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
