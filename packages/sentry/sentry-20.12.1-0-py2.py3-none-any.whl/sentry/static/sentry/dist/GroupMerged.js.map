{"version":3,"sources":["webpack:///./app/actions/groupingActions.tsx","webpack:///./app/stores/groupingStore.tsx","webpack:///./app/components/flowLayout.tsx","webpack:///./app/components/spreadLayout.tsx","webpack:///./app/components/toolbar.tsx","webpack:///./app/views/organizationGroupDetails/groupMerged/mergedItem.jsx","webpack:///./app/views/organizationGroupDetails/groupMerged/mergedToolbar.jsx","webpack:///./app/views/organizationGroupDetails/groupMerged/mergedList.jsx","webpack:///./app/views/organizationGroupDetails/groupMerged/index.jsx"],"names":["GroupingActions","Reflux","createActions","storeConfig","listenables","api","Client","init","state","this","getInitialState","Object","entries","forEach","key","value","mergedItems","unmergeList","Map","unmergeState","unmergeDisabled","unmergeLastCollapsed","enableFingerprintCompare","similarItems","filteredSimilarItems","similarLinks","mergeState","mergeList","mergedLinks","mergeDisabled","loading","error","setStateForId","map","idOrIds","newState","Array","isArray","id","mergedState","has","get","set","isAllUnmergedSelected","lockedItems","from","values","filter","busy","size","latestEvent","length","onFetch","toFetchArray","requests","triggerFetchState","promises","endpoint","queryParams","dataKey","Promise","resolve","reject","request","method","data","success","_","jqXHR","links","getResponseHeader","err","responseJSON","detail","responseProcessors","merged","item","similar","issue","scoreMap","isBelowThreshold","scores","scoreKeys","keys","find","score","checkBelowThreshold","scoresByInterface","scoreKey","reduce","acc","String","split","interfaceName","push","aggregate","avg","sum","all","then","resultsArray","items","onToggleMerge","checked","undefined","includes","triggerMergeState","onToggleUnmerge","fingerprint","eventId","triggerUnmergeState","onUnmerge","groupId","loadingMessage","successMessage","errorMessage","ids","Error","addLoadingMessage","query","addSuccessMessage","clear","addErrorMessage","complete","onMerge","params","projectId","orgId","merge","itemIds","parent","trigger","mergedParent","onToggleCollapseFingerprints","collapsed","onToggleCollapseFingerprint","pick","createStore","FlowLayout","p","vertical","center","truncate","propTypes","PropTypes","bool","defaultProps","SpreadLayout","responsive","children","className","props","cx","classNames","Toolbar","theme","backgroundSecondary","border","MergedItem","createReactClass","displayName","mixins","listenTo","GroupingStore","onGroupingChange","stateForId","setState","handleToggleEvents","toggleCollapseFingerprint","handleLabelClick","e","preventDefault","handleToggle","disabled","event","toggleUnmerge","handleCheckClick","render","checkboxDisabled","MergedGroup","Controls","expanded","onClick","ActionColumn","onChange","Fingerprint","htmlFor","Collapse","direction","MergedEventList","EventDetails","hideIcons","hideLevel","innerBorder","space","text","familyMono","MergedToolbar","onGroupingUpdate","updateObj","handleShowDiff","project","baseEventId","targetEventId","openDiffModal","baseIssueId","targetIssueId","stopPropagation","onToggleCollapse","unmergeCount","StyledToolbar","title","t","message","onConfirm","CompareButton","Button","MergedList","renderEmpty","pageLinks","itemsWithLatestEvent","count","MergedItems","slug","React","Component","GroupMergedView","location","componentWillMount","fetchData","componentWillReceiveProps","nextProps","search","getEndpoint","type","limit","queryString","fetch","handleCollapse","collapseFingerprints","handleUnmerge","unmerge","isLoading","isError","isLoadedSuccessfully","onRetry","toggleCollapseFingerprints"],"mappings":"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","file":"GroupMerged.js","sourcesContent":["import Reflux from 'reflux';\n\n// Actions for \"Grouping\" view - for merging/unmerging events/issues\nconst GroupingActions = Reflux.createActions([\n  'fetch',\n  'showAllSimilarItems',\n  'toggleUnmerge',\n  'toggleMerge',\n  'unmerge',\n  'merge',\n  'toggleCollapseFingerprint',\n  'toggleCollapseFingerprints',\n]);\nexport default GroupingActions;\n","import pick from 'lodash/pick';\nimport Reflux from 'reflux';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport GroupingActions from 'app/actions/groupingActions';\nimport {Client} from 'app/api';\nimport {Event, Group, Organization, Project} from 'app/types';\n\n// Between 0-100\nconst MIN_SCORE = 0.6;\n\n// @param score: {[key: string]: number}\nconst checkBelowThreshold = (scores = {}) => {\n  const scoreKeys = Object.keys(scores);\n  return !scoreKeys.map(key => scores[key]).find(score => score >= MIN_SCORE);\n};\n\ntype State = {\n  // List of fingerprints that belong to issue\n  mergedItems: [];\n  // Map of {[fingerprint]: Array<fingerprint, event id>} that is selected to be unmerged\n  unmergeList: Map<any, any>;\n  // Map of state for each fingerprint (i.e. \"collapsed\")\n  unmergeState: Map<any, any>;\n  // Disabled state of \"Unmerge\" button in \"Merged\" tab (for Issues)\n  unmergeDisabled: boolean;\n  // If \"Collapse All\" was just used, this will be true\n  unmergeLastCollapsed: boolean;\n  // \"Compare\" button state\n  enableFingerprintCompare: boolean;\n  similarItems: [];\n  filteredSimilarItems: [];\n  similarLinks: string;\n  mergeState: Map<any, any>;\n  mergeList: Array<string>;\n  mergedLinks: string;\n  mergeDisabled: boolean;\n  loading: boolean;\n  error: boolean;\n};\n\ntype ScoreMap = Record<string, number | null>;\n\ntype Item = {\n  id: string;\n  latestEvent: Event;\n  state?: string;\n};\n\ntype ResponseProcessors = {\n  merged: (item: Item) => Item;\n  similar: (\n    data: [Group, ScoreMap]\n  ) => {\n    issue: Group;\n    score: ScoreMap;\n    scoresByInterface: Record<string, Array<[string, number | null]>>;\n    aggregate: Record<string, number>;\n    isBelowThreshold: boolean;\n  };\n};\n\ntype DataKey = keyof ResponseProcessors;\n\ntype ResultsAsArrayDataMerged = Array<Parameters<ResponseProcessors['merged']>[0]>;\n\ntype ResultsAsArrayDataSimilar = Array<Parameters<ResponseProcessors['similar']>[0]>;\n\ntype ResultsAsArray = Array<{\n  dataKey: DataKey;\n  data: ResultsAsArrayDataMerged | ResultsAsArrayDataSimilar;\n  links: string | null;\n}>;\n\ntype IdState = {\n  busy?: boolean;\n  checked?: boolean;\n  collapsed?: boolean;\n};\n\ntype GroupingStoreInterface = Reflux.StoreDefinition & {\n  init: () => void;\n  getInitialState: () => State;\n  setStateForId: (\n    map: Map<string, IdState>,\n    idOrIds: Array<string> | string,\n    newState: IdState\n  ) => Array<IdState>;\n  isAllUnmergedSelected: () => boolean;\n  onFetch: (\n    toFetchArray?: Array<{\n      dataKey: DataKey;\n      endpoint: string;\n      queryParams?: Record<string, any>;\n    }>\n  ) => Promise<any>;\n  onToggleMerge: (id: string) => void;\n  onToggleUnmerge: (props: [string, string] | string) => void;\n  onUnmerge: (props: {\n    groupId: Group['id'];\n    loadingMessage?: string;\n    successMessage?: string;\n    errorMessage?: string;\n  }) => void;\n  onMerge: (props: {\n    params?: {\n      orgId: Organization['id'];\n      projectId: Project['id'];\n      groupId: Group['id'];\n    };\n    projectId?: Project['id'];\n    query?: string;\n  }) => undefined | Promise<any>;\n  onToggleCollapseFingerprints: () => void;\n  onToggleCollapseFingerprint: (fingerprint: string) => void;\n  triggerFetchState: () => Pick<\n    State,\n    | 'similarItems'\n    | 'filteredSimilarItems'\n    | 'mergedItems'\n    | 'mergedLinks'\n    | 'similarLinks'\n    | 'mergeState'\n    | 'unmergeState'\n    | 'loading'\n    | 'error'\n  >;\n  triggerUnmergeState: () => Pick<\n    State,\n    | 'unmergeDisabled'\n    | 'unmergeState'\n    | 'unmergeList'\n    | 'enableFingerprintCompare'\n    | 'unmergeLastCollapsed'\n  >;\n  triggerMergeState: () => Pick<State, 'mergeState' | 'mergeDisabled' | 'mergeList'>;\n};\n\ntype Internals = {\n  api: Client;\n};\n\ntype GroupingStore = Reflux.Store & GroupingStoreInterface;\n\nconst storeConfig: Reflux.StoreDefinition & Internals & GroupingStoreInterface = {\n  listenables: [GroupingActions],\n  api: new Client(),\n\n  init() {\n    const state = this.getInitialState();\n\n    Object.entries(state).forEach(([key, value]) => {\n      this[key] = value;\n    });\n  },\n\n  getInitialState() {\n    return {\n      // List of fingerprints that belong to issue\n      mergedItems: [],\n      // Map of {[fingerprint]: Array<fingerprint, event id>} that is selected to be unmerged\n      unmergeList: new Map(),\n      // Map of state for each fingerprint (i.e. \"collapsed\")\n      unmergeState: new Map(),\n      // Disabled state of \"Unmerge\" button in \"Merged\" tab (for Issues)\n      unmergeDisabled: true,\n      // If \"Collapse All\" was just used, this will be true\n      unmergeLastCollapsed: false,\n      // \"Compare\" button state\n      enableFingerprintCompare: false,\n      similarItems: [],\n      filteredSimilarItems: [],\n      similarLinks: '',\n      mergeState: new Map(),\n      mergeList: [],\n      mergedLinks: '',\n      mergeDisabled: false,\n      loading: true,\n      error: false,\n    };\n  },\n\n  setStateForId(map, idOrIds, newState) {\n    const ids = Array.isArray(idOrIds) ? idOrIds : [idOrIds];\n\n    return ids.map(id => {\n      const state = (map.has(id) && map.get(id)) || {};\n      const mergedState = {...state, ...newState};\n      map.set(id, mergedState);\n      return mergedState;\n    });\n  },\n\n  isAllUnmergedSelected() {\n    const lockedItems =\n      (Array.from(this.unmergeState.values()) as Array<IdState>).filter(\n        ({busy}) => busy\n      ) || [];\n    return (\n      this.unmergeList.size ===\n      this.mergedItems.filter(({latestEvent}) => !!latestEvent).length -\n        lockedItems.length\n    );\n  },\n\n  // Fetches data\n  onFetch(toFetchArray) {\n    const requests = toFetchArray || this.toFetchArray;\n\n    // Reset state and trigger update\n    this.init();\n    this.triggerFetchState();\n\n    const promises = requests.map(\n      ({endpoint, queryParams, dataKey}) =>\n        new Promise((resolve, reject) => {\n          this.api.request(endpoint, {\n            method: 'GET',\n            data: queryParams,\n            success: (data, _, jqXHR) => {\n              resolve({\n                dataKey,\n                data,\n                links: jqXHR ? jqXHR.getResponseHeader('Link') : null,\n              });\n            },\n            error: err => {\n              const error = err.responseJSON?.detail || true;\n              reject(error);\n            },\n          });\n        })\n    );\n\n    const responseProcessors: ResponseProcessors = {\n      merged: item => {\n        // Check for locked items\n        this.setStateForId(this.unmergeState, item.id, {\n          busy: item.state === 'locked',\n        });\n        return item;\n      },\n      similar: ([issue, scoreMap]) => {\n        // Hide items with a low scores\n        const isBelowThreshold = checkBelowThreshold(scoreMap);\n\n        // List of scores indexed by interface (i.e., exception and message)\n        // Note: for v2, the interface is always \"similarity\". When v2 is\n        // rolled out we can get rid of this grouping entirely.\n        const scoresByInterface = Object.keys(scoreMap)\n          .map(scoreKey => [scoreKey, scoreMap[scoreKey]])\n          .reduce((acc, [scoreKey, score]) => {\n            // v1 layout: '<interface>:...'\n            const [interfaceName] = String(scoreKey).split(':');\n\n            if (!acc[interfaceName]) {\n              acc[interfaceName] = [];\n            }\n            acc[interfaceName].push([scoreKey, score]);\n\n            return acc;\n          }, {});\n\n        // Aggregate score by interface\n        const aggregate = Object.keys(scoresByInterface)\n          .map(interfaceName => [interfaceName, scoresByInterface[interfaceName]])\n          .reduce((acc, [interfaceName, allScores]) => {\n            // `null` scores means feature was not present in both issues, do not\n            // include in aggregate\n            const scores = allScores.filter(([, score]) => score !== null);\n\n            const avg = scores.reduce((sum, [, score]) => sum + score, 0) / scores.length;\n\n            acc[interfaceName] = avg;\n            return acc;\n          }, {});\n\n        return {\n          issue,\n          score: scoreMap,\n          scoresByInterface,\n          aggregate,\n          isBelowThreshold,\n        };\n      },\n    };\n\n    if (toFetchArray) {\n      this.toFetchArray = toFetchArray;\n    }\n\n    return Promise.all(promises).then(\n      resultsArray => {\n        (resultsArray as ResultsAsArray).forEach(({dataKey, data, links}) => {\n          const items =\n            dataKey === 'similar'\n              ? (data as ResultsAsArrayDataSimilar).map(responseProcessors[dataKey])\n              : (data as ResultsAsArrayDataMerged).map(responseProcessors[dataKey]);\n          this[`${dataKey}Items`] = items;\n          this[`${dataKey}Links`] = links;\n        });\n\n        this.loading = false;\n        this.error = false;\n        this.triggerFetchState();\n      },\n      () => {\n        this.loading = false;\n        this.error = true;\n        this.triggerFetchState();\n      }\n    );\n  },\n\n  // Toggle merge checkbox\n  onToggleMerge(id) {\n    let checked = false;\n\n    // Don't do anything if item is busy\n    const state = this.mergeState.has(id) ? this.mergeState.get(id) : undefined;\n\n    if (state?.busy === true) {\n      return;\n    }\n\n    if (this.mergeList.includes(id)) {\n      this.mergeList = this.mergeList.filter(item => item !== id);\n    } else {\n      this.mergeList = [...this.mergeList, id];\n      checked = true;\n    }\n\n    this.setStateForId(this.mergeState, id, {\n      checked,\n    });\n\n    this.triggerMergeState();\n  },\n\n  // Toggle unmerge check box\n  onToggleUnmerge([fingerprint, eventId]) {\n    let checked = false;\n\n    // Uncheck an item to unmerge\n    const state = this.unmergeState.get(fingerprint);\n\n    if (state?.busy === true) {\n      return;\n    }\n\n    if (this.unmergeList.has(fingerprint)) {\n      this.unmergeList.delete(fingerprint);\n    } else {\n      this.unmergeList.set(fingerprint, eventId);\n      checked = true;\n    }\n\n    // Update \"checked\" state for row\n    this.setStateForId(this.unmergeState, fingerprint, {\n      checked,\n    });\n\n    // Unmerge should be disabled if 0 or all items are selected\n    this.unmergeDisabled = this.unmergeList.size === 0 || this.isAllUnmergedSelected();\n    this.enableFingerprintCompare = this.unmergeList.size === 2;\n\n    this.triggerUnmergeState();\n  },\n\n  onUnmerge({groupId, loadingMessage, successMessage, errorMessage}) {\n    const ids = Array.from(this.unmergeList.keys()) as Array<string>;\n\n    return new Promise((resolve, reject) => {\n      if (this.isAllUnmergedSelected()) {\n        reject(new Error('Not allowed to unmerge ALL events'));\n        return;\n      }\n\n      // Disable unmerge button\n      this.unmergeDisabled = true;\n\n      // Disable rows\n      this.setStateForId(this.unmergeState, ids, {\n        checked: false,\n        busy: true,\n      });\n      this.triggerUnmergeState();\n      addLoadingMessage(loadingMessage);\n\n      this.api.request(`/issues/${groupId}/hashes/`, {\n        method: 'DELETE',\n        query: {\n          id: ids,\n        },\n        success: () => {\n          addSuccessMessage(successMessage);\n\n          // Busy rows after successful merge\n          this.setStateForId(this.unmergeState, ids, {\n            checked: false,\n            busy: true,\n          });\n          this.unmergeList.clear();\n        },\n        error: () => {\n          addErrorMessage(errorMessage);\n          this.setStateForId(this.unmergeState, ids, {\n            checked: true,\n            busy: false,\n          });\n        },\n        complete: () => {\n          this.unmergeDisabled = false;\n          resolve(this.triggerUnmergeState());\n        },\n      });\n    });\n  },\n  // For cross-project views, we need to pass projectId instead of\n  // depending on router params (since we will only have orgId in that case)\n  onMerge({params, query, projectId}) {\n    if (!params) {\n      return undefined;\n    }\n\n    const ids = this.mergeList;\n\n    this.mergeDisabled = true;\n\n    this.setStateForId(this.mergeState, ids as Array<string>, {\n      busy: true,\n    });\n\n    this.triggerMergeState();\n\n    const promise = new Promise(resolve => {\n      // Disable merge button\n      const {orgId, groupId} = params;\n\n      this.api.merge(\n        {\n          orgId,\n          projectId: projectId || params.projectId,\n          itemIds: [...ids, groupId] as Array<number>,\n          query,\n        },\n        {\n          success: data => {\n            if (data?.merge?.parent) {\n              this.trigger({\n                mergedParent: data.merge.parent,\n              });\n            }\n\n            // Hide rows after successful merge\n            this.setStateForId(this.mergeState, ids as Array<string>, {\n              checked: false,\n              busy: true,\n            });\n            this.mergeList = [];\n          },\n          error: () => {\n            this.setStateForId(this.mergeState, ids as Array<string>, {\n              checked: true,\n              busy: false,\n            });\n          },\n          complete: () => {\n            this.mergeDisabled = false;\n            resolve(this.triggerMergeState());\n          },\n        }\n      );\n    });\n\n    return promise;\n  },\n\n  // Toggle collapsed state of all fingerprints\n  onToggleCollapseFingerprints() {\n    this.setStateForId(\n      this.unmergeState,\n      this.mergedItems.map(({id}) => id),\n      {\n        collapsed: !this.unmergeLastCollapsed,\n      }\n    );\n\n    this.unmergeLastCollapsed = !this.unmergeLastCollapsed;\n\n    this.trigger({\n      unmergeLastCollapsed: this.unmergeLastCollapsed,\n      unmergeState: this.unmergeState,\n    });\n  },\n\n  onToggleCollapseFingerprint(fingerprint) {\n    const collapsed =\n      this.unmergeState.has(fingerprint) && this.unmergeState.get(fingerprint).collapsed;\n    this.setStateForId(this.unmergeState, fingerprint, {collapsed: !collapsed});\n    this.trigger({\n      unmergeState: this.unmergeState,\n    });\n  },\n\n  triggerFetchState() {\n    const state = {\n      similarItems: this.similarItems.filter(({isBelowThreshold}) => !isBelowThreshold),\n      filteredSimilarItems: this.similarItems.filter(\n        ({isBelowThreshold}) => isBelowThreshold\n      ),\n      ...pick(this, [\n        'mergedItems',\n        'mergedLinks',\n        'similarLinks',\n        'mergeState',\n        'unmergeState',\n        'loading',\n        'error',\n      ]),\n    };\n    this.trigger(state);\n    return state;\n  },\n\n  triggerUnmergeState() {\n    const state = pick(this, [\n      'unmergeDisabled',\n      'unmergeState',\n      'unmergeList',\n      'enableFingerprintCompare',\n      'unmergeLastCollapsed',\n    ]);\n    this.trigger(state);\n    return state;\n  },\n\n  triggerMergeState() {\n    const state = pick(this, ['mergeDisabled', 'mergeState', 'mergeList']);\n    this.trigger(state);\n    return state;\n  },\n};\n\nexport default Reflux.createStore(storeConfig) as GroupingStore;\n","import styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\n\ntype Props = {\n  /**\n   * Centers content via `justify-content`\n   */\n  center?: boolean;\n  /**\n   * Changes flex direction to be column\n   */\n  vertical?: boolean;\n  /**\n   * Applies \"overflow: hidden\" to container so that children can be truncated\n   */\n  truncate?: boolean;\n};\n\nconst FlowLayout = styled('div')<Props>`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  flex-direction: ${p => (p.vertical ? 'column' : null)};\n  justify-content: ${p => (p.center ? 'center' : null)};\n  overflow: ${p => (p.truncate ? 'hidden' : null)};\n`;\n\nFlowLayout.propTypes = {\n  center: PropTypes.bool,\n  vertical: PropTypes.bool,\n  truncate: PropTypes.bool,\n};\n\nFlowLayout.defaultProps = {\n  truncate: true,\n};\n\nexport default FlowLayout;\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\ntype Props = React.HTMLAttributes<HTMLDivElement> & {\n  responsive?: boolean;\n  center?: boolean;\n};\n\n// Flexbox container whose children will have `justify-content: space-between`\n//\n// Intended for children.length === 2\n// \"responsive\" will change flex-direction to be column on small widths\nconst SpreadLayout = ({\n  responsive = false,\n  center = true,\n  children,\n  className,\n  ...props\n}: Props) => {\n  const cx = classNames('spread-layout', className, {\n    center,\n    'allow-responsive': responsive,\n  });\n\n  return (\n    <div {...props} className={cx}>\n      {children}\n    </div>\n  );\n};\n\nSpreadLayout.propTypes = {\n  responsive: PropTypes.bool,\n  center: PropTypes.bool,\n  children: PropTypes.node,\n  style: PropTypes.object,\n};\n\nexport default SpreadLayout;\n","import styled from '@emotion/styled';\n\nconst Toolbar = styled('div')`\n  background: ${p => p.theme.backgroundSecondary};\n  border: 1px solid ${p => p.theme.border};\n  border-bottom: none;\n  border-radius: 3px 3px 0 0;\n  box-shadow: 0 1px 0 ${p => p.theme.border};\n  margin: 0;\n`;\n\nexport default Toolbar;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport createReactClass from 'create-react-class';\nimport PropTypes from 'prop-types';\nimport Reflux from 'reflux';\n\nimport GroupingActions from 'app/actions/groupingActions';\nimport Checkbox from 'app/components/checkbox';\nimport EventOrGroupHeader from 'app/components/eventOrGroupHeader';\nimport FlowLayout from 'app/components/flowLayout';\nimport {IconChevron} from 'app/icons';\nimport GroupingStore from 'app/stores/groupingStore';\nimport space from 'app/styles/space';\n\nconst MergedItem = createReactClass({\n  displayName: 'MergedItem',\n\n  propTypes: {\n    fingerprint: PropTypes.string.isRequired,\n    disabled: PropTypes.bool,\n    event: PropTypes.shape({\n      id: PropTypes.string,\n      groupID: PropTypes.string,\n      type: PropTypes.oneOf(['error', 'csp', 'default']),\n      dateCreated: PropTypes.string,\n      platform: PropTypes.string,\n    }),\n  },\n\n  mixins: [Reflux.listenTo(GroupingStore, 'onGroupingChange')],\n\n  getInitialState() {\n    return {\n      collapsed: false,\n      checked: false,\n      busy: false,\n    };\n  },\n\n  onGroupingChange({unmergeState}) {\n    if (!unmergeState) {\n      return;\n    }\n\n    const {fingerprint} = this.props;\n    const stateForId = unmergeState.has(fingerprint) && unmergeState.get(fingerprint);\n    if (!stateForId) {\n      return;\n    }\n\n    Object.keys(stateForId).forEach(key => {\n      if (stateForId[key] === this.state[key]) {\n        return;\n      }\n\n      this.setState({\n        [key]: stateForId[key],\n      });\n    });\n  },\n\n  handleToggleEvents() {\n    const {fingerprint} = this.props;\n    GroupingActions.toggleCollapseFingerprint(fingerprint);\n  },\n\n  // Disable default behavior of toggling checkbox\n  handleLabelClick(e) {\n    e.preventDefault();\n  },\n\n  handleToggle() {\n    const {disabled, fingerprint, event} = this.props;\n\n    if (disabled || this.state.busy) {\n      return;\n    }\n\n    // clicking anywhere in the row will toggle the checkbox\n    GroupingActions.toggleUnmerge([fingerprint, event.id]);\n  },\n\n  handleCheckClick() {\n    // noop because of react warning about being a controlled input without `onChange`\n    // we handle change via row click\n  },\n\n  render() {\n    const {disabled, event, fingerprint} = this.props;\n    const checkboxDisabled = disabled || this.state.disabled;\n\n    // `event` can be null if last event w/ fingerprint is not within retention period\n    return (\n      <MergedGroup busy={this.state.busy}>\n        <Controls expanded={!this.state.collapsed}>\n          <FlowLayout onClick={this.handleToggle}>\n            <ActionColumn>\n              <Checkbox\n                id={fingerprint}\n                value={fingerprint}\n                checked={this.state.checked}\n                disabled={checkboxDisabled}\n                onChange={this.handleCheckClick}\n              />\n            </ActionColumn>\n\n            <Fingerprint onClick={this.handleLabelClick} htmlFor={fingerprint}>\n              {fingerprint}\n            </Fingerprint>\n          </FlowLayout>\n\n          <div>\n            <span />\n            <Collapse onClick={this.handleToggleEvents}>\n              {this.state.collapsed ? (\n                <IconChevron direction=\"down\" size=\"xs\" />\n              ) : (\n                <IconChevron direction=\"up\" size=\"xs\" />\n              )}\n            </Collapse>\n          </div>\n        </Controls>\n\n        {!this.state.collapsed && (\n          <MergedEventList className=\"event-list\">\n            {event && (\n              <EventDetails className=\"event-details\">\n                <FlowLayout>\n                  <EventOrGroupHeader data={event} hideIcons hideLevel />\n                </FlowLayout>\n              </EventDetails>\n            )}\n          </MergedEventList>\n        )}\n      </MergedGroup>\n    );\n  },\n});\n\nconst MergedGroup = styled('div')`\n  ${p => p.busy && 'opacity: 0.2'};\n`;\n\nconst ActionColumn = styled('div')`\n  display: flex;\n  padding: 0 10px;\n  align-items: center;\n\n  input {\n    margin: 0;\n  }\n`;\n\nconst Controls = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  border-top: 1px solid ${p => p.theme.innerBorder};\n  background-color: #f3f1f6;\n  padding: ${space(0.5)} 0;\n  ${p => p.expanded && `border-bottom: 1px solid ${p.theme.innerBorder}`};\n\n  ${MergedGroup} {\n    &:first-child & {\n      border-top: none;\n    }\n    &:last-child & {\n      border-top: none;\n      border-bottom: 1px solid ${p => p.theme.innerBorder};\n    }\n  }\n`;\n\nconst Fingerprint = styled('label')`\n  font-family: ${p => p.theme.text.familyMono};\n\n  ${/* sc-selector */ Controls} & {\n    font-weight: normal;\n    margin: 0;\n  }\n`;\n\nconst Collapse = styled('span')`\n  cursor: pointer;\n  padding: 0 10px;\n`;\n\nconst MergedEventList = styled('div')`\n  overflow: hidden;\n  border: none;\n`;\n\nconst EventDetails = styled('div')`\n  display: flex;\n  justify-content: space-between;\n\n  .event-list & {\n    padding: 10px;\n  }\n`;\n\nexport default MergedItem;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport createReactClass from 'create-react-class';\nimport pick from 'lodash/pick';\nimport PropTypes from 'prop-types';\nimport Reflux from 'reflux';\n\nimport {openDiffModal} from 'app/actionCreators/modal';\nimport Button from 'app/components/button';\nimport LinkWithConfirmation from 'app/components/links/linkWithConfirmation';\nimport SpreadLayout from 'app/components/spreadLayout';\nimport Toolbar from 'app/components/toolbar';\nimport {t} from 'app/locale';\nimport SentryTypes from 'app/sentryTypes';\nimport GroupingStore from 'app/stores/groupingStore';\nimport space from 'app/styles/space';\n\nconst MergedToolbar = createReactClass({\n  displayName: 'MergedToolbar',\n\n  propTypes: {\n    orgId: PropTypes.string.isRequired,\n    project: SentryTypes.Project.isRequired,\n    groupId: PropTypes.string,\n    onUnmerge: PropTypes.func,\n    onToggleCollapse: PropTypes.func,\n  },\n\n  mixins: [Reflux.listenTo(GroupingStore, 'onGroupingUpdate')],\n\n  getInitialState() {\n    const {\n      unmergeList,\n      unmergeLastCollapsed,\n      unmergeDisabled,\n      enableFingerprintCompare,\n    } = GroupingStore;\n\n    return {\n      enableFingerprintCompare,\n      unmergeList,\n      unmergeLastCollapsed,\n      unmergeDisabled,\n    };\n  },\n\n  onGroupingUpdate(updateObj) {\n    const allowedKeys = [\n      'unmergeLastCollapsed',\n      'unmergeDisabled',\n      'unmergeList',\n      'enableFingerprintCompare',\n    ];\n\n    this.setState(pick(updateObj, allowedKeys));\n  },\n\n  handleShowDiff(e) {\n    const {groupId, project, orgId} = this.props;\n    const entries = this.state.unmergeList.entries();\n\n    // `unmergeList` should only have 2 items in map\n    if (this.state.unmergeList.size !== 2) {\n      return;\n    }\n\n    // only need eventId, not fingerprint\n    const [baseEventId, targetEventId] = Array.from(entries).map(\n      ([, eventId]) => eventId\n    );\n\n    openDiffModal({\n      baseIssueId: groupId,\n      targetIssueId: groupId,\n      baseEventId,\n      targetEventId,\n      orgId,\n      project,\n    });\n\n    e.stopPropagation();\n  },\n\n  render() {\n    const {onUnmerge, onToggleCollapse} = this.props;\n    const unmergeCount = (this.state.unmergeList && this.state.unmergeList.size) || 0;\n\n    return (\n      <StyledToolbar>\n        <SpreadLayout>\n          <SpreadLayout>\n            <div>\n              <LinkWithConfirmation\n                disabled={this.state.unmergeDisabled}\n                title={t(`Unmerging ${unmergeCount} events`)}\n                message={t(\n                  'These events will be unmerged and grouped into a new issue. Are you sure you want to unmerge these events?'\n                )}\n                className=\"btn btn-sm btn-default\"\n                onConfirm={onUnmerge}\n              >\n                {t('Unmerge')} ({unmergeCount || 0})\n              </LinkWithConfirmation>\n\n              <CompareButton\n                size=\"small\"\n                disabled={!this.state.enableFingerprintCompare}\n                onClick={this.handleShowDiff}\n              >\n                {t('Compare')}\n              </CompareButton>\n            </div>\n          </SpreadLayout>\n          <SpreadLayout>\n            <div>\n              <Button size=\"small\" onClick={onToggleCollapse}>\n                {this.state.unmergeLastCollapsed ? t('Expand All') : t('Collapse All')}\n              </Button>\n            </div>\n          </SpreadLayout>\n        </SpreadLayout>\n      </StyledToolbar>\n    );\n  },\n});\n\nconst CompareButton = styled(Button)`\n  margin-left: ${space(1)};\n`;\n\nconst StyledToolbar = styled(Toolbar)`\n  padding: ${space(0.5)} ${space(1)};\n`;\n\nexport default MergedToolbar;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\n\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport Pagination from 'app/components/pagination';\nimport {Panel} from 'app/components/panels';\nimport QueryCount from 'app/components/queryCount';\nimport {t} from 'app/locale';\nimport SentryTypes from 'app/sentryTypes';\n\nimport MergedItem from './mergedItem';\nimport MergedToolbar from './mergedToolbar';\n\nclass MergedList extends React.Component {\n  static propTypes = {\n    onUnmerge: PropTypes.func.isRequired,\n    onToggleCollapse: PropTypes.func.isRequired,\n    items: PropTypes.arrayOf(SentryTypes.Event),\n    pageLinks: PropTypes.string,\n    orgId: PropTypes.string.isRequired,\n    project: SentryTypes.Project.isRequired,\n  };\n\n  renderEmpty = () => (\n    <EmptyStateWarning>\n      <p>{t(\"There don't seem to be any hashes for this issue.\")}</p>\n    </EmptyStateWarning>\n  );\n\n  render() {\n    const {items, pageLinks, onToggleCollapse, onUnmerge, orgId, project} = this.props;\n    const itemsWithLatestEvent = items.filter(({latestEvent}) => !!latestEvent);\n    const hasResults = itemsWithLatestEvent.length > 0;\n\n    if (!hasResults) {\n      return <Panel>{this.renderEmpty()}</Panel>;\n    }\n\n    return (\n      <div>\n        <h2>\n          <span>{t('Merged fingerprints with latest event')}</span>{' '}\n          <QueryCount count={itemsWithLatestEvent.length} />\n        </h2>\n\n        <MergedToolbar\n          onToggleCollapse={onToggleCollapse}\n          onUnmerge={onUnmerge}\n          orgId={orgId}\n          project={project}\n        />\n\n        <MergedItems>\n          {itemsWithLatestEvent.map(({id, latestEvent}) => (\n            <MergedItem\n              key={id}\n              orgId={orgId}\n              projectId={project.slug}\n              disabled={items.length === 1}\n              event={latestEvent}\n              fingerprint={id}\n            />\n          ))}\n        </MergedItems>\n\n        <Pagination pageLinks={pageLinks} />\n      </div>\n    );\n  }\n}\n\nexport default MergedList;\n\nconst MergedItems = styled('div')`\n  border: 1px solid ${p => p.theme.border};\n  border-top: none;\n`;\n","import React from 'react';\nimport createReactClass from 'create-react-class';\nimport * as queryString from 'query-string';\nimport Reflux from 'reflux';\n\nimport GroupingActions from 'app/actions/groupingActions';\nimport Alert from 'app/components/alert';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {t} from 'app/locale';\nimport SentryTypes from 'app/sentryTypes';\nimport GroupingStore from 'app/stores/groupingStore';\n\nimport MergedList from './mergedList';\n\nconst GroupMergedView = createReactClass({\n  displayName: 'GroupMergedView',\n  propTypes: {\n    project: SentryTypes.Project,\n  },\n  mixins: [Reflux.listenTo(GroupingStore, 'onGroupingUpdate')],\n\n  getInitialState() {\n    const queryParams = this.props.location.query;\n    return {\n      mergedItems: [],\n      loading: true,\n      error: false,\n      query: queryParams.query || '',\n    };\n  },\n\n  componentWillMount() {\n    this.fetchData();\n  },\n\n  componentWillReceiveProps(nextProps) {\n    if (\n      nextProps.params.groupId !== this.props.params.groupId ||\n      nextProps.location.search !== this.props.location.search\n    ) {\n      const queryParams = nextProps.location.query;\n      this.setState(\n        {\n          query: queryParams.query,\n        },\n        this.fetchData\n      );\n    }\n  },\n\n  onGroupingUpdate({mergedItems, mergedLinks, loading, error}) {\n    if (mergedItems) {\n      this.setState({\n        mergedItems,\n        mergedLinks,\n        loading: typeof loading !== 'undefined' ? loading : false,\n        error: typeof error !== 'undefined' ? error : false,\n      });\n    }\n  },\n\n  getEndpoint(type = 'hashes') {\n    const params = this.props.params;\n    const queryParams = {\n      ...this.props.location.query,\n      limit: 50,\n      query: this.state.query,\n    };\n\n    return `/issues/${params.groupId}/${type}/?${queryString.stringify(queryParams)}`;\n  },\n\n  fetchData() {\n    GroupingActions.fetch([\n      {\n        endpoint: this.getEndpoint('hashes'),\n        dataKey: 'merged',\n        queryParams: this.props.location.query,\n      },\n    ]);\n  },\n\n  handleCollapse() {\n    GroupingActions.collapseFingerprints();\n  },\n\n  handleUnmerge() {\n    GroupingActions.unmerge({\n      groupId: this.props.params.groupId,\n      loadingMessage: `${t('Unmerging events')}...`,\n      successMessage: t('Events successfully queued for unmerging.'),\n      errorMessage: t('Unable to queue events for unmerging.'),\n    });\n  },\n\n  render() {\n    const isLoading = this.state.loading;\n    const isError = this.state.error && !isLoading;\n    const isLoadedSuccessfully = !isError && !isLoading;\n\n    return (\n      <div>\n        <Alert type=\"warning\">\n          {t(\n            'This is an experimental feature. Data may not be immediately available while we process unmerges.'\n          )}\n        </Alert>\n\n        {isLoading && <LoadingIndicator />}\n        {isError && (\n          <LoadingError\n            message=\"Unable to load merged events, please try again later\"\n            onRetry={this.fetchData}\n          />\n        )}\n\n        {isLoadedSuccessfully && (\n          <MergedList\n            orgId={this.props.params.orgId}\n            project={this.props.project}\n            items={this.state.mergedItems}\n            pageLinks={this.state.mergedLinks}\n            onUnmerge={this.handleUnmerge}\n            onToggleCollapse={GroupingActions.toggleCollapseFingerprints}\n          />\n        )}\n      </div>\n    );\n  },\n});\n\nexport {GroupMergedView};\n\nexport default GroupMergedView;\n"],"sourceRoot":""}