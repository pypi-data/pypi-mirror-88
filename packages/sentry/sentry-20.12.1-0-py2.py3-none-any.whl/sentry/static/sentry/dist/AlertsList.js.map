{"version":3,"sources":["webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/actionCreators/prompts.tsx","webpack:///./images/spot/alerts-empty-state.svg","webpack:///./app/views/alerts/list/onboarding.tsx","webpack:///./app/views/alerts/list/sparkLine.tsx","webpack:///./app/views/alerts/list/styles.tsx","webpack:///./app/views/alerts/list/row.tsx","webpack:///./app/views/alerts/list/index.tsx"],"names":["OnboardingPanel","className","image","children","Container","IlloBox","StyledBox","space","p","theme","breakpoints","promptsUpdate","api","params","requestPromise","method","data","organization_id","organizationId","project_id","projectId","feature","status","module","exports","Onboarding","actions","AlertsImage","src","emptyStateImg","t","ButtonList","gap","ButtonBar","Sparklines","React","lazy","SparklinesLine","SparkLine","this","props","error","eventStats","SparklineError","SparkLinePlaceholder","map","value","Array","isArray","length","count","Suspense","fallback","data-test-id","width","height","style","stroke","gray300","fill","strokeWidth","Component","StyledSparkLine","Placeholder","TableLayout","TitleAndSparkLine","AlertListRow","getProject","memoize","slug","projects","find","project","orgId","incident","filteredStatus","identifier","renderBody","date","CreatedResolvedTime","isResolved","IncidentStatus","CLOSED","isWarning","WARNING","color","gray200","orange300","red200","text","title","tct","StatusIndicator","projectsLoaded","state","stats","started","moment","dateStarted","duration","dateClosed","Date","diff","as","IncidentPanelItem","Title","renderStatusIndicator","IncidentLink","to","id","ErrorLoadingStatsIcon","ProjectBadge","avatarSize","renderTimeSince","seconds","getDynamicText","fixed","getIncidentMetricPreset","undefined","AsyncComponent","overflowEllipsis","IdBadge","Link","PanelItem","fontSizeMedium","DOCS_URL","getQueryStatus","includes","IncidentsList","query","location","incidentList","setState","hasAlertRule","firstVisitShown","loading","organization","alertRules","prompt","dismissed_ts","Fragment","size","external","href","iconProps","priority","referrer","icon","isCircled","description","link","incidentListPageLinks","allProjectsFromIncidents","Set","flatten","checkingForAlertRules","showLoadingIndicator","tryRenderOnboarding","StyledPanelHeader","PaddedTitleAndSparkLine","tryRenderEmpty","slugs","from","initiallyLoaded","key","pageLinks","router","pathname","openIncidentsQuery","omit","closedIncidentsQuery","objSlug","showDateSelector","activeTab","fullWidth","StyledButtonBar","merged","active","barId","renderList","IncidentsListContainer","trackView","nextProps","trackAnalyticsEvent","eventKey","eventName","type","features","hookName","renderDisabled","renderNoAccess","PanelHeader","withOrganization"],"mappings":"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","file":"AlertsList.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel} from 'app/components/panels';\nimport space from 'app/styles/space';\n\ntype Props = React.PropsWithChildren<{\n  image: React.ReactNode;\n  className?: string;\n}>;\n\nfunction OnboardingPanel({className, image, children}: Props) {\n  return (\n    <Panel className={className}>\n      <Container>\n        <IlloBox>{image}</IlloBox>\n        <StyledBox>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')`\n  z-index: 1;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import {Client} from 'app/api';\n\ntype PromptsUpdateParams = {\n  /**\n   * The numeric organization ID as a string\n   */\n  organizationId: string;\n  /**\n   * The numeric project ID as a string\n   */\n  projectId?: string;\n  feature: string;\n  status: 'snoozed' | 'dismissed';\n};\n\nexport function promptsUpdate(api: Client, params: PromptsUpdateParams) {\n  return api.requestPromise('/promptsactivity/', {\n    method: 'PUT',\n    data: {\n      organization_id: params.organizationId,\n      project_id: params.projectId,\n      feature: params.feature,\n      status: params.status,\n    },\n  });\n}\n","module.exports = __webpack_public_path__ + \"alerts-empty-state.9078ef.svg\";","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport emptyStateImg from 'app/../images/spot/alerts-empty-state.svg';\nimport ButtonBar from 'app/components/buttonBar';\nimport OnboardingPanel from 'app/components/onboardingPanel';\nimport {t} from 'app/locale';\n\ntype Props = {\n  actions: React.ReactNode;\n};\n\nfunction Onboarding({actions}: Props) {\n  return (\n    <OnboardingPanel image={<AlertsImage src={emptyStateImg} />}>\n      <h3>{t('More signal, less noise')}</h3>\n      <p>\n        {t(\n          'Not every error is worth an email. Set your own rules for alerts you need, with information that helps.'\n        )}\n      </p>\n      <ButtonList gap={1}>{actions}</ButtonList>\n    </OnboardingPanel>\n  );\n}\n\nconst AlertsImage = styled('img')`\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    user-select: none;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 220px;\n    margin-top: auto;\n    margin-bottom: auto;\n    transform: translateX(-50%);\n    left: 50%;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[2]}) {\n    transform: translateX(-60%);\n    width: 280px;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[3]}) {\n    transform: translateX(-75%);\n    width: 320px;\n  }\n`;\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n\nexport default Onboarding;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Placeholder from 'app/components/placeholder';\nimport theme from 'app/utils/theme';\nimport {IncidentStats} from 'app/views/alerts/types';\n\n// Height of sparkline\nconst SPARKLINE_HEIGHT = 38;\n\ntype Props = {\n  className?: string;\n  eventStats: IncidentStats['eventStats'];\n  error?: React.ReactNode;\n};\n\nconst Sparklines = React.lazy(\n  () => import(/* webpackChunkName: \"Sparklines\" */ 'app/components/sparklines')\n);\nconst SparklinesLine = React.lazy(\n  () => import(/* webpackChunkName: \"SparklinesLine\" */ 'app/components/sparklines/line')\n);\n\nclass SparkLine extends React.Component<Props> {\n  render() {\n    const {className, error, eventStats} = this.props;\n\n    if (error) {\n      return <SparklineError error={error} />;\n    }\n\n    if (!eventStats) {\n      return <SparkLinePlaceholder />;\n    }\n\n    const data = eventStats.data.map(([, value]) =>\n      value && Array.isArray(value) && value.length ? value[0].count || 0 : 0\n    );\n\n    return (\n      <React.Suspense fallback={<SparkLinePlaceholder />}>\n        <div data-test-id=\"incident-sparkline\" className={className}>\n          <Sparklines data={data} width={100} height={32}>\n            <SparklinesLine\n              style={{stroke: theme.gray300, fill: 'none', strokeWidth: 2}}\n            />\n          </Sparklines>\n        </div>\n      </React.Suspense>\n    );\n  }\n}\n\nconst StyledSparkLine = styled(SparkLine)`\n  flex-shrink: 0;\n  width: 100%;\n  height: ${SPARKLINE_HEIGHT}px;\n`;\n\nconst SparkLinePlaceholder = styled(Placeholder)`\n  height: ${SPARKLINE_HEIGHT}px;\n`;\n\nconst SparklineError = styled(SparkLinePlaceholder)`\n  align-items: center;\n  line-height: 1;\n`;\n\nexport default StyledSparkLine;\n","import styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\n\nconst TableLayout = styled('div')<{status: 'open' | 'closed'}>`\n  display: grid;\n  grid-template-columns: ${p =>\n    p.status === 'open' ? '4fr 1fr 2fr' : '3fr 2fr 2fr 1fr 2fr'};\n  grid-column-gap: ${space(1.5)};\n  width: 100%;\n  align-items: center;\n`;\n\nconst TitleAndSparkLine = styled('div')<{status: 'open' | 'closed'}>`\n  display: ${p => (p.status === 'open' ? 'grid' : 'flex')};\n  grid-gap: ${space(1)};\n  grid-template-columns: auto 120px;\n  align-items: center;\n  padding-right: ${space(2)};\n  overflow: hidden;\n`;\n\nexport {TableLayout, TitleAndSparkLine};\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport memoize from 'lodash/memoize';\nimport moment from 'moment';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Duration from 'app/components/duration';\nimport ErrorBoundary from 'app/components/errorBoundary';\nimport IdBadge from 'app/components/idBadge';\nimport Link from 'app/components/links/link';\nimport {PanelItem} from 'app/components/panels';\nimport TimeSince from 'app/components/timeSince';\nimport Tooltip from 'app/components/tooltip';\nimport {IconWarning} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Project} from 'app/types';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport theme from 'app/utils/theme';\n\nimport {Incident, IncidentStats, IncidentStatus} from '../types';\nimport {getIncidentMetricPreset} from '../utils';\n\nimport SparkLine from './sparkLine';\nimport {TableLayout, TitleAndSparkLine} from './styles';\n\ntype Props = {\n  incident: Incident;\n  projects: Project[];\n  projectsLoaded: boolean;\n  orgId: string;\n  filteredStatus: 'open' | 'closed';\n} & AsyncComponent['props'];\n\ntype State = {\n  stats: IncidentStats;\n} & AsyncComponent['state'];\n\nclass AlertListRow extends AsyncComponent<Props, State> {\n  get metricPreset() {\n    const {incident} = this.props;\n    return incident ? getIncidentMetricPreset(incident) : undefined;\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {orgId, incident, filteredStatus} = this.props;\n\n    if (filteredStatus === 'open') {\n      return [\n        ['stats', `/organizations/${orgId}/incidents/${incident.identifier}/stats/`],\n      ];\n    }\n\n    return [];\n  }\n\n  /**\n   * Memoized function to find a project from a list of projects\n   */\n  getProject = memoize((slug: string, projects: Project[]) =>\n    projects.find(project => project.slug === slug)\n  );\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderError() {\n    return this.renderBody();\n  }\n\n  renderTimeSince(date: string) {\n    return (\n      <CreatedResolvedTime>\n        <TimeSince date={date} />\n      </CreatedResolvedTime>\n    );\n  }\n\n  renderStatusIndicator() {\n    const {status} = this.props.incident;\n    const isResolved = status === IncidentStatus.CLOSED;\n    const isWarning = status === IncidentStatus.WARNING;\n\n    const color = isResolved ? theme.gray200 : isWarning ? theme.orange300 : theme.red200;\n    const text = isResolved ? t('Resolved') : isWarning ? t('Warning') : t('Critical');\n\n    return (\n      <Tooltip title={tct('Status: [text]', {text})}>\n        <StatusIndicator color={color} />\n      </Tooltip>\n    );\n  }\n\n  renderBody() {\n    const {incident, orgId, projectsLoaded, projects, filteredStatus} = this.props;\n    const {error, stats} = this.state;\n    const started = moment(incident.dateStarted);\n    const duration = moment\n      .duration(moment(incident.dateClosed || new Date()).diff(started))\n      .as('seconds');\n    const slug = incident.projects[0];\n\n    return (\n      <ErrorBoundary>\n        <IncidentPanelItem>\n          <TableLayout status={filteredStatus}>\n            <TitleAndSparkLine status={filteredStatus}>\n              <Title>\n                {this.renderStatusIndicator()}\n                <IncidentLink\n                  to={`/organizations/${orgId}/alerts/${incident.identifier}/`}\n                >\n                  Alert #{incident.id}\n                </IncidentLink>\n                {incident.title}\n              </Title>\n\n              {filteredStatus === 'open' && (\n                <SparkLine\n                  error={error && <ErrorLoadingStatsIcon />}\n                  eventStats={stats?.eventStats}\n                />\n              )}\n            </TitleAndSparkLine>\n\n            <ProjectBadge\n              avatarSize={18}\n              project={!projectsLoaded ? {slug} : this.getProject(slug, projects)}\n            />\n\n            {this.renderTimeSince(incident.dateStarted)}\n\n            {filteredStatus === 'closed' && (\n              <Duration seconds={getDynamicText({value: duration, fixed: 1200})} />\n            )}\n\n            {filteredStatus === 'closed' &&\n              incident.dateClosed &&\n              this.renderTimeSince(incident.dateClosed)}\n          </TableLayout>\n        </IncidentPanelItem>\n      </ErrorBoundary>\n    );\n  }\n}\n\nfunction ErrorLoadingStatsIcon() {\n  return (\n    <Tooltip title={t('Error loading alert stats')}>\n      <IconWarning />\n    </Tooltip>\n  );\n}\n\nconst CreatedResolvedTime = styled('div')`\n  ${overflowEllipsis}\n  line-height: 1.4;\n  display: flex;\n  align-items: center;\n`;\n\nconst ProjectBadge = styled(IdBadge)`\n  flex-shrink: 0;\n`;\n\nconst StatusIndicator = styled('div')<{color: string}>`\n  width: 10px;\n  height: 12px;\n  background: ${p => p.color};\n  display: inline-block;\n  border-top-right-radius: 40%;\n  border-bottom-right-radius: 40%;\n  margin-bottom: -1px;\n`;\n\nconst Title = styled('span')`\n  ${overflowEllipsis}\n`;\n\nconst IncidentLink = styled(Link)`\n  padding: 0 ${space(1)};\n`;\n\nconst IncidentPanelItem = styled(PanelItem)`\n  font-size: ${p => p.theme.fontSizeMedium};\n  padding: ${space(1.5)} ${space(2)} ${space(1.5)} 0;\n`;\n\nexport default AlertListRow;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport flatten from 'lodash/flatten';\nimport omit from 'lodash/omit';\n\nimport {promptsUpdate} from 'app/actionCreators/prompts';\nimport Feature from 'app/components/acl/feature';\nimport Alert from 'app/components/alert';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport CreateAlertButton from 'app/components/createAlertButton';\nimport * as Layout from 'app/components/layouts/thirds';\nimport ExternalLink from 'app/components/links/externalLink';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {IconCheckmark} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport Projects from 'app/utils/projects';\nimport withOrganization from 'app/utils/withOrganization';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\nimport {Incident} from '../types';\n\nimport AlertHeader from './header';\nimport Onboarding from './onboarding';\nimport AlertListRow from './row';\nimport {TableLayout, TitleAndSparkLine} from './styles';\n\nconst DEFAULT_QUERY_STATUS = 'open';\n\nconst DOCS_URL =\n  'https://docs.sentry.io/workflow/alerts-notifications/alerts/?_ga=2.21848383.580096147.1592364314-1444595810.1582160976';\n\nfunction getQueryStatus(status: any): 'open' | 'closed' {\n  return ['open', 'closed'].includes(status) ? status : DEFAULT_QUERY_STATUS;\n}\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  organization: Organization;\n};\n\ntype State = {\n  incidentList: Incident[];\n  /**\n   * Is there at least one alert rule configured for the currently selected\n   * projects?\n   */\n  hasAlertRule?: boolean;\n  /**\n   * User has not yet seen the 'alert_stream' welcome prompt for this\n   * organization.\n   */\n  firstVisitShown?: boolean;\n};\n\nclass IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state']> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {params, location} = this.props;\n    const {query} = location;\n    const status = getQueryStatus(query.status);\n\n    return [\n      [\n        'incidentList',\n        `/organizations/${params && params.orgId}/incidents/`,\n        {query: {...query, status}},\n      ],\n    ];\n  }\n\n  /**\n   * If our incidentList is empty, determine if we've configured alert rules or\n   * if the user has seen the welcome prompt.\n   */\n  async onLoadAllEndpointsSuccess() {\n    const {incidentList} = this.state;\n\n    if (!incidentList || incidentList.length !== 0) {\n      this.setState({hasAlertRule: true, firstVisitShown: false});\n      return;\n    }\n\n    this.setState({loading: true});\n\n    // Check if they have rules or not, to know which empty state message to\n    // display\n    const {params, location, organization} = this.props;\n\n    const alertRules = await this.api.requestPromise(\n      `/organizations/${params?.orgId}/alert-rules/`,\n      {\n        method: 'GET',\n        query: location.query,\n      }\n    );\n    const hasAlertRule = alertRules.length > 0;\n\n    // We've already configured alert rules, no need to check if we should show\n    // the \"first time welcome\" prompt\n    if (hasAlertRule) {\n      this.setState({hasAlertRule, firstVisitShown: false, loading: false});\n      return;\n    }\n\n    // Check if they have already seen the prompt for the alert stream\n    const prompt = await this.api.requestPromise('/promptsactivity/', {\n      query: {\n        organization_id: organization.id,\n        feature: 'alert_stream',\n      },\n    });\n\n    const firstVisitShown = !prompt?.data?.dismissed_ts;\n\n    if (firstVisitShown) {\n      // Prompt has not been seen, mark the prompt as seen immediately so they\n      // don't see it again\n      promptsUpdate(this.api, {\n        feature: 'alert_stream',\n        organizationId: organization.id,\n        status: 'dismissed',\n      });\n    }\n\n    this.setState({hasAlertRule, firstVisitShown, loading: false});\n  }\n\n  tryRenderOnboarding() {\n    const {firstVisitShown} = this.state;\n    const {organization} = this.props;\n\n    if (!firstVisitShown) {\n      return null;\n    }\n\n    const actions = (\n      <React.Fragment>\n        <Button size=\"small\" external href={DOCS_URL}>\n          {t('View Features')}\n        </Button>\n        <CreateAlertButton\n          organization={organization}\n          iconProps={{size: 'xs'}}\n          size=\"small\"\n          priority=\"primary\"\n          referrer=\"alert_stream\"\n        >\n          {t('Create Alert Rule')}\n        </CreateAlertButton>\n      </React.Fragment>\n    );\n\n    return <Onboarding actions={actions} />;\n  }\n\n  tryRenderEmpty() {\n    const {hasAlertRule, incidentList} = this.state;\n    const status = getQueryStatus(this.props.location.query.status);\n\n    if (!incidentList || incidentList.length > 0) {\n      return null;\n    }\n\n    return (\n      <EmptyMessage\n        size=\"medium\"\n        icon={<IconCheckmark isCircled size=\"48\" />}\n        title={\n          !hasAlertRule\n            ? t('No metric alert rules exist for these projects.')\n            : status === 'open'\n            ? t('No unresolved metric alerts in these projects.')\n            : t('No resolved metric alerts in these projects.')\n        }\n        description={tct('Learn more about [link:Metric Alerts]', {\n          link: <ExternalLink href={DOCS_URL} />,\n        })}\n      />\n    );\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderList() {\n    const {loading, incidentList, incidentListPageLinks, hasAlertRule} = this.state;\n\n    const {orgId} = this.props.params;\n    const allProjectsFromIncidents = new Set(\n      flatten(incidentList?.map(({projects}) => projects))\n    );\n    const checkingForAlertRules =\n      incidentList && incidentList.length === 0 && hasAlertRule === undefined\n        ? true\n        : false;\n    const showLoadingIndicator = loading || checkingForAlertRules;\n    const status = getQueryStatus(this.props.location.query.status);\n\n    return (\n      <React.Fragment>\n        {this.tryRenderOnboarding() ?? (\n          <Panel>\n            {!loading && (\n              <StyledPanelHeader>\n                <TableLayout status={status}>\n                  <PaddedTitleAndSparkLine status={status}>\n                    <div>{t('Alert')}</div>\n                    {status === 'open' && <div>{t('Graph')}</div>}\n                  </PaddedTitleAndSparkLine>\n                  <div>{t('Project')}</div>\n                  <div>{t('Triggered')}</div>\n                  {status === 'closed' && <div>{t('Duration')}</div>}\n                  {status === 'closed' && <div>{t('Resolved')}</div>}\n                </TableLayout>\n              </StyledPanelHeader>\n            )}\n            {showLoadingIndicator ? (\n              <LoadingIndicator />\n            ) : (\n              this.tryRenderEmpty() ?? (\n                <PanelBody>\n                  <Projects orgId={orgId} slugs={Array.from(allProjectsFromIncidents)}>\n                    {({initiallyLoaded, projects}) =>\n                      incidentList.map(incident => (\n                        <AlertListRow\n                          key={incident.id}\n                          projectsLoaded={initiallyLoaded}\n                          projects={projects as Project[]}\n                          incident={incident}\n                          orgId={orgId}\n                          filteredStatus={status}\n                        />\n                      ))\n                    }\n                  </Projects>\n                </PanelBody>\n              )\n            )}\n          </Panel>\n        )}\n        <Pagination pageLinks={incidentListPageLinks} />\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    const {params, location, organization, router} = this.props;\n    const {pathname, query} = location;\n    const {orgId} = params;\n\n    const openIncidentsQuery = omit({...query, status: 'open'}, 'cursor');\n    const closedIncidentsQuery = omit({...query, status: 'closed'}, 'cursor');\n\n    const status = getQueryStatus(query.status);\n\n    return (\n      <SentryDocumentTitle title={t('Alerts')} objSlug={orgId}>\n        <GlobalSelectionHeader organization={organization} showDateSelector={false}>\n          <AlertHeader organization={organization} router={router} activeTab=\"stream\" />\n          <Layout.Body>\n            <Layout.Main fullWidth>\n              {!this.tryRenderOnboarding() && (\n                <StyledButtonBar merged active={status}>\n                  <Button\n                    to={{pathname, query: openIncidentsQuery}}\n                    barId=\"open\"\n                    size=\"small\"\n                  >\n                    {t('Unresolved')}\n                  </Button>\n                  <Button\n                    to={{pathname, query: closedIncidentsQuery}}\n                    barId=\"closed\"\n                    size=\"small\"\n                  >\n                    {t('Resolved')}\n                  </Button>\n                </StyledButtonBar>\n              )}\n              {this.renderList()}\n            </Layout.Main>\n          </Layout.Body>\n        </GlobalSelectionHeader>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nclass IncidentsListContainer extends React.Component<Props> {\n  componentDidMount() {\n    this.trackView();\n  }\n\n  componentDidUpdate(nextProps: Props) {\n    if (nextProps.location.query?.status !== this.props.location.query?.status) {\n      this.trackView();\n    }\n  }\n\n  trackView() {\n    const {location, organization} = this.props;\n    const status = getQueryStatus(location.query.status);\n\n    trackAnalyticsEvent({\n      eventKey: 'alert_stream.viewed',\n      eventName: 'Alert Stream: Viewed',\n      organization_id: organization.id,\n      status,\n    });\n  }\n\n  renderNoAccess() {\n    return (\n      <Layout.Body>\n        <Layout.Main fullWidth>\n          <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n        </Layout.Main>\n      </Layout.Body>\n    );\n  }\n\n  render() {\n    const {organization} = this.props;\n\n    return (\n      <Feature\n        features={['organizations:incidents']}\n        organization={organization}\n        hookName=\"feature-disabled:alerts-page\"\n        renderDisabled={this.renderNoAccess}\n      >\n        <IncidentsList {...this.props} />\n      </Feature>\n    );\n  }\n}\n\nconst StyledButtonBar = styled(ButtonBar)`\n  width: 100px;\n  margin-bottom: ${space(1)};\n`;\n\nconst PaddedTitleAndSparkLine = styled(TitleAndSparkLine)`\n  padding-left: ${space(2)};\n`;\n\nconst StyledPanelHeader = styled(PanelHeader)`\n  /* Match table row padding for the grid to align */\n  padding: ${space(1.5)} ${space(2)} ${space(1.5)} 0;\n`;\n\nexport default withOrganization(IncidentsListContainer);\n"],"sourceRoot":""}