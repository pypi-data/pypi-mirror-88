{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/data/forms/accountNotificationSettings.tsx","webpack:///./app/views/settings/account/accountNotificationFineTuning.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","UnstyledSettingsPageHeader","props","icon","subtitle","action","tabs","noTitleStyles","TitleAndActions","TitleWrapper","Icon","Title","styled","Subtitle","Action","React","Component","defaultProps","p","space","theme","gray400","fontSizeLarge","SettingsPageHeader","JsonForm","state","highlighted","getLocation","context","hash","scrollToHash","nextProps","setState","toHash","scrollToElement","sanitizeQuerySelector","decodeURIComponent","align","offset","err","Sentry","fields","fieldsWithVisibleProp","filter","field","defined","visible","length","additionalFieldProps","every","formPanelProps","shouldDisplayForm","renderFooter","renderHeader","access","forms","disabled","features","otherProps","location","map","formGroup","i","Fragment","key","renderForm","contextTypes","PropTypes","object","FormPanel","id","undefined","defaultValue","fieldWithoutDefaultValue","disabledReason","name","route","subscribeByDefault","type","label","t","help","tct","locationPath","workflowNotifications","choices","weeklyReports","deployNotifications","personalActivityNotifications","selfAssignOnResolve","formGroups","ACCOUNT_NOTIFICATION_FIELDS","alerts","description","defaultFieldName","workflow","deploy","reports","email","PanelBodyLineItem","PanelBody","innerBorder","isGroupedByProject","indexOf","AccountNotificationsByProject","projects","projectsByOrg","reduce","acc","project","orgSlug","organization","slug","hasOwnProperty","push","groupByOrganization","fieldConfig","data","Object","values","org","projectFields","f","deprecatedSelectControl","AccountNotificationsByOrganization","organizations","AccountNotificationsByOrganizationContainer","withOrganizations","AccountNotificationFineTuning","fineTuneType","params","endpoints","notifications","fineTuneData","projectsPageLinks","isProject","getEndpoints","stateKey","url","hasProjects","emailChoices","saveOnBlur","apiMethod","apiEndpoint","initialData","hasButtons","Heading","renderSearchInput","placeholder","pageLinks","emails","isVerified","sort","a","b","isPrimary"],"mappings":"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","file":"AccountNotificationsFineTuning.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {HeaderTitle} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\ntype Props = {\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // The title\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n  className?: string;\n\n  action?: React.ReactNode;\n  tabs?: React.ReactNode;\n};\n\nclass UnstyledSettingsPageHeader extends React.Component<Props> {\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, subtitle, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          <TitleWrapper>\n            {icon && <Icon>{icon}</Icon>}\n            {title && (\n              <Title tabs={tabs} styled={noTitleStyles}>\n                <HeaderTitle>{title}</HeaderTitle>\n                {subtitle && <Subtitle>{subtitle}</Subtitle>}\n              </Title>\n            )}\n          </TitleWrapper>\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\nconst TitleWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p =>\n    p.tabs\n      ? `${space(4)} ${space(2)} ${space(2)} 0`\n      : `${space(4)} ${space(2)} ${space(4)} 0`};\n`;\nconst Subtitle = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-weight: 400;\n  font-size: ${p => p.theme.fontSizeLarge};\n  padding: ${space(1.5)} 0 ${space(3)};\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst SettingsPageHeader = styled(UnstyledSettingsPageHeader)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default SettingsPageHeader;\n","import React from 'react';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\nimport PropTypes from 'prop-types';\nimport {Box} from 'reflexbox'; // eslint-disable-line no-restricted-imports\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FieldFromConfig from './fieldFromConfig';\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n  location?: Location;\n} & DefaultProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype Context = {\n  location?: Location;\n};\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  static propTypes = {\n    /**\n     * Fields that are grouped by \"section\"\n     */\n    forms: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        fields: PropTypes.arrayOf(\n          PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])\n        ),\n      })\n    ),\n\n    /**\n     * If `forms` is not defined, `title` + `fields` must be required.\n     * Allows more fine grain control of title/fields\n     */\n    fields: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])\n    ),\n    /**\n     * Panel title if `forms` is not defined\n     */\n    title: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    access: PropTypes.object,\n    features: PropTypes.object,\n    renderFooter: PropTypes.func,\n    /**\n     * Renders inside of PanelBody\n     */\n    renderHeader: PropTypes.func,\n    /**\n     * Disables the entire form\n     */\n    disabled: PropTypes.bool,\n  };\n\n  static contextTypes = {\n    location: PropTypes.object,\n  };\n\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  state: State = {\n    highlighted: getLocation(this.props, this.context).hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (\n      getLocation(this.props, this.context).hash !==\n      getLocation(nextProps, this.context).hash\n    ) {\n      const hash = getLocation(nextProps, this.context).hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    const hash = toHash || getLocation(this.props, this.context).hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <Box {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </Box>\n    );\n  }\n}\n\nexport default JsonForm;\n\nfunction getLocation(props: Props, context: Context): Location | {hash?: string} {\n  return props.location || context.location || {};\n}\n","import React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  additionalFieldProps: {[key: string]: any};\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import {t, tct} from 'app/locale';\nimport {Field, JsonFormObject} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/account/notifications/';\n\nexport const fields: {[key: string]: Field} = {\n  subscribeByDefault: {\n    name: 'subscribeByDefault',\n    type: 'boolean',\n    label: t('Send Me Alerts'),\n    // TODO(billy): Make this a real link\n    help: tct(\n      'Alerts are defined in [locationPath]. Enable this to receive alerts sent to your teams. You will always receive alerts configured to be sent directly to you.',\n      {\n        locationPath: '[Project] » Project Settings » Alerts',\n      }\n    ),\n  },\n  workflowNotifications: {\n    name: 'workflowNotifications',\n    type: 'radio',\n    label: t('Send Me Workflow Notifications'),\n    choices: [\n      [0, t('Always')],\n      [1, t('Only On Issues I Subscribe To')],\n      [2, t('Never')],\n    ],\n    help: t('E.g. changes in issue assignment, resolution status, and comments.'),\n  },\n  weeklyReports: {\n    // Form is not visible because currently not implemented\n    name: 'weeklyReports',\n    type: 'boolean',\n    label: t('Send Me Weekly Reports'),\n    help: t(\"Reports contain a summary of what's happened within your organization.\"),\n    disabled: true,\n  },\n  deployNotifications: {\n    name: 'deployNotifications',\n    type: 'radio',\n    label: t('Send Me Deploy Notifications'),\n    choices: [\n      [2, t('Always')],\n      [3, t('Only On Deploys With My Commits')],\n      [4, t('Never')],\n    ],\n    help: t('Deploy emails include release, environment and commit overviews.'),\n  },\n  personalActivityNotifications: {\n    name: 'personalActivityNotifications',\n    type: 'boolean',\n    label: t('Notify Me About My Own Activity'),\n    help: t('Enable this to receive notifications about your own actions on Sentry.'),\n  },\n  selfAssignOnResolve: {\n    name: 'selfAssignOnResolve',\n    type: 'boolean',\n    label: t(\"Claim Unassigned Issues I've Resolved\"),\n    help: t(\"You'll receive notifications about any changes that happen afterwards.\"),\n  },\n};\n\nconst formGroups: JsonFormObject[] = [\n  {\n    title: t('Alerts'),\n    fields: [fields.subscribeByDefault],\n  },\n\n  {\n    title: t('Workflow Notifications'),\n    fields: [fields.workflowNotifications],\n  },\n\n  {\n    title: t('Email Routing'),\n    fields: [],\n  },\n\n  {\n    title: t('Weekly Reports'),\n    fields: [],\n  },\n\n  {\n    title: t('Deploy Notifications'),\n    fields: [fields.deployNotifications],\n  },\n\n  {\n    title: t('My Activity'),\n    fields: [fields.personalActivityNotifications, fields.selfAssignOnResolve],\n  },\n];\n\nexport default formGroups;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {fields} from 'app/data/forms/accountNotificationSettings';\nimport {t} from 'app/locale';\nimport {Organization, Project, UserEmail} from 'app/types';\nimport withOrganizations from 'app/utils/withOrganizations';\nimport AsyncView from 'app/views/asyncView';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SelectField from 'app/views/settings/components/forms/selectField';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype FineTuneField = {\n  title: string;\n  description: string;\n  type: 'select';\n  choices?: any;\n  defaultValue?: number;\n  defaultFieldName?: string;\n};\n\nconst ACCOUNT_NOTIFICATION_FIELDS: Record<string, FineTuneField> = {\n  alerts: {\n    title: 'Project Alerts',\n    description: t('Control alerts that you receive per project.'),\n    type: 'select',\n    choices: [\n      [-1, t('Default')],\n      [1, t('On')],\n      [0, t('Off')],\n    ],\n    defaultValue: -1,\n    defaultFieldName: 'subscribeByDefault',\n  },\n  workflow: {\n    title: 'Workflow Notifications',\n    description: t(\n      'Control workflow notifications, e.g. changes in issue assignment, resolution status, and comments.'\n    ),\n    type: 'select',\n    choices: [\n      [-1, t('Default')],\n      [0, t('Always')],\n      [1, t('Only on issues I subscribe to')],\n      [2, t('Never')],\n    ],\n    defaultValue: -1,\n    defaultFieldName: 'workflowNotifications',\n  },\n  deploy: {\n    title: t('Deploy Notifications'),\n    description: t(\n      'Control deploy notifications that include release, environment, and commit overviews.'\n    ),\n    type: 'select',\n    choices: [\n      [-1, t('Default')],\n      [2, t('Always')],\n      [3, t('Only on deploys with my commits')],\n      [4, t('Never')],\n    ],\n    defaultValue: -1,\n    defaultFieldName: 'deployNotifications',\n  },\n  reports: {\n    title: t('Weekly Reports'),\n    description: t(\n      \"Reports contain a summary of what's happened within the organization.\"\n    ),\n    type: 'select',\n    // API only saves organizations that have this disabled, so we should default to \"On\"\n    defaultValue: 1,\n    choices: [\n      [1, t('On')],\n      [0, t('Off')],\n    ],\n    defaultFieldName: 'weeklyReports',\n  },\n\n  email: {\n    title: t('Email Routing'),\n    description: t(\n      'On a per project basis, route emails to an alternative email address.'\n    ),\n    type: 'select',\n    // No choices here because it's going to have dynamic content\n    // Component will create choices\n  },\n};\n\nconst PanelBodyLineItem = styled(PanelBody)`\n  font-size: 1.4rem;\n  &:not(:last-child) {\n    border-bottom: 1px solid ${p => p.theme.innerBorder};\n  }\n`;\n\n// Which fine tuning parts are grouped by project\nconst isGroupedByProject = (type: string) =>\n  ['alerts', 'workflow', 'email'].indexOf(type) > -1;\n\nfunction groupByOrganization(projects: Project[]) {\n  return projects.reduce<\n    Record<string, {organization: Organization; projects: Project[]}>\n  >((acc, project) => {\n    const orgSlug = project.organization.slug;\n    if (acc.hasOwnProperty(orgSlug)) {\n      acc[orgSlug].projects.push(project);\n    } else {\n      acc[orgSlug] = {\n        organization: project.organization,\n        projects: [project],\n      };\n    }\n    return acc;\n  }, {});\n}\n\ntype ANBPProps = {\n  projects: Project[];\n  field: FineTuneField;\n};\n\nconst AccountNotificationsByProject = ({projects, field}: ANBPProps) => {\n  const projectsByOrg = groupByOrganization(projects);\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const {title, description, ...fieldConfig} = field;\n\n  // Display as select box in this view regardless of the type specified in the config\n  const data = Object.values(projectsByOrg).map(org => ({\n    name: org.organization.name,\n    projects: org.projects.map(project => ({\n      ...fieldConfig,\n      // `name` key refers to field name\n      // we use project.id because slugs are not unique across orgs\n      name: project.id,\n      label: project.slug,\n    })),\n  }));\n\n  return (\n    <React.Fragment>\n      {data.map(({name, projects: projectFields}) => (\n        <div key={name}>\n          <PanelHeader>{name}</PanelHeader>\n          {projectFields.map(f => (\n            <PanelBodyLineItem key={f.name}>\n              <SelectField\n                deprecatedSelectControl\n                defaultValue={f.defaultValue}\n                name={f.name}\n                choices={f.choices}\n                label={f.label}\n              />\n            </PanelBodyLineItem>\n          ))}\n        </div>\n      ))}\n    </React.Fragment>\n  );\n};\n\ntype ANBOProps = {\n  organizations: Organization[];\n  field: FineTuneField;\n};\n\nconst AccountNotificationsByOrganization = ({organizations, field}: ANBOProps) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const {title, description, ...fieldConfig} = field;\n\n  // Display as select box in this view regardless of the type specified in the config\n  const data = organizations.map(org => ({\n    ...fieldConfig,\n    // `name` key refers to field name\n    // we use org.id to remain consistent project.id use (which is required because slugs are not unique across orgs)\n    name: org.id,\n    label: org.slug,\n  }));\n\n  return (\n    <React.Fragment>\n      {data.map(f => (\n        <PanelBodyLineItem key={f.name}>\n          <SelectField\n            deprecatedSelectControl\n            defaultValue={f.defaultValue}\n            name={f.name}\n            choices={f.choices}\n            label={f.label}\n          />\n        </PanelBodyLineItem>\n      ))}\n    </React.Fragment>\n  );\n};\n\nconst AccountNotificationsByOrganizationContainer = withOrganizations(\n  AccountNotificationsByOrganization\n);\n\ntype Props = AsyncView['props'] & RouteComponentProps<{fineTuneType: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  emails: UserEmail[] | null;\n  projects: Project[] | null;\n  notifications: Record<string, any> | null;\n  fineTuneData: Record<string, any> | null;\n};\n\nexport default class AccountNotificationFineTuning extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {fineTuneType} = this.props.params;\n    const endpoints = [\n      ['notifications', '/users/me/notifications/'],\n      ['fineTuneData', `/users/me/notifications/${fineTuneType}/`],\n    ];\n\n    if (isGroupedByProject(fineTuneType)) {\n      endpoints.push(['projects', '/projects/']);\n    }\n\n    endpoints.push(['emails', '/users/me/emails/']);\n    if (fineTuneType === 'email') {\n      endpoints.push(['emails', '/users/me/emails/']);\n    }\n\n    return endpoints as ReturnType<AsyncView['getEndpoints']>;\n  }\n\n  // Return a sorted list of user's verified emails\n  get emailChoices() {\n    return (\n      this.state.emails\n        ?.filter(({isVerified}) => isVerified)\n        ?.sort((a, b) => {\n          // Sort by primary -> email\n          if (a.isPrimary) {\n            return -1;\n          } else if (b.isPrimary) {\n            return 1;\n          }\n\n          return a.email < b.email ? -1 : 1;\n        }) ?? []\n    );\n  }\n\n  renderBody() {\n    const {fineTuneType} = this.props.params;\n    const {notifications, projects, fineTuneData, projectsPageLinks} = this.state;\n\n    const isProject = isGroupedByProject(fineTuneType);\n    const field = ACCOUNT_NOTIFICATION_FIELDS[fineTuneType];\n    const {title, description} = field;\n\n    const [stateKey, url] = isProject ? this.getEndpoints()[2] : [];\n    const hasProjects = !!projects?.length;\n\n    if (fineTuneType === 'email') {\n      // Fetch verified email addresses\n      field.choices = this.emailChoices.map(({email}) => [email, email]);\n    }\n\n    if (!notifications || !fineTuneData) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={title} />\n        {description && <TextBlock>{description}</TextBlock>}\n\n        {field &&\n          field.defaultFieldName &&\n          // not implemented yet\n          field.defaultFieldName !== 'weeklyReports' && (\n            <Form\n              saveOnBlur\n              apiMethod=\"PUT\"\n              apiEndpoint=\"/users/me/notifications/\"\n              initialData={notifications}\n            >\n              <JsonForm\n                title={`Default ${title}`}\n                fields={[fields[field.defaultFieldName]]}\n              />\n            </Form>\n          )}\n        <Panel>\n          <PanelBody>\n            <PanelHeader hasButtons={isProject}>\n              <Heading>{isProject ? t('Projects') : t('Organizations')}</Heading>\n              <div>\n                {isProject &&\n                  this.renderSearchInput({\n                    placeholder: t('Search Projects'),\n                    url,\n                    stateKey,\n                  })}\n              </div>\n            </PanelHeader>\n\n            <Form\n              saveOnBlur\n              apiMethod=\"PUT\"\n              apiEndpoint={`/users/me/notifications/${fineTuneType}/`}\n              initialData={fineTuneData}\n            >\n              {isProject && hasProjects && (\n                <AccountNotificationsByProject projects={projects!} field={field} />\n              )}\n\n              {isProject && !hasProjects && (\n                <EmptyMessage>{t('No projects found')}</EmptyMessage>\n              )}\n\n              {!isProject && (\n                <AccountNotificationsByOrganizationContainer field={field} />\n              )}\n            </Form>\n          </PanelBody>\n        </Panel>\n\n        {projects && <Pagination pageLinks={projectsPageLinks} {...this.props} />}\n      </div>\n    );\n  }\n}\n\nconst Heading = styled('div')`\n  flex: 1;\n`;\n"],"sourceRoot":""}