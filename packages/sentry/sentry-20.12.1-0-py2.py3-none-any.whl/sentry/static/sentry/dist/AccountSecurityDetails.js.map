{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/views/settings/account/accountSecurity/components/confirmHeader.tsx","webpack:///./app/views/settings/account/accountSecurity/components/removeConfirm.tsx","webpack:///./app/views/settings/account/accountSecurity/components/recoveryCodes.tsx","webpack:///./app/views/settings/account/accountSecurity/components/u2fEnrolledDetails.jsx","webpack:///./app/views/settings/account/accountSecurity/accountSecurityDetails.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","UnstyledSettingsPageHeader","props","icon","subtitle","action","tabs","noTitleStyles","TitleAndActions","TitleWrapper","Icon","Title","styled","Subtitle","Action","React","Component","defaultProps","p","space","theme","gray400","fontSizeLarge","SettingsPageHeader","ConfirmHeader","message","Fragment","t","RemoveConfirm","Confirm","RecoveryCodes","className","isEnrolled","codes","onRegenerateBackupCodes","formattedCodes","join","CodeContainer","hasButtons","Actions","hideUnsupported","value","size","label","onClick","iframe","window","frames","document","write","print","close","download","href","onConfirm","priority","type","length","map","code","Code","key","name","css","Panel","PanelItem","text","familyMono","U2fEnrolledDetails","devices","id","onRemoveU2fDevice","hasDevices","isLastDevice","device","DevicePanelItem","DeviceInformation","Name","FadedDateTime","date","timestamp","disabled","AddAnotherPanelItem","to","DateTime","fontSizeRelativeSmall","ENDPOINT","AuthenticatorDate","DateLabel","AccountSecurityDetails","handleRemove","a","authenticator","state","authId","deviceId","key_handle","deviceName","setState","loading","api","requestPromise","method","router","push","addSuccessMessage","addErrorMessage","params","deleteDisabled","AuthenticatorStatus","enabled","removeButton","description","AuthenticatorDates","createdAt","lastUsedAt","phone","PhoneWrapper","Phone","CircleIndicator"],"mappings":"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","file":"AccountSecurityDetails.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {HeaderTitle} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\ntype Props = {\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // The title\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n  className?: string;\n\n  action?: React.ReactNode;\n  tabs?: React.ReactNode;\n};\n\nclass UnstyledSettingsPageHeader extends React.Component<Props> {\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, subtitle, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          <TitleWrapper>\n            {icon && <Icon>{icon}</Icon>}\n            {title && (\n              <Title tabs={tabs} styled={noTitleStyles}>\n                <HeaderTitle>{title}</HeaderTitle>\n                {subtitle && <Subtitle>{subtitle}</Subtitle>}\n              </Title>\n            )}\n          </TitleWrapper>\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\nconst TitleWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p =>\n    p.tabs\n      ? `${space(4)} ${space(2)} ${space(2)} 0`\n      : `${space(4)} ${space(2)} ${space(4)} 0`};\n`;\nconst Subtitle = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-weight: 400;\n  font-size: ${p => p.theme.fontSizeLarge};\n  padding: ${space(1.5)} 0 ${space(3)};\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst SettingsPageHeader = styled(UnstyledSettingsPageHeader)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default SettingsPageHeader;\n","import styled from '@emotion/styled';\n\nconst ConfirmHeader = styled('div')`\n  font-size: 1.2em;\n  margin-bottom: 10px;\n`;\n\nexport default ConfirmHeader;\n","import React from 'react';\n\nimport Confirm from 'app/components/confirm';\nimport {t} from 'app/locale';\nimport ConfirmHeader from 'app/views/settings/account/accountSecurity/components/confirmHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = React.ComponentProps<typeof Confirm>;\n\nconst message = (\n  <React.Fragment>\n    <ConfirmHeader>{t('Do you want to remove this method?')}</ConfirmHeader>\n    <TextBlock>\n      {t(\n        'Removing the last authentication method will disable two-factor authentication completely.'\n      )}\n    </TextBlock>\n  </React.Fragment>\n);\n\nclass RemoveConfirm extends React.Component<Props> {\n  static defaultProps = Confirm.defaultProps;\n\n  render() {\n    return <Confirm {...this.props} message={message} />;\n  }\n}\n\nexport default RemoveConfirm;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport Clipboard from 'app/components/clipboard';\nimport Confirm from 'app/components/confirm';\nimport {\n  Panel,\n  PanelAlert,\n  PanelBody,\n  PanelHeader,\n  PanelItem,\n} from 'app/components/panels';\nimport {IconCopy, IconDownload, IconPrint} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\ntype Props = {\n  isEnrolled: boolean;\n  codes: string[];\n  onRegenerateBackupCodes: () => void;\n  className?: string;\n};\n\nconst RecoveryCodes = ({\n  className,\n  isEnrolled,\n  codes,\n  onRegenerateBackupCodes,\n}: Props) => {\n  const printCodes = () => {\n    // eslint-disable-next-line dot-notation\n    const iframe = window.frames['printable'];\n    iframe.document.write(codes.join('<br>'));\n    iframe.print();\n    iframe.document.close();\n  };\n\n  if (!isEnrolled || !codes) {\n    return null;\n  }\n\n  const formattedCodes = codes.join(' \\n');\n\n  return (\n    <CodeContainer className={className}>\n      <PanelHeader hasButtons>\n        {t('Unused Codes')}\n\n        <Actions>\n          <Clipboard hideUnsupported value={formattedCodes}>\n            <Button size=\"small\" label={t('copy')}>\n              <IconCopy />\n            </Button>\n          </Clipboard>\n          <Button size=\"small\" onClick={printCodes} label={t('print')}>\n            <IconPrint />\n          </Button>\n          <Button\n            size=\"small\"\n            download=\"sentry-recovery-codes.txt\"\n            href={`data:text/plain;charset=utf-8,${formattedCodes}`}\n            label={t('download')}\n          >\n            <IconDownload />\n          </Button>\n          <Confirm\n            onConfirm={onRegenerateBackupCodes}\n            message={t(\n              'Are you sure you want to regenerate recovery codes? Your old codes will no longer work.'\n            )}\n          >\n            <Button priority=\"danger\" size=\"small\">\n              {t('Regenerate Codes')}\n            </Button>\n          </Confirm>\n        </Actions>\n      </PanelHeader>\n      <PanelBody>\n        <PanelAlert type=\"warning\">\n          {t(\n            'Make sure to save a copy of your recovery codes and store them in a safe place.'\n          )}\n        </PanelAlert>\n        <div>{!!codes.length && codes.map(code => <Code key={code}>{code}</Code>)}</div>\n        {!codes.length && (\n          <EmptyMessage>{t('You have no more recovery codes to use')}</EmptyMessage>\n        )}\n      </PanelBody>\n      <iframe name=\"printable\" css={{display: 'none'}} />\n    </CodeContainer>\n  );\n};\n\nexport default RecoveryCodes;\n\nconst CodeContainer = styled(Panel)`\n  margin-top: ${space(4)};\n`;\n\nconst Actions = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(1)};\n`;\n\nconst Code = styled(PanelItem)`\n  font-family: ${p => p.theme.text.familyMono};\n  padding: ${space(2)};\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\n\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport DateTime from 'app/components/dateTime';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport Tooltip from 'app/components/tooltip';\nimport {IconDelete} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport ConfirmHeader from 'app/views/settings/account/accountSecurity/components/confirmHeader';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\n/**\n * List u2f devices w/ ability to remove a single device\n */\nclass U2fEnrolledDetails extends React.Component {\n  static propTypes = {\n    isEnrolled: PropTypes.bool,\n    id: PropTypes.string,\n    devices: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        timestamp: PropTypes.any,\n      })\n    ),\n    onRemoveU2fDevice: PropTypes.func.isRequired,\n  };\n\n  render() {\n    const {className, isEnrolled, devices, id, onRemoveU2fDevice} = this.props;\n\n    if (id !== 'u2f' || !isEnrolled) {\n      return null;\n    }\n\n    const hasDevices = devices && devices.length;\n    // Note Tooltip doesn't work because of bootstrap(?) pointer events for disabled buttons\n    const isLastDevice = hasDevices === 1;\n\n    return (\n      <Panel className={className}>\n        <PanelHeader>{t('Device name')}</PanelHeader>\n\n        <PanelBody>\n          {!hasDevices && (\n            <EmptyMessage>{t('You have not added any U2F devices')}</EmptyMessage>\n          )}\n          {hasDevices &&\n            devices.map(device => (\n              <DevicePanelItem key={device.name}>\n                <DeviceInformation>\n                  <Name>{device.name}</Name>\n                  <FadedDateTime date={device.timestamp} />\n                </DeviceInformation>\n\n                <Actions>\n                  <Confirm\n                    onConfirm={() => onRemoveU2fDevice(device)}\n                    disabled={isLastDevice}\n                    message={\n                      <React.Fragment>\n                        <ConfirmHeader>\n                          {t('Do you want to remove U2F device?')}\n                        </ConfirmHeader>\n                        <TextBlock>\n                          {t(\n                            `Are you sure you want to remove the U2F device \"${device.name}\"?`\n                          )}\n                        </TextBlock>\n                      </React.Fragment>\n                    }\n                  >\n                    <Button size=\"small\" priority=\"danger\">\n                      <Tooltip\n                        disabled={!isLastDevice}\n                        title={t('Can not remove last U2F device')}\n                      >\n                        <IconDelete size=\"xs\" />\n                      </Tooltip>\n                    </Button>\n                  </Confirm>\n                </Actions>\n              </DevicePanelItem>\n            ))}\n          <AddAnotherPanelItem>\n            <Button\n              type=\"button\"\n              to=\"/settings/account/security/mfa/u2f/enroll/\"\n              size=\"small\"\n            >\n              {t('Add Another Device')}\n            </Button>\n          </AddAnotherPanelItem>\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\nconst DevicePanelItem = styled(PanelItem)`\n  padding: 0;\n`;\n\nconst DeviceInformation = styled('div')`\n  display: flex;\n  align-items: center;\n  flex: 1;\n\n  padding: ${space(2)};\n  padding-right: 0;\n`;\n\nconst FadedDateTime = styled(DateTime)`\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n  opacity: 0.6;\n`;\n\nconst Name = styled('div')`\n  flex: 1;\n`;\n\nconst Actions = styled('div')`\n  margin: ${space(2)};\n`;\n\nconst AddAnotherPanelItem = styled(PanelItem)`\n  justify-content: flex-end;\n  padding: ${space(2)};\n`;\n\nexport default styled(U2fEnrolledDetails)`\n  margin-top: ${space(4)};\n`;\n","/**\n * AccountSecurityDetails is only displayed when user is enrolled in the 2fa method.\n * It displays created + last used time of the 2fa method.\n *\n * Also displays 2fa method specific details.\n */\nimport React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport Button from 'app/components/button';\nimport CircleIndicator from 'app/components/circleIndicator';\nimport DateTime from 'app/components/dateTime';\nimport Tooltip from 'app/components/tooltip';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Authenticator} from 'app/types';\nimport AsyncView from 'app/views/asyncView';\nimport RecoveryCodes from 'app/views/settings/account/accountSecurity/components/recoveryCodes';\nimport RemoveConfirm from 'app/views/settings/account/accountSecurity/components/removeConfirm';\nimport U2fEnrolledDetails from 'app/views/settings/account/accountSecurity/components/u2fEnrolledDetails';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nconst ENDPOINT = '/users/me/authenticators/';\n\ntype AuthenticatorDateProps = {\n  label: string;\n  /**\n   * Can be null or a Date object.\n   * Component will have value \"never\" if it is null\n   */\n  date: string | null;\n};\n\nfunction AuthenticatorDate({label, date}: AuthenticatorDateProps) {\n  return (\n    <React.Fragment>\n      <DateLabel>{label}</DateLabel>\n      <div>{date ? <DateTime date={date} /> : t('never')}</div>\n    </React.Fragment>\n  );\n}\n\ntype Props = {\n  deleteDisabled: boolean;\n  onRegenerateBackupCodes: () => void;\n} & RouteComponentProps<{authId: string}, {}>;\n\ntype State = {\n  authenticator: Authenticator | null;\n} & AsyncView['state'];\n\nclass AccountSecurityDetails extends AsyncView<Props, State> {\n  getTitle() {\n    return t('Security');\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {params} = this.props;\n    const {authId} = params;\n\n    return [['authenticator', `${ENDPOINT}${authId}/`]];\n  }\n\n  handleRemove = async (device?: Authenticator['devices'][0]) => {\n    const {authenticator} = this.state;\n\n    if (!authenticator || !authenticator.authId) {\n      return;\n    }\n\n    // if the device is defined, it means that U2f is being removed\n    const deviceId = device ? `${device.key_handle}/` : '';\n    const deviceName = device ? device.name : t('Authenticator');\n\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(`${ENDPOINT}${authenticator.authId}/${deviceId}`, {\n        method: 'DELETE',\n      });\n      this.props.router.push('/settings/account/security');\n      addSuccessMessage(t('%s has been removed', deviceName));\n    } catch {\n      // Error deleting authenticator\n      this.setState({loading: false});\n      addErrorMessage(t('Error removing %s', deviceName));\n    }\n  };\n\n  renderBody() {\n    const {authenticator} = this.state;\n\n    if (!authenticator) {\n      return null;\n    }\n\n    const {deleteDisabled, onRegenerateBackupCodes} = this.props;\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader\n          title={\n            <React.Fragment>\n              <span>{authenticator.name}</span>\n              <AuthenticatorStatus enabled={authenticator.isEnrolled} />\n            </React.Fragment>\n          }\n          action={\n            authenticator.isEnrolled &&\n            authenticator.removeButton && (\n              <Tooltip\n                title={t(\n                  \"Two-factor authentication is required for at least one organization you're a member of.\"\n                )}\n                disabled={!deleteDisabled}\n              >\n                <RemoveConfirm onConfirm={this.handleRemove} disabled={deleteDisabled}>\n                  <Button priority=\"danger\">{authenticator.removeButton}</Button>\n                </RemoveConfirm>\n              </Tooltip>\n            )\n          }\n        />\n\n        <TextBlock>{authenticator.description}</TextBlock>\n\n        <AuthenticatorDates>\n          <AuthenticatorDate label={t('Created at')} date={authenticator.createdAt} />\n          <AuthenticatorDate label={t('Last used')} date={authenticator.lastUsedAt} />\n        </AuthenticatorDates>\n\n        <U2fEnrolledDetails\n          isEnrolled={authenticator.isEnrolled}\n          id={authenticator.id}\n          devices={authenticator.devices}\n          onRemoveU2fDevice={this.handleRemove}\n        />\n\n        {authenticator.isEnrolled && authenticator.phone && (\n          <PhoneWrapper>\n            {t('Confirmation codes are sent to the following phone number')}:\n            <Phone>{authenticator.phone}</Phone>\n          </PhoneWrapper>\n        )}\n\n        <RecoveryCodes\n          onRegenerateBackupCodes={onRegenerateBackupCodes}\n          isEnrolled={authenticator.isEnrolled}\n          codes={authenticator.codes}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AccountSecurityDetails;\n\nconst AuthenticatorStatus = styled(CircleIndicator)`\n  margin-left: ${space(1)};\n`;\n\nconst AuthenticatorDates = styled('div')`\n  display: grid;\n  grid-gap: ${space(2)};\n  grid-template-columns: max-content auto;\n`;\n\nconst DateLabel = styled('span')`\n  font-weight: bold;\n`;\n\nconst PhoneWrapper = styled('div')`\n  margin-top: ${space(4)};\n`;\n\nconst Phone = styled('span')`\n  font-weight: bold;\n  margin-left: ${space(1)};\n`;\n"],"sourceRoot":""}