{"version":3,"sources":["webpack:///./app/components/modals/createTeamModal.tsx","webpack:///./app/views/settings/components/forms/textField.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/actionCreators/teams.tsx","webpack:///./app/components/teams/createTeamForm.tsx"],"names":["CreateTeamModal","handleSubmit","data","onSuccess","onError","props","organization","api","createTeam","orgId","slug","then","resp","handleSuccess","err","team","this","onClose","closeModal","Body","Header","Fragment","closeButton","onHide","t","onSubmit","React","Component","withApi","TextField","type","slugify","str","toLowerCase","replace","doCallback","params","name","args","callIfFunction","fetchTeamDetails","options","TeamActions","fetchDetails","teamId","request","success","fetchDetailsSuccess","error","fetchDetailsError","updateTeamSuccess","updateSuccess","updateTeam","endpoint","update","method","updateError","joinTeam","memberId","id","uniqueId","leaveTeam","requestPromise","createTeamSuccess","addSuccessMessage","tct","createTeamError","addErrorMessage","removeTeam","removeTeamSuccess","removeTeamError","CreateTeamForm","handleCreateTeamSuccess","submitLabel","apiEndpoint","apiMethod","onSubmitSuccess","requireChanges","data-test-id","formProps","label","placeholder","help","required","stacked","flexibleControlStateSize","inline","transformInput"],"mappings":"isBAgBMA,E,kLACJC,aAAe,SAACC,EAAsBC,EAAqBC,GAAsB,MACnD,EAAKC,MAA1BC,EADwE,EACxEA,aAAcC,EAD0D,EAC1DA,IACrBC,YAAWD,EAAKL,EAAM,CAACO,MAAOH,EAAaI,OACxCC,MAAK,SAACC,GACL,EAAKC,cAAcD,GACnBT,EAAUS,MAHd,OAKS,SAACE,GACNV,EAAQU,O,oDAIAC,GACRC,KAAKX,MAAMY,SACbD,KAAKX,MAAMY,QAAQF,GAGrBC,KAAKX,MAAMa,e,+BAGJ,MACsCF,KAAKX,MAA3Cc,EADA,EACAA,KAAMC,EADN,EACMA,OAAQF,EADd,EACcA,WAAeb,EAD7B,sCAGP,OACE,YAAC,IAAMgB,SAAP,KACE,YAACD,EAAD,CAAQE,aAAW,EAACC,OAAQL,GACzBM,YAAE,gBAEL,YAACL,EAAD,KACE,YAAC,IAAD,OAAoBd,EAApB,CAA2BoB,SAAUT,KAAKf,sB,GA9BtByB,IAAMC,WAA9B3B,E,8BAqCS4B,sBAAQ5B,I,+GC/CR,SAAS6B,EAAUxB,GAChC,OAAO,YAAC,IAAD,OAAgBA,EAAhB,CAAuByB,KAAK,UADbD,E,2DCJT,SAASE,EAAQC,GAC9B,MAAsB,iBAARA,EAAmBA,EAAIC,cAAcC,QAAQ,IAAK,KAAO,GAHzE,mC,kCCAA,2RAaMC,EAAa,WAId,QAHHC,EAGG,uDAHuB,GAC1BC,EAEG,0DADAC,EACA,iCADAA,EACA,kBACHC,IAAc,WAAd,GAAeH,EAAOC,IAAtB,OAAgCC,KA+B3B,SAASE,EACdjC,EACA6B,EACAK,GAGA,OADAC,IAAYC,aAAaP,EAAOQ,QACzBrC,EAAIsC,QAAJ,iBAAsBT,EAAO3B,MAA7B,YAAsC2B,EAAOQ,OAA7C,KAAwD,CAC7DE,QAAS,SAAA5C,GACPwC,IAAYK,oBAAoBX,EAAOQ,OAAQ1C,GAC/CiC,EAAWM,EAAS,UAAWvC,IAEjC8C,MAAO,SAAAA,GACLN,IAAYO,kBAAkBb,EAAOQ,OAAQI,GAC7Cb,EAAWM,EAAS,QAASO,MAK5B,SAASE,EAAkBN,EAAkC1C,GAClEwC,IAAYS,cAAcP,EAAQ1C,GAG7B,SAASkD,EACd7C,EACA6B,EACAK,GAEA,IAAMY,EAAW,UAAH,OAAajB,EAAO3B,MAApB,YAA6B2B,EAAOQ,OAApC,KAGd,OAFAF,IAAYY,OAAOlB,EAAOQ,OAAQR,EAAOlC,MAElCK,EAAIsC,QAAQQ,EAAU,CAC3BE,OAAQ,MACRrD,KAAMkC,EAAOlC,KACb4C,QAAS,SAAA5C,GACPgD,EAAkBd,EAAOQ,OAAQ1C,GACjCiC,EAAWM,EAAS,UAAWvC,IAEjC8C,MAAO,SAAAA,GACLN,IAAYc,YAAYpB,EAAOQ,OAAQI,GACvCb,EAAWM,EAAS,QAASO,MAK5B,SAASS,EACdlD,EACA6B,EACAK,GACA,MACMY,EAAW,kBAAH,OAAqBjB,EAAO3B,MAA5B,8BACZ2B,EAAOsB,gBADK,QACO,KADP,kBAEJtB,EAAOQ,OAFH,KAGRe,EAAKC,cAIX,OAFAlB,IAAYY,OAAOK,EAAIvB,EAAOQ,QAEvBrC,EAAIsC,QAAQQ,EAAU,CAC3BE,OAAQ,OACRT,QAAS,SAAA5C,GACPwC,IAAYS,cAAcf,EAAOQ,OAAQ1C,GACzCiC,EAAWM,EAAS,UAAWvC,IAEjC8C,MAAO,SAAAA,GACLN,IAAYc,YAAYG,EAAIvB,EAAOQ,OAAQI,GAC3Cb,EAAWM,EAAS,QAASO,MAK5B,SAASa,EACdtD,EACA6B,EACAK,GAEA,IAAMY,EAAW,kBAAH,OAAqBjB,EAAO3B,MAA5B,oBACZ2B,EAAOsB,UAAY,KADP,kBAEJtB,EAAOQ,OAFH,KAGRe,EAAKC,cAIX,OAFAlB,IAAYY,OAAOK,EAAIvB,EAAOQ,QAEvBrC,EAAIsC,QAAQQ,EAAU,CAC3BE,OAAQ,SACRT,QAAS,SAAA5C,GACPwC,IAAYS,cAAcf,EAAOQ,OAAQ1C,GACzCiC,EAAWM,EAAS,UAAWvC,IAEjC8C,MAAO,SAAAA,GACLN,IAAYc,YAAYG,EAAIvB,EAAOQ,OAAQI,GAC3Cb,EAAWM,EAAS,QAASO,MAK5B,SAASxC,EAAWD,EAAaQ,EAA0BqB,GAGhE,OAFAM,IAAYlC,WAAWO,GAEhBR,EACJuD,eADI,yBAC6B1B,EAAO3B,MADpC,WACoD,CACvD8C,OAAQ,OACRrD,KAAMa,IAEPJ,MACC,SAAAT,GAQE,OAPAwC,IAAYqB,kBAAkB7D,GAC9B8D,YACEC,YAAI,2DAA4D,CAC9DlD,KAAM,IAAF,OAAMb,EAAKQ,MACfJ,aAAc8B,EAAO3B,SAGlBP,KAET,SAAAY,GAQE,MAPA4B,IAAYwB,gBAAgBnD,EAAKL,KAAMI,GACvCqD,YACEF,YAAI,6DAA8D,CAChElD,KAAM,IAAF,OAAMA,EAAKL,MACfJ,aAAc8B,EAAO3B,SAGnBK,KAKP,SAASsD,EAAW7D,EAAa6B,GAGtC,OAFAM,IAAY0B,WAAWhC,EAAOQ,QAEvBrC,EACJuD,eADI,iBACqB1B,EAAO3B,MAD5B,YACqC2B,EAAOQ,OAD5C,KACuD,CAC1DW,OAAQ,WAET5C,MACC,SAAAT,GAQE,OAPAwC,IAAY2B,kBAAkBjC,EAAOQ,OAAQ1C,GAC7C8D,YACEC,YAAI,+DAAgE,CAClElD,KAAM,IAAF,OAAMqB,EAAOQ,QACjBtC,aAAc8B,EAAO3B,SAGlBP,KAET,SAAAY,GAQE,MAPA4B,IAAY4B,gBAAgBlC,EAAOQ,OAAQ9B,GAC3CqD,YACEF,YAAI,+DAAgE,CAClElD,KAAM,IAAF,OAAMqB,EAAOQ,QACjBtC,aAAc8B,EAAO3B,SAGnBK,O,2pBCrLOyD,E,kLACnBtE,aAAe,SAACC,EAA2BC,EAAqBC,GAC9DmC,YAAe,EAAKlC,MAAMoB,SAAUvB,EAAiBC,EAAWC,I,EAGlEoE,wBAA0B,SAACtE,GACzBqC,YAAe,EAAKlC,MAAMF,UAAWD,I,+CAG9B,IACAI,EAAgBU,KAAKX,MAArBC,aAEP,OACE,YAAC,IAAMe,SAAP,KACE,qBACGG,YACC,yGAIJ,YAAC,IAAD,KACEiD,YAAajD,YAAE,eACfkD,YAAW,yBAAoBpE,EAAaI,KAAjC,WACXiE,UAAU,OACVlD,SAAUT,KAAKf,aACf2E,gBAAiB5D,KAAKwD,wBACtBK,gBAAc,EACdC,eAAa,oBACT9D,KAAKX,MAAM0E,WAEf,YAAC,IAAD,CACE1C,KAAK,OACL2C,MAAOxD,YAAE,aACTyD,YAAazD,YAAE,0CACf0D,KAAM1D,YAAE,mEACR2D,UAAQ,EACRC,SAAO,EACPC,0BAAwB,EACxBC,QAAQ,EACRC,eAAgBxD,Y,GAvCgBL,IAAMC,WAA7B4C,E","file":"CreateTeamModal.js","sourcesContent":["import React from 'react';\n\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport {createTeam} from 'app/actionCreators/teams';\nimport {Client} from 'app/api';\nimport CreateTeamForm from 'app/components/teams/createTeamForm';\nimport {t} from 'app/locale';\nimport {Organization, Team} from 'app/types';\nimport withApi from 'app/utils/withApi';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  onClose?: (team: Team) => void;\n} & ModalRenderProps;\n\nclass CreateTeamModal extends React.Component<Props> {\n  handleSubmit = (data: {slug: string}, onSuccess: Function, onError: Function) => {\n    const {organization, api} = this.props;\n    createTeam(api, data, {orgId: organization.slug})\n      .then((resp: Team) => {\n        this.handleSuccess(resp);\n        onSuccess(resp);\n      })\n      .catch((err: Error) => {\n        onError(err);\n      });\n  };\n\n  handleSuccess(team: Team) {\n    if (this.props.onClose) {\n      this.props.onClose(team);\n    }\n\n    this.props.closeModal();\n  }\n\n  render() {\n    const {Body, Header, closeModal, ...props} = this.props;\n\n    return (\n      <React.Fragment>\n        <Header closeButton onHide={closeModal}>\n          {t('Create Team')}\n        </Header>\n        <Body>\n          <CreateTeamForm {...props} onSubmit={this.handleSubmit} />\n        </Body>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withApi(CreateTeamModal);\n","import React from 'react';\n\nimport InputField from 'app/views/settings/components/forms/inputField';\n\ntype Props = InputField['props'];\n\nexport default function TextField(props: Omit<Props, 'type'>) {\n  return <InputField {...props} type=\"text\" />;\n}\n\nTextField.propTypes = {...InputField.propTypes};\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport TeamActions from 'app/actions/teamActions';\nimport {Client} from 'app/api';\nimport {tct} from 'app/locale';\nimport {Team} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport {uniqueId} from 'app/utils/guid';\n\ntype CallbackOptions = {\n  success?: Function;\n  error?: Function;\n};\n\nconst doCallback = (\n  params: CallbackOptions = {},\n  name: keyof CallbackOptions,\n  ...args: any[]\n) => {\n  callIfFunction(params[name], ...args);\n};\n\n/**\n * Note these are both slugs\n */\ntype OrgSlug = {orgId: string};\ntype OrgAndTeamSlug = OrgSlug & {teamId: string};\n\ntype TeamData = {data: Team};\n\n/**\n * This is the actual internal id, not username or email\n */\ntype MemberId = {memberId: string};\n\n// Fetch teams for org\nexport function fetchTeams(api: Client, params: OrgSlug, options: CallbackOptions) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function fetchTeamDetails(\n  api: Client,\n  params: OrgAndTeamSlug,\n  options?: CallbackOptions\n) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId: OrgAndTeamSlug['teamId'], data: Team) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(\n  api: Client,\n  params: OrgAndTeamSlug & TeamData,\n  options: CallbackOptions\n) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId ?? 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId || 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api: Client, team: Pick<Team, 'slug'>, params: OrgSlug) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api: Client, params: OrgAndTeamSlug) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import React from 'react';\n\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport slugify from 'app/utils/slugify';\nimport Form from 'app/views/settings/components/forms/form';\nimport TextField from 'app/views/settings/components/forms/textField';\n\ntype Payload = {\n  slug: string;\n};\n\ntype Props = {\n  organization: Organization;\n  onSubmit?: (data: Payload, onSuccess: Function, onError: Function) => void;\n  onSuccess?: (data: Payload) => void;\n  formProps?: Partial<typeof Form>;\n};\n\nexport default class CreateTeamForm extends React.Component<Props> {\n  handleSubmit = (data: Record<string, any>, onSuccess: Function, onError: Function) => {\n    callIfFunction(this.props.onSubmit, data as Payload, onSuccess, onError);\n  };\n\n  handleCreateTeamSuccess = (data: Payload) => {\n    callIfFunction(this.props.onSuccess, data);\n  };\n\n  render() {\n    const {organization} = this.props;\n\n    return (\n      <React.Fragment>\n        <p>\n          {t(\n            'Members of a team have access to specific areas, such as a new release or a new application feature.'\n          )}\n        </p>\n\n        <Form\n          submitLabel={t('Create Team')}\n          apiEndpoint={`/organizations/${organization.slug}/teams/`}\n          apiMethod=\"POST\"\n          onSubmit={this.handleSubmit}\n          onSubmitSuccess={this.handleCreateTeamSuccess}\n          requireChanges\n          data-test-id=\"create-team-form\"\n          {...this.props.formProps}\n        >\n          <TextField\n            name=\"slug\"\n            label={t('Team Name')}\n            placeholder={t('e.g. operations, web-frontend, desktop')}\n            help={t('May contain lowercase letters, numbers, dashes and underscores.')}\n            required\n            stacked\n            flexibleControlStateSize\n            inline={false}\n            transformInput={slugify}\n          />\n        </Form>\n      </React.Fragment>\n    );\n  }\n}\n"],"sourceRoot":""}