{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/admin/adminUserEdit.jsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","JsonForm","state","highlighted","getLocation","props","context","hash","scrollToHash","nextProps","setState","toHash","scrollToElement","sanitizeQuerySelector","decodeURIComponent","align","offset","err","Sentry","fields","fieldsWithVisibleProp","filter","field","defined","visible","length","additionalFieldProps","every","formPanelProps","shouldDisplayForm","renderFooter","renderHeader","access","forms","disabled","features","otherProps","location","map","formGroup","i","Fragment","key","renderForm","React","Component","contextTypes","PropTypes","object","defaultProps","FormPanel","id","undefined","defaultValue","fieldWithoutDefaultValue","disabledReason","name","userEditForm","type","required","label","t","help","REMOVE_BUTTON_LABEL","disable","delete","RemoveUserModal","deleteType","onRemove","closeModal","user","tct","email","value","onChange","choices","ModalFooter","priority","onClick","AdminUserEdit","removeUser","actionTypes","deleteUser","deactivateUser","formModel","FormModel","userEndpoint","api","requestPromise","method","data","hardDelete","organizations","addSuccessMessage","browserHistory","replace","isActive","response","setInitialData","model","initialData","apiMethod","apiEndpoint","requireChanges","onSubmitError","addErrorMessage","onSubmitSuccess","extraButton","openModal","opts","style","marginLeft","space","params","p","theme","border"],"mappings":"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","file":"AdminUserEdit.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\nimport PropTypes from 'prop-types';\nimport {Box} from 'reflexbox'; // eslint-disable-line no-restricted-imports\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FieldFromConfig from './fieldFromConfig';\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n  location?: Location;\n} & DefaultProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype Context = {\n  location?: Location;\n};\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  static propTypes = {\n    /**\n     * Fields that are grouped by \"section\"\n     */\n    forms: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        fields: PropTypes.arrayOf(\n          PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])\n        ),\n      })\n    ),\n\n    /**\n     * If `forms` is not defined, `title` + `fields` must be required.\n     * Allows more fine grain control of title/fields\n     */\n    fields: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])\n    ),\n    /**\n     * Panel title if `forms` is not defined\n     */\n    title: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    access: PropTypes.object,\n    features: PropTypes.object,\n    renderFooter: PropTypes.func,\n    /**\n     * Renders inside of PanelBody\n     */\n    renderHeader: PropTypes.func,\n    /**\n     * Disables the entire form\n     */\n    disabled: PropTypes.bool,\n  };\n\n  static contextTypes = {\n    location: PropTypes.object,\n  };\n\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  state: State = {\n    highlighted: getLocation(this.props, this.context).hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (\n      getLocation(this.props, this.context).hash !==\n      getLocation(nextProps, this.context).hash\n    ) {\n      const hash = getLocation(nextProps, this.context).hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    const hash = toHash || getLocation(this.props, this.context).hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <Box {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </Box>\n    );\n  }\n}\n\nexport default JsonForm;\n\nfunction getLocation(props: Props, context: Context): Location | {hash?: string} {\n  return props.location || context.location || {};\n}\n","import React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  additionalFieldProps: {[key: string]: any};\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import React from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {openModal} from 'app/actionCreators/modal';\nimport Button from 'app/components/button';\nimport {t, tct} from 'app/locale';\nimport SentryTypes from 'app/sentryTypes';\nimport space from 'app/styles/space';\nimport AsyncView from 'app/views/asyncView';\nimport RadioGroup from 'app/views/settings/components/forms/controls/radioGroup';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport FormModel from 'app/views/settings/components/forms/model';\n\nconst userEditForm = {\n  title: 'User details',\n  fields: [\n    {\n      name: 'name',\n      type: 'string',\n      required: true,\n      label: t('Name'),\n    },\n    {\n      name: 'username',\n      type: 'string',\n      required: true,\n      label: t('Username'),\n      help: t('The username is the unique id of the user in the system'),\n    },\n    {\n      name: 'email',\n      type: 'string',\n      required: true,\n      label: t('Email'),\n      help: t('The users primary email address'),\n    },\n    {\n      name: 'isActive',\n      type: 'boolean',\n      required: true,\n      label: t('Active'),\n      help: t(\n        'Designates whether this user should be treated as active. Unselect this instead of deleting accounts.'\n      ),\n    },\n    {\n      name: 'isStaff',\n      type: 'boolean',\n      required: true,\n      label: t('Admin'),\n      help: t('Designates whether this user can perform administrative functions.'),\n    },\n    {\n      name: 'isSuperuser',\n      type: 'boolean',\n      required: true,\n      label: t('Superuser'),\n      help: t(\n        'Designates whether this user has all permissions without explicitly assigning them.'\n      ),\n    },\n  ],\n};\n\nconst REMOVE_BUTTON_LABEL = {\n  disable: t('Disable User'),\n  delete: t('Permanently Delete User'),\n};\n\nclass RemoveUserModal extends React.Component {\n  static propTypes = {\n    user: SentryTypes.User,\n    onRemove: PropTypes.func,\n    closeModal: PropTypes.func,\n  };\n\n  state = {\n    deleteType: 'disable',\n  };\n\n  onRemove = () => {\n    this.props.onRemove(this.state.deleteType);\n    this.props.closeModal();\n  };\n\n  render() {\n    const {user} = this.props;\n    const {deleteType} = this.state;\n\n    return (\n      <React.Fragment>\n        <p>{tct('Removing user [user]', {user: <strong>{user.email}</strong>})}</p>\n        <RadioGroup\n          value={deleteType}\n          onChange={type => this.setState({deleteType: type})}\n          choices={[\n            ['disable', t('Disable the account.')],\n            ['delete', t('Permanently remove the user and their data.')],\n          ]}\n        />\n        <ModalFooter>\n          <Button priority=\"danger\" onClick={this.onRemove}>\n            {REMOVE_BUTTON_LABEL[deleteType]}\n          </Button>\n          <Button onClick={this.props.closeModal}>{t('Nevermind')}</Button>\n        </ModalFooter>\n      </React.Fragment>\n    );\n  }\n}\n\nclass AdminUserEdit extends AsyncView {\n  get userEndpoint() {\n    const {params} = this.props;\n    return `/users/${params.id}/`;\n  }\n\n  getEndpoints() {\n    return [['user', this.userEndpoint]];\n  }\n\n  async deleteUser() {\n    await this.api.requestPromise(this.userEndpoint, {\n      method: 'DELETE',\n      data: {hardDelete: true, organizations: []},\n    });\n\n    addSuccessMessage(t(\"%s's account has been deleted.\", this.state.user.email));\n    browserHistory.replace('/manage/users/');\n  }\n\n  async deactivateUser() {\n    const response = await this.api.requestPromise(this.userEndpoint, {\n      method: 'PUT',\n      data: {isActive: false},\n    });\n\n    this.setState({user: response});\n    this.formModel.setInitialData(response);\n    addSuccessMessage(t(\"%s's account has been deactivated.\", response.email));\n  }\n\n  removeUser = actionTypes =>\n    actionTypes === 'delete' ? this.deleteUser() : this.deactivateUser();\n\n  formModel = new FormModel();\n\n  renderBody() {\n    const {user} = this.state;\n    const openDeleteModal = () =>\n      openModal(opts => (\n        <RemoveUserModal user={user} onRemove={this.removeUser} {...opts} />\n      ));\n\n    return (\n      <React.Fragment>\n        <h3>{t('Users')}</h3>\n        <p>{t('Editing user: %s', user.email)}</p>\n        <Form\n          model={this.formModel}\n          initialData={user}\n          apiMethod=\"PUT\"\n          apiEndpoint={this.userEndpoint}\n          requireChanges\n          onSubmitError={addErrorMessage}\n          onSubmitSuccess={data => {\n            this.setState({user: data});\n            addSuccessMessage('User account updated.');\n          }}\n          extraButton={\n            <Button\n              type=\"button\"\n              onClick={openDeleteModal}\n              style={{marginLeft: space(1)}}\n              priority=\"danger\"\n            >\n              {t('Remove User')}\n            </Button>\n          }\n        >\n          <JsonForm forms={[userEditForm]} />\n        </Form>\n      </React.Fragment>\n    );\n  }\n}\n\nconst ModalFooter = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(1)};\n  justify-content: end;\n  padding: 20px 30px;\n  margin: 20px -30px -30px;\n  border-top: 1px solid ${p => p.theme.border};\n`;\n\nexport default AdminUserEdit;\n"],"sourceRoot":""}