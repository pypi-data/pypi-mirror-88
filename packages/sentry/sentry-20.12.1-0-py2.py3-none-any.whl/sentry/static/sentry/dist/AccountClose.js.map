{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/views/settings/account/accountClose.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","UnstyledSettingsPageHeader","props","icon","subtitle","action","tabs","noTitleStyles","TitleAndActions","TitleWrapper","Icon","Title","styled","Subtitle","Action","React","Component","defaultProps","p","space","theme","gray400","fontSizeLarge","SettingsPageHeader","leaveRedirect","window","location","href","Important","GoodbyeModalContent","Header","Body","Footer","t","AccountClose","handleChange","isSingle","event","slug","checked","target","setState","state","set","orgsToRemove","Set","singleOwnerOrgs","add","handleRemoveAccount","a","orgs","Array","from","addLoadingMessage","api","requestPromise","method","data","organizations","openModal","onClose","setTimeout","addErrorMessage","type","size","tct","strong","map","organization","singleOwner","key","style","marginRight","value","onChange","bind","name","has","disabled","priority","message","onConfirm","filter"],"mappings":"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","file":"AccountClose.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {HeaderTitle} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\ntype Props = {\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // The title\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n  className?: string;\n\n  action?: React.ReactNode;\n  tabs?: React.ReactNode;\n};\n\nclass UnstyledSettingsPageHeader extends React.Component<Props> {\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, subtitle, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          <TitleWrapper>\n            {icon && <Icon>{icon}</Icon>}\n            {title && (\n              <Title tabs={tabs} styled={noTitleStyles}>\n                <HeaderTitle>{title}</HeaderTitle>\n                {subtitle && <Subtitle>{subtitle}</Subtitle>}\n              </Title>\n            )}\n          </TitleWrapper>\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\nconst TitleWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p =>\n    p.tabs\n      ? `${space(4)} ${space(2)} ${space(2)} 0`\n      : `${space(4)} ${space(2)} ${space(4)} 0`};\n`;\nconst Subtitle = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-weight: 400;\n  font-size: ${p => p.theme.fontSizeLarge};\n  padding: ${space(1.5)} 0 ${space(3)};\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst SettingsPageHeader = styled(UnstyledSettingsPageHeader)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default SettingsPageHeader;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addLoadingMessage} from 'app/actionCreators/indicator';\nimport {ModalRenderProps, openModal} from 'app/actionCreators/modal';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport {\n  Panel,\n  PanelAlert,\n  PanelBody,\n  PanelHeader,\n  PanelItem,\n} from 'app/components/panels';\nimport {IconFlag} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport {Organization} from 'app/types';\nimport AsyncView from 'app/views/asyncView';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nconst BYE_URL = '/';\nconst leaveRedirect = () => (window.location.href = BYE_URL);\n\nconst Important = styled('div')`\n  font-weight: bold;\n  font-size: 1.2em;\n`;\n\nconst GoodbyeModalContent = ({Header, Body, Footer}: ModalRenderProps) => (\n  <div>\n    <Header>{t('Closing Account')}</Header>\n    <Body>\n      <TextBlock>\n        {t('Your account has been deactivated and scheduled for removal.')}\n      </TextBlock>\n      <TextBlock>\n        {t('Thanks for using Sentry! We hope to see you again soon!')}\n      </TextBlock>\n    </Body>\n    <Footer>\n      <Button href={BYE_URL}>{t('Goodbye')}</Button>\n    </Footer>\n  </div>\n);\n\ntype OwnedOrg = {\n  organization: Organization;\n  singleOwner: boolean;\n};\n\ntype Props = AsyncView['props'];\n\ntype State = AsyncView['state'] & {\n  organizations: OwnedOrg[] | null;\n  /**\n   * Org slugs that will be removed\n   */\n  orgsToRemove: Set<string> | null;\n};\n\nclass AccountClose extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['organizations', '/organizations/?owner=1']];\n  }\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      orgsToRemove: null,\n    };\n  }\n\n  get singleOwnerOrgs() {\n    return this.state.organizations\n      ?.filter(({singleOwner}) => singleOwner)\n      ?.map(({organization}) => organization.slug);\n  }\n\n  handleChange = (\n    {slug}: Organization,\n    isSingle: boolean,\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const checked = event.target.checked;\n\n    // Can't unselect an org where you are the single owner\n    if (isSingle) {\n      return;\n    }\n\n    this.setState(state => {\n      const set = state.orgsToRemove || new Set(this.singleOwnerOrgs);\n      if (checked) {\n        set.add(slug);\n      } else {\n        set.delete(slug);\n      }\n\n      return {orgsToRemove: set};\n    });\n  };\n\n  handleRemoveAccount = async () => {\n    const {orgsToRemove} = this.state;\n    const orgs = orgsToRemove === null ? this.singleOwnerOrgs : Array.from(orgsToRemove);\n\n    addLoadingMessage('Closing account\\u2026');\n\n    try {\n      await this.api.requestPromise('/users/me/', {\n        method: 'DELETE',\n        data: {organizations: orgs},\n      });\n\n      openModal(GoodbyeModalContent, {\n        onClose: leaveRedirect,\n      });\n\n      // Redirect after 10 seconds\n      setTimeout(leaveRedirect, 10000);\n    } catch {\n      addErrorMessage('Error closing account');\n    }\n  };\n\n  renderBody() {\n    const {organizations, orgsToRemove} = this.state;\n\n    return (\n      <div>\n        <SettingsPageHeader title=\"Close Account\" />\n\n        <TextBlock>\n          {t('This will permanently remove all associated data for your user')}.\n        </TextBlock>\n\n        <Alert type=\"error\" icon={<IconFlag size=\"md\" />}>\n          <Important>\n            {t('Closing your account is permanent and cannot be undone')}!\n          </Important>\n        </Alert>\n\n        <Panel>\n          <PanelHeader>{t('Remove the following organizations')}</PanelHeader>\n          <PanelBody>\n            <PanelAlert type=\"info\">\n              {t(\n                'Ownership will remain with other organization owners if an organization is not deleted.'\n              )}\n              <br />\n              {tct(\n                \"Boxes which can't be unchecked mean that you are the only organization owner and the organization [strong:will be deleted].\",\n                {strong: <strong />}\n              )}\n            </PanelAlert>\n\n            {organizations?.map(({organization, singleOwner}) => (\n              <PanelItem key={organization.slug}>\n                <label>\n                  <input\n                    style={{marginRight: 6}}\n                    type=\"checkbox\"\n                    value={organization.slug}\n                    onChange={this.handleChange.bind(this, organization, singleOwner)}\n                    name=\"organizations\"\n                    checked={\n                      orgsToRemove === null\n                        ? singleOwner\n                        : orgsToRemove.has(organization.slug)\n                    }\n                    disabled={singleOwner}\n                  />\n                  {organization.slug}\n                </label>\n              </PanelItem>\n            ))}\n          </PanelBody>\n        </Panel>\n\n        <Confirm\n          priority=\"danger\"\n          message={t(\n            'This is permanent and cannot be undone, are you really sure you want to do this?'\n          )}\n          onConfirm={this.handleRemoveAccount}\n        >\n          <Button priority=\"danger\">{t('Close Account')}</Button>\n        </Confirm>\n      </div>\n    );\n  }\n}\n\nexport default AccountClose;\n"],"sourceRoot":""}