{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/actionCreators/teams.tsx","webpack:///./app/data/forms/teamSettingsFields.tsx","webpack:///./app/views/settings/organizationTeams/teamSettings/model.tsx","webpack:///./app/views/settings/organizationTeams/teamSettings/index.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","JsonForm","state","highlighted","getLocation","props","context","hash","scrollToHash","nextProps","setState","toHash","scrollToElement","sanitizeQuerySelector","decodeURIComponent","align","offset","err","Sentry","fields","fieldsWithVisibleProp","filter","field","defined","visible","length","additionalFieldProps","every","formPanelProps","shouldDisplayForm","renderFooter","renderHeader","access","forms","disabled","features","otherProps","location","map","formGroup","i","Fragment","key","renderForm","React","Component","contextTypes","PropTypes","object","defaultProps","FormPanel","id","undefined","defaultValue","fieldWithoutDefaultValue","disabledReason","name","slugify","str","toLowerCase","replace","doCallback","params","args","callIfFunction","fetchTeamDetails","api","options","TeamActions","fetchDetails","teamId","request","orgId","success","data","fetchDetailsSuccess","error","fetchDetailsError","updateTeamSuccess","updateSuccess","updateTeam","endpoint","update","method","updateError","joinTeam","memberId","uniqueId","leaveTeam","createTeam","team","requestPromise","then","createTeamSuccess","addSuccessMessage","tct","slug","organization","createTeamError","addErrorMessage","removeTeam","removeTeamSuccess","removeTeamError","route","formGroups","type","required","label","t","placeholder","help","has","transformInput","saveOnBlur","saveMessageAlertType","saveMessage","TeamFormModel","Promise","resolve","reject","FormModel","TeamSettings","model","TeamModel","handleSubmitSuccess","resp","router","getValue","loading","handleRemoveTeam","a","Set","apiMethod","allowUndo","onSubmitSuccess","onSubmitError","initialData","teamSettingsFields","onConfirm","priority","message","icon","SentryTypes","Organization"],"mappings":"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","file":"TeamSettings.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\nimport PropTypes from 'prop-types';\nimport {Box} from 'reflexbox'; // eslint-disable-line no-restricted-imports\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FieldFromConfig from './fieldFromConfig';\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n  location?: Location;\n} & DefaultProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype Context = {\n  location?: Location;\n};\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  static propTypes = {\n    /**\n     * Fields that are grouped by \"section\"\n     */\n    forms: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        fields: PropTypes.arrayOf(\n          PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])\n        ),\n      })\n    ),\n\n    /**\n     * If `forms` is not defined, `title` + `fields` must be required.\n     * Allows more fine grain control of title/fields\n     */\n    fields: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])\n    ),\n    /**\n     * Panel title if `forms` is not defined\n     */\n    title: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    access: PropTypes.object,\n    features: PropTypes.object,\n    renderFooter: PropTypes.func,\n    /**\n     * Renders inside of PanelBody\n     */\n    renderHeader: PropTypes.func,\n    /**\n     * Disables the entire form\n     */\n    disabled: PropTypes.bool,\n  };\n\n  static contextTypes = {\n    location: PropTypes.object,\n  };\n\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  state: State = {\n    highlighted: getLocation(this.props, this.context).hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (\n      getLocation(this.props, this.context).hash !==\n      getLocation(nextProps, this.context).hash\n    ) {\n      const hash = getLocation(nextProps, this.context).hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    const hash = toHash || getLocation(this.props, this.context).hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <Box {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </Box>\n    );\n  }\n}\n\nexport default JsonForm;\n\nfunction getLocation(props: Props, context: Context): Location | {hash?: string} {\n  return props.location || context.location || {};\n}\n","import React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  additionalFieldProps: {[key: string]: any};\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport TeamActions from 'app/actions/teamActions';\nimport {Client} from 'app/api';\nimport {tct} from 'app/locale';\nimport {Team} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport {uniqueId} from 'app/utils/guid';\n\ntype CallbackOptions = {\n  success?: Function;\n  error?: Function;\n};\n\nconst doCallback = (\n  params: CallbackOptions = {},\n  name: keyof CallbackOptions,\n  ...args: any[]\n) => {\n  callIfFunction(params[name], ...args);\n};\n\n/**\n * Note these are both slugs\n */\ntype OrgSlug = {orgId: string};\ntype OrgAndTeamSlug = OrgSlug & {teamId: string};\n\ntype TeamData = {data: Team};\n\n/**\n * This is the actual internal id, not username or email\n */\ntype MemberId = {memberId: string};\n\n// Fetch teams for org\nexport function fetchTeams(api: Client, params: OrgSlug, options: CallbackOptions) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function fetchTeamDetails(\n  api: Client,\n  params: OrgAndTeamSlug,\n  options?: CallbackOptions\n) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId: OrgAndTeamSlug['teamId'], data: Team) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(\n  api: Client,\n  params: OrgAndTeamSlug & TeamData,\n  options: CallbackOptions\n) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId ?? 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId || 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api: Client, team: Pick<Team, 'slug'>, params: OrgSlug) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api: Client, params: OrgAndTeamSlug) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import {t} from 'app/locale';\nimport slugify from 'app/utils/slugify';\nimport {JsonFormObject} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/teams/:teamId/settings/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Team Settings',\n    fields: [\n      {\n        name: 'slug',\n        type: 'string',\n        required: true,\n        label: t('Name'),\n        placeholder: 'e.g. api-team',\n        help: t('A unique ID used to identify the team'),\n        disabled: ({access}) => !access.has('team:write'),\n        transformInput: slugify,\n\n        saveOnBlur: false,\n        saveMessageAlertType: 'info',\n        saveMessage: t('You will be redirected to the new team slug after saving'),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","import {updateTeam} from 'app/actionCreators/teams';\nimport FormModel from 'app/views/settings/components/forms/model';\n\nclass TeamFormModel extends FormModel {\n  public orgId: string;\n  public teamId: string;\n\n  constructor(orgId: string, teamId: string) {\n    super();\n    this.orgId = orgId;\n    this.teamId = teamId;\n  }\n\n  doApiRequest({data}) {\n    return new Promise((resolve, reject) =>\n      updateTeam(\n        this.api,\n        {\n          orgId: this.orgId,\n          teamId: this.teamId,\n          data,\n        },\n        {\n          success: resolve,\n          error: reject,\n        }\n      )\n    );\n  }\n}\n\nexport default TeamFormModel;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport PropTypes from 'prop-types';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {removeTeam, updateTeamSuccess} from 'app/actionCreators/teams';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport {Panel, PanelHeader} from 'app/components/panels';\nimport teamSettingsFields from 'app/data/forms/teamSettingsFields';\nimport {IconDelete} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport SentryTypes from 'app/sentryTypes';\nimport {Scope, Team} from 'app/types';\nimport AsyncView from 'app/views/asyncView';\nimport Field from 'app/views/settings/components/forms/field';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport FormModel from 'app/views/settings/components/forms/model';\n\nimport TeamModel from './model';\n\ntype Props = {\n  team: Team;\n} & RouteComponentProps<{orgId: string; teamId: string}, {}>;\n\ntype State = AsyncView['state'];\n\nexport default class TeamSettings extends AsyncView<Props, State> {\n  static contextTypes = {\n    router: PropTypes.object,\n    location: PropTypes.object,\n    organization: SentryTypes.Organization,\n  };\n\n  model = new TeamModel(this.props.params.orgId, this.props.params.teamId);\n\n  getTitle() {\n    return 'Team Settings';\n  }\n\n  getEndpoints() {\n    return [];\n  }\n\n  handleSubmitSuccess = (resp: any, model: FormModel, id?: string) => {\n    updateTeamSuccess(resp.slug, resp);\n    if (id === 'slug') {\n      addSuccessMessage(t('Team name changed'));\n      this.props.router.replace(\n        `/settings/${this.props.params.orgId}/teams/${model.getValue(id)}/settings/`\n      );\n      this.setState({loading: true});\n    }\n  };\n\n  handleRemoveTeam = async () => {\n    await removeTeam(this.api, this.props.params);\n    this.props.router.replace(`/settings/${this.props.params.orgId}/teams/`);\n  };\n\n  renderBody() {\n    const {location, organization} = this.context;\n    const {team} = this.props;\n\n    const access = new Set<Scope>(organization.access);\n\n    return (\n      <React.Fragment>\n        <Form\n          model={this.model}\n          apiMethod=\"PUT\"\n          saveOnBlur\n          allowUndo\n          onSubmitSuccess={this.handleSubmitSuccess}\n          onSubmitError={() => addErrorMessage(t('Unable to save change'))}\n          initialData={{\n            name: team.name,\n            slug: team.slug,\n          }}\n        >\n          <JsonForm access={access} location={location} forms={teamSettingsFields} />\n        </Form>\n\n        <Panel>\n          <PanelHeader>{t('Remove Team')}</PanelHeader>\n          <Field\n            help={t(\n              \"This may affect team members' access to projects and associated alert delivery.\"\n            )}\n          >\n            <div>\n              <Confirm\n                disabled={!access.has('team:admin')}\n                onConfirm={this.handleRemoveTeam}\n                priority=\"danger\"\n                message={tct('Are you sure you want to remove the team [team]?', {\n                  team: `#${team.slug}`,\n                })}\n              >\n                <Button\n                  icon={<IconDelete />}\n                  priority=\"danger\"\n                  disabled={!access.has('team:admin')}\n                >\n                  {t('Remove Team')}\n                </Button>\n              </Confirm>\n            </div>\n          </Field>\n        </Panel>\n      </React.Fragment>\n    );\n  }\n}\n"],"sourceRoot":""}