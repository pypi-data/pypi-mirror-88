{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/project/projectOwnership/index.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","UnstyledSettingsPageHeader","props","icon","subtitle","action","tabs","noTitleStyles","TitleAndActions","TitleWrapper","Icon","Title","styled","Subtitle","Action","React","Component","defaultProps","p","space","theme","gray400","fontSizeLarge","SettingsPageHeader","routeTitleGen","routeName","orgSlug","withSentry","tmpl","JsonForm","state","highlighted","getLocation","context","hash","scrollToHash","nextProps","setState","toHash","scrollToElement","sanitizeQuerySelector","decodeURIComponent","align","offset","err","Sentry","fields","fieldsWithVisibleProp","filter","field","defined","visible","length","additionalFieldProps","every","formPanelProps","shouldDisplayForm","renderFooter","renderHeader","access","forms","disabled","features","otherProps","location","map","formGroup","i","Fragment","key","renderForm","contextTypes","PropTypes","object","FormPanel","id","undefined","defaultValue","fieldWithoutDefaultValue","disabledReason","name","PermissionAlert","hasAccess","type","size","t","ProjectOwnership","project","slug","organization","ownership","includes","to","pathname","query","withPadding","Block","tct","pound","CodeBlock","initialText","raw","apiEndpoint","apiMethod","saveOnBlur","initialData","fallthrough","hideFooter","label","help","autoAssignment","TextBlock"],"mappings":"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","file":"ProjectOwnership.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {HeaderTitle} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\ntype Props = {\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // The title\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n  className?: string;\n\n  action?: React.ReactNode;\n  tabs?: React.ReactNode;\n};\n\nclass UnstyledSettingsPageHeader extends React.Component<Props> {\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, subtitle, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          <TitleWrapper>\n            {icon && <Icon>{icon}</Icon>}\n            {title && (\n              <Title tabs={tabs} styled={noTitleStyles}>\n                <HeaderTitle>{title}</HeaderTitle>\n                {subtitle && <Subtitle>{subtitle}</Subtitle>}\n              </Title>\n            )}\n          </TitleWrapper>\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\nconst TitleWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p =>\n    p.tabs\n      ? `${space(4)} ${space(2)} ${space(2)} 0`\n      : `${space(4)} ${space(2)} ${space(4)} 0`};\n`;\nconst Subtitle = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-weight: 400;\n  font-size: ${p => p.theme.fontSizeLarge};\n  padding: ${space(1.5)} 0 ${space(3)};\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst SettingsPageHeader = styled(UnstyledSettingsPageHeader)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default SettingsPageHeader;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true\n): string {\n  const tmpl = `${routeName} - ${orgSlug}`;\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import React from 'react';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\nimport PropTypes from 'prop-types';\nimport {Box} from 'reflexbox'; // eslint-disable-line no-restricted-imports\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FieldFromConfig from './fieldFromConfig';\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n  location?: Location;\n} & DefaultProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype Context = {\n  location?: Location;\n};\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  static propTypes = {\n    /**\n     * Fields that are grouped by \"section\"\n     */\n    forms: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        fields: PropTypes.arrayOf(\n          PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])\n        ),\n      })\n    ),\n\n    /**\n     * If `forms` is not defined, `title` + `fields` must be required.\n     * Allows more fine grain control of title/fields\n     */\n    fields: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])\n    ),\n    /**\n     * Panel title if `forms` is not defined\n     */\n    title: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    access: PropTypes.object,\n    features: PropTypes.object,\n    renderFooter: PropTypes.func,\n    /**\n     * Renders inside of PanelBody\n     */\n    renderHeader: PropTypes.func,\n    /**\n     * Disables the entire form\n     */\n    disabled: PropTypes.bool,\n  };\n\n  static contextTypes = {\n    location: PropTypes.object,\n  };\n\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  state: State = {\n    highlighted: getLocation(this.props, this.context).hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (\n      getLocation(this.props, this.context).hash !==\n      getLocation(nextProps, this.context).hash\n    ) {\n      const hash = getLocation(nextProps, this.context).hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    const hash = toHash || getLocation(this.props, this.context).hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <Box {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </Box>\n    );\n  }\n}\n\nexport default JsonForm;\n\nfunction getLocation(props: Props, context: Context): Location | {hash?: string} {\n  return props.location || context.location || {};\n}\n","import React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  additionalFieldProps: {[key: string]: any};\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport {IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" icon={<IconWarning size=\"xs\" />} {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nPermissionAlert.propTypes = {\n  access: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport default PermissionAlert;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport {Organization, Project} from 'app/types';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport AsyncView from 'app/views/asyncView';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport PermissionAlert from 'app/views/settings/project/permissionAlert';\nimport OwnerInput from 'app/views/settings/project/projectOwnership/ownerInput';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n} & RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\ntype State = {\n  ownership: null | any;\n} & AsyncView['state'];\n\nclass ProjectOwnership extends AsyncView<Props, State> {\n  getTitle() {\n    const {project} = this.props;\n    return routeTitleGen(t('Issue Owners'), project.slug, false);\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization, project} = this.props;\n    return [['ownership', `/projects/${organization.slug}/${project.slug}/ownership/`]];\n  }\n\n  renderBody() {\n    const {project, organization} = this.props;\n    const {ownership} = this.state;\n\n    const disabled = !organization.access.includes('project:write');\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader\n          title={t('Issue Owners')}\n          action={\n            <Button\n              to={{\n                pathname: `/organizations/${organization.slug}/issues/`,\n                query: {project: project.id},\n              }}\n              size=\"small\"\n            >\n              {t('View Issues')}\n            </Button>\n          }\n        />\n        <PermissionAlert />\n        <Panel>\n          <PanelHeader>{t('Ownership Rules')}</PanelHeader>\n          <PanelBody withPadding>\n            <Block>\n              {t(\n                'Define rules here to configure automated ownership for new issues and direct email alerts'\n              )}\n            </Block>\n            <Block>\n              {t('Rules follow the pattern: ')}\n              <code>type:glob owner owner</code>\n            </Block>\n\n            <Block>\n              {tct(\n                'Owners can be team identifiers starting with [pound], or user emails',\n                {\n                  pound: <code>#</code>,\n                }\n              )}\n            </Block>\n\n            <Block>\n              {t('Globbing Syntax:')}\n              <CodeBlock>\n                {`* matches everything\n? matches any single character`}\n              </CodeBlock>\n            </Block>\n\n            <Block>\n              {t('Examples:')}\n              <CodeBlock>\n                path:src/example/pipeline/* person@sentry.io #infrastructure\n                {'\\n'}\n                url:http://example.com/settings/* #product\n                {'\\n'}\n                tags.sku_class:enterprise #enterprise\n              </CodeBlock>\n            </Block>\n            <OwnerInput\n              {...this.props}\n              disabled={disabled}\n              initialText={ownership.raw || ''}\n            />\n          </PanelBody>\n        </Panel>\n\n        <Form\n          apiEndpoint={`/projects/${organization.slug}/${project.slug}/ownership/`}\n          apiMethod=\"PUT\"\n          saveOnBlur\n          initialData={{fallthrough: ownership.fallthrough}}\n          hideFooter\n        >\n          <JsonForm\n            forms={[\n              {\n                title: t('If ownership cannot be determined for an issue...'),\n                fields: [\n                  {\n                    name: 'fallthrough',\n                    type: 'boolean',\n                    label: t('All users with access to this project are issue owners'),\n                    help: t(\n                      'Issue owners will receive notifications for issues they are responsible for.'\n                    ),\n                    disabled,\n                  },\n                ],\n              },\n            ]}\n          />\n        </Form>\n\n        <Form\n          apiEndpoint={`/projects/${organization.slug}/${project.slug}/ownership/`}\n          apiMethod=\"PUT\"\n          saveOnBlur\n          initialData={{autoAssignment: ownership.autoAssignment}}\n          hideFooter\n        >\n          <JsonForm\n            forms={[\n              {\n                title: t('If a new event matches any of the ownership rules...'),\n                fields: [\n                  {\n                    name: 'autoAssignment',\n                    type: 'boolean',\n                    label: t('The issue is assigned to the team or user'),\n                    help: t('Issue owners will be automatically assigned.'),\n                    disabled,\n                  },\n                ],\n              },\n            ]}\n          />\n        </Form>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ProjectOwnership;\n\nconst Block = styled(TextBlock)`\n  margin-bottom: 16px;\n`;\n\nconst CodeBlock = styled('pre')`\n  word-break: break-all;\n  white-space: pre-wrap;\n`;\n"],"sourceRoot":""}