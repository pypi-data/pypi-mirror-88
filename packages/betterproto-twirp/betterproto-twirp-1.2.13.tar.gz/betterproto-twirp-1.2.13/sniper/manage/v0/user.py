# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: manage/v0/user.proto
# plugin: python-betterproto
import logging
from typing import List

import allure
from dataclasses import dataclass

import betterproto


@dataclass
class EditBlackHouseUserReq(betterproto.Message):
    id: int = betterproto.int64_field(1)
    uid: int = betterproto.int64_field(2)
    expire_time: str = betterproto.string_field(3)


@dataclass
class DelBlackHouseUserReq(betterproto.Message):
    # @gt: 0
    id: int = betterproto.int64_field(1)
    # @gt: 0
    uid: int = betterproto.int64_field(2)


@dataclass
class BlackHouseDetail(betterproto.Message):
    id: int = betterproto.int64_field(1)
    uid: int = betterproto.int64_field(2)
    # 封禁标题
    title: str = betterproto.string_field(3)
    # 封禁原因
    reason: str = betterproto.string_field(4)
    # 封禁天数
    days: int = betterproto.int32_field(5)
    # 操作时间
    ctime: str = betterproto.string_field(6)
    # 解禁时间
    expire_time: str = betterproto.string_field(7)


@dataclass
class BlackHouseDetailData(betterproto.Message):
    list: List["BlackHouseDetail"] = betterproto.message_field(2)


@dataclass
class BlackHouseUserInfo(betterproto.Message):
    id: int = betterproto.int64_field(1)
    uid: int = betterproto.int64_field(2)
    nick_name: str = betterproto.string_field(3)
    num: int = betterproto.int32_field(4)
    expire_time: str = betterproto.string_field(5)


@dataclass
class BlackHouseUserData(betterproto.Message):
    total: int = betterproto.int32_field(1)
    list: List["BlackHouseUserInfo"] = betterproto.message_field(2)


@dataclass
class ListBlackHouseUserResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "BlackHouseUserData" = betterproto.message_field(3)


@dataclass
class BlackHouseDetailResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "BlackHouseDetailData" = betterproto.message_field(3)


@dataclass
class ListBlackHouseUserReq(betterproto.Message):
    page_num: int = betterproto.int32_field(1)
    page_size: int = betterproto.int32_field(2)
    uid: int = betterproto.int64_field(3)


@dataclass
class BlackHouseDetailReq(betterproto.Message):
    # 按 uid 查询
    uid: int = betterproto.int64_field(1)


@dataclass
class BlackHousePlanInfo(betterproto.Message):
    title: str = betterproto.string_field(1)
    reason: str = betterproto.string_field(2)
    days: int = betterproto.int32_field(3)
    is_notice: bool = betterproto.bool_field(4)
    c_user: str = betterproto.string_field(5)
    ctime: str = betterproto.string_field(6)


@dataclass
class BlackHousePlanData(betterproto.Message):
    # 总页数
    total: int = betterproto.int32_field(1)
    list: List["BlackHousePlanInfo"] = betterproto.message_field(2)


@dataclass
class ListBlackHousePlanResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "BlackHousePlanData" = betterproto.message_field(3)


@dataclass
class ListBlackHousePlanReq(betterproto.Message):
    page_num: int = betterproto.int32_field(1)
    page_size: int = betterproto.int32_field(2)


@dataclass
class DefaultEmptyData(betterproto.Message):
    pass


@dataclass
class DefaultResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "DefaultEmptyData" = betterproto.message_field(3)


@dataclass
class AddBlackHousePlanReq(betterproto.Message):
    # 封禁标题
    title: str = betterproto.string_field(1)
    # 封禁原因
    reason: str = betterproto.string_field(2)
    # 封禁时长 @gt: 0
    days: int = betterproto.int32_field(3)
    # 是否发私信通知
    is_notice: bool = betterproto.bool_field(4)
    # uid列表和file互斥
    uids: List[int] = betterproto.int64_field(5)
    file: str = betterproto.string_field(6)


@dataclass
class UpdateFlagReq(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    # 1. 禁止充值 2. 允许充值
    type: int = betterproto.int32_field(2)


@dataclass
class UpdateFlagResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: str = betterproto.string_field(3)


@dataclass
class UserEmptyReq(betterproto.Message):
    pass


@dataclass
class UserDefaultResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)


@dataclass
class AccessSendPlanAddReq(betterproto.Message):
    # 解锁的漫画 id
    comic_id: int = betterproto.int32_field(1)
    # 发放说明
    reason_description: str = betterproto.string_field(2)
    # 1 解锁章节 2 解锁卷
    type: int = betterproto.int32_field(3)
    # 发放用户组 uids
    uids: List[int] = betterproto.int64_field(4)
    # 人均发放数量
    amount: int = betterproto.int32_field(5)
    # uid 文件上传到 bfs 对应的 url
    file: str = betterproto.string_field(7)
    # 解锁的epids 或者 chapterids, 格式为 '1,2,3,4'
    reasons: str = betterproto.string_field(8)
    # 只有更新的时候需要该 ID, 新增不需要
    id: int = betterproto.int64_field(9)


@dataclass
class ListAccessSendPlanReq(betterproto.Message):
    # 从 1 开始
    page_num: int = betterproto.int32_field(1)
    # 默认 20
    page_size: int = betterproto.int32_field(2)


@dataclass
class ListAccessSendPlanResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "AccessSendPlanData" = betterproto.message_field(3)


@dataclass
class AccessSendPlanData(betterproto.Message):
    total: int = betterproto.int32_field(1)
    sendplans: List["AccessSendPlan"] = betterproto.message_field(2)


@dataclass
class AccessSendPlan(betterproto.Message):
    # 发放id
    id: int = betterproto.int32_field(1)
    # 发放说明
    reason_description: str = betterproto.string_field(2)
    # 发放状态 0: 未发放, 1: 发放中, 2: 发放成功
    status: int = betterproto.int32_field(3)
    # 创建人
    cuser: str = betterproto.string_field(4)
    # 创建时间 2006-01-02 15:04:05
    ctime: str = betterproto.string_field(5)
    # 发放的用户 为""时为当时所有用户
    uids: str = betterproto.string_field(6)
    comic_id: int = betterproto.int32_field(7)
    # 解锁的epids 或者 chapterids, 格式为 '1,2,3,4'
    reasons: str = betterproto.string_field(8)
    # 1 解锁章节 2 解锁卷
    type: int = betterproto.int32_field(9)


class UserStub(betterproto.ServiceStub):
    @allure.step("""更新用户元信息""")
    def update_flag(self, request: UpdateFlagReq) -> UpdateFlagResp:
        """更新用户元信息"""
        logging.getLogger(__name__).info(
            "start call " + "[update_flag]" + " api" + "=>" + """更新用户元信息"""
        )
        response = UpdateFlagResp()
        self._do_twirp_rpc("/manage.v0.User/UpdateFlag", request, response)
        logging.getLogger(__name__).info("call " + "[update_flag]" + " api success!")
        return response

    @allure.step("""添加解锁任意功能发放计划""")
    def add_access_send_plan(self, request: AccessSendPlanAddReq) -> UserDefaultResp:
        """添加解锁任意功能发放计划"""
        logging.getLogger(__name__).info(
            "start call "
            + "[add_access_send_plan]"
            + " api"
            + "=>"
            + """添加解锁任意功能发放计划"""
        )
        response = UserDefaultResp()
        self._do_twirp_rpc("/manage.v0.User/AddAccessSendPlan", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_access_send_plan]" + " api success!"
        )
        return response

    @allure.step("""拉取列表""")
    def list_access_send_plan(
        self, request: ListAccessSendPlanReq
    ) -> ListAccessSendPlanResp:
        """拉取列表"""
        logging.getLogger(__name__).info(
            "start call " + "[list_access_send_plan]" + " api" + "=>" + """拉取列表"""
        )
        response = ListAccessSendPlanResp()
        self._do_twirp_rpc("/manage.v0.User/ListAccessSendPlan", request, response)
        logging.getLogger(__name__).info(
            "call " + "[list_access_send_plan]" + " api success!"
        )
        return response

    @allure.step("""添加用户到小黑屋""")
    def add_black_house_plan(self, request: AddBlackHousePlanReq) -> DefaultResp:
        """添加用户到小黑屋"""
        logging.getLogger(__name__).info(
            "start call " + "[add_black_house_plan]" + " api" + "=>" + """添加用户到小黑屋"""
        )
        response = DefaultResp()
        self._do_twirp_rpc("/manage.v0.User/AddBlackHousePlan", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_black_house_plan]" + " api success!"
        )
        return response

    @allure.step("""分页查询小黑屋操作记录""")
    def list_black_house_plan(
        self, request: ListBlackHousePlanReq
    ) -> ListBlackHousePlanResp:
        """分页查询小黑屋操作记录"""
        logging.getLogger(__name__).info(
            "start call "
            + "[list_black_house_plan]"
            + " api"
            + "=>"
            + """分页查询小黑屋操作记录"""
        )
        response = ListBlackHousePlanResp()
        self._do_twirp_rpc("/manage.v0.User/ListBlackHousePlan", request, response)
        logging.getLogger(__name__).info(
            "call " + "[list_black_house_plan]" + " api success!"
        )
        return response

    @allure.step("""小黑屋列表""")
    def list_black_house_user(
        self, request: ListBlackHouseUserReq
    ) -> ListBlackHouseUserResp:
        """小黑屋列表"""
        logging.getLogger(__name__).info(
            "start call " + "[list_black_house_user]" + " api" + "=>" + """小黑屋列表"""
        )
        response = ListBlackHouseUserResp()
        self._do_twirp_rpc("/manage.v0.User/ListBlackHouseUser", request, response)
        logging.getLogger(__name__).info(
            "call " + "[list_black_house_user]" + " api success!"
        )
        return response

    @allure.step("""查询指定用户的封禁记录""")
    def black_house_user_detail(
        self, request: BlackHouseDetailReq
    ) -> BlackHouseDetailResp:
        """查询指定用户的封禁记录"""
        logging.getLogger(__name__).info(
            "start call "
            + "[black_house_user_detail]"
            + " api"
            + "=>"
            + """查询指定用户的封禁记录"""
        )
        response = BlackHouseDetailResp()
        self._do_twirp_rpc("/manage.v0.User/BlackHouseUserDetail", request, response)
        logging.getLogger(__name__).info(
            "call " + "[black_house_user_detail]" + " api success!"
        )
        return response

    @allure.step("""解禁""")
    def del_black_house_user(self, request: DelBlackHouseUserReq) -> DefaultResp:
        """解禁"""
        logging.getLogger(__name__).info(
            "start call " + "[del_black_house_user]" + " api" + "=>" + """解禁"""
        )
        response = DefaultResp()
        self._do_twirp_rpc("/manage.v0.User/DelBlackHouseUser", request, response)
        logging.getLogger(__name__).info(
            "call " + "[del_black_house_user]" + " api success!"
        )
        return response

    @allure.step("""编辑封禁信息""")
    def edit_black_house_user(self, request: EditBlackHouseUserReq) -> DefaultResp:
        """编辑封禁信息"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_black_house_user]" + " api" + "=>" + """编辑封禁信息"""
        )
        response = DefaultResp()
        self._do_twirp_rpc("/manage.v0.User/EditBlackHouseUser", request, response)
        logging.getLogger(__name__).info(
            "call " + "[edit_black_house_user]" + " api success!"
        )
        return response
