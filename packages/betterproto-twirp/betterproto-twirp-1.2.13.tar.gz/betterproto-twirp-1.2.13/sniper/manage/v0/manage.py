# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: manage/v0/manage.proto
# plugin: python-betterproto
import logging
from typing import List, Optional

import allure
from dataclasses import dataclass

import betterproto


@dataclass
class WikiCoverConfData(betterproto.Message):
    # false: 展示全部封面 true:  展示安全封面
    value: bool = betterproto.bool_field(1)


@dataclass
class GetWikiCoverConfResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "WikiCoverConfData" = betterproto.message_field(3)


@dataclass
class UpdateInteractionReq(betterproto.Message):
    comic_id: int = betterproto.int32_field(1)
    interact_value: int = betterproto.int64_field(2)
    interact_ratio: float = betterproto.float_field(3)
    # 0-互动相关配置 1-详情页在看系数配置，当type为1时，上面的系数和值代表的是在看系数
    type: int = betterproto.int32_field(4)


@dataclass
class InteractionInfo(betterproto.Message):
    comic_id: int = betterproto.int32_field(1)
    title: str = betterproto.string_field(2)
    # 互动值
    interact_value: int = betterproto.int64_field(3)
    # 互动系数
    interact_ratio: float = betterproto.float_field(4)
    # 最后一次修改时间 格式 2006-01-02 15:04:05
    mtime: str = betterproto.string_field(5)


@dataclass
class InteractionInfoData(betterproto.Message):
    # 总个数
    total: int = betterproto.int32_field(1)
    list: List["InteractionInfo"] = betterproto.message_field(2)


@dataclass
class ListInteractionResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "InteractionInfoData" = betterproto.message_field(3)


@dataclass
class ListInteractionReq(betterproto.Message):
    # 漫画id 查询时传递
    comic_id: int = betterproto.int32_field(1)
    page_num: int = betterproto.int32_field(2)
    page_size: int = betterproto.int32_field(3)
    # 0-互动系数查询 1-在看系数查询
    type: int = betterproto.int32_field(4)


@dataclass
class GetActPrizeListReq(betterproto.Message):
    # 活动名
    act: str = betterproto.string_field(1)
    uid: int = betterproto.int64_field(2)


@dataclass
class GetActPrizeListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["GetActPrizeListData"] = betterproto.message_field(3)


@dataclass
class GetActPrizeListData(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    # 用户昵称
    username: str = betterproto.string_field(2)
    # 奖品名
    prize: str = betterproto.string_field(3)
    # 收件人姓名
    receive_user: str = betterproto.string_field(4)
    # 收件人手机号
    receive_phone: str = betterproto.string_field(5)
    # 收件人地址
    receive_address: str = betterproto.string_field(6)


@dataclass
class UpdateOrdChapterIDReq(betterproto.Message):
    # 单话 id
    episode_id: int = betterproto.int32_field(1)
    # 序号
    ord: float = betterproto.float_field(2)
    # 卷 id
    chapter_id: int = betterproto.int32_field(3)


@dataclass
class SearchEpisodeInfo(betterproto.Message):
    # 漫画标题
    comic_title: str = betterproto.string_field(1)
    # 漫画 id
    comic_id: int = betterproto.int32_field(2)
    # 单话标题
    episode_title: str = betterproto.string_field(3)
    # 单话短标题
    episode_short_title: str = betterproto.string_field(4)
    # 单话 id
    episode_id: int = betterproto.int32_field(5)


@dataclass
class SearchByEpisodeIDResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SearchEpisodeInfo" = betterproto.message_field(3)


@dataclass
class SearchByEpisodeIDReq(betterproto.Message):
    id: int = betterproto.int32_field(1)


@dataclass
class AddItemReturnID(betterproto.Message):
    id: int = betterproto.int32_field(1)


@dataclass
class DelIconReq(betterproto.Message):
    id: int = betterproto.int32_field(1)


@dataclass
class IconInfo(betterproto.Message):
    # 记录 id
    id: int = betterproto.int32_field(1)
    # 关联漫画 id
    comic_id: int = betterproto.int32_field(2)
    # 图标 url
    url: str = betterproto.string_field(3)
    # 所属类型 1-特典 2-漫画公告
    type: int = betterproto.int32_field(4)
    # 标题
    title: str = betterproto.string_field(5)
    # 状态  0-上线 1-下线
    status: int = betterproto.int32_field(6)
    # 关联的漫画标题
    comic_title: str = betterproto.string_field(7)


@dataclass
class ListIconData(betterproto.Message):
    list: List["IconInfo"] = betterproto.message_field(1)


@dataclass
class ListIconResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ListIconData" = betterproto.message_field(3)


@dataclass
class ListIconReq(betterproto.Message):
    # 关联漫画 id
    comic_id: int = betterproto.int32_field(1)
    # 所属类型 1-特典 2-漫画公告
    type: int = betterproto.int32_field(2)


@dataclass
class AddIconResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "AddItemReturnID" = betterproto.message_field(3)


@dataclass
class AddIconReq(betterproto.Message):
    # 关联漫画 id
    comic_id: int = betterproto.int32_field(1)
    # url
    url: str = betterproto.string_field(2)
    # 所属类型 1-特典 2-漫画公告
    type: int = betterproto.int32_field(3)
    # 标题
    title: str = betterproto.string_field(4)
    # 状态  0-上线 1-下线
    status: int = betterproto.int32_field(5)
    # 记录 id
    id: int = betterproto.int32_field(6)


@dataclass
class CommentInfo(betterproto.Message):
    id: int = betterproto.int32_field(1)
    # 评论 id
    comment_id: int = betterproto.int64_field(2)
    # 评论内容
    content: str = betterproto.string_field(3)
    # 单话 id
    ep_id: int = betterproto.int32_field(4)
    # 单话标题
    title: str = betterproto.string_field(5)
    # 评论时间 格式 "2006-01-02 15:04:05"
    time: str = betterproto.string_field(6)


@dataclass
class ComicCommentData(betterproto.Message):
    comments: List["CommentInfo"] = betterproto.message_field(1)


@dataclass
class GetComicCommentResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ComicCommentData" = betterproto.message_field(3)


@dataclass
class GetComicCommentReq(betterproto.Message):
    # 漫画 id
    comic_id: int = betterproto.int32_field(1)


@dataclass
class UpdateComicCommentReq(betterproto.Message):
    # 漫画 id
    comic_id: int = betterproto.int32_field(1)
    # 评论信息
    comments: List["CommentInfo"] = betterproto.message_field(2)


@dataclass
class DelComicAlbumReq(betterproto.Message):
    # 特典 id
    id: int = betterproto.int32_field(1)
    # 漫画 id
    comic_id: int = betterproto.int32_field(2)


@dataclass
class ListComicAlbumReq(betterproto.Message):
    # 页数
    page_num: int = betterproto.int32_field(1)
    # 每页个数
    page_size: int = betterproto.int32_field(2)


@dataclass
class ComicAlbumInfo(betterproto.Message):
    # 总页数
    total: int = betterproto.int32_field(1)
    list: List["ComicAlbumReq"] = betterproto.message_field(2)


@dataclass
class ListComicAlbumResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ComicAlbumInfo" = betterproto.message_field(3)


@dataclass
class WatermarkConfig(betterproto.Message):
    # 水印坐标 x
    x: float = betterproto.double_field(1)
    # 水印坐标 y
    y: float = betterproto.double_field(2)
    # 水印字号
    size: float = betterproto.double_field(3)
    # 水印宽
    width: float = betterproto.double_field(4)
    # 水印高
    high: float = betterproto.double_field(5)
    # 水印字体
    font: str = betterproto.string_field(6)
    # 图片
    url: str = betterproto.string_field(7)
    # 位置 0-没有指定 1-居左 2-居中 3-居右
    location: int = betterproto.int32_field(8)
    # 1-用户   2-排名
    type: int = betterproto.int32_field(9)
    # 颜色
    color: str = betterproto.string_field(10)


@dataclass
class ComicAlbumReq(betterproto.Message):
    # 特典 id
    id: int = betterproto.int32_field(1)
    # 漫画 id
    comic_id: int = betterproto.int32_field(2)
    # 特典名称
    title: str = betterproto.string_field(3)
    # 特典封面
    image_url: str = betterproto.string_field(4)
    # 特典详情
    detail: str = betterproto.string_field(5)
    # 特典图片或者动图链接
    pic: List[str] = betterproto.string_field(6)
    # 解锁方式 0-购买 1-应援 2-混合 3-活动解锁 4-章节 5-卷
    type: int = betterproto.int32_field(7)
    # 解锁金额
    num: int = betterproto.int32_field(8)
    # 限定特典份数
    limits: int = betterproto.int32_field(9)
    # 水印(废弃)
    watermark: str = betterproto.string_field(10)
    # 生效时间 时间格式 "2006-01-02 15:04:05"
    online_time: str = betterproto.string_field(11)
    # 失效时间 时间格式 "2006-01-02 15:04:05"
    offline_time: str = betterproto.string_field(12)
    # 图片类型  0-jpg 1-gif 2-单话类型,当是单话类型的时候,上面的解锁类型就必须是4-章节,且目前是只能选择一个单话id
    # 3-视频类型,视频类型需绑定视频id，下面的videoID
    pic_type: int = betterproto.int32_field(13)
    # 水印文字
    text: str = betterproto.string_field(14)
    # 漫画名称
    comic_title: str = betterproto.string_field(15)
    # 宽(废弃)
    weight: int = betterproto.int32_field(16)
    # 高(废弃)
    high: int = betterproto.int32_field(17)
    # 字体(废弃)
    front: str = betterproto.string_field(18)
    # 入口图标
    icon: str = betterproto.string_field(19)
    # 活动链接
    activity_url: str = betterproto.string_field(20)
    # 活动标题
    activity_name: str = betterproto.string_field(21)
    # 水印信息
    config: List["WatermarkConfig"] = betterproto.message_field(22)
    # 章节 id 列表或者卷 id 列表
    item_ids: List[int] = betterproto.int32_field(23)
    # 是否不展示用户名水印
    no_user_watermark: bool = betterproto.bool_field(24)
    # 是否禁止下载/截屏/录屏 false -不禁止 true -禁止
    no_local: bool = betterproto.bool_field(25)
    # 此处的videoID指的是管理后台视频上传的id，即漫画这边业务主键id
    video_id: int = betterproto.int32_field(26)
    # 0-上线 1-下线
    status: int = betterproto.int32_field(27)


@dataclass
class AddComicAlbumResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    # 特典 ID
    data: int = betterproto.int32_field(3)


@dataclass
class ListChannelStrategyResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["ChannelStrategyReq"] = betterproto.message_field(3)


@dataclass
class DelChannelStrategyReq(betterproto.Message):
    id: int = betterproto.int32_field(1)


@dataclass
class ChannelStrategyReq(betterproto.Message):
    # 记录 id
    id: int = betterproto.int32_field(1)
    # 渠道名
    name: str = betterproto.string_field(2)
    # 渠道 from
    from_: str = betterproto.string_field(3)
    # 状态  0-上线  1-下线  2-定时上线
    status: int = betterproto.int32_field(4)
    # 上线时间
    online_time: str = betterproto.string_field(5)
    # 下线时间
    offline_time: str = betterproto.string_field(6)
    # 配置信息
    config: str = betterproto.string_field(7)
    # 创建人
    cuser: str = betterproto.string_field(8)
    # 修改人
    muser: str = betterproto.string_field(9)
    # 最后修改时间
    mtime: str = betterproto.string_field(10)


@dataclass
class EditProgressBarReq(betterproto.Message):
    # 单话 ID
    ep_id: int = betterproto.int32_field(1)
    # 进度信息
    title: str = betterproto.string_field(2)


@dataclass
class DelActivityTabReq(betterproto.Message):
    ids: List[int] = betterproto.int32_field(1)


@dataclass
class ListActivityTabData(betterproto.Message):
    total: int = betterproto.int32_field(1)
    list: List["ActivityTabInfo"] = betterproto.message_field(2)


@dataclass
class ListActivityTabResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ListActivityTabData" = betterproto.message_field(3)


@dataclass
class ListActivityTabReq(betterproto.Message):
    page_size: int = betterproto.int32_field(1)
    page_num: int = betterproto.int32_field(2)


@dataclass
class ActivityTabInfo(betterproto.Message):
    id: int = betterproto.int32_field(1)
    # 活动标题
    name: str = betterproto.string_field(2)
    # 活动图片的 URL
    img: str = betterproto.string_field(3)
    # 活动链接
    url: str = betterproto.string_field(4)
    # 状态
    status: int = betterproto.int32_field(5)
    # 上线时间  2006-01-02 15:04:05
    online_time: str = betterproto.string_field(6)
    # 下线时间  2006-01-02 15:04:05
    offline_time: str = betterproto.string_field(7)
    # 创建人
    cuser: str = betterproto.string_field(8)
    # 最后修改时间 2006-01-02 15:04:05
    mtime: str = betterproto.string_field(9)


@dataclass
class DeleteQueryResp(betterproto.Message):
    id: int = betterproto.int32_field(1)


@dataclass
class ListQueryConfigsResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ListQueryConfigsInfo" = betterproto.message_field(3)


@dataclass
class ListQueryConfigsInfo(betterproto.Message):
    list: List["QueryConfig"] = betterproto.message_field(1)


@dataclass
class QueryConfig(betterproto.Message):
    # 主键ID(创建时不用传)
    id: int = betterproto.int32_field(1)
    # 客户端预存配置
    config: str = betterproto.string_field(2)
    # 创建的用户(仅展示作用)
    cuser: str = betterproto.string_field(3)
    # 创建时间(仅展示作用)
    ctime: str = betterproto.string_field(4)
    # 最后修改时间(仅展示作用)
    mtime: str = betterproto.string_field(5)
    # 标记名称
    name: str = betterproto.string_field(6)


@dataclass
class ListWaitFreeComicReq(betterproto.Message):
    # 漫画ID
    comic_id: int = betterproto.int32_field(1)
    # 分页大小
    page_size: int = betterproto.int32_field(2)
    # 分页页码
    page_num: int = betterproto.int32_field(3)


@dataclass
class ListWaitFreeComicResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ListWaitFreeComicData" = betterproto.message_field(3)


@dataclass
class ListWaitFreeComicData(betterproto.Message):
    total: int = betterproto.int32_field(1)
    comics: List["WaitFreeComic"] = betterproto.message_field(2)


@dataclass
class ListRiskUsersReq(betterproto.Message):
    # 可选参数, 指定的uid, 可以不传
    uid: int = betterproto.int64_field(1)
    page_num: int = betterproto.int32_field(2)
    page_size: int = betterproto.int32_field(3)
    # 0.全部, 1.已封禁
    type: int = betterproto.int32_field(4)


@dataclass
class AddRiskUserReq(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    # 添加理由
    reason: str = betterproto.string_field(2)


@dataclass
class DelRiskUserReq(betterproto.Message):
    uid: int = betterproto.int64_field(1)


@dataclass
class ListRiskUserDailyDataReq(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    page_num: int = betterproto.int32_field(2)
    page_size: int = betterproto.int32_field(3)
    # 开始时间 2006-01-02 15:04:05
    start_time: str = betterproto.string_field(4)
    # 结束时间 2006-01-02 15:04:05
    end_time: str = betterproto.string_field(5)


@dataclass
class ListRiskUserDailyDataResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ListRiskUserDailyData" = betterproto.message_field(3)


@dataclass
class ListRiskUserDailyData(betterproto.Message):
    # 总的数据数
    total_count: int = betterproto.int32_field(1)
    daily_risk_users: List["DailyRiskUser"] = betterproto.message_field(2)


@dataclass
class DailyRiskUser(betterproto.Message):
    id: int = betterproto.int32_field(1)
    uid: int = betterproto.int64_field(2)
    # ip数量
    ip: int = betterproto.int32_field(3)
    # buvid数量
    buvid: int = betterproto.int32_field(4)
    # 地区数量
    area: int = betterproto.int32_field(5)
    # ip
    ips: List[str] = betterproto.string_field(6)
    # buvid
    buvids: List[str] = betterproto.string_field(7)
    # 地区数量
    areas: List[str] = betterproto.string_field(8)
    # 数据所属时间 2006-01-02 15:04:05
    cday: str = betterproto.string_field(9)
    # 创建时间 2006-01-02 15:04:05
    ctime: str = betterproto.string_field(10)
    # 最后修改时间 2006-01-02 15:04:05
    mtime: str = betterproto.string_field(11)


@dataclass
class ListRiskUsersResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ListRiskUsersData" = betterproto.message_field(3)


@dataclass
class ListRiskUsersData(betterproto.Message):
    # 总的数据数
    total_count: int = betterproto.int32_field(1)
    risk_users: List["RiskUser"] = betterproto.message_field(2)


@dataclass
class RiskUser(betterproto.Message):
    id: int = betterproto.int32_field(1)
    uid: int = betterproto.int64_field(2)
    # ip数量
    ip: int = betterproto.int32_field(3)
    # buvid数量
    buvid: int = betterproto.int32_field(4)
    # 地区数量
    area: int = betterproto.int32_field(5)
    # 操作人
    cuser: str = betterproto.string_field(6)
    # 进表理由
    reason: str = betterproto.string_field(7)
    # 创建时间 2006-01-02 15:04:05
    ctime: str = betterproto.string_field(8)
    # 最后修改时间 2006-01-02 15:04:05
    mtime: str = betterproto.string_field(9)
    sp: "SpecificRiskUser" = betterproto.message_field(10)
    # 解冻时间 2006-01-02 15:04:05, 为空表示未被冻结
    unfreeze_time: str = betterproto.string_field(11)


@dataclass
class UnfreezeRiskUserReq(betterproto.Message):
    uid: int = betterproto.int64_field(1)


@dataclass
class DelSpecificRiskUserReq(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    # 1.白名单，2.黑名单(即解除封禁)
    user_type: int = betterproto.int32_field(2)


@dataclass
class SpecificRiskUser(betterproto.Message):
    id: int = betterproto.int32_field(1)
    uid: int = betterproto.int64_field(2)
    # 1.白名单，2.黑名单(封禁)
    user_type: int = betterproto.int32_field(3)
    # 创建操作人
    cuser: str = betterproto.string_field(4)
    # 进表理由
    reason: str = betterproto.string_field(5)
    # 创建时间 2006-01-02 15:04:05
    ctime: str = betterproto.string_field(6)
    # 最后修改时间 2006-01-02 15:04:05
    mtime: str = betterproto.string_field(7)
    # 封禁原因类型 0 - 多登 1 - 恶意退款
    sub_type: int = betterproto.int32_field(8)


@dataclass
class WaitFreeComic(betterproto.Message):
    id: int = betterproto.int32_field(1)
    # 漫画ID
    comic_id: int = betterproto.int32_field(2)
    # 等待时间，小时
    wait_hour: int = betterproto.int32_field(3)
    # 跳过最新多少付费章节
    skip_ep_n: int = betterproto.int32_field(4)
    # 开始时间 "2006-01-02 15:04:05"
    begin_at: str = betterproto.string_field(5)
    # 上线状态，0、上线；1、下线
    status: int = betterproto.int32_field(6)
    # 漫画标题
    title: str = betterproto.string_field(7)
    # 操作人 仅用于展示，创建和修改时此字段无效
    user: str = betterproto.string_field(8)
    # 创建时间 "2006-01-02 15:04:05"
    time: str = betterproto.string_field(9)


@dataclass
class AddChannelRecommendReq(betterproto.Message):
    id: int = betterproto.int32_field(1)
    # 渠道名称
    name: str = betterproto.string_field(2)
    # 渠道包名
    package: str = betterproto.string_field(3)
    # 状态 0-上线 1-下线
    status: int = betterproto.int32_field(4)
    # 推荐漫画的 id
    comic_id: int = betterproto.int32_field(5)
    # 相关风格
    style_id: List[int] = betterproto.int32_field(6)
    # 推荐池漫画ID(上限50)
    comic_ids: List[int] = betterproto.int32_field(7)
    # 推荐语，上限50个字
    intro: str = betterproto.string_field(8)
    # 推荐横版封面
    h_cover: str = betterproto.string_field(9)


@dataclass
class AndroidChannel(betterproto.Message):
    id: int = betterproto.int32_field(1)
    # 渠道名称
    name: str = betterproto.string_field(2)
    # 渠道包名
    package: str = betterproto.string_field(3)
    # 状态 0-上线 1-下线
    status: int = betterproto.int32_field(4)
    comic_id: int = betterproto.int32_field(5)
    # 推荐漫画的标题
    title: str = betterproto.string_field(6)
    # 相关风格
    style: List["Style"] = betterproto.message_field(7)
    # 推荐池漫画ID(上限50)
    comic_ids: List[int] = betterproto.int32_field(8)
    # 推荐语，上限50个字
    intro: str = betterproto.string_field(9)
    # 推荐横版封面
    h_cover: str = betterproto.string_field(10)


@dataclass
class DeleteChannelRecommendReq(betterproto.Message):
    # 渠道推荐的 id
    id: int = betterproto.int32_field(1)


@dataclass
class GetChannelRecommendsReq(betterproto.Message):
    # 状态 -1-全部 0-上线 1-下线
    status: int = betterproto.int32_field(1)
    # -1-全部 0-渠道名称 1-渠道包名
    type: int = betterproto.int32_field(2)
    # 对应于 type 的搜索名称
    name: str = betterproto.string_field(3)
    page_size: int = betterproto.int32_field(4)
    page_num: int = betterproto.int32_field(5)


@dataclass
class DecrGoldReq(betterproto.Message):
    # 是否是ios平台
    is_ios: bool = betterproto.bool_field(1)
    # 用户ID
    uid: int = betterproto.int64_field(2)
    # 扣款金额
    amount: int = betterproto.int32_field(3)


@dataclass
class DecrCouponReq(betterproto.Message):
    # 用户使用的卡券的具体ID
    coupon_id: int = betterproto.int32_field(1)
    # 用户ID
    uid: int = betterproto.int64_field(2)
    # 扣除卡券数量
    amount: int = betterproto.int32_field(3)


@dataclass
class GetChannelRecommendsResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ChannelRecommends" = betterproto.message_field(3)


@dataclass
class ChannelRecommends(betterproto.Message):
    # 总页数
    total: int = betterproto.int32_field(1)
    recommend: List["AndroidChannel"] = betterproto.message_field(2)


@dataclass
class IgnoreSearchReq(betterproto.Message):
    key_words: List[str] = betterproto.string_field(1)


@dataclass
class AddSearchRecommendReq(betterproto.Message):
    list: List["SearchRecommendDetail"] = betterproto.message_field(1)


@dataclass
class SearchRecommendDetail(betterproto.Message):
    id: int = betterproto.int32_field(1)
    # 关键字
    keyword: str = betterproto.string_field(2)
    # 风格信息
    styles: List[int] = betterproto.int32_field(3)
    # 地区信息
    areas: List[int] = betterproto.int32_field(4)
    # 状态 0-未处理 1-已处理 2-已忽略
    status: int = betterproto.int32_field(5)


@dataclass
class SearchRecommendData(betterproto.Message):
    # 分页总数
    count: int = betterproto.int32_field(1)
    list: List["SearchRecommendDetail"] = betterproto.message_field(2)


@dataclass
class GetSearchRecommendReq(betterproto.Message):
    page_num: int = betterproto.int32_field(1)
    page_size: int = betterproto.int32_field(2)
    # 按状态查询  0-未处理 1-已处理  2-已忽略 3-全部
    type: int = betterproto.int32_field(3)
    # 查询搜索词
    word: str = betterproto.string_field(4)


@dataclass
class GetSearchRecommendResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SearchRecommendData" = betterproto.message_field(3)


@dataclass
class DeleteUserRequest(betterproto.Message):
    id: int = betterproto.int32_field(1)


@dataclass
class GetUserInfoResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "UserReq" = betterproto.message_field(3)


@dataclass
class Bubble(betterproto.Message):
    # ID (创建时不需要传)
    id: int = betterproto.int32_field(1)
    # 气泡标题
    title: str = betterproto.string_field(2)
    # 气泡图标
    img_url: str = betterproto.string_field(3)
    # 气泡推送类型 1 全局推送， 2 定向推送, 3 人群包推送
    push_type: int = betterproto.int32_field(4)
    # 用户url白名单
    uid_url: str = betterproto.string_field(5)
    # 跳转类型 1 跳转，2 弹窗类型
    jump_type: int = betterproto.int32_field(6)
    # 跳转地址
    jump_url: str = betterproto.string_field(7)
    # 上下线状态 1 上线, 2 下线
    status: int = betterproto.int32_field(8)
    # 开始时间
    start_time: str = betterproto.string_field(9)
    # 结束时间 永久有效 "0001-01-01 00:00:00"
    end_time: str = betterproto.string_field(10)
    # 弹窗图标
    pop_url: str = betterproto.string_field(11)
    # 落地类型 1 跳转 2 充值面板 3 领取礼包 4 充值领取礼包(不限充值领取次数) 5 充值领取礼包（仅一次）
    pop_type: int = betterproto.int32_field(12)
    # 充值档位
    pay_config: int = betterproto.int32_field(13)
    # 创建用户(仅供展示用，下同)
    cuser: str = betterproto.string_field(14)
    # 创建时间
    ctime: str = betterproto.string_field(15)
    # 最后修改时间
    mtime: str = betterproto.string_field(16)
    # 权重
    weight: int = betterproto.int32_field(17)
    # 应用场景 0 首页 1 详情页 2 应援 3 月票 4 支付页（破冰）
    show_page: int = betterproto.int32_field(18)
    # 礼包领取方式 1 仅领取, 2 领取+追漫, 3 领取+追漫+跳转
    gift_type: int = betterproto.int32_field(19)
    # 礼包设定
    gift_settings: List["GiftSetting"] = betterproto.message_field(20)
    # 礼包相关漫画ID
    gift_comic_id: int = betterproto.int32_field(21)
    # 礼包跳转url
    gift_url: str = betterproto.string_field(22)
    # 详情页场景, 详情页漫画ID, 上限不超过100个
    comic_ids: List[int] = betterproto.int32_field(23)
    # 人群包ID
    user_group_ids: List[int] = betterproto.int32_field(24)
    # 投放平台 0: 全部、 1: iOS、 2: Android
    platform: int = betterproto.int32_field(25)


@dataclass
class GiftSetting(betterproto.Message):
    # 礼物类型 1.卡券，2.挂件, 3.积分
    gift_type: int = betterproto.int32_field(1)
    # 礼物数量(卡券对应的是数量, 挂件对应的过期时间, 积分对应的是积分分数)
    count: int = betterproto.int32_field(2)
    # 对应ID
    gift_id: int = betterproto.int32_field(3)


@dataclass
class DeleteBubbleRequest(betterproto.Message):
    # 删除的气泡ID
    id: int = betterproto.int32_field(1)


@dataclass
class ListBubblesRequest(betterproto.Message):
    page_num: int = betterproto.int32_field(1)
    page_size: int = betterproto.int32_field(2)
    # 格式 "2,3,4" | Json Array 应用场景 0 首页 1 详情页 2 应援 3 月票 4 支付页（破冰）
    show_pages: List[int] = betterproto.int32_field(3)


@dataclass
class ListBubblesResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ListBubblesData" = betterproto.message_field(3)


@dataclass
class ListBubblesData(betterproto.Message):
    # 总的记录数量
    total_count: int = betterproto.int32_field(1)
    bubbles: List["Bubble"] = betterproto.message_field(2)


@dataclass
class GetPayConfigResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "PayConfigData" = betterproto.message_field(3)


@dataclass
class PayConfigData(betterproto.Message):
    pay_amounts: List["PayAmount"] = betterproto.message_field(1)


@dataclass
class PayAmount(betterproto.Message):
    pay_amount: int = betterproto.int32_field(1)


@dataclass
class CreateUserRequest(betterproto.Message):
    # 用户名 PS: 由于是从后台 node 服务器迁移过来的接口，字段与原先保持统一
    username: str = betterproto.string_field(1)


@dataclass
class ListUsersRequest(betterproto.Message):
    # 页码， 每一页默认20个 PS: 由于是从后台 node 服务器迁移过来的接口，字段与原先保持统一 其他接口勿模仿
    page: int = betterproto.int32_field(1)
    # 搜索字段
    search: str = betterproto.string_field(2)


@dataclass
class ListUsersResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ListUsersInfo" = betterproto.message_field(3)


@dataclass
class ListUsersInfo(betterproto.Message):
    # PS: 由于是从后台 node 服务器迁移过来的接口，字段命名风格与原先保持统一 其他接口勿模仿
    total_page: int = betterproto.int32_field(1)
    list: List["UserReq"] = betterproto.message_field(2)


@dataclass
class UserReq(betterproto.Message):
    """PS: 由于是从后台 node 服务器迁移过来的接口，字段命名风格与原先保持统一"""

    # 创建时间"2018-09-26 18:52:24"
    create_at: str = betterproto.string_field(1)
    # 用户ID
    id: int = betterproto.int32_field(2)
    # 是否禁止访问 0: 否，1: 是
    is_forbidden: int = betterproto.int32_field(3)
    # 是否是uat环境
    is_uat: bool = betterproto.bool_field(4)
    # 最后更新时间 "2018-09-26 18:52:35"
    last_update: str = betterproto.string_field(5)
    permission_func: List[str] = betterproto.string_field(6)
    permission_page: List[str] = betterproto.string_field(7)
    # 用户类型 0: 管理员, 1: 用户
    type: int = betterproto.int32_field(8)
    # 用户名
    username: str = betterproto.string_field(9)


@dataclass
class DeleteClassPageTabReq(betterproto.Message):
    id: int = betterproto.int32_field(1)


@dataclass
class EditClassPageTabReq(betterproto.Message):
    # tab id 更新的时候才传此值
    id: int = betterproto.int32_field(1)
    # 名称
    name: str = betterproto.string_field(2)
    # 上线状态 1-上线 2-下线 3-定时上线
    status: int = betterproto.int32_field(3)
    # 位置 热门页默认为 1
    position: int = betterproto.int32_field(4)
    # 是否指定为落地 tab 0-不指定 1-指定
    specify_tab: int = betterproto.int32_field(5)
    # PC 端是否展示 0-不展示 1-展示
    pc_show: int = betterproto.int32_field(6)
    # tab 类型 0-发现页 1-热门页 2-专题页 3-分类页发现页 4-首页新人 tab 5-漫读卡主页(不在顶导栏展示) 6-首页推荐 7-首页排行
    type: int = betterproto.int32_field(7)
    # 角标
    icon: str = betterproto.string_field(8)
    # 背景颜色
    background: str = betterproto.string_field(9)
    # 活动 url
    activity_url: str = betterproto.string_field(10)
    # 上线时间 格式： 2006-01-02 15:04:05
    online_time: str = betterproto.string_field(11)
    # 下线时间 格式： 2006-01-02 15:04:05
    offline_time: str = betterproto.string_field(12)
    # 0-全部 1-首页 2-发现页 3-新人页
    limit_scope: int = betterproto.int32_field(13)


@dataclass
class GetClassPageAllTabsReq(betterproto.Message):
    # 0-全部 1-首页 2-发现页 3-新人页
    limit_scope: int = betterproto.int32_field(1)


@dataclass
class GetClassPageTabResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "GetClassPageTab" = betterproto.message_field(3)


@dataclass
class GetClassPageTab(betterproto.Message):
    tabs: List["ClassPageTab"] = betterproto.message_field(1)
    # 被指定为落地 tab 的 id id=0 表明没有指定落地 tab
    specify_id: int = betterproto.int32_field(2)


@dataclass
class ClassPageTab(betterproto.Message):
    # tab id
    id: int = betterproto.int32_field(1)
    # 名称
    name: str = betterproto.string_field(2)
    # 上线状态 1-上线 2-下线
    status: int = betterproto.int32_field(3)
    # 位置
    position: int = betterproto.int32_field(4)
    # 操作人
    c_user: str = betterproto.string_field(5)
    # 最后修改时间
    mtime: str = betterproto.string_field(6)
    # PC 端是否展示 0-不展示 1-展示
    pc_show: int = betterproto.int32_field(7)
    # tab 类型 0-发现页  1-热门页 2-专题页 3-分类页发现页 4-首页新人 tab 6-首页推荐 7-首页排行
    type: int = betterproto.int32_field(8)
    # 角标
    icon: str = betterproto.string_field(9)
    # 背景颜色
    background: str = betterproto.string_field(10)
    # 活动链接
    url: str = betterproto.string_field(11)
    # 上线时间
    online_time: str = betterproto.string_field(12)
    # 下线时间
    offline_time: str = betterproto.string_field(13)
    # 1-首页 2-发现页 3-新人页
    limit_scope: int = betterproto.int32_field(14)


@dataclass
class DeleteClassPageModuleReq(betterproto.Message):
    id: int = betterproto.int32_field(1)
    tab_id: int = betterproto.int32_field(2)


@dataclass
class DeleteClassPageBannerReq(betterproto.Message):
    id: int = betterproto.int32_field(1)
    # 模块 id
    module_id: int = betterproto.int32_field(2)


@dataclass
class EditClassPageModuleReq(betterproto.Message):
    # tab id
    tab_id: int = betterproto.int32_field(1)
    # 模块 id 更新的时候才传此值
    id: int = betterproto.int32_field(2)
    # 模块名
    name: str = betterproto.string_field(3)
    # 模块类型 0-分类页顶部 banner 1-分类页推广 banner 2-横版四图 3-竖版六图 4-追漫有礼 5-新作预约 6-专栏合作
    # banner 7-热门排行 8-高能单话 9-新人三图 10-新人 tab 更多推荐 11-登录条 12-新人礼包 13-番推漫 14-主题合集模块
    # 15-新人限免 16-新手签到 17-新手限时任务 18-自动竖版六图
    type: int = betterproto.int32_field(4)
    # 模块位置
    position: int = betterproto.int32_field(5)
    # 模块上线状态 1-上线 2-下线 3-定时上线
    status: int = betterproto.int32_field(6)
    # PC 端是否展示 0-不展示 1-展示
    pc_show: int = betterproto.int32_field(7)
    # 上线时间
    online_time: str = betterproto.string_field(8)
    # 下线时间
    offline_time: str = betterproto.string_field(9)
    # 模块颜色 目前只有高能单话和竖版六图用到
    color: str = betterproto.string_field(10)
    # 模块封面
    cover: str = betterproto.string_field(11)
    # 自动竖版六图使用，风格id
    style_ids: List[int] = betterproto.int32_field(12)
    # 自动竖版六图使用，竖版六图选取数量
    limit: int = betterproto.int32_field(13)
    # 自动竖版六图使用，排序规则
    order_rule: int = betterproto.int32_field(14)


@dataclass
class TransitReq(betterproto.Message):
    get_url: str = betterproto.string_field(1)


@dataclass
class TransitResp(betterproto.Message):
    content_type: str = betterproto.string_field(1)
    data: bytes = betterproto.bytes_field(2)


@dataclass
class GetClassPageModuleReq(betterproto.Message):
    # tab id
    tab_id: int = betterproto.int32_field(1)


@dataclass
class GetClassPageModuleResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "GetClassPageModule" = betterproto.message_field(3)


@dataclass
class GetClassPageModule(betterproto.Message):
    modules: List["ClassPageModule"] = betterproto.message_field(1)


@dataclass
class ClassPageModule(betterproto.Message):
    # 模块 id
    id: int = betterproto.int32_field(1)
    # tab id
    tab_id: int = betterproto.int32_field(2)
    # 模块名
    name: str = betterproto.string_field(3)
    # 模块类型 0-分类页顶部 banner 1-分类页推广 banner 2-横版四图 3-竖版六图 4-追漫有礼 5-新作预约 6-专栏模块
    # 7-热门排行 8-高能单话 9-新人三图 10-新人 tab 更多推荐 11-登录条 12-新人礼包 13-番推漫 14-主题合集模块
    type: int = betterproto.int32_field(4)
    # 模块位置
    position: int = betterproto.int32_field(5)
    # 模块上线状态 1-上线 2-下线
    status: int = betterproto.int32_field(6)
    # 操作人
    c_user: str = betterproto.string_field(7)
    # 最后修改时间
    mtime: str = betterproto.string_field(8)
    # PC 端对否展示 0-不展示 1-展示
    pc_show: int = betterproto.int32_field(9)
    # 上线时间
    online_time: str = betterproto.string_field(10)
    # 下线时间
    offline_time: str = betterproto.string_field(11)
    # 颜色
    color: str = betterproto.string_field(12)
    # 模块封面
    cover: str = betterproto.string_field(13)


@dataclass
class ListTeenagerModeUsersReq(betterproto.Message):
    # 用户ID, 数组(不分页)
    uids: List[int] = betterproto.int64_field(1)


@dataclass
class ListTeenagerModeUsersResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ListTeenagerModeUsersData" = betterproto.message_field(3)


@dataclass
class ListTeenagerModeUsersData(betterproto.Message):
    list: List["TeenagerModeUsers"] = betterproto.message_field(1)


@dataclass
class TeenagerModeUsers(betterproto.Message):
    # 用户ID
    uid: int = betterproto.int64_field(1)
    # 用户青少年模式开关签名
    sign: str = betterproto.string_field(2)
    # 设备型号
    machine: str = betterproto.string_field(3)
    # 最后修改时间 2006-01-02 15:04:05
    mtime: str = betterproto.string_field(4)
    # 昵称
    nickname: str = betterproto.string_field(5)


@dataclass
class SaveClassPageFourComicsReq(betterproto.Message):
    module_id: int = betterproto.int32_field(1)
    # 数组长度只有等于 4，且数组元素各不相同才可以保存成功
    comics: List["FourComics"] = betterproto.message_field(3)


@dataclass
class FourComics(betterproto.Message):
    comic_id: int = betterproto.int32_field(1)
    # 图片 url
    image_url: str = betterproto.string_field(2)
    # 位置
    position: int = betterproto.int32_field(3)


@dataclass
class SetTopReq(betterproto.Message):
    # 库存表 id
    id: int = betterproto.int32_field(1)
    # 模块 id
    module_id: int = betterproto.int32_field(2)
    # 置顶状态 0-未置顶 1-置顶
    set_top: int = betterproto.int32_field(3)


@dataclass
class AddSixComicReq(betterproto.Message):
    # module id
    module_id: int = betterproto.int32_field(1)
    # 库存 id
    id: int = betterproto.int32_field(2)
    comic_id: int = betterproto.int32_field(3)
    # 图片 url
    image_url: str = betterproto.string_field(4)
    # 库存类型 3-竖版六图 4-追漫有礼 5-新作预约 7-热门排行 8-高能单话 9-新人竖版三图 14-主题合集
    stock_type: int = betterproto.int32_field(5)
    # 如果是添加新作预约的库存，此字段需要传值 此处传空，表明时间待定
    online_time: str = betterproto.string_field(6)
    # 权重，目前新作预约和高能单话模块用到
    weight: float = betterproto.float_field(7)
    # 位置，追漫有礼模块使用
    position: int = betterproto.int32_field(8)
    # 单话 id，目前只有高能单话模块用到
    ep_id: int = betterproto.int32_field(9)
    # 推荐语
    recommendation: str = betterproto.string_field(10)
    # 一句话简介
    introduction: str = betterproto.string_field(11)


@dataclass
class MultiAddSixComicReq(betterproto.Message):
    # module id
    module_id: int = betterproto.int32_field(1)
    # 18-自动竖版六图
    stock_type: int = betterproto.int32_field(2)
    comics: List["MultiAddSixComic"] = betterproto.message_field(3)


@dataclass
class MultiAddSixComic(betterproto.Message):
    comic_id: int = betterproto.int32_field(1)
    # 一句话简介
    introduction: str = betterproto.string_field(2)
    image_url: str = betterproto.string_field(3)


@dataclass
class GetComicsReq(betterproto.Message):
    comic_ids: List[int] = betterproto.int32_field(1)


@dataclass
class GetComicsResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "GetComics" = betterproto.message_field(3)


@dataclass
class GetComics(betterproto.Message):
    comics: List["ComicInfo"] = betterproto.message_field(1)


@dataclass
class ComicInfo(betterproto.Message):
    # 人气值
    popularity: int = betterproto.int64_field(1)
    # 点评分
    score: float = betterproto.double_field(2)
    # 追漫率
    fav_ratio: float = betterproto.float_field(3)
    # 破冰率
    ice_ratio: float = betterproto.float_field(4)
    # 更新时间
    mtime: str = betterproto.string_field(5)
    comic_id: int = betterproto.int32_field(6)
    title: str = betterproto.string_field(7)


@dataclass
class GetClassPageComicInfoReq(betterproto.Message):
    comic_id: int = betterproto.int32_field(1)
    # 2-横版四图 3-竖版六图 4-追漫有礼 5-新作预约 7-热门排行 8-高能单话
    type: int = betterproto.int32_field(2)


@dataclass
class GetClassPageComicInfoResp(betterproto.Message):
    # 1-漫画信息不存在 2-漫画动态扩张信息不存在，即 ext 3-该部漫画不在追漫发券活动中，无法添加
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "GetClassPageComicInfo" = betterproto.message_field(3)


@dataclass
class GetClassPageComicInfo(betterproto.Message):
    comic_id: int = betterproto.int32_field(1)
    # 漫画标题
    comic_title: str = betterproto.string_field(2)
    # 封面
    wiki_cover: str = betterproto.string_field(3)
    # 运营封面
    image_url: str = betterproto.string_field(4)
    # 横版四图,追漫有礼,热门排行才有位置这一概念，其他模块字段为 0
    position: int = betterproto.int32_field(5)
    # 一句话简介
    introduction: str = betterproto.string_field(6)
    last_ord: float = betterproto.float_field(7)
    # 置顶 0-未置顶 1-置顶
    set_top: int = betterproto.int32_field(8)
    id: int = betterproto.int32_field(9)
    # 是否存在追漫活动中 false 则不可添加到追漫有礼模块
    is_activity: bool = betterproto.bool_field(10)
    # 更新至 xx 如果该字段为 "13"，提示更新至13话，如果是"预告"，提示更新至预告
    last_short_title: str = betterproto.string_field(11)
    # 添加时间
    ctime: str = betterproto.string_field(12)
    # 修改时间
    mtime: str = betterproto.string_field(13)
    # 权重，此字段目前只有新作预约模块有用到
    weight: float = betterproto.float_field(14)
    # 上线时间，如果为空，表明时间待定
    online_time: str = betterproto.string_field(15)
    # 以后取百科各种封面从此字段按需取
    covers: "ComicCovers" = betterproto.message_field(16)
    # 单话 id
    ep_id: int = betterproto.int32_field(17)
    # 推荐语
    recommendation: str = betterproto.string_field(18)


@dataclass
class AddCardResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "AddCardData" = betterproto.message_field(3)


@dataclass
class AddCardData(betterproto.Message):
    id: int = betterproto.int32_field(1)


@dataclass
class ComicCovers(betterproto.Message):
    # 横版封面
    horizontal_cover: str = betterproto.string_field(1)
    # 竖版封面
    vertical_cover: str = betterproto.string_field(2)
    # 方版封面
    square_cover: str = betterproto.string_field(3)
    # 横版运营封面 横版运营封面,多个
    horizontal_cover2: List[str] = betterproto.string_field(4)


@dataclass
class GetAllClassPageComicsReq(betterproto.Message):
    # module id
    module_id: int = betterproto.int32_field(1)
    # 数据类型 2-横版四图 3-竖版六图 4-追漫有礼 5-新作预约 7-热门排行 8-高能单话
    type: int = betterproto.int32_field(2)


@dataclass
class GetAllClassPageComicsResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "GetAllClassPageComics" = betterproto.message_field(3)


@dataclass
class GetAllClassPageComics(betterproto.Message):
    # 分为竖版六图和横版四图两种情况 横版四图，此列表为空或者长度为 4 的数组 竖版六图，为空或者列表长度不小于 6
    # 追漫有礼，为空或者列表长度为2，4，6 新作预约 热门排行 高能单话
    comics: List["GetClassPageComicInfo"] = betterproto.message_field(1)
    # 自动竖版六图使用，风格id
    style_ids: List[int] = betterproto.int32_field(2)
    # 自动竖版六图使用，竖版六图选取数量
    limit: int = betterproto.int32_field(3)
    # 自动竖版六图使用，排序规则 1-人气值 2-评分 3-追漫率 4-破冰率 5-更新时间 6-随机
    order_rule: int = betterproto.int32_field(4)


@dataclass
class ClassPageBannerReq(betterproto.Message):
    # 模块 id
    module_id: int = betterproto.int32_field(1)
    banner: "ClassPageBanner" = betterproto.message_field(2)


@dataclass
class ClassPageBanner(betterproto.Message):
    # 添加的时候此处 ID 为 0，更新的时候传要更新的 banner ID ID
    id: int = betterproto.int32_field(1)
    # 标题
    title: str = betterproto.string_field(2)
    # 跳转类型 1-漫画详情 2-漫画单话 3-活动专题页地址
    jump_type: int = betterproto.int32_field(3)
    # 跳转 URL 1-漫画详情：bilicomic://detail/10， 2-单话：bilicomic://reader/10/11
    # 3-活动页地址：http://www.baidu.com
    jump_url: str = betterproto.string_field(4)
    # 状态 0-上线 1-下线 2-定时上线
    status: int = betterproto.int32_field(5)
    # 上线时间
    online_time: str = betterproto.string_field(6)
    # 创建人 创建或者更新 banner 的时候不需要传此值
    c_user: str = betterproto.string_field(7)
    # 背景颜色
    background: str = betterproto.string_field(8)
    # 下线时间
    offline_time: str = betterproto.string_field(9)
    # 跳转漫画 ID
    jump_comic_id: int = betterproto.int32_field(10)
    # 跳转话 ID
    jump_episode_id: int = betterproto.int32_field(11)
    # 图片 url
    image_url: str = betterproto.string_field(12)
    # banner 类型 0-分类页顶部 banner 1-分类页推广大卡 6-分类页专栏模块
    banner_type: int = betterproto.int32_field(13)
    # 权重
    weight: float = betterproto.float_field(14)
    # 最后修改时间
    mtime: str = betterproto.string_field(15)
    # 热门样式页图片调整临时兼容字段(老版本图片的 URL)
    old_image_url: str = betterproto.string_field(16)


@dataclass
class GetListClassPageBannerReq(betterproto.Message):
    # 模块 id
    module_id: int = betterproto.int32_field(1)
    page_num: int = betterproto.int32_field(2)
    page_size: int = betterproto.int32_field(3)
    # 按 id 搜索
    banner_id: int = betterproto.int32_field(4)
    # 按名称搜索
    title: str = betterproto.string_field(5)
    # 按状态查询 -1表示全部
    status: int = betterproto.int32_field(6)


@dataclass
class GetListClassPageBannerResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "GetListClassPageBanner" = betterproto.message_field(3)


@dataclass
class GetListClassPageBanner(betterproto.Message):
    total: int = betterproto.int32_field(1)
    banners: List["ClassPageBannerReq"] = betterproto.message_field(2)


@dataclass
class DelOperateBannerReq(betterproto.Message):
    # banner id
    id: int = betterproto.int32_field(1)
    # csv 文件地址
    csv: str = betterproto.string_field(2)


@dataclass
class UpdateOperateBannerReq(betterproto.Message):
    # banner id
    id: int = betterproto.int32_field(1)
    # 标题
    title: str = betterproto.string_field(2)
    # 图片地址
    img_url: str = betterproto.string_field(3)
    # 跳转地址 只传 URL
    jump_url: str = betterproto.string_field(4)
    # 上线时间 格式 "2019-01-01 01:01"
    online_time: str = betterproto.string_field(5)
    # 下线时间 格式 "2019-01-01 01:01"
    offline_time: str = betterproto.string_field(6)
    # 0-全局 1-局部 2-人群包
    type: int = betterproto.int32_field(7)
    # 文件地址 如果是全局，此处传字符串空
    csv: str = betterproto.string_field(8)
    # 礼包领取方式 1 仅领取, 2 领取+追漫, 3 领取+追漫+跳转
    gift_type: int = betterproto.int32_field(9)
    # 礼包设定
    gift_settings: List["GiftSetting"] = betterproto.message_field(10)
    # 礼包相关漫画ID
    gift_comic_id: int = betterproto.int32_field(11)
    # 礼包跳转url
    gift_url: str = betterproto.string_field(12)
    # 跳转类型 0-领取礼包 1-漫画详情 2-跳转单话 3-活动页面 4-跳转 app 5-会员购页面
    jump_type: int = betterproto.int32_field(13)
    # 投放的平台, 为空代表全平台 android/ios/h5
    platforms: List[str] = betterproto.string_field(14)
    # 人群包ID
    user_group_ids: List[int] = betterproto.int32_field(15)
    # 图片类型 0: 静态 1: 动态 svga
    img_type: int = betterproto.int32_field(16)
    # 播放类型 0: 播放一次 1: 循环播放
    play_mode: int = betterproto.int32_field(17)
    muser: str = betterproto.string_field(18)
    comic_id: int = betterproto.int32_field(19)
    ep_id: int = betterproto.int32_field(20)


@dataclass
class OperateBannerResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "OperateBannerInfo" = betterproto.message_field(3)


@dataclass
class OperateBannerInfo(betterproto.Message):
    # banner 总数
    total: int = betterproto.int32_field(1)
    # 运营 banner 信息列表
    list: List["OperateBannerDeatil"] = betterproto.message_field(2)


@dataclass
class OperateBannerDeatil(betterproto.Message):
    # banner id
    id: int = betterproto.int32_field(1)
    # banner 标题
    title: str = betterproto.string_field(2)
    # 推送开始时间
    online_time: str = betterproto.string_field(3)
    # 下线时间
    offline_time: str = betterproto.string_field(4)
    # 创建人
    cuser: str = betterproto.string_field(5)
    # 最后修改时间
    mtime: str = betterproto.string_field(6)
    # 图片 URL
    img_url: str = betterproto.string_field(7)
    # 跳转地址
    jump_url: str = betterproto.string_field(8)
    # 0-全局 1-局部 2-人群包
    type: int = betterproto.int32_field(9)
    # 文件地址 如果是全局，此处传字符串空
    csv: str = betterproto.string_field(10)
    # 礼包领取方式 1 仅领取, 2 领取+追漫, 3 领取+追漫+跳转
    gift_type: int = betterproto.int32_field(11)
    # 礼包设定
    gift_settings: List["GiftSetting"] = betterproto.message_field(12)
    # 礼包相关漫画ID
    gift_comic_id: int = betterproto.int32_field(13)
    # 礼包跳转url
    gift_url: str = betterproto.string_field(14)
    # 跳转类型 0-领取礼包 1-漫画详情 2-跳转单话 3-活动页面 4-跳转 app 5-会员购页面
    jump_type: int = betterproto.int32_field(15)
    # 当前上下线状态 0-上线 1-下线 2-定时上线
    status: int = betterproto.int32_field(16)
    # 投放的平台, 为空代表全平台 android/ios/h5
    platforms: List[str] = betterproto.string_field(17)
    # 人群包ID
    user_group_ids: List[int] = betterproto.int32_field(18)
    # img_url 类型 0: 静态 1: 动态
    img_type: int = betterproto.int32_field(19)
    # 播放类型 0: 播放一次 1: 循环播放
    play_mode: int = betterproto.int32_field(20)
    comic_id: int = betterproto.int32_field(21)
    ep_id: int = betterproto.int32_field(22)


@dataclass
class GetOperateBannerReq(betterproto.Message):
    # 分页
    page_num: int = betterproto.int32_field(1)
    # 默认一页20
    page_size: int = betterproto.int32_field(2)


@dataclass
class DeleteComicRewardReq(betterproto.Message):
    # 道具类型 0-全局 1-专属
    scope: int = betterproto.int32_field(1)
    # 要删除的道具记录ID列表
    ids: List[int] = betterproto.int32_field(2)


@dataclass
class AddComicRewardReq(betterproto.Message):
    items: List["RewardItem"] = betterproto.message_field(1)
    # 作用域  0-全局  1-专属
    scope: int = betterproto.int32_field(2)
    # 专属漫画ID列表
    comic_ids: List[int] = betterproto.int32_field(3)
    # 描述
    describe: str = betterproto.string_field(4)


@dataclass
class RewardItem(betterproto.Message):
    # 打赏名称
    name: str = betterproto.string_field(1)
    # 图片url
    image_url: str = betterproto.string_field(2)
    # 打赏金额
    amount: int = betterproto.int32_field(3)
    # 打赏等级
    grade: int = betterproto.int32_field(4)
    # 道具 id
    id: int = betterproto.int32_field(5)


@dataclass
class AddComicRewardResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "AddComicReward" = betterproto.message_field(3)


@dataclass
class AddComicReward(betterproto.Message):
    # 打赏id
    id: int = betterproto.int32_field(1)


@dataclass
class GetComicRewardReq(betterproto.Message):
    # 打赏的id
    id: int = betterproto.int32_field(1)
    # 打赏道具类型
    type: int = betterproto.int32_field(2)


@dataclass
class GetComicRewardResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "GetComicReward" = betterproto.message_field(3)


@dataclass
class GetComicReward(betterproto.Message):
    # 作用域 0-全局 1-专属
    scope: int = betterproto.int32_field(1)
    # 专属漫画 ID 列表
    comic_ids: List[int] = betterproto.int32_field(2)
    # 描述
    describe: str = betterproto.string_field(3)
    # 打赏道具信息
    items: List["RewardItem"] = betterproto.message_field(4)


@dataclass
class GetComicRewardsResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["GetComicReward"] = betterproto.message_field(3)


@dataclass
class UpdateDailyPushReq(betterproto.Message):
    # 记录的id
    id: int = betterproto.int32_field(1)
    # 操作码 1. 修改权重 2. 屏蔽 3. 取消屏蔽
    op_code: int = betterproto.int32_field(2)
    # 只有 是修改权重时，这个值才有意义
    value: float = betterproto.float_field(3)
    # 修改人
    muser: str = betterproto.string_field(4)


@dataclass
class GetDailyPushReq(betterproto.Message):
    # 时间
    date: str = betterproto.string_field(1)


@dataclass
class GetDailyPushResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "DailyPush" = betterproto.message_field(3)


@dataclass
class DailyPush(betterproto.Message):
    # 指定日期的更新详情数据
    list: List["DailyPushDetail"] = betterproto.message_field(1)


@dataclass
class DailyPushDetail(betterproto.Message):
    # 查询日期
    date: str = betterproto.string_field(1)
    # 漫画id
    comic_id: int = betterproto.int32_field(2)
    # 漫画标题
    title: str = betterproto.string_field(3)
    # 权重
    weight: float = betterproto.float_field(4)
    # 操作者
    muser: str = betterproto.string_field(5)
    # 修改时间
    mtime: str = betterproto.string_field(6)
    # 记录id
    id: int = betterproto.int32_field(7)
    # 是否被屏蔽    1不屏蔽   0被屏蔽
    status: int = betterproto.int32_field(8)
    # 单话首次上线时间
    ftime: str = betterproto.string_field(9)


@dataclass
class DelDailyImageReq(betterproto.Message):
    # 漫画id
    comic_id: int = betterproto.int32_field(1)
    # 剩余的图片URL
    images: List[str] = betterproto.string_field(2)
    # 权重
    weight: float = betterproto.double_field(3)


@dataclass
class DelDailyRecommendReq(betterproto.Message):
    comic_id: int = betterproto.int32_field(1)


@dataclass
class AddDailyRecommendReq(betterproto.Message):
    # 操作者
    muser: str = betterproto.string_field(1)
    # 漫画id
    comic_id: int = betterproto.int32_field(2)
    # 图片urls
    images: List[str] = betterproto.string_field(3)
    # 权重
    weight: float = betterproto.double_field(4)


@dataclass
class DailyRecommendAllResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    # 一次获取所有推荐库资源信息
    data: "DailyRecommend" = betterproto.message_field(3)


@dataclass
class DailyRecommendDetailResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    # 添加资源库信息之后返回的一条记录
    data: "DailyRecommendDetail" = betterproto.message_field(3)


@dataclass
class DailyRecommend(betterproto.Message):
    list: List["DailyRecommendDetail"] = betterproto.message_field(1)


@dataclass
class DailyRecommendDetail(betterproto.Message):
    # 漫画id
    comic_id: int = betterproto.int32_field(1)
    # 漫画标题
    title: str = betterproto.string_field(2)
    # 修改人
    muser: str = betterproto.string_field(3)
    # 修改时间
    mtime: str = betterproto.string_field(4)
    # 封面信息
    images: List[str] = betterproto.string_field(5)
    # 权重
    weight: float = betterproto.double_field(6)


@dataclass
class ListRedeemCodesReq(betterproto.Message):
    batch_id: int = betterproto.int64_field(1)


@dataclass
class ListRedeemCodesResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ListRedeemCodesInfo" = betterproto.message_field(3)


@dataclass
class ListRedeemCodesInfo(betterproto.Message):
    # 已兑换数量
    used_count: int = betterproto.int32_field(1)
    # 兑换码信息
    codes: List["RedeemCode"] = betterproto.message_field(2)


@dataclass
class RedeemCode(betterproto.Message):
    # 兑换码
    code: str = betterproto.string_field(1)
    # 是否被兑换
    is_used: bool = betterproto.bool_field(2)
    # 兑换的用户
    uid: int = betterproto.int64_field(3)


@dataclass
class ListRedeemBatchReq(betterproto.Message):
    page_num: int = betterproto.int32_field(1)
    page_size: int = betterproto.int32_field(2)


@dataclass
class ListRedeemBatchResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ListRedeemBatchInfo" = betterproto.message_field(3)


@dataclass
class ListRedeemBatchInfo(betterproto.Message):
    total: int = betterproto.int32_field(1)
    list: List["RedeemBatch"] = betterproto.message_field(2)


@dataclass
class RedeemBatch(betterproto.Message):
    id: int = betterproto.int64_field(1)
    # 描述
    desc: str = betterproto.string_field(2)
    # 兑换码数量
    code_amount: int = betterproto.int32_field(3)
    # 漫读券可用次数
    coupon_amount: int = betterproto.int32_field(4)
    # 过期时间(2006-01-02)
    expire_time: str = betterproto.string_field(5)
    # 创建者
    user: str = betterproto.string_field(6)
    # 创建时间(2006-01-02 15:04)
    ctime: str = betterproto.string_field(7)
    # 漫读券ID
    coupon_set: int = betterproto.int32_field(8)
    # 是否已过期
    expired: bool = betterproto.bool_field(9)
    # 兑换码类型 1.普通兑换码，2. 用户限定的兑换码, 3.同类券仅能获取一次的兑换码
    code_type: int = betterproto.int32_field(10)


@dataclass
class AddSellingComicsReq(betterproto.Message):
    company: int = betterproto.int32_field(1)
    comic_ids: List[int] = betterproto.int32_field(2)


@dataclass
class DeleteSellingComicReq(betterproto.Message):
    # 主键ID
    id: int = betterproto.int32_field(1)
    # 公司(用于清除缓存)
    company: int = betterproto.int32_field(2)


@dataclass
class ListSellingComicsReq(betterproto.Message):
    page_num: int = betterproto.int32_field(1)
    page_size: int = betterproto.int32_field(2)


@dataclass
class ListSellingComicsResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: int = betterproto.int32_field(2)
    data: "ListSellingComicsData" = betterproto.message_field(3)


@dataclass
class ListSellingComicsData(betterproto.Message):
    total_count: int = betterproto.int32_field(1)
    list: List["SellingComic"] = betterproto.message_field(2)


@dataclass
class SellingComic(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)
    # 漫画ID
    comic_id: int = betterproto.int32_field(2)
    # 分销商 1 漫画岛
    company: int = betterproto.int32_field(3)
    # 创建者
    cuser: str = betterproto.string_field(4)
    # 漫画标题
    comic_title: str = betterproto.string_field(5)


@dataclass
class GenRedeemCodesReq(betterproto.Message):
    # 码数
    code_amount: int = betterproto.int32_field(3)
    # 过期时间(最后可用的那一天: 2019-04-05)
    expire_time: str = betterproto.string_field(4)
    # 描述
    desc: str = betterproto.string_field(5)
    # 兑换码类型 1.普通兑换码，2.用户限定的兑换码(暂且不用), 3.同类券仅能获取一次的兑换码
    code_type: int = betterproto.int32_field(6)
    # 创建者
    user: str = betterproto.string_field(7)
    # 漫读券发放选项
    coupon_options: List["CouponSendOption"] = betterproto.message_field(8)


@dataclass
class CouponSendOption(betterproto.Message):
    # 模板ID
    coupon_set: int = betterproto.int32_field(1)
    # 票次数
    coupon_amount: int = betterproto.int32_field(2)


@dataclass
class DefaultResponseWithID(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "DataWithID" = betterproto.message_field(3)


@dataclass
class DataWithID(betterproto.Message):
    id: int = betterproto.int32_field(1)


@dataclass
class SendUniformCouponReq(betterproto.Message):
    # 用户ID
    uid: int = betterproto.int64_field(1)
    # 漫读券数量
    amount: int = betterproto.int32_field(2)


@dataclass
class IsComicUserReq(betterproto.Message):
    # 用户ID
    uid: int = betterproto.int64_field(1)


@dataclass
class IsComicUserResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    # 是漫画用户为 true，否则为 false
    data: bool = betterproto.bool_field(3)


@dataclass
class CouponPointShopResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "CouponPointShopData" = betterproto.message_field(3)


@dataclass
class CouponPointShopData(betterproto.Message):
    # 劵商品当前设置的补货数量
    next_amount: int = betterproto.int32_field(1)
    # 劵商品剩余数量
    remain_amount: int = betterproto.int32_field(2)
    # 劵商品总量
    total_amount: int = betterproto.int32_field(3)
    # 劵商品单价
    cost: int = betterproto.int32_field(4)


@dataclass
class UpdateCouponNextAmountReq(betterproto.Message):
    # 补货数量
    next_amount: int = betterproto.int32_field(1)


@dataclass
class AllAuthorResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["AuthorSnap"] = betterproto.message_field(3)


@dataclass
class AuthorSnap(betterproto.Message):
    # id
    id: int = betterproto.int32_field(1)
    # 中文名
    cname: str = betterproto.string_field(2)


@dataclass
class GetAuthorListRequest(betterproto.Message):
    # 作者ID
    id: int = betterproto.int32_field(1)
    # 中文名
    name: str = betterproto.string_field(2)
    # 页码
    page_num: int = betterproto.int32_field(3)
    # 分页条目数
    page_size: int = betterproto.int32_field(4)
    # 1-个人作者 2-组织
    type: int = betterproto.int32_field(5)


@dataclass
class GetAuthorListResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "AuthorListData" = betterproto.message_field(3)


@dataclass
class AuthorListData(betterproto.Message):
    # 列表
    list: List["AuthorShort"] = betterproto.message_field(1)
    # 总页数
    total: int = betterproto.int32_field(2)


@dataclass
class AuthorShort(betterproto.Message):
    id: int = betterproto.int32_field(1)
    # 原名
    name: str = betterproto.string_field(2)
    # 中文名
    cname: str = betterproto.string_field(3)
    # 创建人
    cuser: str = betterproto.string_field(4)
    # 修改时间
    mtime: str = betterproto.string_field(5)
    # 1-个人作者 2-组织
    type: int = betterproto.int32_field(6)


@dataclass
class AuthorDetailRequest(betterproto.Message):
    # 作者百科id
    id: int = betterproto.int32_field(1)


@dataclass
class AuthorDetailResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "AuthorDetail" = betterproto.message_field(3)


@dataclass
class AuthorDetail(betterproto.Message):
    # 作者百科ID
    id: int = betterproto.int32_field(1)
    # 原名
    name: str = betterproto.string_field(2)
    # 中文名
    cname: str = betterproto.string_field(3)
    # 别名
    alias: str = betterproto.string_field(4)
    # 简介
    evaluate: str = betterproto.string_field(5)
    # 照片
    photo: str = betterproto.string_field(6)
    # 血型
    bloodtype: str = betterproto.string_field(7)
    # 主要成就
    achievement: str = betterproto.string_field(8)
    # 出生地
    birthplace: str = betterproto.string_field(9)
    # 星座
    zodiac: str = betterproto.string_field(10)
    # 血型
    hobby: str = betterproto.string_field(11)
    # 作品
    comics: List["AuthorComic"] = betterproto.message_field(12)
    # 创建者
    cuser: str = betterproto.string_field(13)
    # 1-作者 2-组织
    type: int = betterproto.int32_field(14)


@dataclass
class AuthorComic(betterproto.Message):
    # 漫画 ID
    id: int = betterproto.int32_field(1)
    # 漫画名
    name: str = betterproto.string_field(2)
    # 上线状态
    status: int = betterproto.int32_field(3)


@dataclass
class DefaultResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "EmptyData" = betterproto.message_field(3)


@dataclass
class EditClassPageTabResp(betterproto.Message):
    # 0-成功 2-该分类下顶部 banner 没有上线 3-该分类下没有足够的模块,无法上线
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "EmptyData" = betterproto.message_field(3)


@dataclass
class EditClassPageModuleResp(betterproto.Message):
    # 0-成功 2-没有 banner 上线 3-tab 处在上线中，不允许下线顶部 banner 4-库存漫画不足，无法上线 5-顶部 banner
    # 数量必须大于等于 3 才能上线
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "EmptyData" = betterproto.message_field(3)


@dataclass
class UpdateContractsStatusResp(betterproto.Message):
    # 0-成功 2-无数据结算或者出帐 3-已经结算或者出帐
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "EmptyData" = betterproto.message_field(3)


@dataclass
class ListComicsNotInContractsResp(betterproto.Message):
    # 0-成功 1-线上有漫画不存在于结算流中 code 为 1 时，漫画 id 以 msg 形式体现
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "EmptyData" = betterproto.message_field(3)


@dataclass
class EmptyData(betterproto.Message):
    pass


@dataclass
class DelAuthorRequest(betterproto.Message):
    # 作者百科id
    id: int = betterproto.int32_field(1)


@dataclass
class EmptyRequest(betterproto.Message):
    pass


@dataclass
class AllStyleResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["StyleInfo"] = betterproto.message_field(3)


@dataclass
class StyleInfo(betterproto.Message):
    id: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    weight: int = betterproto.int32_field(3)
    status: int = betterproto.int32_field(4)


@dataclass
class AllAreaResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["AreaInfo"] = betterproto.message_field(3)


@dataclass
class AreaInfo(betterproto.Message):
    # 区域 ID
    id: int = betterproto.int32_field(1)
    # 区域名称
    name: str = betterproto.string_field(2)
    # 权重
    weight: int = betterproto.int32_field(3)
    # 上线状态 0-下线 1-上线
    status: int = betterproto.int32_field(4)


@dataclass
class ComicInfoListRequest(betterproto.Message):
    id: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    page_num: int = betterproto.int32_field(3)
    page_size: int = betterproto.int32_field(4)


@dataclass
class ComicInfoListResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ComicInfoListData" = betterproto.message_field(3)


@dataclass
class ComicInfoListData(betterproto.Message):
    list: List["ComicInfoShort"] = betterproto.message_field(1)
    # 总页数
    total: int = betterproto.int32_field(2)


@dataclass
class ComicInfoShort(betterproto.Message):
    # 百科ID
    id: int = betterproto.int32_field(1)
    # 原名
    title: str = betterproto.string_field(2)
    # 中文名
    origin_name: str = betterproto.string_field(3)
    # 状态
    status: int = betterproto.int32_field(4)
    # 创建人
    cuser: str = betterproto.string_field(5)
    # 修改时间 RFC3339 2006-01-02T15:04:05+07:00
    mtime: str = betterproto.string_field(6)


@dataclass
class ComicInfoDetailRequest(betterproto.Message):
    # 漫画百科ID
    id: int = betterproto.int32_field(1)


@dataclass
class ComicInfoDetailResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ComicWiki" = betterproto.message_field(3)


@dataclass
class ComicWiki(betterproto.Message):
    # 百科ID
    id: int = betterproto.int32_field(1)
    # 中文名
    title: str = betterproto.string_field(2)
    # 原名
    origin_name: str = betterproto.string_field(3)
    # 别名
    alias: str = betterproto.string_field(4)
    # 简介
    evaluate: str = betterproto.string_field(5)
    # 横版封面 640*360
    horizontal_cover: str = betterproto.string_field(6)
    # 方版封面 200*200
    square_cover: str = betterproto.string_field(7)
    # 竖版封面 720*960
    vertical_cover: str = betterproto.string_field(8)
    # 首发时间
    release_date: str = betterproto.string_field(9)
    # 更新时间信息
    renewal_time: str = betterproto.string_field(10)
    # 语言
    language: str = betterproto.string_field(11)
    # 翻译作者
    translator: str = betterproto.string_field(12)
    # 发行方 里面只有作者 id 和 name 有用
    producers: List["Author"] = betterproto.message_field(13)
    # 主角
    actors: str = betterproto.string_field(14)
    # 士大夫
    staff: str = betterproto.string_field(15)
    # 上线状态 -1下架 0正常
    status: int = betterproto.int32_field(16)
    # 关联作品信息
    comics: List["ComicList"] = betterproto.message_field(20)
    # 创建者
    cuser: str = betterproto.string_field(21)
    # 风险等级：0-青少年作品 1-无风险 2-低风险 3-总裁玛丽苏 4-无亲密耽美百合 5-中风险 6-高风险 7-危险
    risk: int = betterproto.int32_field(22)
    # 横版封面运营，首页库存使用，首页库存优先使用该字段，该字段没有，取横版封面 v2.6 支持多张运营封面
    horizontal_cover2: List["Cover"] = betterproto.message_field(23)
    # 一句话简介
    introduction: str = betterproto.string_field(24)
    # 经典台词 @max_len:50
    classic_lines: str = betterproto.string_field(25)
    # 作者列表
    authors: List["Author"] = betterproto.message_field(26)
    # 风格列表
    styles: List["Style"] = betterproto.message_field(27)
    # 地区
    area: "Area" = betterproto.message_field(28)
    # 开启预约追漫 0-不开启 1-开启
    pre_favorite: int = betterproto.int32_field(29)
    # 置顶横版封面 首页信息流使用
    top_horizontal: str = betterproto.string_field(30)
    # 置顶图片下标 从 0 开始，没有传 -1
    top_index: int = betterproto.int32_field(31)
    # 主站视频 PV 信息
    pv_id: str = betterproto.string_field(32)
    # 主站视频 PV 精选片段开启时间
    pv_start_at: int = betterproto.int32_field(33)
    # 主站视频 PV 封面
    pv_cover: str = betterproto.string_field(34)


@dataclass
class Cover(betterproto.Message):
    img_url: str = betterproto.string_field(1)
    # true 危险 false 安全
    danger: bool = betterproto.bool_field(2)


@dataclass
class Author(betterproto.Message):
    # 作者ID
    id: int = betterproto.int32_field(1)
    # 中文名
    cname: str = betterproto.string_field(2)
    # 工种
    work_type: str = betterproto.string_field(3)
    # 从属的 id
    company_id: int = betterproto.int32_field(4)
    # 从属的名称
    company_name: str = betterproto.string_field(5)


@dataclass
class Style(betterproto.Message):
    # 风格标签ID
    id: int = betterproto.int32_field(1)
    # 风格名
    name: str = betterproto.string_field(2)


@dataclass
class Area(betterproto.Message):
    # 地区ID
    id: int = betterproto.int32_field(1)
    # 地区名
    name: str = betterproto.string_field(2)


@dataclass
class ComicList(betterproto.Message):
    # 漫画ID
    id: int = betterproto.int32_field(1)
    # 漫画名
    name: str = betterproto.string_field(2)


@dataclass
class DelComicWikiRequest(betterproto.Message):
    # 漫画百科ID
    id: int = betterproto.int32_field(1)


@dataclass
class ListComicsRequest(betterproto.Message):
    id: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    page_num: int = betterproto.int32_field(3)
    page_size: int = betterproto.int32_field(4)
    # 发行方 模糊搜索
    producer: str = betterproto.string_field(5)


@dataclass
class ListComicsResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ComicListData" = betterproto.message_field(3)


@dataclass
class ComicListData(betterproto.Message):
    list: List["ComicShort"] = betterproto.message_field(1)
    # 总页数
    total: int = betterproto.int32_field(2)


@dataclass
class ComicShort(betterproto.Message):
    # 百科ID
    id: int = betterproto.int32_field(1)
    # 标题
    title: str = betterproto.string_field(2)
    # 状态
    status: int = betterproto.int32_field(3)
    # 漫画类型
    comic_type: int = betterproto.int32_field(4)
    # 连载状态
    is_finish: int = betterproto.int32_field(5)
    # 创建人
    cuser: str = betterproto.string_field(6)
    # 修改时间 RFC3339 2006-01-02T15:04:05+07:00
    mtime: str = betterproto.string_field(7)


@dataclass
class GetComicRequest(betterproto.Message):
    # 漫画ID
    id: int = betterproto.int32_field(1)


@dataclass
class GetComicResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "Comic" = betterproto.message_field(3)


@dataclass
class Comic(betterproto.Message):
    # 漫画ID
    id: int = betterproto.int32_field(1)
    # 漫画标题
    title: str = betterproto.string_field(2)
    # 关联漫画百科ID
    info_id: int = betterproto.int32_field(3)
    # 关联UP
    mid: int = betterproto.int64_field(4)
    # 漫画类型 0:条漫 1:页漫
    comic_type: int = betterproto.int32_field(5)
    # 默认翻页方式, 1:竖屏滚动，2:竖屏翻页 4:日漫，8:横屏
    page_default: int = betterproto.int32_field(6)
    # 允许翻页方式,位运算, 1:竖屏滚动，2：竖屏翻页，4：日漫，8:横屏
    page_allow: int = betterproto.int32_field(7)
    # 上线状态, -1:下线 0:正常 2:定时发布
    status: int = betterproto.int32_field(8)
    # 上线时间 RFC3339 2006-01-02T15:04:05+07:00
    release_time: str = betterproto.string_field(9)
    # 默认推广图 16:9
    default_cover: str = betterproto.string_field(10)
    # 连载类型, 连载类型, 0:单篇 1:连载
    mode: int = betterproto.int32_field(11)
    # 连载状态, 1:完结 0:连载中 -1:未开刊
    is_finish: int = betterproto.int32_field(12)
    # 总集数
    length: int = betterproto.int32_field(13)
    # 关联番剧seasonid
    animation_seasonid: List[int] = betterproto.int32_field(14)
    # 建议付费模式 0:免费 1:单话付费 2-按卷付费
    pay_mode: int = betterproto.int32_field(15)
    # 漫币价格
    gold: int = betterproto.int64_field(16)
    # 优惠漫币价格
    real_gold: int = betterproto.int64_field(17)
    # 银豆价
    silver: int = betterproto.int64_field(18)
    # 允许使用阅读券
    coupons: bool = betterproto.bool_field(19)
    # 禁止评论
    no_comment: bool = betterproto.bool_field(20)
    # 版权性质 1-独家 2-首发 3-合作
    copyright: int = betterproto.int32_field(23)
    # 允许观看平台 位操作 1-ios 2-android 4-ipad 8-web
    watch_platform: int = betterproto.int32_field(24)
    # 地区限制组
    limit_group: int = betterproto.int32_field(25)
    # 允许下载 1-允许 0-禁止
    download: int = betterproto.int32_field(26)
    # 创建人
    cuser: str = betterproto.string_field(27)
    # 相关漫画ids
    relation_ids: List[int] = betterproto.int32_field(29)
    # 是否禁止打赏(为true时则禁止打赏)
    no_reward: bool = betterproto.bool_field(30)
    # 作者列表
    authors: List["Author"] = betterproto.message_field(31)
    # 风格列表
    styles: List["Style"] = betterproto.message_field(32)
    # 地区列表
    area: "Area" = betterproto.message_field(33)
    # 允许使用道具
    items: bool = betterproto.bool_field(34)
    # 禁止月票
    no_monthly_ticket: bool = betterproto.bool_field(36)
    # 展示形式,0-按单话展示 1-按卷展示
    show_type: int = betterproto.int32_field(37)
    # 是否禁止打折卡  0-允许使用 1-禁止使用
    disable_discount: bool = betterproto.bool_field(38)
    # 能使用福利券
    allow_welfare: bool = betterproto.bool_field(39)
    # 付费抢先数量，为0时表示关闭
    pay_for_new_amount: int = betterproto.int32_field(40)
    # 漫读券附属信息
    coupons_extra: "CouponsExtra" = betterproto.message_field(41)
    # 0-仅按卷购买 1-支持兼容单话购买
    pay_mode_for_chapters: int = betterproto.int32_field(42)
    # 连载状态 0-正常 1-休刊
    serial_status: int = betterproto.int32_field(43)
    # 百科信息
    wiki: "ComicWiki" = betterproto.message_field(44)
    # 内部归属: 1- 编辑作品；2- 商务作品；3- 工作室作品
    attribution: int = betterproto.int32_field(46)
    # 风控开关
    risk_flags: "RiskControlFlags" = betterproto.message_field(48)
    # 休刊时间(带时区信息)
    temporary_finish_time: str = betterproto.string_field(49)
    # 禁止水印
    no_watermark: bool = betterproto.bool_field(50)
    # 点评禁止差评
    no_review_negative: bool = betterproto.bool_field(51)
    # 开刊前评论区开关 true:打开 false:关闭 注意：前端界面上的默认状态需要选择打开
    comment_before_pub: bool = betterproto.bool_field(52)
    # 开刊后评论区开关 true:打开 false:关闭 注意：前端界面上的默认状态需要选择打开
    comment_after_pub: bool = betterproto.bool_field(53)
    # 合作方 id 1 快漫
    partner_type: int = betterproto.int32_field(54)
    # 合作方漫画 id
    partner_comic_id: int = betterproto.int32_field(55)


@dataclass
class RiskControlFlags(betterproto.Message):
    # 禁止 APP 所有推荐
    no_all_recommend_app: bool = betterproto.bool_field(1)
    # 禁止 Web 所有推荐
    no_all_recommend_web: bool = betterproto.bool_field(2)
    # 禁止 App 首页推荐
    no_home_recommend_app: bool = betterproto.bool_field(3)
    # 禁止 Web 首页推荐
    no_home_recommend_web: bool = betterproto.bool_field(4)
    # 禁止 App 更多推荐
    no_more_recommend_app: bool = betterproto.bool_field(5)
    # 禁止 Web 更多推荐
    no_more_recommend_web: bool = betterproto.bool_field(6)
    # 禁止 App 分类页展示
    no_app_classify_page: bool = betterproto.bool_field(7)
    # 禁止 Web 分类页展示
    no_web_classify_page: bool = betterproto.bool_field(8)
    # 禁止 App 搜索
    no_app_search: bool = betterproto.bool_field(9)
    # 禁止 Web 搜索
    no_web_search: bool = betterproto.bool_field(10)
    # 禁止 主站 搜索
    no_main_search: bool = betterproto.bool_field(11)
    # 禁止更新推送
    no_update_push: bool = betterproto.bool_field(12)
    # 禁止排行榜
    no_ranking: bool = betterproto.bool_field(13)
    # 禁止 Web 直接访问详情页
    no_web_visit: bool = betterproto.bool_field(14)


@dataclass
class CouponsExtra(betterproto.Message):
    # 禁止使用卡券的最新话数量，为0时表示关闭
    disable_coupon_amount: int = betterproto.int32_field(1)
    # 禁止使用漫读券
    disable_coupon: bool = betterproto.bool_field(2)
    # 禁止使用限免卡
    disable_item: bool = betterproto.bool_field(3)
    # 禁止使用福利券
    disable_welfare: bool = betterproto.bool_field(4)


@dataclass
class DeleteComicRequest(betterproto.Message):
    # 漫画ID
    id: int = betterproto.int32_field(1)


@dataclass
class LimitGroupResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["LimitGroup"] = betterproto.message_field(3)


@dataclass
class LimitGroup(betterproto.Message):
    id: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)


@dataclass
class EpisodeListRequest(betterproto.Message):
    comic_id: int = betterproto.int32_field(1)
    page_num: int = betterproto.int32_field(2)
    page_size: int = betterproto.int32_field(3)


@dataclass
class EpisodeListResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "EpisodeListData" = betterproto.message_field(3)


@dataclass
class EpisodeListData(betterproto.Message):
    list: List["EpisodeShort"] = betterproto.message_field(1)
    # 总页数
    total: int = betterproto.int32_field(2)


@dataclass
class EpisodeShort(betterproto.Message):
    # 单话id(epid)
    id: int = betterproto.int32_field(1)
    # 标题
    title: str = betterproto.string_field(2)
    # 序号
    ord: float = betterproto.float_field(3)
    # 上线状态 0正常 1下线 2待上架
    status: int = betterproto.int32_field(4)
    # 创建时间 RFC3339 2006-01-02T15:04:05+07:00
    ctime: str = betterproto.string_field(5)
    # 修改时间 RFC3339 2006-01-02T15:04:05+07:00
    mtime: str = betterproto.string_field(6)
    # 创建者
    cuser: str = betterproto.string_field(7)
    # 话数(短标题)
    short_title: str = betterproto.string_field(8)
    # 审核状态 0-未审核 1-已审核 2-已驳回
    verify: int = betterproto.int32_field(9)
    # 首次上线时间
    first_pub_time: str = betterproto.string_field(10)
    # 审核驳回原因
    verify_reason: str = betterproto.string_field(11)
    # 最后操作人
    muser: str = betterproto.string_field(12)
    # 定时上线时间
    pub_time: str = betterproto.string_field(13)
    # 进度条信息
    progress: str = betterproto.string_field(14)
    # 所属卷短标题
    chapter_short_title: str = betterproto.string_field(15)
    # 推送id组
    push_ids: List[int] = betterproto.int64_field(16)
    # 卷 id
    chapter_id: int = betterproto.int32_field(17)
    # 图片 index
    index: str = betterproto.string_field(18)


@dataclass
class EpisodeDetailRequest(betterproto.Message):
    # 漫画每话的ID
    id: int = betterproto.int32_field(1)


@dataclass
class EpisodeDetailResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ComicEpisode" = betterproto.message_field(3)


@dataclass
class ComicEpisode(betterproto.Message):
    # 单话id(epid)
    id: int = betterproto.int32_field(1)
    # 标题
    title: str = betterproto.string_field(2)
    # 漫画ID
    comic_id: int = betterproto.int32_field(3)
    # 所属卷，废弃
    chapter: str = betterproto.string_field(4)
    # 序号
    ord: float = betterproto.float_field(5)
    # 上线状态 0正常 1下线 2待上架（定时上线）
    status: int = betterproto.int32_field(6)
    # 付费模式 0免费 1付费
    pay_mode: int = betterproto.int32_field(7)
    # 金币
    gold: int = betterproto.uint64_field(8)
    # 优惠金币
    real_gold: int = betterproto.uint64_field(9)
    # 银币
    silver: int = betterproto.uint64_field(10)
    # 允许使用阅读券
    coupons: bool = betterproto.bool_field(11)
    # 单话推广封面
    cover: str = betterproto.string_field(12)
    # 索引文件
    index: str = betterproto.string_field(13)
    # 上线模式 0-手动上线 1-按时间表上线
    pub_type: int = betterproto.int32_field(14)
    # 发布时间 RFC3339 2006-01-02T15:04:05+07:00
    pub_time: str = betterproto.string_field(15)
    # 创建人
    cuser: str = betterproto.string_field(16)
    # 话数(短标题)
    short_title: str = betterproto.string_field(17)
    # 审核状态
    verify: int = betterproto.int32_field(18)
    # 单话大小
    size: int = betterproto.int32_field(19)
    # 修改人
    muser: str = betterproto.string_field(20)
    # 允许使用道具
    items: bool = betterproto.bool_field(21)
    # 所属卷 id
    chapter_id: int = betterproto.int32_field(22)
    # 能使用福利券
    allow_welfare: bool = betterproto.bool_field(23)
    # 同步修改漫画连载状态标示 1-修改漫画为连载中 2-修改为已完结
    finish_status: int = betterproto.int32_field(24)
    # 最近一次的定时上线时间 格式 "2006-01-02 15:04:05"
    last_pub_time: str = betterproto.string_field(25)
    # 单话类型  0-正文、1-活动、2-番外、3-公告、4-预告、100-其他
    type: int = betterproto.int32_field(26)


@dataclass
class EpisodePayListResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["EpisodePay"] = betterproto.message_field(3)


@dataclass
class EpisodePay(betterproto.Message):
    # epid
    id: int = betterproto.int32_field(1)
    # 标题
    title: str = betterproto.string_field(2)
    # 序号
    ord: float = betterproto.float_field(3)
    # 付费模式 0免费 1付费
    pay_mode: int = betterproto.int32_field(4)
    # 金币
    gold: int = betterproto.uint64_field(5)
    # 优惠金币
    real_gold: int = betterproto.uint64_field(6)
    # 银币
    silver: int = betterproto.uint64_field(7)
    # 允许阅读券
    coupons: bool = betterproto.bool_field(8)
    # 话数
    short_title: str = betterproto.string_field(9)
    # 当前所需要支付的漫币原价格(pay_mode, gold, real_gold 的联动字段，不包含限时折扣活动)
    pay_gold: int = betterproto.int32_field(10)
    # 定时转付费时间 格式 "2006-01-02 15:04:05" 空串表示没有设置定时
    timing: str = betterproto.string_field(11)
    # 允许道具
    items: bool = betterproto.bool_field(12)
    # 允许使用福利券
    allow_welfare: bool = betterproto.bool_field(13)
    # 单话上线状态 0-上线 1-下线 2-定时上线
    status: int = betterproto.int32_field(14)


@dataclass
class IndexUploadRequest(betterproto.Message):
    comic_id: int = betterproto.int32_field(1)
    epid: int = betterproto.int32_field(2)
    # [{"url":"http://i0.hdslb.com/bfs/comic/24970/232810/data.index", "cx":100,
    # "cy":200}]
    json_data: str = betterproto.string_field(3)
    # 当单话不下线的时候，更新图片需要传递这个字段，并且设置为 true
    is_force: bool = betterproto.bool_field(4)


@dataclass
class IndexUploadResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "IndexUpload" = betterproto.message_field(3)


@dataclass
class IndexUpload(betterproto.Message):
    pics: List[str] = betterproto.string_field(1)


@dataclass
class BfsTokenReq(betterproto.Message):
    # ["http://1.jpg", "http://2.jpg"]
    urls: str = betterproto.string_field(1)
    # method
    method: str = betterproto.string_field(2)


@dataclass
class BfsTokenResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["Token"] = betterproto.message_field(3)


@dataclass
class Token(betterproto.Message):
    url: str = betterproto.string_field(1)
    token: str = betterproto.string_field(2)


@dataclass
class UploadImageReq(betterproto.Message):
    # 图片类型 1 漫画图片 2 漫画封面
    image_type: int = betterproto.int32_field(1)
    # 漫画 ID
    comic_id: int = betterproto.int32_field(2)
    # 单话 ID
    ep_id: int = betterproto.int32_field(3)


@dataclass
class UploadImageResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "UploadImageData" = betterproto.message_field(3)


@dataclass
class UploadImageData(betterproto.Message):
    url: str = betterproto.string_field(1)


@dataclass
class GetRecommendedComicPoolListRequest(betterproto.Message):
    # 页码
    page_num: int = betterproto.int32_field(1)
    # 分页条目数
    page_size: int = betterproto.int32_field(2)


@dataclass
class RecommendedComicPoolListResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "RecommendedComicPoolListData" = betterproto.message_field(3)


@dataclass
class RecommendedComicPoolListData(betterproto.Message):
    # 列表
    list: List["RecommendedComicPool"] = betterproto.message_field(1)
    # 总页数
    total: int = betterproto.int32_field(2)


@dataclass
class RecommendedComicPool(betterproto.Message):
    # 推荐池ID
    id: int = betterproto.int32_field(1)
    # 推荐位标题
    name: str = betterproto.string_field(2)
    # 状态 1:上线 2:下线
    status: int = betterproto.int32_field(3)
    # 创建人
    cuser: str = betterproto.string_field(4)
    # 修改时间 RFC3339 2006-01-02T15:04:05+07:00
    mtime: str = betterproto.string_field(5)


@dataclass
class DelRecommendedComicPoolRequest(betterproto.Message):
    # 推荐池ID
    id: int = betterproto.int32_field(1)


@dataclass
class GetRecommendStockReq(betterproto.Message):
    pool_id: int = betterproto.int32_field(1)


@dataclass
class GetRecommendStockResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["RecommendStock"] = betterproto.message_field(3)


@dataclass
class RecommendStock(betterproto.Message):
    id: int = betterproto.int32_field(1)
    title: str = betterproto.string_field(2)


@dataclass
class ManageRecommendStockReq(betterproto.Message):
    pool_id: int = betterproto.int32_field(1)
    data: List["RecommendStock"] = betterproto.message_field(2)


@dataclass
class DeleteAreaRequest(betterproto.Message):
    id: int = betterproto.int32_field(1)


@dataclass
class PushInfo(betterproto.Message):
    # 推送ID
    id: int = betterproto.int32_field(1)
    # 标题
    title: str = betterproto.string_field(2)
    # 正文
    msg: str = betterproto.string_field(3)
    # 跳转类型 1-漫画详情 2-漫画单话 3-活动专题页地址 4-app 内页面
    jump_type: int = betterproto.int32_field(4)
    # 跳转漫画ID （jump_type=1&2时有效）
    jump_comicid: int = betterproto.int32_field(5)
    # 跳转单话ID （jump_type=2时有效）
    jump_epid: int = betterproto.int32_field(6)
    # 跳转地址 （jump_type=3时有效）
    jump_url: str = betterproto.string_field(7)
    # 推送终端 0-全部 1-安卓 2-IOS 3-iPad
    platform: int = betterproto.int32_field(8)
    # 图片
    image: str = betterproto.string_field(9)
    # 推送类型：2、推送；3、站内信  4:卡片私信
    push_type: int = betterproto.int32_field(10)
    # 推送时间 "2006-01-02 15:04:05" 立即推送此字段传空或者不传
    push_time: str = betterproto.string_field(11)
    # 状态 0-待发送 1-已发送 2-已取消
    status: int = betterproto.int32_field(12)
    # 创建人
    cuser: str = betterproto.string_field(13)
    # 推送返回值
    res_code: int = betterproto.int32_field(14)
    # 推送返回ID
    res_data: int = betterproto.int64_field(15)
    # 用户模式 0-全量推送 1-定向推送 2-人群包推送
    user_type: int = betterproto.int32_field(16)
    # 用户ID 逗号分隔 最多1000个
    uids: List[int] = betterproto.int64_field(17)
    # 上传 uid 的 csv 文件，多个 CSV 文件用逗号(半角)分割
    file: str = betterproto.string_field(18)
    # 推送截止时间 "2006-01-02 15:04:05" 不设过期时间传 "0001-01-01 00:00:00"
    expire_time: str = betterproto.string_field(19)
    # 测试 UID 列表 最多 5 个 如果数组不为空，表示要进行推送测试，如果为空则是正式推送
    test_uids: List[int] = betterproto.int64_field(20)
    # 卡片通知码
    notify_code: str = betterproto.string_field(21)
    # 跳转文案
    jump_text: str = betterproto.string_field(22)
    # 私信推送自定义模块信息
    modules: List["PushModule"] = betterproto.message_field(23)
    # 人群包ID(列表接口该字段的数据无效)
    user_group_ids: List[int] = betterproto.int32_field(24)


@dataclass
class PushModule(betterproto.Message):
    text: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)


@dataclass
class PushListReq(betterproto.Message):
    # 页码
    page_num: int = betterproto.int32_field(1)
    # 分页条目数
    page_size: int = betterproto.int32_field(2)
    # 推送类型：2、推送；3、站内信
    type: int = betterproto.int32_field(3)


@dataclass
class PushListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "PushDetailData" = betterproto.message_field(3)


@dataclass
class PushDetailReq(betterproto.Message):
    # 推送ID
    push_id: int = betterproto.int32_field(1)


@dataclass
class PushDetailResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "PushInfo" = betterproto.message_field(3)


@dataclass
class PushDetailData(betterproto.Message):
    # 列表
    list: List["PushInfo"] = betterproto.message_field(1)
    # 总页数
    total: int = betterproto.int32_field(2)


@dataclass
class CommonBannerListReq(betterproto.Message):
    # 页码
    page_num: int = betterproto.int32_field(1)
    # 分页条目数
    page_size: int = betterproto.int32_field(2)
    # BannerID 精确搜索
    banner_id: int = betterproto.int32_field(3)
    # 标题搜索
    title: str = betterproto.string_field(4)
    # 状态筛选 0-上线 1-下线 2-定时上线 -1-全部
    status: int = betterproto.int32_field(5)
    # banner 类型 1-评论区 banner 2-搜索页 banner 3-充值页 banner 4-裂变 banner 5-漫画详情页
    # 6-月票榜公告 7-应援banner 8-漫读卡入口文案 9-充值页漫读卡推广 10-控制面板漫读卡推广Banner
    # 11-卡券包漫读卡推广banner 12-应援月票入口资源位,暂时是无跳转模式，所以 jump_type=0 13-单话评论区公告 14-月票投递动画
    # 15-首页顶部banner 16-畅读卡运营 banner
    banner_type: int = betterproto.int32_field(6)
    # 漫画 id 搜索
    comic_id: int = betterproto.int32_field(7)


@dataclass
class RewardBannerListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "RewardBannerList" = betterproto.message_field(3)


@dataclass
class RewardBannerList(betterproto.Message):
    list: List["RewardBannerShort"] = betterproto.message_field(1)
    # 总页数
    total: int = betterproto.int32_field(2)


@dataclass
class RewardBannerShort(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)
    # 标题
    title: str = betterproto.string_field(2)
    # 状态 0-上线 1-下线 2-定时上线
    status: int = betterproto.int32_field(3)
    # 图片url
    image_url: str = betterproto.string_field(4)
    # 跳转url
    jump_url: str = betterproto.string_field(5)
    # 上线时间
    active_time: str = betterproto.string_field(6)
    # 类型(废弃)
    banner_type: int = betterproto.int32_field(7)
    comic_id: int = betterproto.int32_field(8)
    # 作用范围 0-全局 1-限定
    limit_scope: int = betterproto.int32_field(9)
    # 关联的漫画 id 列表
    comic_ids: List[int] = betterproto.int32_field(10)


@dataclass
class CommonBannerListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "CommonBannerList" = betterproto.message_field(3)


@dataclass
class CommonBannerList(betterproto.Message):
    list: List["CommonBannerShort"] = betterproto.message_field(1)
    # 总页数
    total: int = betterproto.int32_field(2)


@dataclass
class CommonBannerShort(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)
    # 标题
    title: str = betterproto.string_field(2)
    # 状态 0-上线 1-下线 2-定时上线
    status: int = betterproto.int32_field(3)
    # 文案
    content: str = betterproto.string_field(4)
    # image url
    image_url: str = betterproto.string_field(5)
    # 跳转 url 1-漫画详情：bilicomic://detail/10 2-单话：bilicomic://reader/10/11
    # 3-活动页地址：http://www.baidu.com
    jump_url: str = betterproto.string_field(6)
    # 最后修改时间
    last_update_time: str = betterproto.string_field(7)
    # banner 类型 1-评论区 banner 2-搜索页 banner 3-充值页 banner 4-裂变 banner 5-漫画详情页
    # 6-月票榜公告 7-应援banner 8-漫读卡入口文案 9-充值页漫读卡推广 10-控制面板漫读卡推广Banner
    # 11-卡券包漫读卡推广banner 12-应援月票入口资源位,暂时是无跳转模式，所以 jump_type=0 13-单话评论区公告 14-月票投递动画
    # 15-首页banner 16 畅读卡运营 banner
    banner_type: int = betterproto.int32_field(8)
    # banner 作用范围 0-全场 1-限定单部漫画
    limit_scope: int = betterproto.int32_field(9)
    # 创建人
    c_user: str = betterproto.string_field(10)
    # 上线时间
    active_time: str = betterproto.string_field(11)
    # 下线时间
    offline_time: str = betterproto.string_field(12)
    # 绑定的漫画数量
    comic_count: int = betterproto.int32_field(13)
    # banner 绑定的漫画或者单话信息
    extra: List["BannerExtraInfo"] = betterproto.message_field(14)
    # 权重
    weight: float = betterproto.float_field(15)


@dataclass
class BannerExtraInfo(betterproto.Message):
    # 漫画 id
    comic_id: int = betterproto.int32_field(1)
    # 漫画标题
    comic_title: str = betterproto.string_field(2)
    # 单话 id
    ep_id: int = betterproto.int32_field(3)
    # 单话标题
    ep_title: str = betterproto.string_field(4)


@dataclass
class CommonBannerInfo(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)
    # 标题
    title: str = betterproto.string_field(2)
    # 文案
    content: str = betterproto.string_field(3)
    # 跳转类型 0-不跳转 1-漫画详情 2-漫画单话 3-活动专题页地址 4-app内部跳转 5-会员购地址
    jump_type: int = betterproto.int32_field(4)
    # 漫画id
    comic_id: int = betterproto.int32_field(5)
    # limit_scope  0-全局，1-限定漫画，当是1时，comic_id 字段必填
    limit_scope: int = betterproto.int32_field(6)
    # 跳转 URL 1-漫画详情：bilicomic://detail/10， 2-单话：bilicomic://reader/10/11
    # 3-活动页地址：http://www.baidu.com
    jump_url: str = betterproto.string_field(7)
    # 状态 0-上线 1-下线 2-定时上线
    status: int = betterproto.int32_field(8)
    # 上线时间
    active_time: str = betterproto.string_field(9)
    # 创建人
    c_user: str = betterproto.string_field(10)
    # 背景颜色
    background: str = betterproto.string_field(11)
    # 下线时间
    offline_time: str = betterproto.string_field(12)
    # 跳转漫画 ID
    jump_comic_id: int = betterproto.int32_field(13)
    # 跳转话 ID
    jump_episode_id: int = betterproto.int32_field(14)
    # 图片 url 当类型是 12 的时候，此处指背景图片
    image_url: str = betterproto.string_field(15)
    # banner 类型 1-评论区 banner 2-搜索页 banner 3-充值页 banner 4-裂变 banner 5-漫画详情页
    # 6-月票榜公告 7-应援banner 8-漫读卡入口文案 9-充值页漫读卡推广 10-控制面板漫读卡推广Banner
    # 11-卡券包漫读卡推广banner 12-应援月票入口资源位,暂时是无跳转模式，所以 jump_type=0 13-单话评论区公告 单话 id 在
    # comic_ids 里传 14-月票投递动画 15-首页banner 16-畅读卡运营 banner
    banner_type: int = betterproto.int32_field(16)
    # 扩展信息(漫画详情页非全局的漫画 ID 列表)
    comic_ids: List[int] = betterproto.int32_field(17)
    # 自定义图标/勋章
    icon: str = betterproto.string_field(18)
    # 全平台就是把有的平台都传过来 展示平台 ios/android/web/ipad
    platforms: List[str] = betterproto.string_field(19)
    # 绑定的 uid
    uids: List[int] = betterproto.int64_field(20)
    # 人群包 id
    user_group_ids: List[int] = betterproto.int32_field(21)
    # 推送类型 0-全局推送 1-定向推送 2-人群包推送
    user_type: int = betterproto.int32_field(22)
    # 权重
    weight: float = betterproto.float_field(23)
    # 专栏 cv 号
    cv: int = betterproto.int64_field(24)
    # 有些 banner 有图片或者文字，分别需要背景颜色 当类型是月票应援入口勋章，即type为12时，此处代表勋章的背景颜色
    background2: str = betterproto.string_field(25)
    # 有些 banner 带按钮
    btn_txt: str = betterproto.string_field(26)


@dataclass
class CommonBannerDetailReq(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)
    # 1-评论区 banner 2-搜索页 banner
    banner_type: int = betterproto.int32_field(2)


@dataclass
class DelCommonBannerReq(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)


@dataclass
class CommonBannerDetailResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "CommonBannerInfo" = betterproto.message_field(3)


@dataclass
class GetAllCardsReq(betterproto.Message):
    # -1 返回所有类型的信息流数据 0-返回编辑推荐的数据 1-返回算法推荐的数据
    recommend_type: int = betterproto.int32_field(1)


@dataclass
class GetAllCardsResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "AllCards" = betterproto.message_field(3)


@dataclass
class AllCards(betterproto.Message):
    card: List["AllCardsInfo"] = betterproto.message_field(1)


@dataclass
class AllCardsInfo(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)
    # 标题
    title: str = betterproto.string_field(2)
    # 状态  0-上线 1-下线 2-定时上线
    status: int = betterproto.int32_field(3)
    # 卡片类型 1-漫画大卡 2-推广卡
    type: int = betterproto.int32_field(4)
    # 子标题
    sub_title: str = betterproto.string_field(5)
    # 图片
    img: str = betterproto.string_field(6)
    # 跳转类型 1-漫画详情 2-漫画单话 3-活动地址 4-阅读器最新阅读单话
    jump_type: int = betterproto.int32_field(7)
    # 跳转漫画ID
    jump_comic: int = betterproto.int32_field(8)
    # 跳转话ID
    jump_epid: int = betterproto.int32_field(9)
    # 跳转URL
    jump_url: str = betterproto.string_field(10)
    # 权重
    weight: float = betterproto.float_field(11)
    # 创建人
    cuser: str = betterproto.string_field(12)
    # 定时上线时间 2006-01-02 15:04
    active_time: str = betterproto.string_field(13)
    # Phone端标记
    phone: int = betterproto.int32_field(14)
    # H5端标记
    h5: int = betterproto.int32_field(15)
    # 图标
    icon: int = betterproto.int32_field(16)
    # 定时下线时间
    offline_time: str = betterproto.string_field(17)
    # 推荐类型 0-编辑推荐 1-算法推荐
    recommend_type: int = betterproto.int32_field(18)
    # 推荐类型为 1,3,4 时必填 算法推荐的位置
    position: int = betterproto.int32_field(19)
    # 推荐类型为 1 时必填 标签
    description: str = betterproto.string_field(20)
    # 推荐理由
    reason: str = betterproto.string_field(21)


@dataclass
class CardListReq(betterproto.Message):
    # 页码
    page_num: int = betterproto.int32_field(1)
    # 分页条目数
    page_size: int = betterproto.int32_field(2)
    # CardID 精确搜索
    card_id: int = betterproto.int32_field(3)
    # 标题搜索
    title: str = betterproto.string_field(4)
    # 状态筛选 0-上线 1-下线 2-定时上线 -1-全部
    status: int = betterproto.int32_field(5)
    # 推荐类型 1-算法推荐 首页 card 只有算法推荐的内容了
    recommend_type: int = betterproto.int32_field(6)
    # 上线日期 2006-01-02 精确到天,没选择该条件传字符串空
    online_time: str = betterproto.string_field(7)


@dataclass
class CardListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "CardList" = betterproto.message_field(3)


@dataclass
class CardList(betterproto.Message):
    list: List["CardShort"] = betterproto.message_field(1)
    total: int = betterproto.int32_field(2)


@dataclass
class CardShort(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)
    # 标题
    title: str = betterproto.string_field(2)
    # 状态  0-上线 1-下线 2-定时上线
    status: int = betterproto.int32_field(3)
    # 类型
    type: int = betterproto.int32_field(4)
    # 权重
    weight: float = betterproto.float_field(5)
    # 创建人
    cuser: str = betterproto.string_field(6)
    # 修改时间 RFC3339 2006-01-02T15:04:05+08:00
    mtime: str = betterproto.string_field(7)
    # 推荐类型 0-编辑推荐 1-算法推荐
    recommend_type: int = betterproto.int32_field(8)
    # 算法推荐的位置
    position: int = betterproto.int32_field(9)
    # 上线时间(RFC3339 2006-01-02T15:04:05+08:00)
    online_time: str = betterproto.string_field(10)
    # 下线时间(RFC3339 2006-01-02T15:04:05+08:00)
    offline_time: str = betterproto.string_field(11)
    # 顺序
    ord: float = betterproto.float_field(12)


@dataclass
class CardInfo(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)
    # 标题
    title: str = betterproto.string_field(2)
    # 状态  0-上线 1-下线 2-定时上线
    status: int = betterproto.int32_field(3)
    # 卡片类型 1-漫画大卡 2-推广卡 3-单话聚合卡 7-书聚合卡
    type: int = betterproto.int32_field(4)
    # 子标题
    sub_title: str = betterproto.string_field(5)
    # 图片
    img: str = betterproto.string_field(6)
    # 跳转类型 1-漫画详情 2-漫画单话 3-活动地址 4-阅读器最新阅读单话
    jump_type: int = betterproto.int32_field(7)
    # 跳转漫画ID
    jump_comic: int = betterproto.int32_field(8)
    # 跳转话ID
    jump_epid: int = betterproto.int32_field(9)
    # 跳转URL
    jump_url: str = betterproto.string_field(10)
    # 权重
    weight: float = betterproto.float_field(11)
    # 创建人
    cuser: str = betterproto.string_field(12)
    # 定时上线时间 2006-01-02 15:04
    active_time: str = betterproto.string_field(13)
    # Phone端标记
    phone: int = betterproto.int32_field(14)
    # H5端标记
    h5: int = betterproto.int32_field(15)
    # 图标
    icon: int = betterproto.int32_field(16)
    # 定时下线时间
    offline_time: str = betterproto.string_field(17)
    # 推荐类型 0-编辑推荐 1-算法推荐
    recommend_type: int = betterproto.int32_field(18)
    # 推荐类型为 1 时必填 算法推荐的位置
    position: int = betterproto.int32_field(19)
    # 推荐类型为 1 时必填 标签
    description: str = betterproto.string_field(20)
    # 聚合卡 id
    item_id: int = betterproto.int32_field(21)
    # 推荐理由 字数 <= 10
    reason: str = betterproto.string_field(22)


@dataclass
class CardDetailReq(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)


@dataclass
class CardDetailResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "CardInfo" = betterproto.message_field(3)


@dataclass
class DelCardReq(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)


@dataclass
class UpdateCardsPositionReq(betterproto.Message):
    cards: List["Cards"] = betterproto.message_field(1)


@dataclass
class Cards(betterproto.Message):
    id: int = betterproto.int32_field(1)
    position: int = betterproto.int32_field(2)


@dataclass
class AddFatherCombineCardReq(betterproto.Message):
    id: int = betterproto.int32_field(1)
    title: str = betterproto.string_field(2)
    cuser: str = betterproto.string_field(3)
    mtime: str = betterproto.string_field(4)
    # 副标题 书聚合卡需要的
    sub_title: str = betterproto.string_field(5)
    # 类型 0-单话聚合卡 1-书聚合卡
    type: int = betterproto.int32_field(6)
    # 封面
    cover: str = betterproto.string_field(7)


@dataclass
class ListFatherCombineCardResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ListFatherCombineCard" = betterproto.message_field(3)


@dataclass
class ListFatherCombineReq(betterproto.Message):
    # 类型 0-单话聚合卡 1-书聚合卡
    type: int = betterproto.int32_field(1)


@dataclass
class ListFatherCombineCard(betterproto.Message):
    info: List["AddFatherCombineCardReq"] = betterproto.message_field(1)


@dataclass
class AddCombineCardReq(betterproto.Message):
    id: int = betterproto.int32_field(1)
    # 封面
    cover: str = betterproto.string_field(2)
    episode_info: List["CombineInfo"] = betterproto.message_field(3)
    # 背景色
    color: str = betterproto.string_field(4)
    # 期数
    num: int = betterproto.int32_field(5)
    # 更新时间，2006-01-02
    update_time: str = betterproto.string_field(6)
    father_id: int = betterproto.int32_field(7)
    father_title: str = betterproto.string_field(8)
    # 类型 0-单话聚合卡 1-书聚合卡
    type: int = betterproto.int32_field(9)
    # 0-卡片滑动模版 1-列表模版
    template_type: int = betterproto.int32_field(10)


@dataclass
class CombineInfo(betterproto.Message):
    episode_id: int = betterproto.int32_field(1)
    cover: str = betterproto.string_field(2)
    ord: float = betterproto.float_field(3)
    # 单话自定义标题
    episode_title: str = betterproto.string_field(4)
    # 漫画 id 书聚合卡使用
    comic_id: int = betterproto.int32_field(5)
    # 漫画标题
    comic_title: str = betterproto.string_field(6)
    # 单话短标题
    episode_short_title: str = betterproto.string_field(7)
    # 一句话简介
    introduction: str = betterproto.string_field(8)
    # 简介
    evaluate: str = betterproto.string_field(9)


@dataclass
class DelCombineCardReq(betterproto.Message):
    # 期刊 id
    id: int = betterproto.int32_field(1)
    # 合集 id
    father_id: int = betterproto.int32_field(2)


@dataclass
class GetCombineInfoByIDReq(betterproto.Message):
    # 期刊 id
    id: int = betterproto.int32_field(1)


@dataclass
class GetCombineInfoByIDResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "GetCombineInfoByID" = betterproto.message_field(3)


@dataclass
class GetCombineInfoByID(betterproto.Message):
    id: int = betterproto.int32_field(1)
    # 封面
    cover: str = betterproto.string_field(2)
    # 背景色
    color: str = betterproto.string_field(3)
    # 期数
    num: int = betterproto.int32_field(4)
    # 更新时间，2006-01-02
    update_time: str = betterproto.string_field(5)
    father_id: int = betterproto.int32_field(6)
    father_title: str = betterproto.string_field(7)
    # 更新人
    c_user: str = betterproto.string_field(8)
    # 更新时间(2006-01-02 15:04:05)
    mtime: str = betterproto.string_field(9)
    episode_info: List["CombineInfo"] = betterproto.message_field(10)
    # 聚合卡类型 0-单话聚合卡 1-书聚合卡
    type: int = betterproto.int32_field(11)
    # 0-卡片滑动模版 1-列表模版
    template_type: int = betterproto.int32_field(12)


@dataclass
class ListCombineCardResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ListCombine" = betterproto.message_field(3)


@dataclass
class ListCombine(betterproto.Message):
    cards: List["AddCombineCardReq"] = betterproto.message_field(1)


@dataclass
class AddColumnCardReq(betterproto.Message):
    id: int = betterproto.int32_field(1)
    ord: float = betterproto.float_field(2)
    comic_id: int = betterproto.int32_field(3)
    comic_title: str = betterproto.string_field(4)
    cover: str = betterproto.string_field(5)
    # 专栏推荐标题
    column_title: str = betterproto.string_field(6)
    # 专栏 id
    column_id: int = betterproto.int64_field(7)
    cuser: str = betterproto.string_field(8)


@dataclass
class ListColumnCardResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ListColumnCard" = betterproto.message_field(3)


@dataclass
class ListColumnCard(betterproto.Message):
    cards: List["AddColumnCardReq"] = betterproto.message_field(1)


@dataclass
class GetColumnInfoReq(betterproto.Message):
    # 专栏号
    id: int = betterproto.int64_field(1)


@dataclass
class GetColumnInfoResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "GetColumnInfo" = betterproto.message_field(3)


@dataclass
class GetColumnInfo(betterproto.Message):
    # 透传主站专栏状态
    status: int = betterproto.int32_field(1)


@dataclass
class FlashListReq(betterproto.Message):
    # 页码
    page_num: int = betterproto.int32_field(1)
    # 分页条目数
    page_size: int = betterproto.int32_field(2)
    # FlashID 精确搜索
    flash_id: int = betterproto.int32_field(3)
    # 标题搜索
    title: str = betterproto.string_field(4)
    # 状态筛选 0-上线 1-下线 2-定时上线 -1-全部
    status: int = betterproto.int32_field(5)


@dataclass
class FlashListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "FlashList" = betterproto.message_field(3)


@dataclass
class FlashList(betterproto.Message):
    list: List["FlashShort"] = betterproto.message_field(1)
    total: int = betterproto.int32_field(2)


@dataclass
class FlashShort(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)
    # 标题
    title: str = betterproto.string_field(2)
    # 状态 0-上线 1-下线 2-定时上线
    status: int = betterproto.int32_field(3)
    # 权重
    weight: float = betterproto.float_field(4)
    # 创建人
    cuser: str = betterproto.string_field(5)
    # 修改时间 RFC3339 2006-01-02T15:04:05+07:00
    mtime: str = betterproto.string_field(6)
    # 定向推送 csv 文件地址
    csv: str = betterproto.string_field(7)
    # 上线时间 格式: RFC3339 2006-01-02T15:04:05+07:00
    active_time: str = betterproto.string_field(8)
    # 下线时间 格式: RFC3339 2006-01-02T15:04:05+07:00
    offline_time: str = betterproto.string_field(9)


@dataclass
class FlashDetailReq(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)


@dataclass
class FlashDetailResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "FlashInfo" = betterproto.message_field(3)


@dataclass
class FlashInfo(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)
    # 标题
    title: str = betterproto.string_field(2)
    # 图片 url
    img: str = betterproto.string_field(3)
    # 跳转类型 0-不跳转 1-漫画详情 2-漫画单话 3-活动专题页地址 4-跳转app内部 5-会员购地址
    jump_type: int = betterproto.int32_field(4)
    # 跳转漫画ID
    jump_comic: int = betterproto.int32_field(5)
    # 跳转话ID
    jump_epid: int = betterproto.int32_field(6)
    # 跳转URL
    jump_url: str = betterproto.string_field(7)
    # 状态 0-上线 1-下线 2-定时上线
    status: int = betterproto.int32_field(8)
    # 定时上线时间 RFC3339 2006-01-02T15:04:05+07:00
    active_time: str = betterproto.string_field(9)
    # 权重
    weight: float = betterproto.float_field(10)
    # 创建人
    cuser: str = betterproto.string_field(11)
    # 下线时间 RFC3339 2006-01-02T15:04:05+07:00
    offline_time: str = betterproto.string_field(12)
    # 0-全局 1-局部 2-人群包
    type: int = betterproto.int32_field(13)
    # 文件地址 如果是全局，此处传字符串空
    csv: str = betterproto.string_field(14)
    # 人群包ID
    user_group_ids: List[int] = betterproto.int32_field(15)
    # 资源类型 0-图片 1-竖屏视频
    meta_type: int = betterproto.int32_field(16)
    # 视频 url
    video: str = betterproto.string_field(17)
    # 平台，全平台就是把包含的平台都传过来 ios/android/ipad
    platforms: List[str] = betterproto.string_field(18)


@dataclass
class DelFlashReq(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)
    # csv 文件地址
    csv: str = betterproto.string_field(2)


@dataclass
class AdviseListReq(betterproto.Message):
    # 反馈类型 1-阅读漫画 2-功能体验 3-漫画购入 0-全部
    type: int = betterproto.int32_field(1)
    # 起始日期
    begin_date: str = betterproto.string_field(2)
    # 结束日期
    end_date: str = betterproto.string_field(3)
    # 页码
    page_num: int = betterproto.int32_field(4)
    # 分页条目数
    page_size: int = betterproto.int32_field(5)


@dataclass
class AdviseListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "AdviseList" = betterproto.message_field(3)


@dataclass
class AdviseList(betterproto.Message):
    list: List["AdviseInfo"] = betterproto.message_field(1)
    total: int = betterproto.int32_field(2)


@dataclass
class AdviseInfo(betterproto.Message):
    # 建议类型 1-阅读漫画 2-功能体验 3-漫画购入
    type: int = betterproto.int32_field(1)
    # QQ号
    qq: str = betterproto.string_field(2)
    # 反馈内容
    content: str = betterproto.string_field(3)
    # 用户ID
    uid: int = betterproto.int64_field(4)
    # 时间 RFC3339 2006-01-02T15:04:05+07:00
    ctime: str = betterproto.string_field(5)
    # 反馈建议图片url
    image_url: str = betterproto.string_field(6)
    # 客户端类型 1-UWP、2-IOS、3-安卓、4-WEB、5-iPad
    platform: int = betterproto.int32_field(7)
    # 客户端版本号
    version: str = betterproto.string_field(8)
    # 市场渠道包名
    android_channel: str = betterproto.string_field(9)
    # 二级反馈建议 阅读漫画 1-翻译错误、2-内容重复、3-页码问题、4-画质不清晰、5-加载过慢、6-购买后无法观看、7-其他 功能体验
    # 1-功能建议、2-体验不佳、3-功能问题、4-其他 购入建议 1-日漫、2-国漫、3-美漫、4-韩漫、5-其他
    subtype: int = betterproto.int32_field(10)


@dataclass
class AndroidPatchInfo(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)
    # 版本号
    version: int = betterproto.int32_field(2)
    # 版本名
    name: str = betterproto.string_field(3)
    # 版本文件大小
    size: int = betterproto.int64_field(4)
    # 版本描述
    desc: str = betterproto.string_field(5)
    # 安装包地址
    download_url: str = betterproto.string_field(6)
    # 生效时间 RFC3339 2006-01-02T15:04:05+07:00
    active_time: str = betterproto.string_field(7)
    # 强制更新 1-强制 0-非强制
    force: int = betterproto.int32_field(8)


@dataclass
class IosPatchInfo(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)
    # 版本号
    version: int = betterproto.int32_field(2)
    # 版本名
    name: str = betterproto.string_field(3)
    # 版本文件大小
    size: int = betterproto.int64_field(4)
    # 版本描述
    desc: str = betterproto.string_field(5)
    # 安装包地址
    download_url: str = betterproto.string_field(6)
    # 生效时间 RFC3339 2006-01-02T15:04:05+07:00
    active_time: str = betterproto.string_field(7)
    # 强制更新 1-强制 0-非强制
    force: int = betterproto.int32_field(8)


@dataclass
class DelAndroidPatchReq(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)


@dataclass
class DelIosPatchReq(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)


@dataclass
class AndroidPatchListReq(betterproto.Message):
    # 页码
    page_num: int = betterproto.int32_field(1)
    # 分页条目数
    page_size: int = betterproto.int32_field(2)


@dataclass
class IosPatchListReq(betterproto.Message):
    # 页码
    page_num: int = betterproto.int32_field(1)
    # 分页条目数
    page_size: int = betterproto.int32_field(2)


@dataclass
class AndroidPatchListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "AndroidPatchList" = betterproto.message_field(3)


@dataclass
class IosPatchListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "IosPatchList" = betterproto.message_field(3)


@dataclass
class AndroidPatchList(betterproto.Message):
    list: List["AndroidPatchInfo"] = betterproto.message_field(1)
    total: int = betterproto.int32_field(2)


@dataclass
class IosPatchList(betterproto.Message):
    list: List["IosPatchInfo"] = betterproto.message_field(1)
    total: int = betterproto.int32_field(2)


@dataclass
class AndroidPatchDetailReq(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)


@dataclass
class IosPatchDetailReq(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)


@dataclass
class AndroidPatchDetailResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "AndroidPatchInfo" = betterproto.message_field(3)


@dataclass
class IosPatchDetailResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "IosPatchInfo" = betterproto.message_field(3)


@dataclass
class SendCouponReq(betterproto.Message):
    # 用户id
    uid: int = betterproto.int64_field(1)
    # 阅读券类型：1、通用券
    type: int = betterproto.int32_field(2)
    # 获取原因 1、大会员特权(年度) 2、大会员特权(月度) 3、资深用户福利 4、大会员福利(年度) 5、大会员福利(月度) 6、预约福利 7、下载福利
    reason: int = betterproto.int32_field(3)
    # 有效天数
    days: int = betterproto.int32_field(4)
    # 可用数量
    amount: int = betterproto.int32_field(5)


@dataclass
class PopListReq(betterproto.Message):
    # 页码
    page_num: int = betterproto.int32_field(1)
    # 分页条目数
    page_size: int = betterproto.int32_field(2)
    # 漫画ID（可选）
    comic_id: int = betterproto.int32_field(3)


@dataclass
class PopListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "PopListData" = betterproto.message_field(3)


@dataclass
class PopListData(betterproto.Message):
    list: List["PopList"] = betterproto.message_field(1)
    total: int = betterproto.int32_field(2)


@dataclass
class PopList(betterproto.Message):
    # 漫画ID
    comic_id: int = betterproto.int32_field(1)
    # 漫画标题
    title: str = betterproto.string_field(2)
    # 人气值
    popularity: int = betterproto.int64_field(3)
    # 人气值系数
    pop_ratio: float = betterproto.float_field(4)
    # 修改时间 RFC3339 2006-01-02T15:04:05+07:00
    mtime: str = betterproto.string_field(5)


@dataclass
class PopEditReq(betterproto.Message):
    comic_id: int = betterproto.int32_field(1)
    popularity: int = betterproto.int64_field(2)
    pop_ratio: float = betterproto.float_field(3)


@dataclass
class TopicListReq(betterproto.Message):
    # 页码
    page_num: int = betterproto.int32_field(1)
    # 分页条目数
    page_size: int = betterproto.int32_field(2)
    # TopicID 精确搜索
    topic_id: int = betterproto.int32_field(3)
    # 标题搜索 模糊搜索
    title: str = betterproto.string_field(4)
    # 状态筛选 0-上线 1-下线 2-定时上线 -1-全部
    status: int = betterproto.int32_field(5)


@dataclass
class TopicListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "TopicList" = betterproto.message_field(3)


@dataclass
class TopicList(betterproto.Message):
    list: List["TopicShort"] = betterproto.message_field(1)
    total: int = betterproto.int32_field(2)


@dataclass
class TopicShort(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)
    # 标题
    title: str = betterproto.string_field(2)
    # 状态 0-上线 1-下线 2-定时上线
    status: int = betterproto.int32_field(3)
    # 权重
    weight: float = betterproto.float_field(4)
    # 创建人
    cuser: str = betterproto.string_field(5)
    # 修改时间
    mtime: str = betterproto.string_field(6)


@dataclass
class QueryHiveReq(betterproto.Message):
    query: str = betterproto.string_field(1)


@dataclass
class QueryHiveResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "QueryHiveData" = betterproto.message_field(3)


@dataclass
class QueryHiveData(betterproto.Message):
    url: str = betterproto.string_field(1)


@dataclass
class TopicInfo(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)
    # 标题
    title: str = betterproto.string_field(2)
    # 图片
    img: str = betterproto.string_field(3)
    # 跳转类型 1-漫画详情 2-漫画单话 3-活动专题页地址
    jump_type: int = betterproto.int32_field(4)
    # 跳转漫画ID
    jump_comic: int = betterproto.int32_field(5)
    # 跳转话ID
    jump_epid: int = betterproto.int32_field(6)
    # 跳转URL
    jump_url: str = betterproto.string_field(7)
    # 状态 0-上线 1-下线 2-定时上线
    status: int = betterproto.int32_field(8)
    # 定时上线时间，RFC3339 2006-01-02T15:04:05+07:00
    active_time: str = betterproto.string_field(9)
    # 权重
    weight: float = betterproto.float_field(10)
    # 创建人
    cuser: str = betterproto.string_field(11)
    # Phone端标记
    phone: int = betterproto.int32_field(12)
    # H5端标记
    h5: int = betterproto.int32_field(13)
    # 新图片
    img2: str = betterproto.string_field(14)
    # 背景
    bg: str = betterproto.string_field(15)
    # 标签类型 1. 运营活动 2. 自定义标签
    tag_type: int = betterproto.int32_field(16)
    # 自定义标签
    custom_tag: str = betterproto.string_field(17)
    # 运营标签: 活动上线时间 2006-01-02 15:04:05
    act_start_time: str = betterproto.string_field(18)
    # 运营标签: 活动下线时间 2006-01-02 15:04:05
    act_end_time: str = betterproto.string_field(19)


@dataclass
class TopicDetailReq(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)


@dataclass
class DelTopicReq(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)


@dataclass
class TopicDetailResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "TopicInfo" = betterproto.message_field(3)


@dataclass
class EpOnlineReq(betterproto.Message):
    # 单话ID
    epid: int = betterproto.int32_field(1)
    # 上线状态 0-上线 1-下线 2-定时上线
    status: int = betterproto.int32_field(2)
    # 同步修改漫画连载状态 0-不勾选或者取消勾选 1-修改为连载中 2-修改为已完结
    finish_status: int = betterproto.int32_field(3)
    # 上线时间 RFC3339 2006-01-02T15:04:05+07:00
    pub_time: str = betterproto.string_field(15)


@dataclass
class WikiOnlineReq(betterproto.Message):
    # 百科ID
    id: int = betterproto.int32_field(1)
    # 上线状态 0-上线 1-下线
    status: int = betterproto.int32_field(2)


@dataclass
class ComicOnlineReq(betterproto.Message):
    # 漫画ID
    cid: int = betterproto.int32_field(1)
    # 上线状态 0-上线 1-下线 2-定时上线
    status: int = betterproto.int32_field(2)
    # 上线时间 格式 "2006-01-02 15:04:05"
    pub_time: str = betterproto.string_field(15)


@dataclass
class AddChapterReq(betterproto.Message):
    # 新增卷的时候，此处传 0
    id: int = betterproto.int32_field(1)
    # 长标题
    title: str = betterproto.string_field(2)
    # 短标题
    short_title: str = betterproto.string_field(3)
    # 漫画 id
    comic_id: int = betterproto.int32_field(4)
    # 序号
    ord: float = betterproto.float_field(5)
    # 0-未开卷 1-连载中 2-已完结
    is_finished: int = betterproto.int32_field(6)
    # 0-下线 1-上线 2-定时上线
    status: int = betterproto.int32_field(7)
    # 0-免费 1-付费
    pay_mode: int = betterproto.int32_field(8)
    # 金币
    gold: int = betterproto.int32_field(9)
    # 实付金币
    real_gold: int = betterproto.int32_field(10)
    # 封面
    cover: str = betterproto.string_field(11)
    # 预计话数
    expected_eps: int = betterproto.int32_field(12)
    # 列表接口使用，添加和修改卷不需要 上线时间(2019-10-01 00:00:00)
    online_time: str = betterproto.string_field(13)
    # 0-非预售 1-预售
    is_presale: int = betterproto.int32_field(14)
    # 预售文案
    presale_text: str = betterproto.string_field(15)
    # 预售截止时间 (2006-01-02 15:04:05)
    presale_time: str = betterproto.string_field(16)
    # 通用劵定价数量
    silver: int = betterproto.int32_field(17)


@dataclass
class UpdateChapterStatusReq(betterproto.Message):
    # 0-下线 1-上线 2-定时上线
    status: int = betterproto.int32_field(1)
    chapter_id: int = betterproto.int32_field(2)
    # 定时上线时间(格式:2019-12-01 10:00:00)
    online_time: str = betterproto.string_field(3)


@dataclass
class ListChaptersReq(betterproto.Message):
    comic_id: int = betterproto.int32_field(1)


@dataclass
class ListChaptersResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ListChapters" = betterproto.message_field(3)


@dataclass
class ListChapters(betterproto.Message):
    chapters: List["AddChapterReq"] = betterproto.message_field(1)


@dataclass
class DeleteChapterReq(betterproto.Message):
    chapter_id: int = betterproto.int32_field(1)
    comic_id: int = betterproto.int32_field(2)


@dataclass
class GetEpsByChapterIDReq(betterproto.Message):
    chapter_id: int = betterproto.int32_field(1)
    comic_id: int = betterproto.int32_field(2)


@dataclass
class GetEpsByChapterIDResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "GetEpsByChapterID" = betterproto.message_field(3)


@dataclass
class GetEpsByChapterID(betterproto.Message):
    chapters: List["ComicEpisode"] = betterproto.message_field(1)


@dataclass
class EpOnlineBatchReq(betterproto.Message):
    # epid列表
    epid: List[int] = betterproto.int32_field(1)
    # 上线状态 0-上线 1-下线 2-定时上线
    status: int = betterproto.int32_field(2)
    # 上线时间 RFC3339 2006-01-02T15:04:05+07:00
    pub_time: str = betterproto.string_field(15)


@dataclass
class VerifyEpListReq(betterproto.Message):
    # 漫画ID
    cid: int = betterproto.int32_field(1)
    # 审核状态 1-通过 2-驳回
    status: int = betterproto.int32_field(2)
    # 页码
    page_num: int = betterproto.int32_field(3)
    # 分页条目数
    page_size: int = betterproto.int32_field(4)


@dataclass
class VerifyEpListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["VerifyEpList"] = betterproto.message_field(3)


@dataclass
class VerifyEpList(betterproto.Message):
    # 单话ID
    epid: int = betterproto.int32_field(1)
    # 序号
    ord: float = betterproto.float_field(2)
    # 话数
    short_title: str = betterproto.string_field(3)
    # 目录标题
    title: str = betterproto.string_field(4)
    # 状态
    status: int = betterproto.int32_field(5)
    # 漫画标题
    comic_title: str = betterproto.string_field(6)
    # 漫画ID
    comic_id: int = betterproto.int32_field(7)
    # 通知时间
    vtime: str = betterproto.string_field(8)
    # 当前审核状态
    verify_status: int = betterproto.int32_field(9)


@dataclass
class StockListReq(betterproto.Message):
    pass


@dataclass
class StockListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["StockInfo"] = betterproto.message_field(3)


@dataclass
class StockInfo(betterproto.Message):
    # 主键
    id: int = betterproto.int64_field(1)
    # 漫画ID
    comic_id: int = betterproto.int32_field(2)
    # 漫画标题
    title: str = betterproto.string_field(3)
    # 添加人
    cuser: str = betterproto.string_field(4)
    # 添加时间
    ctime: str = betterproto.string_field(5)
    # 百科ID
    info_id: int = betterproto.int32_field(6)


@dataclass
class AddStockReq(betterproto.Message):
    # 添加人
    cuser: str = betterproto.string_field(1)
    # 漫画ID
    comic_ids: List[int] = betterproto.int32_field(2)


@dataclass
class DelStockReq(betterproto.Message):
    # 漫画ID
    comic_id: int = betterproto.int32_field(1)


@dataclass
class HotBlackListReq(betterproto.Message):
    pass


@dataclass
class HotBlackListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["HotBlackInfo"] = betterproto.message_field(3)


@dataclass
class HotBlackInfo(betterproto.Message):
    # 主键
    id: int = betterproto.int64_field(1)
    # 漫画ID
    comic_id: int = betterproto.int32_field(2)
    # 漫画标题
    title: str = betterproto.string_field(3)
    # 添加人
    cuser: str = betterproto.string_field(4)
    # 添加时间
    ctime: str = betterproto.string_field(5)


@dataclass
class AddHotBlackReq(betterproto.Message):
    # 添加人
    cuser: str = betterproto.string_field(1)
    # 漫画ID
    comic_ids: List[int] = betterproto.int32_field(2)


@dataclass
class DelHotBlackReq(betterproto.Message):
    # 漫画ID
    comic_id: int = betterproto.int32_field(1)


@dataclass
class DefaultListRequest(betterproto.Message):
    # 单页数量
    page_size: int = betterproto.int32_field(1)
    # 分页页数
    page_num: int = betterproto.int32_field(2)
    # 公司或合同名称 可选
    name: str = betterproto.string_field(3)


@dataclass
class CompanyRequest(betterproto.Message):
    # 公司名称
    company_name: str = betterproto.string_field(1)
    # 开户人
    account_user: str = betterproto.string_field(2)
    # 开户行
    bank: str = betterproto.string_field(3)
    # 银行卡号
    bank_card_num: str = betterproto.string_field(4)
    # uid
    uid: int = betterproto.int64_field(5)
    # 创建人
    create_user: str = betterproto.string_field(6)


@dataclass
class DelCompanyRequest(betterproto.Message):
    # 公司ID
    id: int = betterproto.int32_field(1)


@dataclass
class ModCompanyRequest(betterproto.Message):
    # 公司ID
    id: int = betterproto.int32_field(1)
    # 公司名称
    company_name: str = betterproto.string_field(2)
    # 开户人
    account_user: str = betterproto.string_field(3)
    # 开户行
    bank: str = betterproto.string_field(4)
    # 银行卡号
    bank_card_num: str = betterproto.string_field(5)
    # uid
    uid: int = betterproto.int64_field(6)
    # 修改人
    create_user: str = betterproto.string_field(7)


@dataclass
class CompanyListResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "CompanyInfo" = betterproto.message_field(3)


@dataclass
class CompanyInfo(betterproto.Message):
    list: List["CompanyDetail"] = betterproto.message_field(1)
    # 公司页总数
    total: int = betterproto.int32_field(2)
    # 公司总数
    total_count: int = betterproto.int32_field(3)


@dataclass
class CompanyDetail(betterproto.Message):
    # 公司ID
    id: int = betterproto.int32_field(1)
    # 公司名称
    company_name: str = betterproto.string_field(2)
    # 开户人
    account_user: str = betterproto.string_field(3)
    # 开户行
    bank: str = betterproto.string_field(4)
    # 银行卡号
    bank_card_num: str = betterproto.string_field(5)
    # uid
    uid: int = betterproto.int64_field(6)
    # 最后修改人
    create_user: str = betterproto.string_field(14)
    # 最后修改时间
    m_time: str = betterproto.string_field(15)


@dataclass
class ContractRequest(betterproto.Message):
    # 合同名称
    contract_name: str = betterproto.string_field(1)
    # 合同编号
    serial_no: str = betterproto.string_field(2)
    # 版权方
    copyright: str = betterproto.string_field(3)
    # 代理商
    agent: str = betterproto.string_field(4)
    # 关联漫画id 数组
    comic_ids: List[int] = betterproto.int32_field(5)
    # 分成门槛金额 小数点后4位
    divided_money: float = betterproto.double_field(6)
    # 渠道费率 0-100
    channel_rate: float = betterproto.float_field(7)
    # bili费率 0-100
    bili_rate: float = betterproto.float_field(8)
    # 版权方费率 0-100
    copyright_rate: float = betterproto.float_field(9)
    # 代理方费率
    agent_rate: float = betterproto.float_field(10)
    # 合同截止时间 格式 "2016-01-01"
    expire_time: str = betterproto.string_field(11)
    # 合同上传图片地址 可传多张
    contract_pictures: List[str] = betterproto.string_field(12)
    # 创建人
    create_user: str = betterproto.string_field(13)
    # 是否包含漫读券
    is_include_coupon: bool = betterproto.bool_field(14)


@dataclass
class ModContractRequest(betterproto.Message):
    # 结算流id
    id: int = betterproto.int32_field(1)
    # 合同名称
    contract_name: str = betterproto.string_field(2)
    # 合同编号
    serial_no: str = betterproto.string_field(3)
    # 版权方
    copyright: str = betterproto.string_field(4)
    # 代理商
    agent: str = betterproto.string_field(5)
    # 关联漫画id 数组
    comic_ids: List[int] = betterproto.int32_field(6)
    # 分成门槛金额
    divided_money: float = betterproto.double_field(7)
    # 渠道费率 0-100
    channel_rate: float = betterproto.float_field(8)
    # bili费率 0-100
    bili_rate: float = betterproto.float_field(9)
    # 版权方费率 0-100
    copyright_rate: float = betterproto.float_field(10)
    # 代理商费率
    agent_rate: float = betterproto.float_field(11)
    # 合同截止时间 格式 "2016-01-01"
    expire_time: str = betterproto.string_field(12)
    # 合同上传图片地址 可传多张
    contract_pictures: List[str] = betterproto.string_field(13)
    # 修改人
    create_user: str = betterproto.string_field(14)
    # 是否包含漫读券
    is_include_coupon: bool = betterproto.bool_field(15)


@dataclass
class DelContractRequest(betterproto.Message):
    # 结算流ID
    id: int = betterproto.int32_field(1)


@dataclass
class UpdateContractsStatusReq(betterproto.Message):
    # 结算流状态 0-未结算 1-已结算 2-已出帐
    status: int = betterproto.int32_field(1)
    # 结算类型 1-商务结算 2-财务结算
    type: int = betterproto.int32_field(2)
    # 结算时间,月份,格式为 2006-01
    date: str = betterproto.string_field(3)


@dataclass
class GetQueryTablesReq(betterproto.Message):
    page_num: int = betterproto.int32_field(1)
    page_size: int = betterproto.int32_field(2)


@dataclass
class GetQueryTablesResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "QueryTablesData" = betterproto.message_field(3)


@dataclass
class QueryTablesData(betterproto.Message):
    total_count: int = betterproto.int32_field(1)
    list: List["Table"] = betterproto.message_field(2)


@dataclass
class Table(betterproto.Message):
    id: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    desc: str = betterproto.string_field(3)


@dataclass
class GetQueryFieldsReq(betterproto.Message):
    table_id: int = betterproto.int32_field(3)


@dataclass
class GetQueryFieldsResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "QueryFieldsData" = betterproto.message_field(3)


@dataclass
class QueryFieldsData(betterproto.Message):
    list: List["Field"] = betterproto.message_field(1)


@dataclass
class Field(betterproto.Message):
    id: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    desc: str = betterproto.string_field(3)


@dataclass
class ExportBillReq(betterproto.Message):
    # 月份，格式为 2006-01
    date: str = betterproto.string_field(1)
    # 管理后台，财务只能看到已出帐和已结算的数据，商务都可以看到，需要根据类型区分 1-商务结算 2-财务结算
    type: int = betterproto.int32_field(2)


@dataclass
class ExportBillResp(betterproto.Message):
    """
    这是自定义类型，返回 excel 文件字节流 只要 message 中带有 content_type 和 data，框架就会读取对应的值直接输出
    """

    # excel 文件类型为 application/vnd.ms-excel
    content_type: str = betterproto.string_field(1)
    # excel 文件内容
    data: bytes = betterproto.bytes_field(2)


@dataclass
class ExportRedeemCodesResp(betterproto.Message):
    """导出兑换码 csv 响应"""

    # csv 文件类型为 application/csv
    content_type: str = betterproto.string_field(1)
    # excel 文件内容
    data: bytes = betterproto.bytes_field(2)


@dataclass
class ContractListResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ContractInfo" = betterproto.message_field(3)


@dataclass
class ContractInfo(betterproto.Message):
    list: List["Contract"] = betterproto.message_field(1)
    # 合同页总数
    total: int = betterproto.int32_field(2)
    # 合同总数
    total_count: int = betterproto.int32_field(3)


@dataclass
class Contract(betterproto.Message):
    # 合同ID
    id: int = betterproto.int32_field(1)
    # 合同名称
    contract_name: str = betterproto.string_field(2)
    # 合同编号
    serial_no: str = betterproto.string_field(3)
    # 版权方
    copyright: str = betterproto.string_field(4)
    # 代理商
    agent: str = betterproto.string_field(5)
    # 关联漫画id组 逗号分隔 比如 [1,2,3,4]
    comic_ids: List[int] = betterproto.int32_field(6)
    # 分成门槛金额
    divided_money: float = betterproto.double_field(7)
    # 渠道费率 0-100
    channel_rate: float = betterproto.float_field(8)
    # bili费率 0-100
    bili_rate: float = betterproto.float_field(9)
    # 版权方费率 0-100
    copyright_rate: float = betterproto.float_field(10)
    # 代理商费率 0-100
    agent_rate: float = betterproto.float_field(11)
    # 合同截止时间 格式 "2016-01-01"
    expire_time: str = betterproto.string_field(12)
    # 合同上传图片地址
    contract_pictures: List[str] = betterproto.string_field(13)
    # 最后修改人
    create_user: str = betterproto.string_field(14)
    # 最后修改时间
    m_time: str = betterproto.string_field(15)
    # 是否包含漫读券
    is_include_coupon: bool = betterproto.bool_field(16)


@dataclass
class ContractBillInfo(betterproto.Message):
    list: List["ContractBill"] = betterproto.message_field(1)
    # 结算流页总数
    total: int = betterproto.int32_field(2)
    # 结算流总数
    total_count: int = betterproto.int32_field(3)


@dataclass
class ContractBill(betterproto.Message):
    # 合同ID
    id: int = betterproto.int32_field(1)
    # 合同名称
    contract_name: str = betterproto.string_field(2)
    # 漫币收入
    gold_money: float = betterproto.float_field(3)
    # 阅读券收入
    coupon_money: float = betterproto.float_field(4)
    # 抵扣金额
    deduct_money: float = betterproto.float_field(5)
    # bili分成
    bili_money: float = betterproto.float_field(6)
    # 版权方分成
    copyright_money: float = betterproto.float_field(7)
    # 代理商分成
    agent_money: float = betterproto.float_field(8)


@dataclass
class AllCompanyResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["CompanyProfile"] = betterproto.message_field(3)


@dataclass
class CompanyProfile(betterproto.Message):
    # 公司id
    id: int = betterproto.int32_field(1)
    # 公司名称
    company_name: str = betterproto.string_field(2)


@dataclass
class DiscountListRequest(betterproto.Message):
    # 单页数量
    page_size: int = betterproto.int32_field(1)
    # 分页页数
    page_num: int = betterproto.int32_field(2)
    # 优惠活动类型 1 折扣 2 限时免费 (整本) 3 指定章节限时免费 4 畅读卡限免免费 (整本) 5 畅读卡章节限时免费 6 普通卷限免 7
    # 畅读卡卷限免
    type: int = betterproto.int32_field(3)


@dataclass
class DiscountListResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "Discount" = betterproto.message_field(3)


@dataclass
class Discount(betterproto.Message):
    list: List["DiscountDetail"] = betterproto.message_field(1)
    # 活动总数
    total_count: int = betterproto.int32_field(2)


@dataclass
class DiscountDetail(betterproto.Message):
    # 活动id
    id: int = betterproto.int32_field(1)
    # 活动描述
    desc: str = betterproto.string_field(2)
    # 漫画id数组
    comic_ids: List[int] = betterproto.int32_field(3)
    # 活动开始时间 格式 2006-01-02 15:04:05
    begin_time: str = betterproto.string_field(4)
    # 活动结束时间 格式 2006-01-02 15:04:05
    end_time: str = betterproto.string_field(5)
    # 最后修改时间 格式 2006-01-02 15:04:05
    last_modify_time: str = betterproto.string_field(6)
    # 修改人
    muser: str = betterproto.string_field(7)
    # 只有折扣活动有值 1-99 非折扣活动默认为0
    discount: int = betterproto.int32_field(8)
    # 整本漫画是否打折
    is_comic_on: bool = betterproto.bool_field(9)
    # 单话是否打折
    is_episode_on: bool = betterproto.bool_field(10)
    # 单话漫画折扣 1-99 非折扣活动默认为0
    ep_discount: int = betterproto.int32_field(11)
    # 批量是否打折
    is_batch_on: bool = betterproto.bool_field(12)
    batch_discounts: List["BatchDiscount"] = betterproto.message_field(13)
    # 指定章节限时免费的章节ID
    free_ep_ids: List[int] = betterproto.int32_field(14)
    # 指定卷限时免费的卷ID
    free_volume_ids: List[int] = betterproto.int32_field(15)


@dataclass
class BatchDiscount(betterproto.Message):
    # 该档位折扣
    discount: int = betterproto.int32_field(1)
    # 档位上限, 0为没有
    upper_limit: int = betterproto.int32_field(2)
    # 档位下限, 0为没有
    lower_limit: int = betterproto.int32_field(3)


@dataclass
class DeleteEventReq(betterproto.Message):
    # 事件 ID
    id: int = betterproto.int32_field(1)


@dataclass
class GetFavSendCouponListReq(betterproto.Message):
    # 页数
    page_num: int = betterproto.int32_field(1)
    # 每页数量
    page_size: int = betterproto.int32_field(2)


@dataclass
class FavSendCouponListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "FavSendCouponList" = betterproto.message_field(3)


@dataclass
class FavSendCouponList(betterproto.Message):
    total: int = betterproto.int32_field(1)
    list: List["FavSendCoupon"] = betterproto.message_field(2)


@dataclass
class FavSendCoupon(betterproto.Message):
    # 追漫发券事件ID(仅更新时需传递此参数)
    id: int = betterproto.int32_field(1)
    # 事件类型: 1. 追漫发券
    type: int = betterproto.int32_field(2)
    # 活动描述
    desc: str = betterproto.string_field(3)
    # 活动开始时间 格式 2006-01-02 15:04:05
    start_time: str = betterproto.string_field(4)
    # 活动结束时间 格式 2006-01-02 15:04:05
    end_time: str = betterproto.string_field(5)
    # 发券设定
    send_options: List["FavSendCouponOption"] = betterproto.message_field(6)
    # 最后更新时间2006-01-02 15:04:05 (请求时无需传递此参数)
    mtime: str = betterproto.string_field(7)
    # 操作人 (请求时无需传递此参数)
    muser: str = betterproto.string_field(8)


@dataclass
class FavSendCouponOption(betterproto.Message):
    # 漫画 ID
    comic_id: int = betterproto.int32_field(1)
    # 漫画 ID
    set_id: int = betterproto.int32_field(2)
    # 发券数量
    amount: int = betterproto.int32_field(3)


@dataclass
class DiscountSetRequest(betterproto.Message):
    # 活动id
    id: int = betterproto.int32_field(1)
    # 活动描述
    desc: str = betterproto.string_field(2)
    # 漫画id数组
    comic_ids: List[int] = betterproto.int32_field(3)
    # 优惠活动类型 1 折扣 2 限时免费 (整本) 3 指定章节限时免费 4 畅读卡限免免费 (整本) 5 畅读卡章节限时免费 6 普通卷限免 7
    # 畅读卡卷限免
    type: int = betterproto.int32_field(4)
    # 折扣 1-99, 整本漫画不打折时传100
    discount: int = betterproto.int32_field(5)
    # 活动开始时间 格式 2006-01-02 15:04:05
    begin_time: str = betterproto.string_field(6)
    # 活动结束时间 格式 2006-01-02 15:04:05
    end_time: str = betterproto.string_field(7)
    # 单话漫画折扣 1-99, 单话不打折时传100
    ep_discount: int = betterproto.int32_field(8)
    # 批量打折档位, 不打折时，折扣值都传100
    batch_discounts: List["BatchDiscount"] = betterproto.message_field(10)
    # 指定章节限时免费的章节ID
    free_ep_ids: List[int] = betterproto.int32_field(11)
    # 指定卷限时免费的卷ID
    free_volume_ids: List[int] = betterproto.int32_field(12)


@dataclass
class DiscountDelRequest(betterproto.Message):
    id: int = betterproto.int32_field(1)
    # 修改人
    muser: str = betterproto.string_field(2)


@dataclass
class SystemLogListRequest(betterproto.Message):
    # 单页数量
    page_size: int = betterproto.int32_field(1)
    # 分页页数
    page_num: int = betterproto.int32_field(2)
    # 用户名
    operate_user: str = betterproto.string_field(3)
    # 操作日期 格式 2006-01-02
    date: str = betterproto.string_field(4)
    # 接口路由
    api: str = betterproto.string_field(5)


@dataclass
class SystemLogListResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SystemLogInfo" = betterproto.message_field(3)


@dataclass
class SystemLogInfo(betterproto.Message):
    list: List["SystemLog"] = betterproto.message_field(1)
    # 日志总数
    total_count: int = betterproto.int32_field(2)


@dataclass
class SystemLog(betterproto.Message):
    # 日志ID
    id: int = betterproto.int32_field(1)
    # 操作用户
    user: str = betterproto.string_field(2)
    # 操作日期
    date: str = betterproto.string_field(3)
    # 接口路由
    api: str = betterproto.string_field(4)
    # 请求参数
    req_msg_content: str = betterproto.string_field(5)


@dataclass
class GetContentLengthReq(betterproto.Message):
    # 资源 url
    url: str = betterproto.string_field(1)


@dataclass
class ContentLength(betterproto.Message):
    # 字符型数字，从 http 的 content-length 提取
    content_length: str = betterproto.string_field(1)


@dataclass
class GetContentLengthResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ContentLength" = betterproto.message_field(3)


@dataclass
class GetRechargeHistoryReq(betterproto.Message):
    # 订单 ID 传入该字段表示按订单号查询
    order_id: str = betterproto.string_field(1)
    # 用户 ID
    user_id: int = betterproto.int64_field(2)
    # 页码
    page_num: int = betterproto.int32_field(4)
    # 条目数
    page_size: int = betterproto.int32_field(5)
    # 年份 范围 >= 2018; 范围<= 当前年份，不传该参数默认为当前年份
    order_year: int = betterproto.int32_field(6)
    # 月份 范围 1-12
    order_month: int = betterproto.int32_field(7)


@dataclass
class RechargeInfo(betterproto.Message):
    id: int = betterproto.int64_field(1)
    # 充值数量
    charge_amount: int = betterproto.int32_field(2)
    # 赠送数量
    free_amount: int = betterproto.int32_field(3)
    # 支付渠道 alipay(支付宝)、wechat(微信)、paypal(paypal) iap(In App
    # Purchase)、qpay(QQ支付)、huabei(花呗支付)、 ali_bank（网银支付）、bocom（交行信用卡支付）、bp（B币支付）
    # 其中 iap 为 iOS 充值
    pay_channel: str = betterproto.string_field(4)
    # 创建时间
    create_time: str = betterproto.string_field(5)
    # 支付时间
    pay_time: str = betterproto.string_field(6)
    # 支付平台交易号
    platform_id: str = betterproto.string_field(7)


@dataclass
class RechargeData(betterproto.Message):
    # 用户 iOS 漫币
    ios_coin: int = betterproto.int32_field(1)
    # 非 iOS 漫币
    other_coin: int = betterproto.int32_field(2)
    # iOS 累计充值
    total_ios_recharge: int = betterproto.int32_field(3)
    # 非 iOS 累计充值
    total_other_recharge: int = betterproto.int32_field(4)
    # iOS 累计消费
    total_ios_consume: int = betterproto.int32_field(5)
    # 非 iOS 累计消费
    total_other_consume: int = betterproto.int32_field(6)
    # 总页数
    total_page: int = betterproto.int32_field(7)
    # 充值信息
    recharge_info: List["RechargeInfo"] = betterproto.message_field(8)
    # 用户 ID
    user_id: int = betterproto.int64_field(9)
    # 禁止充值 true 禁止, false 允许
    no_pay: bool = betterproto.bool_field(10)


@dataclass
class ChangeReplyStateReq(betterproto.Message):
    # 漫画ID or 单话ID
    id: int = betterproto.int32_field(1)
    # 1.漫画详情评论 2.单话评论 3.漫画点评
    reply_type: int = betterproto.int32_field(2)
    # 开关：1.开，2.关
    state: int = betterproto.int32_field(3)


@dataclass
class GetRechargeHistoryResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "RechargeData" = betterproto.message_field(3)


@dataclass
class GetExpenseHistoryReq(betterproto.Message):
    # 用户 ID
    user_id: int = betterproto.int64_field(1)
    # 漫画 ID
    comic_id: int = betterproto.int32_field(2)
    # 页码
    page_num: int = betterproto.int32_field(3)
    # 条目数
    page_size: int = betterproto.int32_field(4)
    # 年份 范围 >= 2018; 范围<= 当前年份，不传该参数默认为当前年份
    order_year: int = betterproto.int32_field(5)
    # 月份 范围 1-12
    order_month: int = betterproto.int32_field(6)
    # 支付平台 1: IPAD, 2: iOS, 3: Android, 4: PC
    platform: int = betterproto.int32_field(7)
    # 消费方式 3: 漫币 2: 阅读券 4: 限免卡 5: 通用券 后端同学注意， 非订单范畴从 10000 开始 月票 10001
    pay_type: int = betterproto.int32_field(8)
    # 卡券模板ID
    coupon_reason: int = betterproto.int32_field(9)
    # 用户使用的卡券的具体ID
    coupon_id: int = betterproto.int32_field(10)
    # 传空返回所有漫画相关消费 12-退漫币 13-退漫读券
    buy_types: List[int] = betterproto.int32_field(11)


@dataclass
class ExpenseInfo(betterproto.Message):
    # 消费 ID
    id: int = betterproto.int64_field(1)
    # 购买时间
    buy_time: str = betterproto.string_field(2)
    # 漫画 title
    title: str = betterproto.string_field(3)
    # 单话 ID
    ep_id: int = betterproto.int32_field(4)
    # 章节短标题
    ep_title: str = betterproto.string_field(5)
    # 支付价格
    pay_amount: int = betterproto.int32_field(6)
    # 消费方式 目前支持的退单类型: [2,3,4,5]
    pay_type: int = betterproto.int32_field(7)
    # 消费内容 应援/购买章节
    pay_content_type: str = betterproto.string_field(8)
    # 支付终端
    platform: int = betterproto.int32_field(9)
    # 漫画 ID
    comic_id: int = betterproto.int32_field(10)
    # 卡券模板ID
    coupon_reason: int = betterproto.int32_field(11)
    # 用户使用的卡券的具体ID
    coupon_id: int = betterproto.int32_field(12)
    # 是否使用打折卡
    is_used_discount: bool = betterproto.bool_field(13)
    discount_info: "DiscountBrief" = betterproto.message_field(14)
    # 卡券使用数量
    coupon_amount: int = betterproto.int32_field(15)
    # 卡券类型文本
    coupon_type_txt: str = betterproto.string_field(16)
    # 12-退漫币 13-退漫读券 目前支持的退单类型: [1,2,3,4,6,7,8,9] 其他buy_type不支持退单
    buy_type: int = betterproto.int32_field(17)
    # 0 - 正常 1 - 已退单 2 - 已退单(并归还虚拟资产)
    state: int = betterproto.int32_field(18)


@dataclass
class DiscountBrief(betterproto.Message):
    # 打折卡名称
    description: str = betterproto.string_field(1)
    # 折扣
    discount: int = betterproto.int32_field(2)
    # 批次
    reason: int = betterproto.int32_field(3)


@dataclass
class ExpenseData(betterproto.Message):
    # 消费总页数
    total_page: int = betterproto.int32_field(1)
    # 消费信息
    expense_info: List["ExpenseInfo"] = betterproto.message_field(2)


@dataclass
class GetExpenseHistoryResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ExpenseData" = betterproto.message_field(3)


@dataclass
class GetCreditsHistoryReq(betterproto.Message):
    # 用户 ID
    user_id: int = betterproto.int64_field(1)
    # 页码
    page_num: int = betterproto.int32_field(2)
    # 条目数
    page_size: int = betterproto.int32_field(3)
    # 年份 范围 >= 2018; 范围<= 当前年份，不传该参数默认为当前年份
    order_year: int = betterproto.int32_field(4)
    # 月份 范围 1-12
    order_month: int = betterproto.int32_field(5)


@dataclass
class CreditInfo(betterproto.Message):
    id: int = betterproto.int64_field(1)
    # 类型 获得/消费
    type: str = betterproto.string_field(2)
    # 消费 / 获得 数量
    amount: int = betterproto.int32_field(3)
    # 消费 / 获得 方式
    method: str = betterproto.string_field(4)
    # 创建时间
    create_time: str = betterproto.string_field(5)


@dataclass
class CreditData(betterproto.Message):
    # 用户当前积分
    current_point: int = betterproto.int64_field(1)
    # 用户累计获得
    total_get: int = betterproto.int64_field(2)
    # 用户累计消费
    total_consume: int = betterproto.int64_field(3)
    # 总页数
    total_page: int = betterproto.int32_field(4)
    # 积分信息
    credit_info: List["CreditInfo"] = betterproto.message_field(5)


@dataclass
class GetCreditsHistoryResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "CreditData" = betterproto.message_field(3)


@dataclass
class AddApkURLReq(betterproto.Message):
    # 链接别名
    alias: str = betterproto.string_field(2)
    # 渠道链接
    url: str = betterproto.string_field(3)


@dataclass
class EditApkURLReq(betterproto.Message):
    id: int = betterproto.int32_field(1)
    # 链接别名
    alias: str = betterproto.string_field(2)
    # 渠道链接
    url: str = betterproto.string_field(3)


@dataclass
class DefaultIDReq(betterproto.Message):
    id: int = betterproto.int32_field(1)


@dataclass
class ApkURL(betterproto.Message):
    id: int = betterproto.int32_field(1)
    # 链接别名
    alias: str = betterproto.string_field(2)
    # 渠道链接
    url: str = betterproto.string_field(3)
    # 最近操作人
    user: str = betterproto.string_field(4)
    # 最近操作时间 "2006-01-02 15:04:05"
    time: str = betterproto.string_field(5)


@dataclass
class ListApkURLData(betterproto.Message):
    urls: List["ApkURL"] = betterproto.message_field(1)


@dataclass
class ListApkURLResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ListApkURLData" = betterproto.message_field(3)


@dataclass
class GetUserCouponsReq(betterproto.Message):
    # 页码
    page_num: int = betterproto.int32_field(1)
    # 条目数
    page_size: int = betterproto.int32_field(2)
    # uid
    uid: int = betterproto.int64_field(3)
    # tab_type: 1. 漫读券，2. 限免卡, 3. 打折卡 后端开发同学注意: 考虑券的扩展非券查询从 10000 以后开始 10001. 月票
    # 10002. 通用券
    tab_type: int = betterproto.int32_field(4)
    # 卡券模板ID
    coupon_reason: int = betterproto.int32_field(5)
    # 到账年份
    ctime_year: int = betterproto.int32_field(6)
    # 到账月份
    ctime_month: int = betterproto.int32_field(7)


@dataclass
class GetUserCouponsResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "UserCouponsData" = betterproto.message_field(3)


@dataclass
class UserCouponsData(betterproto.Message):
    total_count: int = betterproto.int32_field(1)
    coupons: List["UserCoupon"] = betterproto.message_field(2)


@dataclass
class UserCoupon(betterproto.Message):
    # 用户使用的具体卡券ID
    id: int = betterproto.int32_field(1)
    # 卡券模板ID
    reason: int = betterproto.int32_field(2)
    # 卡券类型ID
    type: int = betterproto.int32_field(3)
    # 卡券文本
    reason_str: str = betterproto.string_field(4)
    # 卡券类型文本
    type_str: str = betterproto.string_field(5)
    # 开始使用时间: 2006-01-02
    ctime: str = betterproto.string_field(6)
    # 最后可使用时间: 2006-01-02
    expire_time: str = betterproto.string_field(7)
    # 剩余数量
    remain_amount: int = betterproto.int32_field(8)
    # 该券总数量
    amount: int = betterproto.int32_field(9)
    # 是否过期
    is_expired: bool = betterproto.bool_field(10)


@dataclass
class GetComicIDsByAuthorReq(betterproto.Message):
    # 作者 ID
    author_id: int = betterproto.int32_field(1)


@dataclass
class GetComicIDsByAuthorResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List[int] = betterproto.int32_field(3)


@dataclass
class GetComicIDsByStyleReq(betterproto.Message):
    # 风格 ID
    style_id: int = betterproto.int32_field(1)


@dataclass
class GetComicIDsByStyleResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List[int] = betterproto.int32_field(3)


@dataclass
class AddPointSendPlanReq(betterproto.Message):
    # 发放说明
    reason_description: str = betterproto.string_field(1)
    # 发放用户类型 1:所有漫画用户 2:指定用户
    type: int = betterproto.int32_field(2)
    # 发放用户组 uids
    uids: List[int] = betterproto.int64_field(3)
    # 人均发放数量
    amount: int = betterproto.int32_field(4)
    # uid 文件上传到 bfs 对应的 url
    file: str = betterproto.string_field(5)


@dataclass
class GetPointSendPlansReq(betterproto.Message):
    # 单页数量
    page_size: int = betterproto.int32_field(1)
    # 分页页数
    page_num: int = betterproto.int32_field(2)


@dataclass
class GetPointSendPlansResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "PointSendPlansData" = betterproto.message_field(3)


@dataclass
class PointSendPlansData(betterproto.Message):
    # 积分发送计划列表
    list: List["PointCouponSendPlan"] = betterproto.message_field(1)
    # 总数量
    total: int = betterproto.int32_field(2)


@dataclass
class PointCouponSendPlan(betterproto.Message):
    # 发放id
    id: int = betterproto.int32_field(1)
    # 发放说明
    reason_description: str = betterproto.string_field(2)
    # 发放数量
    amount: int = betterproto.int32_field(3)
    # 发放状态 0: 未发放, 1: 发放中, 2: 发放成功
    status: int = betterproto.int32_field(4)
    # 创建人
    cuser: str = betterproto.string_field(5)
    # 创建时间 2006-01-02 15:04:05
    ctime: str = betterproto.string_field(6)
    # 发放的用户 为""时为当时所有用户
    uids: str = betterproto.string_field(7)


@dataclass
class AddComicSeriesReq(betterproto.Message):
    # 标题
    title: str = betterproto.string_field(1)
    # 作者
    cuser: str = betterproto.string_field(2)
    # 状态 0 下线 1上线 2定时上线
    status: int = betterproto.int32_field(3)
    # 上线时间 "2006-01-02 15:04:05"
    active_time: str = betterproto.string_field(4)
    # 下限时间 "2006-01-02 15:04:05"
    offline_time: str = betterproto.string_field(5)


@dataclass
class EditComicSeriesReq(betterproto.Message):
    id: int = betterproto.int32_field(1)
    # 标题
    title: str = betterproto.string_field(2)
    # 作者
    cuser: str = betterproto.string_field(3)
    # 状态 0 下线 1上线 2定时上线
    status: int = betterproto.int32_field(4)
    # 上线时间 "2006-01-02 15:04:05"
    active_time: str = betterproto.string_field(5)
    # 下限时间 "2006-01-02 15:04:05"
    offline_time: str = betterproto.string_field(6)


@dataclass
class AddComicToSeriesResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "PointSendPlansData" = betterproto.message_field(3)


@dataclass
class DelDefaultReq(betterproto.Message):
    id: int = betterproto.int32_field(1)


@dataclass
class AddComicToSeriesReq(betterproto.Message):
    # 标题
    title: str = betterproto.string_field(1)
    # 系列 ID
    series_id: int = betterproto.int32_field(2)
    # 漫画 ID
    comic_id: int = betterproto.int32_field(3)
    # 权重
    weight: int = betterproto.int32_field(4)


@dataclass
class EditComicInSeriesReq(betterproto.Message):
    id: int = betterproto.int32_field(1)
    # 标题
    title: str = betterproto.string_field(2)
    # 系列 ID
    series_id: int = betterproto.int32_field(3)
    # 漫画 ID
    comic_id: int = betterproto.int32_field(4)
    # 权重
    weight: int = betterproto.int32_field(5)


@dataclass
class ListSeriesResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ComicSeriesData" = betterproto.message_field(3)


@dataclass
class ComicSeriesData(betterproto.Message):
    series: List["ComicSeries"] = betterproto.message_field(1)
    total_count: int = betterproto.int32_field(2)


@dataclass
class ComicSeries(betterproto.Message):
    id: int = betterproto.int32_field(1)
    # 标题
    title: str = betterproto.string_field(2)
    # 作者
    cuser: str = betterproto.string_field(3)
    # 状态 0 下线 1上线 2定时上线
    status: int = betterproto.int32_field(4)
    # 上线时间 "2006-01-02 15:04:05"
    active_time: str = betterproto.string_field(5)
    # 下限时间 "2006-01-02 15:04:05"
    offline_time: str = betterproto.string_field(6)
    # 漫画信息
    comics: List["SeriesComicInfo"] = betterproto.message_field(7)
    # 修改时间
    mtime: str = betterproto.string_field(8)


@dataclass
class SeriesComicInfo(betterproto.Message):
    id: int = betterproto.int32_field(1)
    # 标题
    title: str = betterproto.string_field(2)
    # 漫画 ID
    comic_id: int = betterproto.int32_field(3)
    # 权重
    weight: int = betterproto.int32_field(4)


@dataclass
class GetActionReq(betterproto.Message):
    # 用户id
    uid: int = betterproto.int64_field(1)
    # 开始时间 2020-04-21 00:00:00
    begin_time: str = betterproto.string_field(2)
    # 开始时间 2020-04-21 00:00:00
    end_time: str = betterproto.string_field(3)
    # 行为id 0-全部 1-支付 2-购买 3-收藏 4-月票 5-阅读 6-评价
    action_id: int = betterproto.int32_field(4)
    # 页码
    page_num: int = betterproto.int32_field(5)
    # 页数量
    page_size: int = betterproto.int32_field(6)


@dataclass
class GetActionResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "GetActionData" = betterproto.message_field(3)


@dataclass
class GetActionData(betterproto.Message):
    total: int = betterproto.int32_field(1)
    list: List["GetActionList"] = betterproto.message_field(2)


@dataclass
class GetActionList(betterproto.Message):
    # 行为 1-支付 2-购买 3-收藏 4-月票 5-阅读 6-评价
    behavior: int = betterproto.int32_field(1)
    # 目标 behavior = 1 表示：充值方式 1-支付宝 2-微信 3-iOS内购 4-qq钱包 5-b币 behavior = 2 表示：漫画ID
    # behavior = 3 表示：漫画ID behavior = 4 表示：漫画ID behavior = 5 表示：漫画ID behavior = 6
    # 表示：评论区ID
    target: int = betterproto.int64_field(2)
    # 类型 behavior = 2 表示：消费方式 0-漫币 else-阅读券
    type: int = betterproto.int32_field(3)
    # 数量 behavior = 1 表示：支付金额 behavior = 2 表示：购买金额 behavior = 4 表示：月票数量
    cnt: int = betterproto.int32_field(4)
    # 时间
    mtime: str = betterproto.string_field(5)


@dataclass
class EditSchedulePlanReq(betterproto.Message):
    # 业务主键 id
    id: int = betterproto.int32_field(1)
    # 业务类型 1-月票 banner 2-应援 banner
    type: int = betterproto.int32_field(2)
    # 上线时间
    online_time: str = betterproto.string_field(3)
    # 下线时间
    offline_time: str = betterproto.string_field(4)
    # 0-上线 1-下线 2-定时上线
    status: int = betterproto.int32_field(5)


@dataclass
class GetCachedKeysResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "CachedKeyInfo" = betterproto.message_field(3)


@dataclass
class CachedKeyInfo(betterproto.Message):
    keys: List["CachedKey"] = betterproto.message_field(1)


@dataclass
class CachedKey(betterproto.Message):
    name: str = betterproto.string_field(1)
    doc: str = betterproto.string_field(2)


@dataclass
class KeyOperateReq(betterproto.Message):
    # 0 查询 1 删除
    type: int = betterproto.int32_field(1)
    key: str = betterproto.string_field(2)


@dataclass
class KeyOperateResp(betterproto.Message):
    # 1 cached miss
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "KeyOperateInfo" = betterproto.message_field(3)


@dataclass
class KeyOperateInfo(betterproto.Message):
    value: str = betterproto.string_field(1)
    expired: int = betterproto.int32_field(2)


@dataclass
class RefundBuyOrderReq(betterproto.Message):
    # 解锁订单号
    order_id: int = betterproto.int64_field(1)
    # 订单创建年份
    year: int = betterproto.int32_field(2)
    # 订单创建月份
    month: int = betterproto.int32_field(3)
    # 是否仅回锁鉴权 true 不归还漫币漫读券等资产 false 归还漫币漫读券等资产(仅特殊情况和自动化测试使用)
    only_lock: bool = betterproto.bool_field(4)


@dataclass
class EditTokenTempReq(betterproto.Message):
    # 模版ID 有修改 无新增
    id: int = betterproto.int32_field(1)
    # 口令模版名称
    title: str = betterproto.string_field(2)
    # 口令文案
    content: str = betterproto.string_field(3)
    # 图片地址
    image_url: str = betterproto.string_field(4)
    # 跳转-1 领取礼包-2 裂变礼包-3
    type: int = betterproto.int32_field(5)
    # 跳转地址
    jump_value: str = betterproto.string_field(6)
    # 卡券配置
    gift_settings: List["TokenGiftSetting"] = betterproto.message_field(7)
    # 裂变活动开始时间
    fission_start_time: str = betterproto.string_field(8)
    # 裂变活动结束时间
    fission_end_time: str = betterproto.string_field(9)
    # 裂变活动每日拉新数量
    fission_day_num: int = betterproto.int32_field(10)
    # 裂变活动新人礼包
    fission_new_gift: List["TokenGiftSetting"] = betterproto.message_field(11)
    # 裂变活动老人礼包
    fission_old_gift: List["TokenGiftSetting"] = betterproto.message_field(12)


@dataclass
class DelTokenTempReq(betterproto.Message):
    # 模版 ID
    id: int = betterproto.int32_field(1)


@dataclass
class GetTokenTempListReq(betterproto.Message):
    page_num: int = betterproto.int32_field(1)
    page_size: int = betterproto.int32_field(2)


@dataclass
class GetTokenTempListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "GetTokenTempListData" = betterproto.message_field(3)


@dataclass
class GetTokenTempListData(betterproto.Message):
    total: int = betterproto.int32_field(1)
    list: List["TokenTemp"] = betterproto.message_field(2)


@dataclass
class TokenTemp(betterproto.Message):
    # 模版ID 有修改 无新增
    id: int = betterproto.int32_field(1)
    # 口令模版名称
    title: str = betterproto.string_field(2)
    # 口令文案
    content: str = betterproto.string_field(3)
    # 图片地址
    image_url: str = betterproto.string_field(4)
    # 跳转-1 领取礼包-2 裂变礼包-3
    type: int = betterproto.int32_field(5)
    # 跳转地址
    jump_value: str = betterproto.string_field(6)
    # 卡券配置
    gift_settings: List["TokenGiftSetting"] = betterproto.message_field(7)
    # 创建时间
    ctime: str = betterproto.string_field(8)
    # 创造人
    cuser: str = betterproto.string_field(9)
    # 裂变活动开始时间
    fission_start_time: str = betterproto.string_field(10)
    # 裂变活动结束时间
    fission_end_time: str = betterproto.string_field(11)
    # 裂变活动每日拉新数量
    fission_day_num: int = betterproto.int32_field(12)
    # 裂变活动新人礼包
    fission_new_gift: List["TokenGiftSetting"] = betterproto.message_field(13)
    # 裂变活动老人礼包
    fission_old_gift: List["TokenGiftSetting"] = betterproto.message_field(14)


@dataclass
class TokenGiftSetting(betterproto.Message):
    # 类型 1 - 卡券 2 - 挂件 3 - 积分
    type: int = betterproto.int32_field(1)
    # 数量
    count: int = betterproto.int32_field(2)
    # ID
    id: int = betterproto.int32_field(3)


@dataclass
class GetCardOrderListReq(betterproto.Message):
    page_num: int = betterproto.int32_field(1)
    page_size: int = betterproto.int32_field(2)
    # 支付平台订单号
    tx_id: str = betterproto.string_field(3)
    # 月份，格式为 2006-01
    date: str = betterproto.string_field(4)
    # 用户 uid
    uid: int = betterproto.int64_field(5)


@dataclass
class GetCardOrderListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "GetCardOrderData" = betterproto.message_field(3)


@dataclass
class GetCardOrderData(betterproto.Message):
    total: int = betterproto.int32_field(1)
    list: List["GetCardOrder"] = betterproto.message_field(2)


@dataclass
class GetCardOrder(betterproto.Message):
    id: int = betterproto.int64_field(1)
    # 开通卡种类
    card_title: str = betterproto.string_field(2)
    # 档位 id
    card_id: int = betterproto.int32_field(3)
    # 支付价格
    pay_amount: int = betterproto.int32_field(4)
    # 支付渠道
    pay_channel: str = betterproto.string_field(5)
    # 充值终端
    platform: str = betterproto.string_field(6)
    # 创建时间
    ctime: str = betterproto.string_field(7)
    # 支付时间
    pay_time: str = betterproto.string_field(8)
    # 卡开始时间
    start_time: str = betterproto.string_field(9)
    # 卡结束时间
    end_time: str = betterproto.string_field(10)
    # 是否第一次购买
    is_first: bool = betterproto.bool_field(11)
    # 支付平台订单号
    tx_id: str = betterproto.string_field(12)
    # 签约订单号
    root_order_id: int = betterproto.int64_field(13)
    # 用户当前签约状态
    user_sign_state: bool = betterproto.bool_field(14)


@dataclass
class GetTreasureRankComicListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["GetTreasureRankComicListData"] = betterproto.message_field(3)


@dataclass
class GetTreasureRankComicListData(betterproto.Message):
    # 漫画 ID
    comic_id: int = betterproto.int32_field(1)
    # 漫画标题
    title: str = betterproto.string_field(2)
    # 创建人
    cuser: str = betterproto.string_field(3)
    # 创建时间
    ctime: str = betterproto.string_field(4)


@dataclass
class AddTreasureRankComicReq(betterproto.Message):
    # 漫画 ID 列表
    comic_ids: List[int] = betterproto.int32_field(1)


@dataclass
class DelTreasureRankComicReq(betterproto.Message):
    # 漫画 ID 列表
    comic_ids: List[int] = betterproto.int32_field(1)


@dataclass
class GetActCouponListReq(betterproto.Message):
    page_num: int = betterproto.int32_field(1)
    page_size: int = betterproto.int32_field(2)


@dataclass
class GetActCouponListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "GetActCouponListData" = betterproto.message_field(3)


@dataclass
class GetActCouponListData(betterproto.Message):
    # 数量
    total: int = betterproto.int32_field(1)
    list: List["GetActCoupon"] = betterproto.message_field(2)


@dataclass
class GetActCoupon(betterproto.Message):
    # ID
    id: int = betterproto.int32_field(1)
    # 活动 ID
    act_id: int = betterproto.int32_field(2)
    # 活动名
    name: str = betterproto.string_field(3)
    # 开始时间
    start_time: str = betterproto.string_field(4)
    # 结束时间
    end_time: str = betterproto.string_field(5)
    # 是否新人可领 0-所有人 1新人
    need_fresh: int = betterproto.int32_field(6)
    # 活动礼包
    act_coupon_info: List["ActCouponInfo"] = betterproto.message_field(7)
    # 创建人
    cuser: str = betterproto.string_field(8)
    # 最后修改时间
    mtime: str = betterproto.string_field(9)


@dataclass
class ActCouponInfo(betterproto.Message):
    # 类型 0-漫读券 1-挂件 2-积分
    type: int = betterproto.int32_field(1)
    # 卡券/挂件 ID
    coupon_id: int = betterproto.int32_field(2)
    # 卡券/积分数量
    coupon_num: int = betterproto.int32_field(3)


@dataclass
class DelActCouponReq(betterproto.Message):
    # 活动 ID
    act_id: int = betterproto.int32_field(1)


@dataclass
class EditActCouponResp(betterproto.Message):
    # 1 新人字段错误 2 活动 id 重复 3 券信息错误 4 领取类型错误
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "EmptyData" = betterproto.message_field(3)


@dataclass
class GetBannerConflictComicIdsReq(betterproto.Message):
    # 填写漫画 id
    comic_ids: List[int] = betterproto.int32_field(1)


@dataclass
class GetBannerConflictComicIdsResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "BannerConflictComicIds" = betterproto.message_field(3)


@dataclass
class BannerConflictComicIds(betterproto.Message):
    # 冲突漫画 id
    comic_ids: List[int] = betterproto.int32_field(1)


@dataclass
class GetCompeteComicListReq(betterproto.Message):
    # 是否关联漫画 0 - 全部 1 - 已关联 2 - 未关联
    is_link: int = betterproto.int32_field(1)
    # 平台 ID 0 - 全部 1 - 腾讯动漫 2 - 快看
    platform: int = betterproto.int32_field(2)
    # 地区 空 - 全部
    area: str = betterproto.string_field(3)
    # 是否独家 0 - 全部 1 - 独家 2 - 非独家
    is_exclusive: int = betterproto.int32_field(4)
    # 漫画名称
    title: str = betterproto.string_field(5)
    page_num: int = betterproto.int32_field(6)
    page_size: int = betterproto.int32_field(7)


@dataclass
class GetCompeteComicListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "GetCompeteComicListData" = betterproto.message_field(3)


@dataclass
class GetCompeteComicListData(betterproto.Message):
    total: int = betterproto.int32_field(1)
    list: List["GetCompeteComicList"] = betterproto.message_field(2)


@dataclass
class GetCompeteComicList(betterproto.Message):
    # 主键ID
    id: int = betterproto.int32_field(1)
    # 其他平台漫画名称
    compete_comic_title: str = betterproto.string_field(2)
    # 其他平台漫画详情
    compete_comic_desc: str = betterproto.string_field(3)
    # 平台 ID 1 - 腾讯动漫 2 - 快看
    platform: int = betterproto.int32_field(4)
    # 是否独家
    is_exclusive: bool = betterproto.bool_field(5)
    # 地区 未获取到为空
    area: str = betterproto.string_field(6)
    # b漫关联漫画 ID 未关联为0
    comic_id: int = betterproto.int32_field(7)
    # b漫关联漫画名称 未关联为空
    comic_title: str = betterproto.string_field(8)


@dataclass
class LinkCompeteComicReq(betterproto.Message):
    # 主键 ID
    id: int = betterproto.int32_field(1)
    # b漫漫画 ID
    comic_id: int = betterproto.int32_field(2)


@dataclass
class UnlinkCompeteComicReq(betterproto.Message):
    # 主键 ID
    id: int = betterproto.int32_field(1)


@dataclass
class GetCompeteComicAreaResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List[str] = betterproto.string_field(3)


@dataclass
class CancelVerifyTaskReq(betterproto.Message):
    ep_ids: List[int] = betterproto.int32_field(1)


@dataclass
class RiskLevelFlagsResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "RiskLevelFlagsData" = betterproto.message_field(3)


@dataclass
class RiskLevelFlagsData(betterproto.Message):
    list: List["RiskLevelFlagsItem"] = betterproto.message_field(1)


@dataclass
class RiskLevelFlagsItem(betterproto.Message):
    # 等级 ID ：0-青少年作品 1-无风险 2-低风险 3-总裁玛丽苏 4-无亲密耽美百合 5-中风险 6-高风险 7-危险
    id: int = betterproto.int32_field(1)
    flags: "RiskControlFlags" = betterproto.message_field(2)


class ManageStub(betterproto.ServiceStub):
    """Manage 服务"""

    @allure.step("""有部分 cookie 是 http-only 的，无法使用 js 清理""")
    def logout(self, request: EmptyRequest) -> EmptyData:
        """有部分 cookie 是 http-only 的，无法使用 js 清理"""
        logging.getLogger(__name__).info(
            "start call "
            + "[logout]"
            + " api"
            + "=>"
            + """有部分 cookie 是 http-only 的，无法使用 js 清理"""
        )
        response = EmptyData()
        self._do_twirp_rpc("/manage.v0.Manage/Logout", request, response)
        logging.getLogger(__name__).info("call " + "[logout]" + " api success!")
        return response

    @allure.step("""打开或关闭评论""")
    def change_reply_state(self, request: ChangeReplyStateReq) -> DefaultResponse:
        """打开或关闭评论"""
        logging.getLogger(__name__).info(
            "start call " + "[change_reply_state]" + " api" + "=>" + """打开或关闭评论"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/ChangeReplyState", request, response)
        logging.getLogger(__name__).info(
            "call " + "[change_reply_state]" + " api success!"
        )
        return response

    @allure.step("""通过 head 请求查询图片大小 bfs 跨域头设置的有问题，js 无法读取 content-length""")
    def get_content_length(self, request: GetContentLengthReq) -> GetContentLengthResp:
        """通过 head 请求查询图片大小 bfs 跨域头设置的有问题，js 无法读取 content-length"""
        logging.getLogger(__name__).info(
            "start call "
            + "[get_content_length]"
            + " api"
            + "=>"
            + """通过 head 请求查询图片大小 bfs 跨域头设置的有问题，js 无法读取 content-length"""
        )
        response = GetContentLengthResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetContentLength", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_content_length]" + " api success!"
        )
        return response

    @allure.step("""中转get请求""")
    def transit(self, request: TransitReq) -> TransitResp:
        """中转get请求"""
        logging.getLogger(__name__).info(
            "start call " + "[transit]" + " api" + "=>" + """中转get请求"""
        )
        response = TransitResp()
        self._do_twirp_rpc("/manage.v0.Manage/Transit", request, response)
        logging.getLogger(__name__).info("call " + "[transit]" + " api success!")
        return response

    @allure.step("""获取当前用户信息""")
    def get_user_info(self, request: EmptyRequest) -> GetUserInfoResponse:
        """获取当前用户信息"""
        logging.getLogger(__name__).info(
            "start call " + "[get_user_info]" + " api" + "=>" + """获取当前用户信息"""
        )
        response = GetUserInfoResponse()
        self._do_twirp_rpc("/manage.v0.Manage/GetUserInfo", request, response)
        logging.getLogger(__name__).info("call " + "[get_user_info]" + " api success!")
        return response

    @allure.step("""获取使用用户列表""")
    def list_users(self, request: ListUsersRequest) -> ListUsersResponse:
        """获取使用用户列表"""
        logging.getLogger(__name__).info(
            "start call " + "[list_users]" + " api" + "=>" + """获取使用用户列表"""
        )
        response = ListUsersResponse()
        self._do_twirp_rpc("/manage.v0.Manage/ListUsers", request, response)
        logging.getLogger(__name__).info("call " + "[list_users]" + " api success!")
        return response

    @allure.step("""创建使用用户""")
    def create_user(self, request: CreateUserRequest) -> DefaultResponse:
        """创建使用用户"""
        logging.getLogger(__name__).info(
            "start call " + "[create_user]" + " api" + "=>" + """创建使用用户"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/CreateUser", request, response)
        logging.getLogger(__name__).info("call " + "[create_user]" + " api success!")
        return response

    @allure.step("""更新使用用户""")
    def update_user(self, request: UserReq) -> DefaultResponse:
        """更新使用用户"""
        logging.getLogger(__name__).info(
            "start call " + "[update_user]" + " api" + "=>" + """更新使用用户"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/UpdateUser", request, response)
        logging.getLogger(__name__).info("call " + "[update_user]" + " api success!")
        return response

    @allure.step("""删除使用用户""")
    def delete_user(self, request: DeleteUserRequest) -> DefaultResponse:
        """删除使用用户"""
        logging.getLogger(__name__).info(
            "start call " + "[delete_user]" + " api" + "=>" + """删除使用用户"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DeleteUser", request, response)
        logging.getLogger(__name__).info("call " + "[delete_user]" + " api success!")
        return response

    @allure.step("""创建气泡""")
    def create_bubble(self, request: Bubble) -> DefaultResponse:
        """创建气泡"""
        logging.getLogger(__name__).info(
            "start call " + "[create_bubble]" + " api" + "=>" + """创建气泡"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/CreateBubble", request, response)
        logging.getLogger(__name__).info("call " + "[create_bubble]" + " api success!")
        return response

    @allure.step("""更新气泡""")
    def update_bubble(self, request: Bubble) -> DefaultResponse:
        """更新气泡"""
        logging.getLogger(__name__).info(
            "start call " + "[update_bubble]" + " api" + "=>" + """更新气泡"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/UpdateBubble", request, response)
        logging.getLogger(__name__).info("call " + "[update_bubble]" + " api success!")
        return response

    @allure.step("""删除气泡""")
    def delete_bubble(self, request: DeleteBubbleRequest) -> DefaultResponse:
        """删除气泡"""
        logging.getLogger(__name__).info(
            "start call " + "[delete_bubble]" + " api" + "=>" + """删除气泡"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DeleteBubble", request, response)
        logging.getLogger(__name__).info("call " + "[delete_bubble]" + " api success!")
        return response

    @allure.step("""获取气泡列表""")
    def list_bubbles(self, request: ListBubblesRequest) -> ListBubblesResp:
        """获取气泡列表"""
        logging.getLogger(__name__).info(
            "start call " + "[list_bubbles]" + " api" + "=>" + """获取气泡列表"""
        )
        response = ListBubblesResp()
        self._do_twirp_rpc("/manage.v0.Manage/ListBubbles", request, response)
        logging.getLogger(__name__).info("call " + "[list_bubbles]" + " api success!")
        return response

    @allure.step("""扣除漫币""")
    def decr_gold(self, request: DecrGoldReq) -> DefaultResponse:
        """扣除漫币"""
        logging.getLogger(__name__).info(
            "start call " + "[decr_gold]" + " api" + "=>" + """扣除漫币"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DecrGold", request, response)
        logging.getLogger(__name__).info("call " + "[decr_gold]" + " api success!")
        return response

    @allure.step("""扣除卡券""")
    def decr_coupon(self, request: DecrCouponReq) -> DefaultResponse:
        """扣除卡券"""
        logging.getLogger(__name__).info(
            "start call " + "[decr_coupon]" + " api" + "=>" + """扣除卡券"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DecrCoupon", request, response)
        logging.getLogger(__name__).info("call " + "[decr_coupon]" + " api success!")
        return response

    @allure.step("""充值档位""")
    def get_pay_config(self, request: EmptyRequest) -> GetPayConfigResp:
        """充值档位"""
        logging.getLogger(__name__).info(
            "start call " + "[get_pay_config]" + " api" + "=>" + """充值档位"""
        )
        response = GetPayConfigResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetPayConfig", request, response)
        logging.getLogger(__name__).info("call " + "[get_pay_config]" + " api success!")
        return response

    @allure.step("""v2 新增分类页 tab""")
    def add_class_page_tab(self, request: EditClassPageTabReq) -> DefaultResponseWithID:
        """v2 新增分类页 tab"""
        logging.getLogger(__name__).info(
            "start call " + "[add_class_page_tab]" + " api" + "=>" + """v2 新增分类页 tab"""
        )
        response = DefaultResponseWithID()
        self._do_twirp_rpc("/manage.v0.Manage/AddClassPageTab", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_class_page_tab]" + " api success!"
        )
        return response

    @allure.step("""列出风控用户""")
    def list_risk_users(self, request: ListRiskUsersReq) -> ListRiskUsersResp:
        """列出风控用户"""
        logging.getLogger(__name__).info(
            "start call " + "[list_risk_users]" + " api" + "=>" + """列出风控用户"""
        )
        response = ListRiskUsersResp()
        self._do_twirp_rpc("/manage.v0.Manage/ListRiskUsers", request, response)
        logging.getLogger(__name__).info(
            "call " + "[list_risk_users]" + " api success!"
        )
        return response

    @allure.step("""删除风控用户""")
    def del_risk_user(self, request: DelRiskUserReq) -> DefaultResponse:
        """删除风控用户"""
        logging.getLogger(__name__).info(
            "start call " + "[del_risk_user]" + " api" + "=>" + """删除风控用户"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelRiskUser", request, response)
        logging.getLogger(__name__).info("call " + "[del_risk_user]" + " api success!")
        return response

    @allure.step("""添加风控用户""")
    def add_risk_user(self, request: AddRiskUserReq) -> DefaultResponse:
        """添加风控用户"""
        logging.getLogger(__name__).info(
            "start call " + "[add_risk_user]" + " api" + "=>" + """添加风控用户"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/AddRiskUser", request, response)
        logging.getLogger(__name__).info("call " + "[add_risk_user]" + " api success!")
        return response

    @allure.step("""解除风控用户冻结(注意是解除30分钟的冻结，并非解除封禁)""")
    def unfreeze_risk_user(self, request: UnfreezeRiskUserReq) -> DefaultResponse:
        """解除风控用户冻结(注意是解除30分钟的冻结，并非解除封禁)"""
        logging.getLogger(__name__).info(
            "start call "
            + "[unfreeze_risk_user]"
            + " api"
            + "=>"
            + """解除风控用户冻结(注意是解除30分钟的冻结，并非解除封禁)"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/UnfreezeRiskUser", request, response)
        logging.getLogger(__name__).info(
            "call " + "[unfreeze_risk_user]" + " api success!"
        )
        return response

    @allure.step("""删除风控用户黑白名单(删除白名单 & 解除封禁)""")
    def del_specific_risk_user(
        self, request: DelSpecificRiskUserReq
    ) -> DefaultResponse:
        """删除风控用户黑白名单(删除白名单 & 解除封禁)"""
        logging.getLogger(__name__).info(
            "start call "
            + "[del_specific_risk_user]"
            + " api"
            + "=>"
            + """删除风控用户黑白名单(删除白名单 & 解除封禁)"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelSpecificRiskUser", request, response)
        logging.getLogger(__name__).info(
            "call " + "[del_specific_risk_user]" + " api success!"
        )
        return response

    @allure.step("""添加风控用户黑白名单(添加白名单 & 手动封禁)""")
    def add_specific_risk_user(self, request: SpecificRiskUser) -> DefaultResponse:
        """添加风控用户黑白名单(添加白名单 & 手动封禁)"""
        logging.getLogger(__name__).info(
            "start call "
            + "[add_specific_risk_user]"
            + " api"
            + "=>"
            + """添加风控用户黑白名单(添加白名单 & 手动封禁)"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/AddSpecificRiskUser", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_specific_risk_user]" + " api success!"
        )
        return response

    @allure.step("""列出风控用户详细数据""")
    def list_risk_user_daily_data(
        self, request: ListRiskUserDailyDataReq
    ) -> ListRiskUserDailyDataResp:
        """列出风控用户详细数据"""
        logging.getLogger(__name__).info(
            "start call "
            + "[list_risk_user_daily_data]"
            + " api"
            + "=>"
            + """列出风控用户详细数据"""
        )
        response = ListRiskUserDailyDataResp()
        self._do_twirp_rpc("/manage.v0.Manage/ListRiskUserDailyData", request, response)
        logging.getLogger(__name__).info(
            "call " + "[list_risk_user_daily_data]" + " api success!"
        )
        return response

    @allure.step("""查询表""")
    def get_query_tables(self, request: GetQueryTablesReq) -> GetQueryTablesResp:
        """查询表"""
        logging.getLogger(__name__).info(
            "start call " + "[get_query_tables]" + " api" + "=>" + """查询表"""
        )
        response = GetQueryTablesResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetQueryTables", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_query_tables]" + " api success!"
        )
        return response

    @allure.step("""查询字段""")
    def get_query_fields(self, request: GetQueryFieldsReq) -> GetQueryFieldsResp:
        """查询字段"""
        logging.getLogger(__name__).info(
            "start call " + "[get_query_fields]" + " api" + "=>" + """查询字段"""
        )
        response = GetQueryFieldsResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetQueryFields", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_query_fields]" + " api success!"
        )
        return response

    @allure.step("""v2 删除分类页 tab""")
    def delete_class_page_tab(self, request: DeleteClassPageTabReq) -> DefaultResponse:
        """v2 删除分类页 tab"""
        logging.getLogger(__name__).info(
            "start call "
            + "[delete_class_page_tab]"
            + " api"
            + "=>"
            + """v2 删除分类页 tab"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DeleteClassPageTab", request, response)
        logging.getLogger(__name__).info(
            "call " + "[delete_class_page_tab]" + " api success!"
        )
        return response

    @allure.step("""v2 修改分类页 tab""")
    def edit_class_page_tab(self, request: EditClassPageTabReq) -> EditClassPageTabResp:
        """v2 修改分类页 tab"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_class_page_tab]" + " api" + "=>" + """v2 修改分类页 tab"""
        )
        response = EditClassPageTabResp()
        self._do_twirp_rpc("/manage.v0.Manage/EditClassPageTab", request, response)
        logging.getLogger(__name__).info(
            "call " + "[edit_class_page_tab]" + " api success!"
        )
        return response

    @allure.step("""v2 获取所有分类页 tab""")
    def get_class_page_all_tabs(
        self, request: GetClassPageAllTabsReq
    ) -> GetClassPageTabResp:
        """v2 获取所有分类页 tab"""
        logging.getLogger(__name__).info(
            "start call "
            + "[get_class_page_all_tabs]"
            + " api"
            + "=>"
            + """v2 获取所有分类页 tab"""
        )
        response = GetClassPageTabResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetClassPageAllTabs", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_class_page_all_tabs]" + " api success!"
        )
        return response

    @allure.step("""v2 添加分类页 tab 下的模块""")
    def add_class_page_module(
        self, request: EditClassPageModuleReq
    ) -> DefaultResponseWithID:
        """v2 添加分类页 tab 下的模块"""
        logging.getLogger(__name__).info(
            "start call "
            + "[add_class_page_module]"
            + " api"
            + "=>"
            + """v2 添加分类页 tab 下的模块"""
        )
        response = DefaultResponseWithID()
        self._do_twirp_rpc("/manage.v0.Manage/AddClassPageModule", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_class_page_module]" + " api success!"
        )
        return response

    @allure.step("""v2 删除分类页 tab 下的模块""")
    def delete_class_page_module(
        self, request: DeleteClassPageModuleReq
    ) -> DefaultResponse:
        """v2 删除分类页 tab 下的模块"""
        logging.getLogger(__name__).info(
            "start call "
            + "[delete_class_page_module]"
            + " api"
            + "=>"
            + """v2 删除分类页 tab 下的模块"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DeleteClassPageModule", request, response)
        logging.getLogger(__name__).info(
            "call " + "[delete_class_page_module]" + " api success!"
        )
        return response

    @allure.step("""v2 修改分类页 tab 下的模块""")
    def edit_class_page_module(
        self, request: EditClassPageModuleReq
    ) -> EditClassPageModuleResp:
        """v2 修改分类页 tab 下的模块"""
        logging.getLogger(__name__).info(
            "start call "
            + "[edit_class_page_module]"
            + " api"
            + "=>"
            + """v2 修改分类页 tab 下的模块"""
        )
        response = EditClassPageModuleResp()
        self._do_twirp_rpc("/manage.v0.Manage/EditClassPageModule", request, response)
        logging.getLogger(__name__).info(
            "call " + "[edit_class_page_module]" + " api success!"
        )
        return response

    @allure.step("""v2 获取分类页 tab 下对应的所有模块""")
    def get_all_class_page_module(
        self, request: GetClassPageModuleReq
    ) -> GetClassPageModuleResp:
        """v2 获取分类页 tab 下对应的所有模块"""
        logging.getLogger(__name__).info(
            "start call "
            + "[get_all_class_page_module]"
            + " api"
            + "=>"
            + """v2 获取分类页 tab 下对应的所有模块"""
        )
        response = GetClassPageModuleResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetAllClassPageModule", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_all_class_page_module]" + " api success!"
        )
        return response

    @allure.step("""v2 获取分类页 tab 下的库存漫画的信息""")
    def get_class_page_comic_info(
        self, request: GetClassPageComicInfoReq
    ) -> GetClassPageComicInfoResp:
        """v2 获取分类页 tab 下的库存漫画的信息"""
        logging.getLogger(__name__).info(
            "start call "
            + "[get_class_page_comic_info]"
            + " api"
            + "=>"
            + """v2 获取分类页 tab 下的库存漫画的信息"""
        )
        response = GetClassPageComicInfoResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetClassPageComicInfo", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_class_page_comic_info]" + " api success!"
        )
        return response

    @allure.step("""v2 获取分类页 tab 下的库存漫画，包括横版四图，竖版六图，追漫有礼，新作预约""")
    def get_all_class_page_comics(
        self, request: GetAllClassPageComicsReq
    ) -> GetAllClassPageComicsResp:
        """v2 获取分类页 tab 下的库存漫画，包括横版四图，竖版六图，追漫有礼，新作预约"""
        logging.getLogger(__name__).info(
            "start call "
            + "[get_all_class_page_comics]"
            + " api"
            + "=>"
            + """v2 获取分类页 tab 下的库存漫画，包括横版四图，竖版六图，追漫有礼，新作预约"""
        )
        response = GetAllClassPageComicsResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetAllClassPageComics", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_all_class_page_comics]" + " api success!"
        )
        return response

    @allure.step("""v2 添加分类页 tab 下的不同模块的库存 横版四图，竖版六图，追漫有礼，新作预约，高能单话，热门排行，新人三图""")
    def add_class_page_stock(self, request: AddSixComicReq) -> DefaultResponseWithID:
        """v2 添加分类页 tab 下的不同模块的库存 横版四图，竖版六图，追漫有礼，新作预约，高能单话，热门排行，新人三图"""
        logging.getLogger(__name__).info(
            "start call "
            + "[add_class_page_stock]"
            + " api"
            + "=>"
            + """v2 添加分类页 tab 下的不同模块的库存 横版四图，竖版六图，追漫有礼，新作预约，高能单话，热门排行，新人三图"""
        )
        response = DefaultResponseWithID()
        self._do_twirp_rpc("/manage.v0.Manage/AddClassPageStock", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_class_page_stock]" + " api success!"
        )
        return response

    @allure.step("""v2 编辑分类页 tab 下的不同模块的库存 横版四图，竖版六图，追漫有礼，新作预约，高能单话，热门排行，新人三图""")
    def edit_class_page_stock(self, request: AddSixComicReq) -> DefaultResponse:
        """v2 编辑分类页 tab 下的不同模块的库存 横版四图，竖版六图，追漫有礼，新作预约，高能单话，热门排行，新人三图"""
        logging.getLogger(__name__).info(
            "start call "
            + "[edit_class_page_stock]"
            + " api"
            + "=>"
            + """v2 编辑分类页 tab 下的不同模块的库存 横版四图，竖版六图，追漫有礼，新作预约，高能单话，热门排行，新人三图"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditClassPageStock", request, response)
        logging.getLogger(__name__).info(
            "call " + "[edit_class_page_stock]" + " api success!"
        )
        return response

    @allure.step("""批量插入自动竖版六图数据""")
    def multi_add_class_page_stock(
        self, request: MultiAddSixComicReq
    ) -> DefaultResponse:
        """批量插入自动竖版六图数据"""
        logging.getLogger(__name__).info(
            "start call "
            + "[multi_add_class_page_stock]"
            + " api"
            + "=>"
            + """批量插入自动竖版六图数据"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc(
            "/manage.v0.Manage/MultiAddClassPageStock", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[multi_add_class_page_stock]" + " api success!"
        )
        return response

    @allure.step("""批量根据漫画id查询部分信息""")
    def get_comics(self, request: GetComicsReq) -> GetComicsResp:
        """批量根据漫画id查询部分信息"""
        logging.getLogger(__name__).info(
            "start call " + "[get_comics]" + " api" + "=>" + """批量根据漫画id查询部分信息"""
        )
        response = GetComicsResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetComics", request, response)
        logging.getLogger(__name__).info("call " + "[get_comics]" + " api success!")
        return response

    @allure.step("""v2 置顶分类页 tab 下的竖版六图""")
    def set_top_six_comic(self, request: SetTopReq) -> DefaultResponse:
        """v2 置顶分类页 tab 下的竖版六图"""
        logging.getLogger(__name__).info(
            "start call "
            + "[set_top_six_comic]"
            + " api"
            + "=>"
            + """v2 置顶分类页 tab 下的竖版六图"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/SetTopSixComic", request, response)
        logging.getLogger(__name__).info(
            "call " + "[set_top_six_comic]" + " api success!"
        )
        return response

    @allure.step("""v2 删除分类页 tab 下的不同模块的库存 竖版六图，追漫有礼，新作预约""")
    def delete_class_page_stock(
        self, request: DeleteClassPageBannerReq
    ) -> DefaultResponse:
        """v2 删除分类页 tab 下的不同模块的库存 竖版六图，追漫有礼，新作预约"""
        logging.getLogger(__name__).info(
            "start call "
            + "[delete_class_page_stock]"
            + " api"
            + "=>"
            + """v2 删除分类页 tab 下的不同模块的库存 竖版六图，追漫有礼，新作预约"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DeleteClassPageStock", request, response)
        logging.getLogger(__name__).info(
            "call " + "[delete_class_page_stock]" + " api success!"
        )
        return response

    @allure.step("""v2 添加分类页 tab 下的 banner，推广大卡 或者顶部 banner，专栏模块""")
    def add_class_page_banner(
        self, request: ClassPageBannerReq
    ) -> DefaultResponseWithID:
        """v2 添加分类页 tab 下的 banner，推广大卡 或者顶部 banner，专栏模块"""
        logging.getLogger(__name__).info(
            "start call "
            + "[add_class_page_banner]"
            + " api"
            + "=>"
            + """v2 添加分类页 tab 下的 banner，推广大卡 或者顶部 banner，专栏模块"""
        )
        response = DefaultResponseWithID()
        self._do_twirp_rpc("/manage.v0.Manage/AddClassPageBanner", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_class_page_banner]" + " api success!"
        )
        return response

    @allure.step("""v2 删除分类页 tab 下的 banner，推广大卡 或者顶部 banner，专栏模块""")
    def delete_class_page_banner(
        self, request: DeleteClassPageBannerReq
    ) -> DefaultResponse:
        """v2 删除分类页 tab 下的 banner，推广大卡 或者顶部 banner，专栏模块"""
        logging.getLogger(__name__).info(
            "start call "
            + "[delete_class_page_banner]"
            + " api"
            + "=>"
            + """v2 删除分类页 tab 下的 banner，推广大卡 或者顶部 banner，专栏模块"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DeleteClassPageBanner", request, response)
        logging.getLogger(__name__).info(
            "call " + "[delete_class_page_banner]" + " api success!"
        )
        return response

    @allure.step("""v2 修改分类页 tab 下的 banner，推广大卡 或者顶部 banner，专栏模块""")
    def edit_class_page_banner(self, request: ClassPageBannerReq) -> DefaultResponse:
        """v2 修改分类页 tab 下的 banner，推广大卡 或者顶部 banner，专栏模块"""
        logging.getLogger(__name__).info(
            "start call "
            + "[edit_class_page_banner]"
            + " api"
            + "=>"
            + """v2 修改分类页 tab 下的 banner，推广大卡 或者顶部 banner，专栏模块"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditClassPageBanner", request, response)
        logging.getLogger(__name__).info(
            "call " + "[edit_class_page_banner]" + " api success!"
        )
        return response

    @allure.step("""v2 获取分类页 tab 下的 banner，推广大卡 或者顶部 banner，专栏模块""")
    def get_list_class_page_banner(
        self, request: GetListClassPageBannerReq
    ) -> GetListClassPageBannerResp:
        """v2 获取分类页 tab 下的 banner，推广大卡 或者顶部 banner，专栏模块"""
        logging.getLogger(__name__).info(
            "start call "
            + "[get_list_class_page_banner]"
            + " api"
            + "=>"
            + """v2 获取分类页 tab 下的 banner，推广大卡 或者顶部 banner，专栏模块"""
        )
        response = GetListClassPageBannerResp()
        self._do_twirp_rpc(
            "/manage.v0.Manage/GetListClassPageBanner", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[get_list_class_page_banner]" + " api success!"
        )
        return response

    @allure.step("""新增安卓渠道推荐配置""")
    def add_channel_recommend(
        self, request: AddChannelRecommendReq
    ) -> DefaultResponseWithID:
        """新增安卓渠道推荐配置"""
        logging.getLogger(__name__).info(
            "start call " + "[add_channel_recommend]" + " api" + "=>" + """新增安卓渠道推荐配置"""
        )
        response = DefaultResponseWithID()
        self._do_twirp_rpc("/manage.v0.Manage/AddChannelRecommend", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_channel_recommend]" + " api success!"
        )
        return response

    @allure.step("""删除安卓渠道推荐配置""")
    def delete_channel_recommend(
        self, request: DeleteChannelRecommendReq
    ) -> DefaultResponse:
        """删除安卓渠道推荐配置"""
        logging.getLogger(__name__).info(
            "start call "
            + "[delete_channel_recommend]"
            + " api"
            + "=>"
            + """删除安卓渠道推荐配置"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc(
            "/manage.v0.Manage/DeleteChannelRecommend", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[delete_channel_recommend]" + " api success!"
        )
        return response

    @allure.step("""编辑安卓渠道推荐配置""")
    def edit_channel_recommend(
        self, request: AddChannelRecommendReq
    ) -> DefaultResponse:
        """编辑安卓渠道推荐配置"""
        logging.getLogger(__name__).info(
            "start call "
            + "[edit_channel_recommend]"
            + " api"
            + "=>"
            + """编辑安卓渠道推荐配置"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditChannelRecommend", request, response)
        logging.getLogger(__name__).info(
            "call " + "[edit_channel_recommend]" + " api success!"
        )
        return response

    @allure.step("""获取安卓渠道推荐配置列表""")
    def get_channel_recommends(
        self, request: GetChannelRecommendsReq
    ) -> GetChannelRecommendsResp:
        """获取安卓渠道推荐配置列表"""
        logging.getLogger(__name__).info(
            "start call "
            + "[get_channel_recommends]"
            + " api"
            + "=>"
            + """获取安卓渠道推荐配置列表"""
        )
        response = GetChannelRecommendsResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetChannelRecommends", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_channel_recommends]" + " api success!"
        )
        return response

    @allure.step("""获取作者列表""")
    def list_authors(self, request: GetAuthorListRequest) -> GetAuthorListResponse:
        """获取作者列表"""
        logging.getLogger(__name__).info(
            "start call " + "[list_authors]" + " api" + "=>" + """获取作者列表"""
        )
        response = GetAuthorListResponse()
        self._do_twirp_rpc("/manage.v0.Manage/ListAuthors", request, response)
        logging.getLogger(__name__).info("call " + "[list_authors]" + " api success!")
        return response

    @allure.step("""作者详情""")
    def get_author(self, request: AuthorDetailRequest) -> AuthorDetailResponse:
        """作者详情"""
        logging.getLogger(__name__).info(
            "start call " + "[get_author]" + " api" + "=>" + """作者详情"""
        )
        response = AuthorDetailResponse()
        self._do_twirp_rpc("/manage.v0.Manage/GetAuthor", request, response)
        logging.getLogger(__name__).info("call " + "[get_author]" + " api success!")
        return response

    @allure.step("""添加作者百科""")
    def add_author(self, request: AuthorDetail) -> DefaultResponse:
        """添加作者百科"""
        logging.getLogger(__name__).info(
            "start call " + "[add_author]" + " api" + "=>" + """添加作者百科"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/AddAuthor", request, response)
        logging.getLogger(__name__).info("call " + "[add_author]" + " api success!")
        return response

    @allure.step("""修改作者百科""")
    def edit_author(self, request: AuthorDetail) -> DefaultResponse:
        """修改作者百科"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_author]" + " api" + "=>" + """修改作者百科"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditAuthor", request, response)
        logging.getLogger(__name__).info("call " + "[edit_author]" + " api success!")
        return response

    @allure.step("""删除作者百科""")
    def delete_author(self, request: DelAuthorRequest) -> DefaultResponse:
        """删除作者百科"""
        logging.getLogger(__name__).info(
            "start call " + "[delete_author]" + " api" + "=>" + """删除作者百科"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DeleteAuthor", request, response)
        logging.getLogger(__name__).info("call " + "[delete_author]" + " api success!")
        return response

    @allure.step("""获取全量作者索引""")
    def all_author(self, request: EmptyRequest) -> AllAuthorResponse:
        """获取全量作者索引"""
        logging.getLogger(__name__).info(
            "start call " + "[all_author]" + " api" + "=>" + """获取全量作者索引"""
        )
        response = AllAuthorResponse()
        self._do_twirp_rpc("/manage.v0.Manage/AllAuthor", request, response)
        logging.getLogger(__name__).info("call " + "[all_author]" + " api success!")
        return response

    @allure.step("""全量分类标签""")
    def get_all_style(self, request: EmptyRequest) -> AllStyleResponse:
        """全量分类标签"""
        logging.getLogger(__name__).info(
            "start call " + "[get_all_style]" + " api" + "=>" + """全量分类标签"""
        )
        response = AllStyleResponse()
        self._do_twirp_rpc("/manage.v0.Manage/GetAllStyle", request, response)
        logging.getLogger(__name__).info("call " + "[get_all_style]" + " api success!")
        return response

    @allure.step("""新增分类标签""")
    def add_style(self, request: StyleInfo) -> DefaultResponse:
        """新增分类标签"""
        logging.getLogger(__name__).info(
            "start call " + "[add_style]" + " api" + "=>" + """新增分类标签"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/AddStyle", request, response)
        logging.getLogger(__name__).info("call " + "[add_style]" + " api success!")
        return response

    @allure.step("""修改分类标签""")
    def edit_style(self, request: StyleInfo) -> DefaultResponse:
        """修改分类标签"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_style]" + " api" + "=>" + """修改分类标签"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditStyle", request, response)
        logging.getLogger(__name__).info("call " + "[edit_style]" + " api success!")
        return response

    @allure.step("""全量地区""")
    def get_all_area(self, request: EmptyRequest) -> AllAreaResponse:
        """全量地区"""
        logging.getLogger(__name__).info(
            "start call " + "[get_all_area]" + " api" + "=>" + """全量地区"""
        )
        response = AllAreaResponse()
        self._do_twirp_rpc("/manage.v0.Manage/GetAllArea", request, response)
        logging.getLogger(__name__).info("call " + "[get_all_area]" + " api success!")
        return response

    @allure.step("""添加地区""")
    def add_area(self, request: AreaInfo) -> DefaultResponseWithID:
        """添加地区"""
        logging.getLogger(__name__).info(
            "start call " + "[add_area]" + " api" + "=>" + """添加地区"""
        )
        response = DefaultResponseWithID()
        self._do_twirp_rpc("/manage.v0.Manage/AddArea", request, response)
        logging.getLogger(__name__).info("call " + "[add_area]" + " api success!")
        return response

    @allure.step("""修改地区""")
    def edit_area(self, request: AreaInfo) -> DefaultResponse:
        """修改地区"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_area]" + " api" + "=>" + """修改地区"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditArea", request, response)
        logging.getLogger(__name__).info("call " + "[edit_area]" + " api success!")
        return response

    @allure.step("""删除地区""")
    def delete_area(self, request: DeleteAreaRequest) -> DefaultResponse:
        """删除地区"""
        logging.getLogger(__name__).info(
            "start call " + "[delete_area]" + " api" + "=>" + """删除地区"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DeleteArea", request, response)
        logging.getLogger(__name__).info("call " + "[delete_area]" + " api success!")
        return response

    @allure.step("""漫画百科列表""")
    def list_comic_wikis(self, request: ComicInfoListRequest) -> ComicInfoListResponse:
        """漫画百科列表"""
        logging.getLogger(__name__).info(
            "start call " + "[list_comic_wikis]" + " api" + "=>" + """漫画百科列表"""
        )
        response = ComicInfoListResponse()
        self._do_twirp_rpc("/manage.v0.Manage/ListComicWikis", request, response)
        logging.getLogger(__name__).info(
            "call " + "[list_comic_wikis]" + " api success!"
        )
        return response

    @allure.step("""漫画百科详情""")
    def get_comic_wiki(
        self, request: ComicInfoDetailRequest
    ) -> ComicInfoDetailResponse:
        """漫画百科详情"""
        logging.getLogger(__name__).info(
            "start call " + "[get_comic_wiki]" + " api" + "=>" + """漫画百科详情"""
        )
        response = ComicInfoDetailResponse()
        self._do_twirp_rpc("/manage.v0.Manage/GetComicWiki", request, response)
        logging.getLogger(__name__).info("call " + "[get_comic_wiki]" + " api success!")
        return response

    @allure.step("""新增漫画百科 返回 code 1 - bvid 不存在/已下线""")
    def add_comic_wiki(self, request: ComicWiki) -> DefaultResponse:
        """新增漫画百科 返回 code 1 - bvid 不存在/已下线"""
        logging.getLogger(__name__).info(
            "start call "
            + "[add_comic_wiki]"
            + " api"
            + "=>"
            + """新增漫画百科 返回 code 1 - bvid 不存在/已下线"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/AddComicWiki", request, response)
        logging.getLogger(__name__).info("call " + "[add_comic_wiki]" + " api success!")
        return response

    @allure.step("""修改漫画百科 返回 code 1 - bvid 不存在/已下线""")
    def edit_comic_wiki(self, request: ComicWiki) -> DefaultResponse:
        """修改漫画百科 返回 code 1 - bvid 不存在/已下线"""
        logging.getLogger(__name__).info(
            "start call "
            + "[edit_comic_wiki]"
            + " api"
            + "=>"
            + """修改漫画百科 返回 code 1 - bvid 不存在/已下线"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditComicWiki", request, response)
        logging.getLogger(__name__).info(
            "call " + "[edit_comic_wiki]" + " api success!"
        )
        return response

    @allure.step("""删除漫画百科""")
    def delete_comic_wiki(self, request: DelComicWikiRequest) -> DefaultResponse:
        """删除漫画百科"""
        logging.getLogger(__name__).info(
            "start call " + "[delete_comic_wiki]" + " api" + "=>" + """删除漫画百科"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DeleteComicWiki", request, response)
        logging.getLogger(__name__).info(
            "call " + "[delete_comic_wiki]" + " api success!"
        )
        return response

    @allure.step("""上线漫画百科""")
    def wiki_online(self, request: WikiOnlineReq) -> DefaultResponse:
        """上线漫画百科"""
        logging.getLogger(__name__).info(
            "start call " + "[wiki_online]" + " api" + "=>" + """上线漫画百科"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/WikiOnline", request, response)
        logging.getLogger(__name__).info("call " + "[wiki_online]" + " api success!")
        return response

    @allure.step("""漫画列表""")
    def list_comics(self, request: ListComicsRequest) -> ListComicsResponse:
        """漫画列表"""
        logging.getLogger(__name__).info(
            "start call " + "[list_comics]" + " api" + "=>" + """漫画列表"""
        )
        response = ListComicsResponse()
        self._do_twirp_rpc("/manage.v0.Manage/ListComics", request, response)
        logging.getLogger(__name__).info("call " + "[list_comics]" + " api success!")
        return response

    @allure.step("""漫画详情""")
    def get_comic(self, request: GetComicRequest) -> GetComicResponse:
        """漫画详情"""
        logging.getLogger(__name__).info(
            "start call " + "[get_comic]" + " api" + "=>" + """漫画详情"""
        )
        response = GetComicResponse()
        self._do_twirp_rpc("/manage.v0.Manage/GetComic", request, response)
        logging.getLogger(__name__).info("call " + "[get_comic]" + " api success!")
        return response

    @allure.step("""新增漫画""")
    def add_comic(self, request: Comic) -> DefaultResponseWithID:
        """新增漫画"""
        logging.getLogger(__name__).info(
            "start call " + "[add_comic]" + " api" + "=>" + """新增漫画"""
        )
        response = DefaultResponseWithID()
        self._do_twirp_rpc("/manage.v0.Manage/AddComic", request, response)
        logging.getLogger(__name__).info("call " + "[add_comic]" + " api success!")
        return response

    @allure.step("""修改漫画 1-关联漫画不存在 2-存在不在卷下的单话""")
    def edit_comic(self, request: Comic) -> DefaultResponse:
        """修改漫画 1-关联漫画不存在 2-存在不在卷下的单话"""
        logging.getLogger(__name__).info(
            "start call "
            + "[edit_comic]"
            + " api"
            + "=>"
            + """修改漫画 1-关联漫画不存在 2-存在不在卷下的单话"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditComic", request, response)
        logging.getLogger(__name__).info("call " + "[edit_comic]" + " api success!")
        return response

    @allure.step("""删除漫画""")
    def delete_comic(self, request: DeleteComicRequest) -> DefaultResponse:
        """删除漫画"""
        logging.getLogger(__name__).info(
            "start call " + "[delete_comic]" + " api" + "=>" + """删除漫画"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DeleteComic", request, response)
        logging.getLogger(__name__).info("call " + "[delete_comic]" + " api success!")
        return response

    @allure.step("""上线漫画""")
    def comic_online(self, request: ComicOnlineReq) -> DefaultResponse:
        """上线漫画"""
        logging.getLogger(__name__).info(
            "start call " + "[comic_online]" + " api" + "=>" + """上线漫画"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/ComicOnline", request, response)
        logging.getLogger(__name__).info("call " + "[comic_online]" + " api success!")
        return response

    @allure.step("""添加卷 1-序号(ord)冲突""")
    def add_chapter(self, request: AddChapterReq) -> DefaultResponseWithID:
        """添加卷 1-序号(ord)冲突"""
        logging.getLogger(__name__).info(
            "start call " + "[add_chapter]" + " api" + "=>" + """添加卷 1-序号(ord)冲突"""
        )
        response = DefaultResponseWithID()
        self._do_twirp_rpc("/manage.v0.Manage/AddChapter", request, response)
        logging.getLogger(__name__).info("call " + "[add_chapter]" + " api success!")
        return response

    @allure.step("""编辑卷 1-序号(ord)冲突""")
    def edit_chapter(self, request: AddChapterReq) -> DefaultResponse:
        """编辑卷 1-序号(ord)冲突"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_chapter]" + " api" + "=>" + """编辑卷 1-序号(ord)冲突"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditChapter", request, response)
        logging.getLogger(__name__).info("call " + "[edit_chapter]" + " api success!")
        return response

    @allure.step("""修改卷的状态""")
    def update_chapter_status(self, request: UpdateChapterStatusReq) -> DefaultResponse:
        """修改卷的状态"""
        logging.getLogger(__name__).info(
            "start call " + "[update_chapter_status]" + " api" + "=>" + """修改卷的状态"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/UpdateChapterStatus", request, response)
        logging.getLogger(__name__).info(
            "call " + "[update_chapter_status]" + " api success!"
        )
        return response

    @allure.step("""根据漫画 id 展示所有卷,不分页""")
    def list_chapters(self, request: ListChaptersReq) -> ListChaptersResp:
        """根据漫画 id 展示所有卷,不分页"""
        logging.getLogger(__name__).info(
            "start call " + "[list_chapters]" + " api" + "=>" + """根据漫画 id 展示所有卷,不分页"""
        )
        response = ListChaptersResp()
        self._do_twirp_rpc("/manage.v0.Manage/ListChapters", request, response)
        logging.getLogger(__name__).info("call " + "[list_chapters]" + " api success!")
        return response

    @allure.step("""删除卷 1-该卷下存在其他单话，不可删除""")
    def delete_chapter(self, request: DeleteChapterReq) -> DefaultResponse:
        """删除卷 1-该卷下存在其他单话，不可删除"""
        logging.getLogger(__name__).info(
            "start call "
            + "[delete_chapter]"
            + " api"
            + "=>"
            + """删除卷 1-该卷下存在其他单话，不可删除"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DeleteChapter", request, response)
        logging.getLogger(__name__).info("call " + "[delete_chapter]" + " api success!")
        return response

    @allure.step("""根据卷 id 展示所有单话,不分页""")
    def get_eps_by_chapter_i_d(
        self, request: GetEpsByChapterIDReq
    ) -> GetEpsByChapterIDResp:
        """根据卷 id 展示所有单话,不分页"""
        logging.getLogger(__name__).info(
            "start call "
            + "[get_eps_by_chapter_i_d]"
            + " api"
            + "=>"
            + """根据卷 id 展示所有单话,不分页"""
        )
        response = GetEpsByChapterIDResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetEpsByChapterID", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_eps_by_chapter_i_d]" + " api success!"
        )
        return response

    @allure.step("""单话列表""")
    def list_episodes(self, request: EpisodeListRequest) -> EpisodeListResponse:
        """单话列表"""
        logging.getLogger(__name__).info(
            "start call " + "[list_episodes]" + " api" + "=>" + """单话列表"""
        )
        response = EpisodeListResponse()
        self._do_twirp_rpc("/manage.v0.Manage/ListEpisodes", request, response)
        logging.getLogger(__name__).info("call " + "[list_episodes]" + " api success!")
        return response

    @allure.step("""单话详情""")
    def get_episode(self, request: EpisodeDetailRequest) -> EpisodeDetailResponse:
        """单话详情"""
        logging.getLogger(__name__).info(
            "start call " + "[get_episode]" + " api" + "=>" + """单话详情"""
        )
        response = EpisodeDetailResponse()
        self._do_twirp_rpc("/manage.v0.Manage/GetEpisode", request, response)
        logging.getLogger(__name__).info("call " + "[get_episode]" + " api success!")
        return response

    @allure.step("""新增话""")
    def add_episode(self, request: ComicEpisode) -> DefaultResponseWithID:
        """新增话"""
        logging.getLogger(__name__).info(
            "start call " + "[add_episode]" + " api" + "=>" + """新增话"""
        )
        response = DefaultResponseWithID()
        self._do_twirp_rpc("/manage.v0.Manage/AddEpisode", request, response)
        logging.getLogger(__name__).info("call " + "[add_episode]" + " api success!")
        return response

    @allure.step("""删除话""")
    def delete_episode(self, request: EpisodeDetailRequest) -> DefaultResponse:
        """删除话"""
        logging.getLogger(__name__).info(
            "start call " + "[delete_episode]" + " api" + "=>" + """删除话"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DeleteEpisode", request, response)
        logging.getLogger(__name__).info("call " + "[delete_episode]" + " api success!")
        return response

    @allure.step("""修改话""")
    def edit_episode(self, request: ComicEpisode) -> DefaultResponse:
        """修改话"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_episode]" + " api" + "=>" + """修改话"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditEpisode", request, response)
        logging.getLogger(__name__).info("call " + "[edit_episode]" + " api success!")
        return response

    @allure.step("""单话上下线""")
    def ep_online(self, request: EpOnlineReq) -> DefaultResponse:
        """单话上下线"""
        logging.getLogger(__name__).info(
            "start call " + "[ep_online]" + " api" + "=>" + """单话上下线"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EpOnline", request, response)
        logging.getLogger(__name__).info("call " + "[ep_online]" + " api success!")
        return response

    @allure.step("""单话付费列表""")
    def get_episode_pay_list(
        self, request: EpisodeDetailRequest
    ) -> EpisodePayListResponse:
        """单话付费列表"""
        logging.getLogger(__name__).info(
            "start call " + "[get_episode_pay_list]" + " api" + "=>" + """单话付费列表"""
        )
        response = EpisodePayListResponse()
        self._do_twirp_rpc("/manage.v0.Manage/GetEpisodePayList", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_episode_pay_list]" + " api success!"
        )
        return response

    @allure.step("""修改单话付费信息""")
    def update_episode_pay(self, request: EpisodePay) -> DefaultResponse:
        """修改单话付费信息"""
        logging.getLogger(__name__).info(
            "start call " + "[update_episode_pay]" + " api" + "=>" + """修改单话付费信息"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/UpdateEpisodePay", request, response)
        logging.getLogger(__name__).info(
            "call " + "[update_episode_pay]" + " api success!"
        )
        return response

    @allure.step("""在线修改单话信息""")
    def update_episode_online(self, request: ComicEpisode) -> DefaultResponse:
        """在线修改单话信息"""
        logging.getLogger(__name__).info(
            "start call " + "[update_episode_online]" + " api" + "=>" + """在线修改单话信息"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/UpdateEpisodeOnline", request, response)
        logging.getLogger(__name__).info(
            "call " + "[update_episode_online]" + " api success!"
        )
        return response

    @allure.step("""生成INDEX""")
    def index_upload(self, request: IndexUploadRequest) -> IndexUploadResp:
        """生成INDEX"""
        logging.getLogger(__name__).info(
            "start call " + "[index_upload]" + " api" + "=>" + """生成INDEX"""
        )
        response = IndexUploadResp()
        self._do_twirp_rpc("/manage.v0.Manage/IndexUpload", request, response)
        logging.getLogger(__name__).info("call " + "[index_upload]" + " api success!")
        return response

    @allure.step("""上传图片 (api)""")
    def upload_image(self, request: UploadImageReq) -> UploadImageResp:
        """上传图片 (api)"""
        logging.getLogger(__name__).info(
            "start call " + "[upload_image]" + " api" + "=>" + """上传图片 (api)"""
        )
        response = UploadImageResp()
        self._do_twirp_rpc("/manage.v0.Manage/UploadImage", request, response)
        logging.getLogger(__name__).info("call " + "[upload_image]" + " api success!")
        return response

    @allure.step("""获取地域屏蔽组""")
    def get_limit_group(self, request: EmptyRequest) -> LimitGroupResponse:
        """获取地域屏蔽组"""
        logging.getLogger(__name__).info(
            "start call " + "[get_limit_group]" + " api" + "=>" + """获取地域屏蔽组"""
        )
        response = LimitGroupResponse()
        self._do_twirp_rpc("/manage.v0.Manage/GetLimitGroup", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_limit_group]" + " api success!"
        )
        return response

    @allure.step("""BfsToken""")
    def bfs_token(self, request: BfsTokenReq) -> BfsTokenResp:
        """BfsToken"""
        logging.getLogger(__name__).info(
            "start call " + "[bfs_token]" + " api" + "=>" + """BfsToken"""
        )
        response = BfsTokenResp()
        self._do_twirp_rpc("/manage.v0.Manage/BfsToken", request, response)
        logging.getLogger(__name__).info("call " + "[bfs_token]" + " api success!")
        return response

    @allure.step("""获取推荐列表""")
    def get_recommended_comic_pool_list(
        self, request: GetRecommendedComicPoolListRequest
    ) -> RecommendedComicPoolListResponse:
        """获取推荐列表"""
        logging.getLogger(__name__).info(
            "start call "
            + "[get_recommended_comic_pool_list]"
            + " api"
            + "=>"
            + """获取推荐列表"""
        )
        response = RecommendedComicPoolListResponse()
        self._do_twirp_rpc(
            "/manage.v0.Manage/GetRecommendedComicPoolList", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[get_recommended_comic_pool_list]" + " api success!"
        )
        return response

    @allure.step("""增加推荐池""")
    def add_recommend_comic_pool(
        self, request: RecommendedComicPool
    ) -> DefaultResponse:
        """增加推荐池"""
        logging.getLogger(__name__).info(
            "start call " + "[add_recommend_comic_pool]" + " api" + "=>" + """增加推荐池"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/AddRecommendComicPool", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_recommend_comic_pool]" + " api success!"
        )
        return response

    @allure.step("""修改推荐池""")
    def edit_recommend_comic_pool(
        self, request: RecommendedComicPool
    ) -> DefaultResponse:
        """修改推荐池"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_recommend_comic_pool]" + " api" + "=>" + """修改推荐池"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc(
            "/manage.v0.Manage/EditRecommendComicPool", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[edit_recommend_comic_pool]" + " api success!"
        )
        return response

    @allure.step("""删除推荐池""")
    def remove_recommend_comic_pool(
        self, request: DelRecommendedComicPoolRequest
    ) -> DefaultResponse:
        """删除推荐池"""
        logging.getLogger(__name__).info(
            "start call "
            + "[remove_recommend_comic_pool]"
            + " api"
            + "=>"
            + """删除推荐池"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc(
            "/manage.v0.Manage/RemoveRecommendComicPool", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[remove_recommend_comic_pool]" + " api success!"
        )
        return response

    @allure.step("""获取推荐池库存""")
    def get_recommend_stock(
        self, request: GetRecommendStockReq
    ) -> GetRecommendStockResp:
        """获取推荐池库存"""
        logging.getLogger(__name__).info(
            "start call " + "[get_recommend_stock]" + " api" + "=>" + """获取推荐池库存"""
        )
        response = GetRecommendStockResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetRecommendStock", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_recommend_stock]" + " api success!"
        )
        return response

    @allure.step("""管理推荐池库存""")
    def manage_recommend_stock(
        self, request: ManageRecommendStockReq
    ) -> DefaultResponse:
        """管理推荐池库存"""
        logging.getLogger(__name__).info(
            "start call " + "[manage_recommend_stock]" + " api" + "=>" + """管理推荐池库存"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/ManageRecommendStock", request, response)
        logging.getLogger(__name__).info(
            "call " + "[manage_recommend_stock]" + " api success!"
        )
        return response

    @allure.step("""新增推送""")
    def add_push(self, request: PushInfo) -> DefaultResponse:
        """新增推送"""
        logging.getLogger(__name__).info(
            "start call " + "[add_push]" + " api" + "=>" + """新增推送"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/AddPush", request, response)
        logging.getLogger(__name__).info("call " + "[add_push]" + " api success!")
        return response

    @allure.step("""编辑推送""")
    def edit_push(self, request: PushInfo) -> DefaultResponse:
        """编辑推送"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_push]" + " api" + "=>" + """编辑推送"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditPush", request, response)
        logging.getLogger(__name__).info("call " + "[edit_push]" + " api success!")
        return response

    @allure.step("""删除推送""")
    def delete_push(self, request: PushInfo) -> DefaultResponse:
        """删除推送"""
        logging.getLogger(__name__).info(
            "start call " + "[delete_push]" + " api" + "=>" + """删除推送"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DeletePush", request, response)
        logging.getLogger(__name__).info("call " + "[delete_push]" + " api success!")
        return response

    @allure.step("""推送列表""")
    def push_list(self, request: PushListReq) -> PushListResp:
        """推送列表"""
        logging.getLogger(__name__).info(
            "start call " + "[push_list]" + " api" + "=>" + """推送列表"""
        )
        response = PushListResp()
        self._do_twirp_rpc("/manage.v0.Manage/PushList", request, response)
        logging.getLogger(__name__).info("call " + "[push_list]" + " api success!")
        return response

    @allure.step("""推送详情""")
    def push_detail(self, request: PushDetailReq) -> PushDetailResp:
        """推送详情"""
        logging.getLogger(__name__).info(
            "start call " + "[push_detail]" + " api" + "=>" + """推送详情"""
        )
        response = PushDetailResp()
        self._do_twirp_rpc("/manage.v0.Manage/PushDetail", request, response)
        logging.getLogger(__name__).info("call " + "[push_detail]" + " api success!")
        return response

    @allure.step("""所有信息流""")
    def get_all_cards(self, request: GetAllCardsReq) -> GetAllCardsResp:
        """所有信息流"""
        logging.getLogger(__name__).info(
            "start call " + "[get_all_cards]" + " api" + "=>" + """所有信息流"""
        )
        response = GetAllCardsResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetAllCards", request, response)
        logging.getLogger(__name__).info("call " + "[get_all_cards]" + " api success!")
        return response

    @allure.step("""信息流列表""")
    def card_list(self, request: CardListReq) -> CardListResp:
        """信息流列表"""
        logging.getLogger(__name__).info(
            "start call " + "[card_list]" + " api" + "=>" + """信息流列表"""
        )
        response = CardListResp()
        self._do_twirp_rpc("/manage.v0.Manage/CardList", request, response)
        logging.getLogger(__name__).info("call " + "[card_list]" + " api success!")
        return response

    @allure.step("""信息流详情""")
    def card_detail(self, request: CardDetailReq) -> CardDetailResp:
        """信息流详情"""
        logging.getLogger(__name__).info(
            "start call " + "[card_detail]" + " api" + "=>" + """信息流详情"""
        )
        response = CardDetailResp()
        self._do_twirp_rpc("/manage.v0.Manage/CardDetail", request, response)
        logging.getLogger(__name__).info("call " + "[card_detail]" + " api success!")
        return response

    @allure.step("""新增信息流""")
    def add_card(self, request: CardInfo) -> AddCardResp:
        """新增信息流"""
        logging.getLogger(__name__).info(
            "start call " + "[add_card]" + " api" + "=>" + """新增信息流"""
        )
        response = AddCardResp()
        self._do_twirp_rpc("/manage.v0.Manage/AddCard", request, response)
        logging.getLogger(__name__).info("call " + "[add_card]" + " api success!")
        return response

    @allure.step("""删除信息流""")
    def del_card(self, request: DelCardReq) -> DefaultResponse:
        """删除信息流"""
        logging.getLogger(__name__).info(
            "start call " + "[del_card]" + " api" + "=>" + """删除信息流"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelCard", request, response)
        logging.getLogger(__name__).info("call " + "[del_card]" + " api success!")
        return response

    @allure.step("""修改信息流""")
    def edit_card(self, request: CardInfo) -> DefaultResponse:
        """修改信息流"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_card]" + " api" + "=>" + """修改信息流"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditCard", request, response)
        logging.getLogger(__name__).info("call " + "[edit_card]" + " api success!")
        return response

    @allure.step("""批量修改卡片位置""")
    def update_cards_position(self, request: UpdateCardsPositionReq) -> DefaultResponse:
        """批量修改卡片位置"""
        logging.getLogger(__name__).info(
            "start call " + "[update_cards_position]" + " api" + "=>" + """批量修改卡片位置"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/UpdateCardsPosition", request, response)
        logging.getLogger(__name__).info(
            "call " + "[update_cards_position]" + " api success!"
        )
        return response

    @allure.step("""添加合集""")
    def add_father_combine_card(
        self, request: AddFatherCombineCardReq
    ) -> DefaultResponseWithID:
        """添加合集"""
        logging.getLogger(__name__).info(
            "start call " + "[add_father_combine_card]" + " api" + "=>" + """添加合集"""
        )
        response = DefaultResponseWithID()
        self._do_twirp_rpc("/manage.v0.Manage/AddFatherCombineCard", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_father_combine_card]" + " api success!"
        )
        return response

    @allure.step("""编辑合集""")
    def edit_father_combine_card(
        self, request: AddFatherCombineCardReq
    ) -> DefaultResponse:
        """编辑合集"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_father_combine_card]" + " api" + "=>" + """编辑合集"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditFatherCombineCard", request, response)
        logging.getLogger(__name__).info(
            "call " + "[edit_father_combine_card]" + " api success!"
        )
        return response

    @allure.step("""删除合集""")
    def del_father_combine_card(
        self, request: GetCombineInfoByIDReq
    ) -> DefaultResponse:
        """删除合集"""
        logging.getLogger(__name__).info(
            "start call " + "[del_father_combine_card]" + " api" + "=>" + """删除合集"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelFatherCombineCard", request, response)
        logging.getLogger(__name__).info(
            "call " + "[del_father_combine_card]" + " api success!"
        )
        return response

    @allure.step("""合集列表""")
    def list_father_combine_card(
        self, request: ListFatherCombineReq
    ) -> ListFatherCombineCardResp:
        """合集列表"""
        logging.getLogger(__name__).info(
            "start call " + "[list_father_combine_card]" + " api" + "=>" + """合集列表"""
        )
        response = ListFatherCombineCardResp()
        self._do_twirp_rpc("/manage.v0.Manage/ListFatherCombineCard", request, response)
        logging.getLogger(__name__).info(
            "call " + "[list_father_combine_card]" + " api success!"
        )
        return response

    @allure.step("""添加聚合卡""")
    def add_combine_card(self, request: AddCombineCardReq) -> DefaultResponseWithID:
        """添加聚合卡"""
        logging.getLogger(__name__).info(
            "start call " + "[add_combine_card]" + " api" + "=>" + """添加聚合卡"""
        )
        response = DefaultResponseWithID()
        self._do_twirp_rpc("/manage.v0.Manage/AddCombineCard", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_combine_card]" + " api success!"
        )
        return response

    @allure.step("""编辑聚合卡""")
    def edit_combine_card(self, request: AddCombineCardReq) -> DefaultResponse:
        """编辑聚合卡"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_combine_card]" + " api" + "=>" + """编辑聚合卡"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditCombineCard", request, response)
        logging.getLogger(__name__).info(
            "call " + "[edit_combine_card]" + " api success!"
        )
        return response

    @allure.step("""删除聚合卡""")
    def del_combine_card(self, request: DelCombineCardReq) -> DefaultResponse:
        """删除聚合卡"""
        logging.getLogger(__name__).info(
            "start call " + "[del_combine_card]" + " api" + "=>" + """删除聚合卡"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelCombineCard", request, response)
        logging.getLogger(__name__).info(
            "call " + "[del_combine_card]" + " api success!"
        )
        return response

    @allure.step("""根据聚合卡 id 获取下面的所有信息""")
    def get_combine_info_by_i_d(
        self, request: GetCombineInfoByIDReq
    ) -> GetCombineInfoByIDResp:
        """根据聚合卡 id 获取下面的所有信息"""
        logging.getLogger(__name__).info(
            "start call "
            + "[get_combine_info_by_i_d]"
            + " api"
            + "=>"
            + """根据聚合卡 id 获取下面的所有信息"""
        )
        response = GetCombineInfoByIDResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetCombineInfoByID", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_combine_info_by_i_d]" + " api success!"
        )
        return response

    @allure.step("""聚合卡列表""")
    def list_combine_card(self, request: GetCombineInfoByIDReq) -> ListCombineCardResp:
        """聚合卡列表"""
        logging.getLogger(__name__).info(
            "start call " + "[list_combine_card]" + " api" + "=>" + """聚合卡列表"""
        )
        response = ListCombineCardResp()
        self._do_twirp_rpc("/manage.v0.Manage/ListCombineCard", request, response)
        logging.getLogger(__name__).info(
            "call " + "[list_combine_card]" + " api success!"
        )
        return response

    @allure.step("""添加专栏""")
    def add_column_card(self, request: AddColumnCardReq) -> DefaultResponseWithID:
        """添加专栏"""
        logging.getLogger(__name__).info(
            "start call " + "[add_column_card]" + " api" + "=>" + """添加专栏"""
        )
        response = DefaultResponseWithID()
        self._do_twirp_rpc("/manage.v0.Manage/AddColumnCard", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_column_card]" + " api success!"
        )
        return response

    @allure.step("""编辑专栏""")
    def edit_column_card(self, request: AddColumnCardReq) -> DefaultResponse:
        """编辑专栏"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_column_card]" + " api" + "=>" + """编辑专栏"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditColumnCard", request, response)
        logging.getLogger(__name__).info(
            "call " + "[edit_column_card]" + " api success!"
        )
        return response

    @allure.step("""删除专栏""")
    def del_column_card(self, request: GetCombineInfoByIDReq) -> DefaultResponse:
        """删除专栏"""
        logging.getLogger(__name__).info(
            "start call " + "[del_column_card]" + " api" + "=>" + """删除专栏"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelColumnCard", request, response)
        logging.getLogger(__name__).info(
            "call " + "[del_column_card]" + " api success!"
        )
        return response

    @allure.step("""专栏列表""")
    def list_column_card(self, request: EmptyRequest) -> ListColumnCardResp:
        """专栏列表"""
        logging.getLogger(__name__).info(
            "start call " + "[list_column_card]" + " api" + "=>" + """专栏列表"""
        )
        response = ListColumnCardResp()
        self._do_twirp_rpc("/manage.v0.Manage/ListColumnCard", request, response)
        logging.getLogger(__name__).info(
            "call " + "[list_column_card]" + " api success!"
        )
        return response

    @allure.step("""查询主站专栏信息""")
    def get_column_info(self, request: GetColumnInfoReq) -> GetColumnInfoResp:
        """查询主站专栏信息"""
        logging.getLogger(__name__).info(
            "start call " + "[get_column_info]" + " api" + "=>" + """查询主站专栏信息"""
        )
        response = GetColumnInfoResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetColumnInfo", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_column_info]" + " api success!"
        )
        return response

    @allure.step("""闪屏列表""")
    def flash_list(self, request: FlashListReq) -> FlashListResp:
        """闪屏列表"""
        logging.getLogger(__name__).info(
            "start call " + "[flash_list]" + " api" + "=>" + """闪屏列表"""
        )
        response = FlashListResp()
        self._do_twirp_rpc("/manage.v0.Manage/FlashList", request, response)
        logging.getLogger(__name__).info("call " + "[flash_list]" + " api success!")
        return response

    @allure.step("""闪屏详情""")
    def flash_detail(self, request: FlashDetailReq) -> FlashDetailResp:
        """闪屏详情"""
        logging.getLogger(__name__).info(
            "start call " + "[flash_detail]" + " api" + "=>" + """闪屏详情"""
        )
        response = FlashDetailResp()
        self._do_twirp_rpc("/manage.v0.Manage/FlashDetail", request, response)
        logging.getLogger(__name__).info("call " + "[flash_detail]" + " api success!")
        return response

    @allure.step("""新增闪屏""")
    def add_flash(self, request: FlashInfo) -> DefaultResponse:
        """新增闪屏"""
        logging.getLogger(__name__).info(
            "start call " + "[add_flash]" + " api" + "=>" + """新增闪屏"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/AddFlash", request, response)
        logging.getLogger(__name__).info("call " + "[add_flash]" + " api success!")
        return response

    @allure.step("""删除闪屏""")
    def del_flash(self, request: DelFlashReq) -> DefaultResponse:
        """删除闪屏"""
        logging.getLogger(__name__).info(
            "start call " + "[del_flash]" + " api" + "=>" + """删除闪屏"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelFlash", request, response)
        logging.getLogger(__name__).info("call " + "[del_flash]" + " api success!")
        return response

    @allure.step("""修改闪屏""")
    def edit_flash(self, request: FlashInfo) -> DefaultResponse:
        """修改闪屏"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_flash]" + " api" + "=>" + """修改闪屏"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditFlash", request, response)
        logging.getLogger(__name__).info("call " + "[edit_flash]" + " api success!")
        return response

    @allure.step("""查询反馈建议""")
    def advise_list(self, request: AdviseListReq) -> AdviseListResp:
        """查询反馈建议"""
        logging.getLogger(__name__).info(
            "start call " + "[advise_list]" + " api" + "=>" + """查询反馈建议"""
        )
        response = AdviseListResp()
        self._do_twirp_rpc("/manage.v0.Manage/AdviseList", request, response)
        logging.getLogger(__name__).info("call " + "[advise_list]" + " api success!")
        return response

    @allure.step("""批量添加分销漫画""")
    def add_selling_comics(self, request: AddSellingComicsReq) -> DefaultResponse:
        """批量添加分销漫画"""
        logging.getLogger(__name__).info(
            "start call " + "[add_selling_comics]" + " api" + "=>" + """批量添加分销漫画"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/AddSellingComics", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_selling_comics]" + " api success!"
        )
        return response

    @allure.step("""删除分销漫画""")
    def delete_selling_comic(self, request: DeleteSellingComicReq) -> DefaultResponse:
        """删除分销漫画"""
        logging.getLogger(__name__).info(
            "start call " + "[delete_selling_comic]" + " api" + "=>" + """删除分销漫画"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DeleteSellingComic", request, response)
        logging.getLogger(__name__).info(
            "call " + "[delete_selling_comic]" + " api success!"
        )
        return response

    @allure.step("""删除分销漫画""")
    def list_selling_comics(
        self, request: ListSellingComicsReq
    ) -> ListSellingComicsResp:
        """删除分销漫画"""
        logging.getLogger(__name__).info(
            "start call " + "[list_selling_comics]" + " api" + "=>" + """删除分销漫画"""
        )
        response = ListSellingComicsResp()
        self._do_twirp_rpc("/manage.v0.Manage/ListSellingComics", request, response)
        logging.getLogger(__name__).info(
            "call " + "[list_selling_comics]" + " api success!"
        )
        return response

    @allure.step("""生成漫读券兑换码""")
    def gen_redeem_codes(self, request: GenRedeemCodesReq) -> DefaultResponse:
        """生成漫读券兑换码"""
        logging.getLogger(__name__).info(
            "start call " + "[gen_redeem_codes]" + " api" + "=>" + """生成漫读券兑换码"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/GenRedeemCodes", request, response)
        logging.getLogger(__name__).info(
            "call " + "[gen_redeem_codes]" + " api success!"
        )
        return response

    @allure.step("""列出兑换批次""")
    def list_redeem_batch(self, request: ListRedeemBatchReq) -> ListRedeemBatchResp:
        """列出兑换批次"""
        logging.getLogger(__name__).info(
            "start call " + "[list_redeem_batch]" + " api" + "=>" + """列出兑换批次"""
        )
        response = ListRedeemBatchResp()
        self._do_twirp_rpc("/manage.v0.Manage/ListRedeemBatch", request, response)
        logging.getLogger(__name__).info(
            "call " + "[list_redeem_batch]" + " api success!"
        )
        return response

    @allure.step("""列出兑换码列表""")
    def list_redeem_codes(self, request: ListRedeemCodesReq) -> ListRedeemCodesResp:
        """列出兑换码列表"""
        logging.getLogger(__name__).info(
            "start call " + "[list_redeem_codes]" + " api" + "=>" + """列出兑换码列表"""
        )
        response = ListRedeemCodesResp()
        self._do_twirp_rpc("/manage.v0.Manage/ListRedeemCodes", request, response)
        logging.getLogger(__name__).info(
            "call " + "[list_redeem_codes]" + " api success!"
        )
        return response

    @allure.step("""导出兑换码列表""")
    def export_redeem_codes(self, request: ListRedeemCodesReq) -> ExportRedeemCodesResp:
        """导出兑换码列表"""
        logging.getLogger(__name__).info(
            "start call " + "[export_redeem_codes]" + " api" + "=>" + """导出兑换码列表"""
        )
        response = ExportRedeemCodesResp()
        self._do_twirp_rpc("/manage.v0.Manage/ExportRedeemCodes", request, response)
        logging.getLogger(__name__).info(
            "call " + "[export_redeem_codes]" + " api success!"
        )
        return response

    @allure.step("""下载反馈建议""")
    def download_advise(self, request: AdviseListReq) -> AdviseListResp:
        """下载反馈建议"""
        logging.getLogger(__name__).info(
            "start call " + "[download_advise]" + " api" + "=>" + """下载反馈建议"""
        )
        response = AdviseListResp()
        self._do_twirp_rpc("/manage.v0.Manage/DownloadAdvise", request, response)
        logging.getLogger(__name__).info(
            "call " + "[download_advise]" + " api success!"
        )
        return response

    @allure.step("""新增安卓版本""")
    def add_android_patch(self, request: AndroidPatchInfo) -> DefaultResponse:
        """新增安卓版本"""
        logging.getLogger(__name__).info(
            "start call " + "[add_android_patch]" + " api" + "=>" + """新增安卓版本"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/AddAndroidPatch", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_android_patch]" + " api success!"
        )
        return response

    @allure.step("""删除安卓版本""")
    def del_android_patch(self, request: DelAndroidPatchReq) -> DefaultResponse:
        """删除安卓版本"""
        logging.getLogger(__name__).info(
            "start call " + "[del_android_patch]" + " api" + "=>" + """删除安卓版本"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelAndroidPatch", request, response)
        logging.getLogger(__name__).info(
            "call " + "[del_android_patch]" + " api success!"
        )
        return response

    @allure.step("""修改安卓版本""")
    def edit_android_patch(self, request: AndroidPatchInfo) -> DefaultResponse:
        """修改安卓版本"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_android_patch]" + " api" + "=>" + """修改安卓版本"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditAndroidPatch", request, response)
        logging.getLogger(__name__).info(
            "call " + "[edit_android_patch]" + " api success!"
        )
        return response

    @allure.step("""查询安卓版本列表""")
    def android_patch_list(self, request: AndroidPatchListReq) -> AndroidPatchListResp:
        """查询安卓版本列表"""
        logging.getLogger(__name__).info(
            "start call " + "[android_patch_list]" + " api" + "=>" + """查询安卓版本列表"""
        )
        response = AndroidPatchListResp()
        self._do_twirp_rpc("/manage.v0.Manage/AndroidPatchList", request, response)
        logging.getLogger(__name__).info(
            "call " + "[android_patch_list]" + " api success!"
        )
        return response

    @allure.step("""查询安卓版本详情""")
    def android_patch_detail(
        self, request: AndroidPatchDetailReq
    ) -> AndroidPatchDetailResp:
        """查询安卓版本详情"""
        logging.getLogger(__name__).info(
            "start call " + "[android_patch_detail]" + " api" + "=>" + """查询安卓版本详情"""
        )
        response = AndroidPatchDetailResp()
        self._do_twirp_rpc("/manage.v0.Manage/AndroidPatchDetail", request, response)
        logging.getLogger(__name__).info(
            "call " + "[android_patch_detail]" + " api success!"
        )
        return response

    @allure.step("""新增IOS版本""")
    def add_ios_patch(self, request: IosPatchInfo) -> DefaultResponse:
        """新增IOS版本"""
        logging.getLogger(__name__).info(
            "start call " + "[add_ios_patch]" + " api" + "=>" + """新增IOS版本"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/AddIosPatch", request, response)
        logging.getLogger(__name__).info("call " + "[add_ios_patch]" + " api success!")
        return response

    @allure.step("""删除IOS版本""")
    def del_ios_patch(self, request: DelIosPatchReq) -> DefaultResponse:
        """删除IOS版本"""
        logging.getLogger(__name__).info(
            "start call " + "[del_ios_patch]" + " api" + "=>" + """删除IOS版本"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelIosPatch", request, response)
        logging.getLogger(__name__).info("call " + "[del_ios_patch]" + " api success!")
        return response

    @allure.step("""修改IOS版本""")
    def edit_ios_patch(self, request: IosPatchInfo) -> DefaultResponse:
        """修改IOS版本"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_ios_patch]" + " api" + "=>" + """修改IOS版本"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditIosPatch", request, response)
        logging.getLogger(__name__).info("call " + "[edit_ios_patch]" + " api success!")
        return response

    @allure.step("""查询IOS版本列表""")
    def ios_patch_list(self, request: IosPatchListReq) -> IosPatchListResp:
        """查询IOS版本列表"""
        logging.getLogger(__name__).info(
            "start call " + "[ios_patch_list]" + " api" + "=>" + """查询IOS版本列表"""
        )
        response = IosPatchListResp()
        self._do_twirp_rpc("/manage.v0.Manage/IosPatchList", request, response)
        logging.getLogger(__name__).info("call " + "[ios_patch_list]" + " api success!")
        return response

    @allure.step("""查询IOS版本详情""")
    def ios_patch_detail(self, request: IosPatchDetailReq) -> IosPatchDetailResp:
        """查询IOS版本详情"""
        logging.getLogger(__name__).info(
            "start call " + "[ios_patch_detail]" + " api" + "=>" + """查询IOS版本详情"""
        )
        response = IosPatchDetailResp()
        self._do_twirp_rpc("/manage.v0.Manage/IosPatchDetail", request, response)
        logging.getLogger(__name__).info(
            "call " + "[ios_patch_detail]" + " api success!"
        )
        return response

    @allure.step("""人气值列表""")
    def pop_list(self, request: PopListReq) -> PopListResp:
        """人气值列表"""
        logging.getLogger(__name__).info(
            "start call " + "[pop_list]" + " api" + "=>" + """人气值列表"""
        )
        response = PopListResp()
        self._do_twirp_rpc("/manage.v0.Manage/PopList", request, response)
        logging.getLogger(__name__).info("call " + "[pop_list]" + " api success!")
        return response

    @allure.step("""人气值修改""")
    def pop_edit(self, request: PopEditReq) -> DefaultResponse:
        """人气值修改"""
        logging.getLogger(__name__).info(
            "start call " + "[pop_edit]" + " api" + "=>" + """人气值修改"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/PopEdit", request, response)
        logging.getLogger(__name__).info("call " + "[pop_edit]" + " api success!")
        return response

    @allure.step("""Topic列表""")
    def topic_list(self, request: TopicListReq) -> TopicListResp:
        """Topic列表"""
        logging.getLogger(__name__).info(
            "start call " + "[topic_list]" + " api" + "=>" + """Topic列表"""
        )
        response = TopicListResp()
        self._do_twirp_rpc("/manage.v0.Manage/TopicList", request, response)
        logging.getLogger(__name__).info("call " + "[topic_list]" + " api success!")
        return response

    @allure.step("""Topic详情""")
    def topic_detail(self, request: TopicDetailReq) -> TopicDetailResp:
        """Topic详情"""
        logging.getLogger(__name__).info(
            "start call " + "[topic_detail]" + " api" + "=>" + """Topic详情"""
        )
        response = TopicDetailResp()
        self._do_twirp_rpc("/manage.v0.Manage/TopicDetail", request, response)
        logging.getLogger(__name__).info("call " + "[topic_detail]" + " api success!")
        return response

    @allure.step("""新增Topic""")
    def add_topic(self, request: TopicInfo) -> DefaultResponse:
        """新增Topic"""
        logging.getLogger(__name__).info(
            "start call " + "[add_topic]" + " api" + "=>" + """新增Topic"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/AddTopic", request, response)
        logging.getLogger(__name__).info("call " + "[add_topic]" + " api success!")
        return response

    @allure.step("""删除Topic""")
    def del_topic(self, request: DelTopicReq) -> DefaultResponse:
        """删除Topic"""
        logging.getLogger(__name__).info(
            "start call " + "[del_topic]" + " api" + "=>" + """删除Topic"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelTopic", request, response)
        logging.getLogger(__name__).info("call " + "[del_topic]" + " api success!")
        return response

    @allure.step("""修改Topic""")
    def edit_topic(self, request: TopicInfo) -> DefaultResponse:
        """修改Topic"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_topic]" + " api" + "=>" + """修改Topic"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditTopic", request, response)
        logging.getLogger(__name__).info("call " + "[edit_topic]" + " api success!")
        return response

    @allure.step("""批量上下线""")
    def ep_online_batch(self, request: EpOnlineBatchReq) -> DefaultResponse:
        """批量上下线"""
        logging.getLogger(__name__).info(
            "start call " + "[ep_online_batch]" + " api" + "=>" + """批量上下线"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EpOnlineBatch", request, response)
        logging.getLogger(__name__).info(
            "call " + "[ep_online_batch]" + " api success!"
        )
        return response

    @allure.step("""商城(漫读劵)展示接口: 临时用，待积分商城上线后会下线""")
    def get_coupon_point_shop(self, request: EmptyRequest) -> CouponPointShopResp:
        """商城(漫读劵)展示接口: 临时用，待积分商城上线后会下线"""
        logging.getLogger(__name__).info(
            "start call "
            + "[get_coupon_point_shop]"
            + " api"
            + "=>"
            + """商城(漫读劵)展示接口: 临时用，待积分商城上线后会下线"""
        )
        response = CouponPointShopResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetCouponPointShop", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_coupon_point_shop]" + " api success!"
        )
        return response

    @allure.step("""更新积分商城漫读劵补货数量(临时用, 随积分商城上线后下架该接口)""")
    def update_coupon_next_amount(
        self, request: UpdateCouponNextAmountReq
    ) -> DefaultResponse:
        """更新积分商城漫读劵补货数量(临时用, 随积分商城上线后下架该接口)"""
        logging.getLogger(__name__).info(
            "start call "
            + "[update_coupon_next_amount]"
            + " api"
            + "=>"
            + """更新积分商城漫读劵补货数量(临时用, 随积分商城上线后下架该接口)"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc(
            "/manage.v0.Manage/UpdateCouponNextAmount", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[update_coupon_next_amount]" + " api success!"
        )
        return response

    @allure.step("""库存列表""")
    def stock_list(self, request: StockListReq) -> StockListResp:
        """库存列表"""
        logging.getLogger(__name__).info(
            "start call " + "[stock_list]" + " api" + "=>" + """库存列表"""
        )
        response = StockListResp()
        self._do_twirp_rpc("/manage.v0.Manage/StockList", request, response)
        logging.getLogger(__name__).info("call " + "[stock_list]" + " api success!")
        return response

    @allure.step("""排行榜黑名单""")
    def hot_black_list(self, request: HotBlackListReq) -> HotBlackListResp:
        """排行榜黑名单"""
        logging.getLogger(__name__).info(
            "start call " + "[hot_black_list]" + " api" + "=>" + """排行榜黑名单"""
        )
        response = HotBlackListResp()
        self._do_twirp_rpc("/manage.v0.Manage/HotBlackList", request, response)
        logging.getLogger(__name__).info("call " + "[hot_black_list]" + " api success!")
        return response

    @allure.step("""添加排行榜黑名单""")
    def add_hot_black(self, request: AddHotBlackReq) -> DefaultResponse:
        """添加排行榜黑名单"""
        logging.getLogger(__name__).info(
            "start call " + "[add_hot_black]" + " api" + "=>" + """添加排行榜黑名单"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/AddHotBlack", request, response)
        logging.getLogger(__name__).info("call " + "[add_hot_black]" + " api success!")
        return response

    @allure.step("""删除排行榜黑名单""")
    def del_hot_black(self, request: DelHotBlackReq) -> DefaultResponse:
        """删除排行榜黑名单"""
        logging.getLogger(__name__).info(
            "start call " + "[del_hot_black]" + " api" + "=>" + """删除排行榜黑名单"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelHotBlack", request, response)
        logging.getLogger(__name__).info("call " + "[del_hot_black]" + " api success!")
        return response

    @allure.step("""获取公司列表信息""")
    def get_company_list(self, request: DefaultListRequest) -> CompanyListResponse:
        """获取公司列表信息"""
        logging.getLogger(__name__).info(
            "start call " + "[get_company_list]" + " api" + "=>" + """获取公司列表信息"""
        )
        response = CompanyListResponse()
        self._do_twirp_rpc("/manage.v0.Manage/GetCompanyList", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_company_list]" + " api success!"
        )
        return response

    @allure.step("""编辑公司信息""")
    def mod_company(self, request: ModCompanyRequest) -> DefaultResponse:
        """编辑公司信息"""
        logging.getLogger(__name__).info(
            "start call " + "[mod_company]" + " api" + "=>" + """编辑公司信息"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/ModCompany", request, response)
        logging.getLogger(__name__).info("call " + "[mod_company]" + " api success!")
        return response

    @allure.step("""新增公司""")
    def add_company(self, request: CompanyRequest) -> DefaultResponseWithID:
        """新增公司"""
        logging.getLogger(__name__).info(
            "start call " + "[add_company]" + " api" + "=>" + """新增公司"""
        )
        response = DefaultResponseWithID()
        self._do_twirp_rpc("/manage.v0.Manage/AddCompany", request, response)
        logging.getLogger(__name__).info("call " + "[add_company]" + " api success!")
        return response

    @allure.step("""删除公司""")
    def del_company(self, request: DelCompanyRequest) -> DefaultResponse:
        """删除公司"""
        logging.getLogger(__name__).info(
            "start call " + "[del_company]" + " api" + "=>" + """删除公司"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelCompany", request, response)
        logging.getLogger(__name__).info("call " + "[del_company]" + " api success!")
        return response

    @allure.step("""获取合同列表信息""")
    def get_contract_list(self, request: DefaultListRequest) -> ContractListResponse:
        """获取合同列表信息"""
        logging.getLogger(__name__).info(
            "start call " + "[get_contract_list]" + " api" + "=>" + """获取合同列表信息"""
        )
        response = ContractListResponse()
        self._do_twirp_rpc("/manage.v0.Manage/GetContractList", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_contract_list]" + " api success!"
        )
        return response

    @allure.step("""新增结算流""")
    def add_contract(self, request: ContractRequest) -> DefaultResponseWithID:
        """新增结算流"""
        logging.getLogger(__name__).info(
            "start call " + "[add_contract]" + " api" + "=>" + """新增结算流"""
        )
        response = DefaultResponseWithID()
        self._do_twirp_rpc("/manage.v0.Manage/AddContract", request, response)
        logging.getLogger(__name__).info("call " + "[add_contract]" + " api success!")
        return response

    @allure.step("""修改结算流""")
    def mod_contract(self, request: ModContractRequest) -> DefaultResponse:
        """修改结算流"""
        logging.getLogger(__name__).info(
            "start call " + "[mod_contract]" + " api" + "=>" + """修改结算流"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/ModContract", request, response)
        logging.getLogger(__name__).info("call " + "[mod_contract]" + " api success!")
        return response

    @allure.step("""删除结算流""")
    def del_contract(self, request: DelContractRequest) -> DefaultResponse:
        """删除结算流"""
        logging.getLogger(__name__).info(
            "start call " + "[del_contract]" + " api" + "=>" + """删除结算流"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelContract", request, response)
        logging.getLogger(__name__).info("call " + "[del_contract]" + " api success!")
        return response

    @allure.step("""批量更新结算流状态""")
    def update_contracts_status(
        self, request: UpdateContractsStatusReq
    ) -> UpdateContractsStatusResp:
        """批量更新结算流状态"""
        logging.getLogger(__name__).info(
            "start call "
            + "[update_contracts_status]"
            + " api"
            + "=>"
            + """批量更新结算流状态"""
        )
        response = UpdateContractsStatusResp()
        self._do_twirp_rpc("/manage.v0.Manage/UpdateContractsStatus", request, response)
        logging.getLogger(__name__).info(
            "call " + "[update_contracts_status]" + " api success!"
        )
        return response

    @allure.step("""判断线上漫画是否在结算流中""")
    def list_comics_not_in_contracts(
        self, request: EmptyRequest
    ) -> ListComicsNotInContractsResp:
        """判断线上漫画是否在结算流中"""
        logging.getLogger(__name__).info(
            "start call "
            + "[list_comics_not_in_contracts]"
            + " api"
            + "=>"
            + """判断线上漫画是否在结算流中"""
        )
        response = ListComicsNotInContractsResp()
        self._do_twirp_rpc(
            "/manage.v0.Manage/ListComicsNotInContracts", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[list_comics_not_in_contracts]" + " api success!"
        )
        return response

    @allure.step("""导出结算报表""")
    def export_bill(self, request: ExportBillReq) -> ExportBillResp:
        """导出结算报表"""
        logging.getLogger(__name__).info(
            "start call " + "[export_bill]" + " api" + "=>" + """导出结算报表"""
        )
        response = ExportBillResp()
        self._do_twirp_rpc("/manage.v0.Manage/ExportBill", request, response)
        logging.getLogger(__name__).info("call " + "[export_bill]" + " api success!")
        return response

    @allure.step("""获取所有公司""")
    def get_all_company(self, request: EmptyRequest) -> AllCompanyResponse:
        """获取所有公司"""
        logging.getLogger(__name__).info(
            "start call " + "[get_all_company]" + " api" + "=>" + """获取所有公司"""
        )
        response = AllCompanyResponse()
        self._do_twirp_rpc("/manage.v0.Manage/GetAllCompany", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_all_company]" + " api success!"
        )
        return response

    @allure.step("""发送联通免流漫读券""")
    def send_uniform_coupon(self, request: SendUniformCouponReq) -> DefaultResponse:
        """发送联通免流漫读券"""
        logging.getLogger(__name__).info(
            "start call " + "[send_uniform_coupon]" + " api" + "=>" + """发送联通免流漫读券"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/SendUniformCoupon", request, response)
        logging.getLogger(__name__).info(
            "call " + "[send_uniform_coupon]" + " api success!"
        )
        return response

    @allure.step("""检查用户是否是漫画用户""")
    def is_comic_user(self, request: IsComicUserReq) -> IsComicUserResp:
        """检查用户是否是漫画用户"""
        logging.getLogger(__name__).info(
            "start call " + "[is_comic_user]" + " api" + "=>" + """检查用户是否是漫画用户"""
        )
        response = IsComicUserResp()
        self._do_twirp_rpc("/manage.v0.Manage/IsComicUser", request, response)
        logging.getLogger(__name__).info("call " + "[is_comic_user]" + " api success!")
        return response

    @allure.step("""添加追漫发送漫读券事件""")
    def add_fav_send_coupon(self, request: FavSendCoupon) -> DefaultResponse:
        """添加追漫发送漫读券事件"""
        logging.getLogger(__name__).info(
            "start call " + "[add_fav_send_coupon]" + " api" + "=>" + """添加追漫发送漫读券事件"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/AddFavSendCoupon", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_fav_send_coupon]" + " api success!"
        )
        return response

    @allure.step("""更新追漫发送漫读券事件""")
    def update_fav_send_coupon(self, request: FavSendCoupon) -> DefaultResponse:
        """更新追漫发送漫读券事件"""
        logging.getLogger(__name__).info(
            "start call "
            + "[update_fav_send_coupon]"
            + " api"
            + "=>"
            + """更新追漫发送漫读券事件"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/UpdateFavSendCoupon", request, response)
        logging.getLogger(__name__).info(
            "call " + "[update_fav_send_coupon]" + " api success!"
        )
        return response

    @allure.step("""删除追漫发送漫读券事件""")
    def delete_fav_send_coupon(self, request: DeleteEventReq) -> DefaultResponse:
        """删除追漫发送漫读券事件"""
        logging.getLogger(__name__).info(
            "start call "
            + "[delete_fav_send_coupon]"
            + " api"
            + "=>"
            + """删除追漫发送漫读券事件"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DeleteFavSendCoupon", request, response)
        logging.getLogger(__name__).info(
            "call " + "[delete_fav_send_coupon]" + " api success!"
        )
        return response

    @allure.step("""获取追漫发送漫读券事件列表""")
    def get_fav_send_coupon_list(
        self, request: GetFavSendCouponListReq
    ) -> FavSendCouponListResp:
        """获取追漫发送漫读券事件列表"""
        logging.getLogger(__name__).info(
            "start call "
            + "[get_fav_send_coupon_list]"
            + " api"
            + "=>"
            + """获取追漫发送漫读券事件列表"""
        )
        response = FavSendCouponListResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetFavSendCouponList", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_fav_send_coupon_list]" + " api success!"
        )
        return response

    @allure.step("""添加优惠活动""")
    def add_discount(self, request: DiscountSetRequest) -> DefaultResponse:
        """添加优惠活动"""
        logging.getLogger(__name__).info(
            "start call " + "[add_discount]" + " api" + "=>" + """添加优惠活动"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/AddDiscount", request, response)
        logging.getLogger(__name__).info("call " + "[add_discount]" + " api success!")
        return response

    @allure.step("""修改优惠活动""")
    def update_discount(self, request: DiscountSetRequest) -> DefaultResponse:
        """修改优惠活动"""
        logging.getLogger(__name__).info(
            "start call " + "[update_discount]" + " api" + "=>" + """修改优惠活动"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/UpdateDiscount", request, response)
        logging.getLogger(__name__).info(
            "call " + "[update_discount]" + " api success!"
        )
        return response

    @allure.step("""删除优惠活动""")
    def delete_discount(self, request: DiscountDelRequest) -> DefaultResponse:
        """删除优惠活动"""
        logging.getLogger(__name__).info(
            "start call " + "[delete_discount]" + " api" + "=>" + """删除优惠活动"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DeleteDiscount", request, response)
        logging.getLogger(__name__).info(
            "call " + "[delete_discount]" + " api success!"
        )
        return response

    @allure.step("""获取优惠活动列表""")
    def get_discount_list(self, request: DiscountListRequest) -> DiscountListResponse:
        """获取优惠活动列表"""
        logging.getLogger(__name__).info(
            "start call " + "[get_discount_list]" + " api" + "=>" + """获取优惠活动列表"""
        )
        response = DiscountListResponse()
        self._do_twirp_rpc("/manage.v0.Manage/GetDiscountList", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_discount_list]" + " api success!"
        )
        return response

    @allure.step("""添加漫画打赏配置""")
    def add_comic_reward(self, request: AddComicRewardReq) -> AddComicRewardResp:
        """添加漫画打赏配置"""
        logging.getLogger(__name__).info(
            "start call " + "[add_comic_reward]" + " api" + "=>" + """添加漫画打赏配置"""
        )
        response = AddComicRewardResp()
        self._do_twirp_rpc("/manage.v0.Manage/AddComicReward", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_comic_reward]" + " api success!"
        )
        return response

    @allure.step("""批量获取打赏配置""")
    def get_comic_rewards(self, request: GetComicRewardReq) -> GetComicRewardsResp:
        """批量获取打赏配置"""
        logging.getLogger(__name__).info(
            "start call " + "[get_comic_rewards]" + " api" + "=>" + """批量获取打赏配置"""
        )
        response = GetComicRewardsResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetComicRewards", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_comic_rewards]" + " api success!"
        )
        return response

    @allure.step("""编辑漫画打赏配置""")
    def edit_comic_reward(self, request: AddComicRewardReq) -> DefaultResponse:
        """编辑漫画打赏配置"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_comic_reward]" + " api" + "=>" + """编辑漫画打赏配置"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditComicReward", request, response)
        logging.getLogger(__name__).info(
            "call " + "[edit_comic_reward]" + " api success!"
        )
        return response

    @allure.step("""删除漫画打赏配置""")
    def delete_comic_reward_by_i_d(
        self, request: DeleteComicRewardReq
    ) -> DefaultResponse:
        """删除漫画打赏配置"""
        logging.getLogger(__name__).info(
            "start call "
            + "[delete_comic_reward_by_i_d]"
            + " api"
            + "=>"
            + """删除漫画打赏配置"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DeleteComicRewardByID", request, response)
        logging.getLogger(__name__).info(
            "call " + "[delete_comic_reward_by_i_d]" + " api success!"
        )
        return response

    @allure.step("""获取日更推荐资源库""")
    def get_daily_recommend(self, request: EmptyRequest) -> DailyRecommendAllResp:
        """获取日更推荐资源库"""
        logging.getLogger(__name__).info(
            "start call " + "[get_daily_recommend]" + " api" + "=>" + """获取日更推荐资源库"""
        )
        response = DailyRecommendAllResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetDailyRecommend", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_daily_recommend]" + " api success!"
        )
        return response

    @allure.step("""添加日更推荐的漫画""")
    def add_daily_recommend(
        self, request: AddDailyRecommendReq
    ) -> DailyRecommendDetailResp:
        """添加日更推荐的漫画"""
        logging.getLogger(__name__).info(
            "start call " + "[add_daily_recommend]" + " api" + "=>" + """添加日更推荐的漫画"""
        )
        response = DailyRecommendDetailResp()
        self._do_twirp_rpc("/manage.v0.Manage/AddDailyRecommend", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_daily_recommend]" + " api success!"
        )
        return response

    @allure.step("""删除日更推荐资源库中的数据""")
    def del_daily_recommend(self, request: DelDailyRecommendReq) -> DefaultResponse:
        """删除日更推荐资源库中的数据"""
        logging.getLogger(__name__).info(
            "start call "
            + "[del_daily_recommend]"
            + " api"
            + "=>"
            + """删除日更推荐资源库中的数据"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelDailyRecommend", request, response)
        logging.getLogger(__name__).info(
            "call " + "[del_daily_recommend]" + " api success!"
        )
        return response

    @allure.step("""更新漫画封面图片""")
    def update_recommend_image(self, request: DelDailyImageReq) -> DefaultResponse:
        """更新漫画封面图片"""
        logging.getLogger(__name__).info(
            "start call " + "[update_recommend_image]" + " api" + "=>" + """更新漫画封面图片"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/UpdateRecommendImage", request, response)
        logging.getLogger(__name__).info(
            "call " + "[update_recommend_image]" + " api success!"
        )
        return response

    @allure.step("""获取指定时间的日更推荐列表""")
    def get_daily_push(self, request: GetDailyPushReq) -> GetDailyPushResp:
        """获取指定时间的日更推荐列表"""
        logging.getLogger(__name__).info(
            "start call " + "[get_daily_push]" + " api" + "=>" + """获取指定时间的日更推荐列表"""
        )
        response = GetDailyPushResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetDailyPush", request, response)
        logging.getLogger(__name__).info("call " + "[get_daily_push]" + " api success!")
        return response

    @allure.step("""修改日更推荐信息""")
    def update_daily_push(self, request: UpdateDailyPushReq) -> DefaultResponse:
        """修改日更推荐信息"""
        logging.getLogger(__name__).info(
            "start call " + "[update_daily_push]" + " api" + "=>" + """修改日更推荐信息"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/UpdateDailyPush", request, response)
        logging.getLogger(__name__).info(
            "call " + "[update_daily_push]" + " api success!"
        )
        return response

    @allure.step("""CommonBanner 列表""")
    def common_banner_list(self, request: CommonBannerListReq) -> CommonBannerListResp:
        """CommonBanner 列表"""
        logging.getLogger(__name__).info(
            "start call "
            + "[common_banner_list]"
            + " api"
            + "=>"
            + """CommonBanner 列表"""
        )
        response = CommonBannerListResp()
        self._do_twirp_rpc("/manage.v0.Manage/CommonBannerList", request, response)
        logging.getLogger(__name__).info(
            "call " + "[common_banner_list]" + " api success!"
        )
        return response

    @allure.step("""CommonBanner 详情""")
    def common_banner_detail(
        self, request: CommonBannerDetailReq
    ) -> CommonBannerDetailResp:
        """CommonBanner 详情"""
        logging.getLogger(__name__).info(
            "start call "
            + "[common_banner_detail]"
            + " api"
            + "=>"
            + """CommonBanner 详情"""
        )
        response = CommonBannerDetailResp()
        self._do_twirp_rpc("/manage.v0.Manage/CommonBannerDetail", request, response)
        logging.getLogger(__name__).info(
            "call " + "[common_banner_detail]" + " api success!"
        )
        return response

    @allure.step("""新增 CommonBanner""")
    def add_common_banner(self, request: CommonBannerInfo) -> DefaultResponseWithID:
        """新增 CommonBanner"""
        logging.getLogger(__name__).info(
            "start call "
            + "[add_common_banner]"
            + " api"
            + "=>"
            + """新增 CommonBanner"""
        )
        response = DefaultResponseWithID()
        self._do_twirp_rpc("/manage.v0.Manage/AddCommonBanner", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_common_banner]" + " api success!"
        )
        return response

    @allure.step("""删除 CommonBanner""")
    def del_common_banner(self, request: DelCommonBannerReq) -> DefaultResponse:
        """删除 CommonBanner"""
        logging.getLogger(__name__).info(
            "start call "
            + "[del_common_banner]"
            + " api"
            + "=>"
            + """删除 CommonBanner"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelCommonBanner", request, response)
        logging.getLogger(__name__).info(
            "call " + "[del_common_banner]" + " api success!"
        )
        return response

    @allure.step("""修改 CommonBanner""")
    def edit_common_banner(self, request: CommonBannerInfo) -> DefaultResponse:
        """修改 CommonBanner"""
        logging.getLogger(__name__).info(
            "start call "
            + "[edit_common_banner]"
            + " api"
            + "=>"
            + """修改 CommonBanner"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditCommonBanner", request, response)
        logging.getLogger(__name__).info(
            "call " + "[edit_common_banner]" + " api success!"
        )
        return response

    @allure.step("""漫画公告冲突漫画ID""")
    def get_banner_conflict_comic_ids(
        self, request: GetBannerConflictComicIdsReq
    ) -> GetBannerConflictComicIdsResp:
        """漫画公告冲突漫画ID"""
        logging.getLogger(__name__).info(
            "start call "
            + "[get_banner_conflict_comic_ids]"
            + " api"
            + "=>"
            + """漫画公告冲突漫画ID"""
        )
        response = GetBannerConflictComicIdsResp()
        self._do_twirp_rpc(
            "/manage.v0.Manage/GetBannerConflictComicIds", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[get_banner_conflict_comic_ids]" + " api success!"
        )
        return response

    @allure.step("""查询日志列表""")
    def get_system_log_list(
        self, request: SystemLogListRequest
    ) -> SystemLogListResponse:
        """查询日志列表"""
        logging.getLogger(__name__).info(
            "start call " + "[get_system_log_list]" + " api" + "=>" + """查询日志列表"""
        )
        response = SystemLogListResponse()
        self._do_twirp_rpc("/manage.v0.Manage/GetSystemLogList", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_system_log_list]" + " api success!"
        )
        return response

    @allure.step("""获取运营 banner""")
    def get_operate_banner(self, request: GetOperateBannerReq) -> OperateBannerResp:
        """获取运营 banner"""
        logging.getLogger(__name__).info(
            "start call " + "[get_operate_banner]" + " api" + "=>" + """获取运营 banner"""
        )
        response = OperateBannerResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetOperateBanner", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_operate_banner]" + " api success!"
        )
        return response

    @allure.step("""新增运营 banner""")
    def add_operate_banner(self, request: UpdateOperateBannerReq) -> DefaultResponse:
        """新增运营 banner"""
        logging.getLogger(__name__).info(
            "start call " + "[add_operate_banner]" + " api" + "=>" + """新增运营 banner"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/AddOperateBanner", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_operate_banner]" + " api success!"
        )
        return response

    @allure.step("""修改运营 banner""")
    def update_operate_banner(self, request: UpdateOperateBannerReq) -> DefaultResponse:
        """修改运营 banner"""
        logging.getLogger(__name__).info(
            "start call "
            + "[update_operate_banner]"
            + " api"
            + "=>"
            + """修改运营 banner"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/UpdateOperateBanner", request, response)
        logging.getLogger(__name__).info(
            "call " + "[update_operate_banner]" + " api success!"
        )
        return response

    @allure.step("""删除运营 banner""")
    def del_operate_banner(self, request: DelOperateBannerReq) -> DefaultResponse:
        """删除运营 banner"""
        logging.getLogger(__name__).info(
            "start call " + "[del_operate_banner]" + " api" + "=>" + """删除运营 banner"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelOperateBanner", request, response)
        logging.getLogger(__name__).info(
            "call " + "[del_operate_banner]" + " api success!"
        )
        return response

    @allure.step("""查询充值 客服查询""")
    def get_recharge_history(
        self, request: GetRechargeHistoryReq
    ) -> GetRechargeHistoryResp:
        """查询充值 客服查询"""
        logging.getLogger(__name__).info(
            "start call " + "[get_recharge_history]" + " api" + "=>" + """查询充值 客服查询"""
        )
        response = GetRechargeHistoryResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetRechargeHistory", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_recharge_history]" + " api success!"
        )
        return response

    @allure.step("""列出青少年模式用户列表""")
    def list_teenager_mode_users(
        self, request: ListTeenagerModeUsersReq
    ) -> ListTeenagerModeUsersResp:
        """列出青少年模式用户列表"""
        logging.getLogger(__name__).info(
            "start call "
            + "[list_teenager_mode_users]"
            + " api"
            + "=>"
            + """列出青少年模式用户列表"""
        )
        response = ListTeenagerModeUsersResp()
        self._do_twirp_rpc("/manage.v0.Manage/ListTeenagerModeUsers", request, response)
        logging.getLogger(__name__).info(
            "call " + "[list_teenager_mode_users]" + " api success!"
        )
        return response

    @allure.step("""消费查询 客服查询""")
    def get_expense_history(
        self, request: GetExpenseHistoryReq
    ) -> GetExpenseHistoryResp:
        """消费查询 客服查询"""
        logging.getLogger(__name__).info(
            "start call " + "[get_expense_history]" + " api" + "=>" + """消费查询 客服查询"""
        )
        response = GetExpenseHistoryResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetExpenseHistory", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_expense_history]" + " api success!"
        )
        return response

    @allure.step("""查询用户卡券获得记录""")
    def get_user_coupons(self, request: GetUserCouponsReq) -> GetUserCouponsResp:
        """查询用户卡券获得记录"""
        logging.getLogger(__name__).info(
            "start call " + "[get_user_coupons]" + " api" + "=>" + """查询用户卡券获得记录"""
        )
        response = GetUserCouponsResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetUserCoupons", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_user_coupons]" + " api success!"
        )
        return response

    @allure.step("""查询积分记录 客服查询""")
    def get_credits_history(
        self, request: GetCreditsHistoryReq
    ) -> GetCreditsHistoryResp:
        """查询积分记录 客服查询"""
        logging.getLogger(__name__).info(
            "start call " + "[get_credits_history]" + " api" + "=>" + """查询积分记录 客服查询"""
        )
        response = GetCreditsHistoryResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetCreditsHistory", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_credits_history]" + " api success!"
        )
        return response

    @allure.step("""获取搜索关键字信息""")
    def get_search_recommend(
        self, request: GetSearchRecommendReq
    ) -> GetSearchRecommendResp:
        """获取搜索关键字信息"""
        logging.getLogger(__name__).info(
            "start call " + "[get_search_recommend]" + " api" + "=>" + """获取搜索关键字信息"""
        )
        response = GetSearchRecommendResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetSearchRecommend", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_search_recommend]" + " api success!"
        )
        return response

    @allure.step("""新建搜索关键字信息""")
    def add_search_recommend(self, request: AddSearchRecommendReq) -> DefaultResponse:
        """新建搜索关键字信息"""
        logging.getLogger(__name__).info(
            "start call " + "[add_search_recommend]" + " api" + "=>" + """新建搜索关键字信息"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/AddSearchRecommend", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_search_recommend]" + " api success!"
        )
        return response

    @allure.step("""编辑搜索关键字""")
    def edit_search_recommend(self, request: SearchRecommendDetail) -> DefaultResponse:
        """编辑搜索关键字"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_search_recommend]" + " api" + "=>" + """编辑搜索关键字"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditSearchRecommend", request, response)
        logging.getLogger(__name__).info(
            "call " + "[edit_search_recommend]" + " api success!"
        )
        return response

    @allure.step("""忽略搜索关键字""")
    def ignore_search_recommend(self, request: IgnoreSearchReq) -> DefaultResponse:
        """忽略搜索关键字"""
        logging.getLogger(__name__).info(
            "start call " + "[ignore_search_recommend]" + " api" + "=>" + """忽略搜索关键字"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/IgnoreSearchRecommend", request, response)
        logging.getLogger(__name__).info(
            "call " + "[ignore_search_recommend]" + " api success!"
        )
        return response

    @allure.step("""创建等免漫画""")
    def create_wait_free_comic(self, request: WaitFreeComic) -> DefaultResponse:
        """创建等免漫画"""
        logging.getLogger(__name__).info(
            "start call " + "[create_wait_free_comic]" + " api" + "=>" + """创建等免漫画"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/CreateWaitFreeComic", request, response)
        logging.getLogger(__name__).info(
            "call " + "[create_wait_free_comic]" + " api success!"
        )
        return response

    @allure.step("""修改等免漫画""")
    def edit_wait_free_comic(self, request: WaitFreeComic) -> DefaultResponse:
        """修改等免漫画"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_wait_free_comic]" + " api" + "=>" + """修改等免漫画"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditWaitFreeComic", request, response)
        logging.getLogger(__name__).info(
            "call " + "[edit_wait_free_comic]" + " api success!"
        )
        return response

    @allure.step("""查询等免漫画""")
    def list_wait_free_comic(
        self, request: ListWaitFreeComicReq
    ) -> ListWaitFreeComicResp:
        """查询等免漫画"""
        logging.getLogger(__name__).info(
            "start call " + "[list_wait_free_comic]" + " api" + "=>" + """查询等免漫画"""
        )
        response = ListWaitFreeComicResp()
        self._do_twirp_rpc("/manage.v0.Manage/ListWaitFreeComic", request, response)
        logging.getLogger(__name__).info(
            "call " + "[list_wait_free_comic]" + " api success!"
        )
        return response

    @allure.step("""查询活动 tab 信息""")
    def list_activity_tab(self, request: ListActivityTabReq) -> ListActivityTabResp:
        """查询活动 tab 信息"""
        logging.getLogger(__name__).info(
            "start call " + "[list_activity_tab]" + " api" + "=>" + """查询活动 tab 信息"""
        )
        response = ListActivityTabResp()
        self._do_twirp_rpc("/manage.v0.Manage/ListActivityTab", request, response)
        logging.getLogger(__name__).info(
            "call " + "[list_activity_tab]" + " api success!"
        )
        return response

    @allure.step("""创建新的活动""")
    def add_activity_tab(self, request: ActivityTabInfo) -> DefaultResponse:
        """创建新的活动"""
        logging.getLogger(__name__).info(
            "start call " + "[add_activity_tab]" + " api" + "=>" + """创建新的活动"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/AddActivityTab", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_activity_tab]" + " api success!"
        )
        return response

    @allure.step("""添加Hive查询配置""")
    def add_query_config(self, request: QueryConfig) -> DefaultResponse:
        """添加Hive查询配置"""
        logging.getLogger(__name__).info(
            "start call " + "[add_query_config]" + " api" + "=>" + """添加Hive查询配置"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/AddQueryConfig", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_query_config]" + " api success!"
        )
        return response

    @allure.step("""编辑Hive查询配置""")
    def edit_query_config(self, request: QueryConfig) -> DefaultResponse:
        """编辑Hive查询配置"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_query_config]" + " api" + "=>" + """编辑Hive查询配置"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditQueryConfig", request, response)
        logging.getLogger(__name__).info(
            "call " + "[edit_query_config]" + " api success!"
        )
        return response

    @allure.step("""删除Hive查询配置""")
    def delete_query_config(self, request: DeleteQueryResp) -> DefaultResponse:
        """删除Hive查询配置"""
        logging.getLogger(__name__).info(
            "start call " + "[delete_query_config]" + " api" + "=>" + """删除Hive查询配置"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DeleteQueryConfig", request, response)
        logging.getLogger(__name__).info(
            "call " + "[delete_query_config]" + " api success!"
        )
        return response

    @allure.step("""列出Hive查询配置""")
    def list_query_configs(self, request: EmptyRequest) -> ListQueryConfigsResp:
        """列出Hive查询配置"""
        logging.getLogger(__name__).info(
            "start call " + "[list_query_configs]" + " api" + "=>" + """列出Hive查询配置"""
        )
        response = ListQueryConfigsResp()
        self._do_twirp_rpc("/manage.v0.Manage/ListQueryConfigs", request, response)
        logging.getLogger(__name__).info(
            "call " + "[list_query_configs]" + " api success!"
        )
        return response

    @allure.step("""查询Hive""")
    def query_hive(self, request: QueryHiveReq) -> QueryHiveResp:
        """查询Hive"""
        logging.getLogger(__name__).info(
            "start call " + "[query_hive]" + " api" + "=>" + """查询Hive"""
        )
        response = QueryHiveResp()
        self._do_twirp_rpc("/manage.v0.Manage/QueryHive", request, response)
        logging.getLogger(__name__).info("call " + "[query_hive]" + " api success!")
        return response

    @allure.step("""编辑活动信息""")
    def edit_activity_tab(self, request: ActivityTabInfo) -> DefaultResponse:
        """编辑活动信息"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_activity_tab]" + " api" + "=>" + """编辑活动信息"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditActivityTab", request, response)
        logging.getLogger(__name__).info(
            "call " + "[edit_activity_tab]" + " api success!"
        )
        return response

    @allure.step("""删除活动 tab 信息""")
    def del_activity_tab(self, request: DelActivityTabReq) -> DefaultResponse:
        """删除活动 tab 信息"""
        logging.getLogger(__name__).info(
            "start call " + "[del_activity_tab]" + " api" + "=>" + """删除活动 tab 信息"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelActivityTab", request, response)
        logging.getLogger(__name__).info(
            "call " + "[del_activity_tab]" + " api success!"
        )
        return response

    @allure.step("""创建安卓渠道链接""")
    def add_apk_u_r_l(self, request: AddApkURLReq) -> DefaultResponse:
        """创建安卓渠道链接"""
        logging.getLogger(__name__).info(
            "start call " + "[add_apk_u_r_l]" + " api" + "=>" + """创建安卓渠道链接"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/AddApkURL", request, response)
        logging.getLogger(__name__).info("call " + "[add_apk_u_r_l]" + " api success!")
        return response

    @allure.step("""修改安卓渠道链接""")
    def edit_apk_u_r_l(self, request: EditApkURLReq) -> DefaultResponse:
        """修改安卓渠道链接"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_apk_u_r_l]" + " api" + "=>" + """修改安卓渠道链接"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditApkURL", request, response)
        logging.getLogger(__name__).info("call " + "[edit_apk_u_r_l]" + " api success!")
        return response

    @allure.step("""查询安卓渠道链接列表，不分页""")
    def list_apk_u_r_l(self, request: EmptyRequest) -> ListApkURLResp:
        """查询安卓渠道链接列表，不分页"""
        logging.getLogger(__name__).info(
            "start call " + "[list_apk_u_r_l]" + " api" + "=>" + """查询安卓渠道链接列表，不分页"""
        )
        response = ListApkURLResp()
        self._do_twirp_rpc("/manage.v0.Manage/ListApkURL", request, response)
        logging.getLogger(__name__).info("call " + "[list_apk_u_r_l]" + " api success!")
        return response

    @allure.step("""删除安卓渠道链接""")
    def del_apk_u_r_l(self, request: DefaultIDReq) -> DefaultResponse:
        """删除安卓渠道链接"""
        logging.getLogger(__name__).info(
            "start call " + "[del_apk_u_r_l]" + " api" + "=>" + """删除安卓渠道链接"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelApkURL", request, response)
        logging.getLogger(__name__).info("call " + "[del_apk_u_r_l]" + " api success!")
        return response

    @allure.step("""增删改番剧进度条""")
    def edit_progress_bar(self, request: EditProgressBarReq) -> DefaultResponse:
        """增删改番剧进度条"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_progress_bar]" + " api" + "=>" + """增删改番剧进度条"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditProgressBar", request, response)
        logging.getLogger(__name__).info(
            "call " + "[edit_progress_bar]" + " api success!"
        )
        return response

    @allure.step("""新建渠道合作策略""")
    def add_channel_strategy(self, request: ChannelStrategyReq) -> DefaultResponse:
        """新建渠道合作策略"""
        logging.getLogger(__name__).info(
            "start call " + "[add_channel_strategy]" + " api" + "=>" + """新建渠道合作策略"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/AddChannelStrategy", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_channel_strategy]" + " api success!"
        )
        return response

    @allure.step("""修改渠道合作策略""")
    def update_channel_strategy(self, request: ChannelStrategyReq) -> DefaultResponse:
        """修改渠道合作策略"""
        logging.getLogger(__name__).info(
            "start call " + "[update_channel_strategy]" + " api" + "=>" + """修改渠道合作策略"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/UpdateChannelStrategy", request, response)
        logging.getLogger(__name__).info(
            "call " + "[update_channel_strategy]" + " api success!"
        )
        return response

    @allure.step("""删除渠道合作策略""")
    def del_channel_strategy(self, request: DelChannelStrategyReq) -> DefaultResponse:
        """删除渠道合作策略"""
        logging.getLogger(__name__).info(
            "start call " + "[del_channel_strategy]" + " api" + "=>" + """删除渠道合作策略"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelChannelStrategy", request, response)
        logging.getLogger(__name__).info(
            "call " + "[del_channel_strategy]" + " api success!"
        )
        return response

    @allure.step("""获取渠道合作策略""")
    def list_channel_strategy(self, request: EmptyRequest) -> ListChannelStrategyResp:
        """获取渠道合作策略"""
        logging.getLogger(__name__).info(
            "start call " + "[list_channel_strategy]" + " api" + "=>" + """获取渠道合作策略"""
        )
        response = ListChannelStrategyResp()
        self._do_twirp_rpc("/manage.v0.Manage/ListChannelStrategy", request, response)
        logging.getLogger(__name__).info(
            "call " + "[list_channel_strategy]" + " api success!"
        )
        return response

    @allure.step("""根据作者 id 获取漫画 id""")
    def get_comic_i_ds_by_author(
        self, request: GetComicIDsByAuthorReq
    ) -> GetComicIDsByAuthorResp:
        """根据作者 id 获取漫画 id"""
        logging.getLogger(__name__).info(
            "start call "
            + "[get_comic_i_ds_by_author]"
            + " api"
            + "=>"
            + """根据作者 id 获取漫画 id"""
        )
        response = GetComicIDsByAuthorResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetComicIDsByAuthor", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_comic_i_ds_by_author]" + " api success!"
        )
        return response

    @allure.step("""根据作者 id 获取漫画 id""")
    def get_comic_i_ds_by_style(
        self, request: GetComicIDsByStyleReq
    ) -> GetComicIDsByStyleResp:
        """根据作者 id 获取漫画 id"""
        logging.getLogger(__name__).info(
            "start call "
            + "[get_comic_i_ds_by_style]"
            + " api"
            + "=>"
            + """根据作者 id 获取漫画 id"""
        )
        response = GetComicIDsByStyleResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetComicIDsByStyle", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_comic_i_ds_by_style]" + " api success!"
        )
        return response

    @allure.step("""添加特典信息""")
    def add_comic_album(self, request: ComicAlbumReq) -> AddComicAlbumResp:
        """添加特典信息"""
        logging.getLogger(__name__).info(
            "start call " + "[add_comic_album]" + " api" + "=>" + """添加特典信息"""
        )
        response = AddComicAlbumResp()
        self._do_twirp_rpc("/manage.v0.Manage/AddComicAlbum", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_comic_album]" + " api success!"
        )
        return response

    @allure.step("""修改特典信息""")
    def edit_comic_album(self, request: ComicAlbumReq) -> DefaultResponse:
        """修改特典信息"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_comic_album]" + " api" + "=>" + """修改特典信息"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditComicAlbum", request, response)
        logging.getLogger(__name__).info(
            "call " + "[edit_comic_album]" + " api success!"
        )
        return response

    @allure.step("""获取所有特典信息""")
    def list_comic_album(self, request: ListComicAlbumReq) -> ListComicAlbumResp:
        """获取所有特典信息"""
        logging.getLogger(__name__).info(
            "start call " + "[list_comic_album]" + " api" + "=>" + """获取所有特典信息"""
        )
        response = ListComicAlbumResp()
        self._do_twirp_rpc("/manage.v0.Manage/ListComicAlbum", request, response)
        logging.getLogger(__name__).info(
            "call " + "[list_comic_album]" + " api success!"
        )
        return response

    @allure.step("""删除特典""")
    def del_comic_album(self, request: DelComicAlbumReq) -> DefaultResponse:
        """删除特典"""
        logging.getLogger(__name__).info(
            "start call " + "[del_comic_album]" + " api" + "=>" + """删除特典"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelComicAlbum", request, response)
        logging.getLogger(__name__).info(
            "call " + "[del_comic_album]" + " api success!"
        )
        return response

    @allure.step("""给漫画大卡加热评""")
    def update_comic_comment(self, request: UpdateComicCommentReq) -> DefaultResponse:
        """给漫画大卡加热评"""
        logging.getLogger(__name__).info(
            "start call " + "[update_comic_comment]" + " api" + "=>" + """给漫画大卡加热评"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/UpdateComicComment", request, response)
        logging.getLogger(__name__).info(
            "call " + "[update_comic_comment]" + " api success!"
        )
        return response

    @allure.step("""获取漫画大卡热评""")
    def get_comic_comment(self, request: GetComicCommentReq) -> GetComicCommentResp:
        """获取漫画大卡热评"""
        logging.getLogger(__name__).info(
            "start call " + "[get_comic_comment]" + " api" + "=>" + """获取漫画大卡热评"""
        )
        response = GetComicCommentResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetComicComment", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_comic_comment]" + " api success!"
        )
        return response

    @allure.step("""添加 icon""")
    def add_icon(self, request: AddIconReq) -> AddIconResp:
        """添加 icon"""
        logging.getLogger(__name__).info(
            "start call " + "[add_icon]" + " api" + "=>" + """添加 icon"""
        )
        response = AddIconResp()
        self._do_twirp_rpc("/manage.v0.Manage/AddIcon", request, response)
        logging.getLogger(__name__).info("call " + "[add_icon]" + " api success!")
        return response

    @allure.step("""获取 icon""")
    def list_icon(self, request: ListIconReq) -> ListIconResp:
        """获取 icon"""
        logging.getLogger(__name__).info(
            "start call " + "[list_icon]" + " api" + "=>" + """获取 icon"""
        )
        response = ListIconResp()
        self._do_twirp_rpc("/manage.v0.Manage/ListIcon", request, response)
        logging.getLogger(__name__).info("call " + "[list_icon]" + " api success!")
        return response

    @allure.step("""删除 icon""")
    def del_icon(self, request: DelIconReq) -> DefaultResponse:
        """删除 icon"""
        logging.getLogger(__name__).info(
            "start call " + "[del_icon]" + " api" + "=>" + """删除 icon"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelIcon", request, response)
        logging.getLogger(__name__).info("call " + "[del_icon]" + " api success!")
        return response

    @allure.step("""编辑 icon""")
    def edit_icon(self, request: AddIconReq) -> DefaultResponse:
        """编辑 icon"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_icon]" + " api" + "=>" + """编辑 icon"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditIcon", request, response)
        logging.getLogger(__name__).info("call " + "[edit_icon]" + " api success!")
        return response

    @allure.step("""添加积分发放计划""")
    def add_point_send_plan(self, request: AddPointSendPlanReq) -> DefaultResponse:
        """添加积分发放计划"""
        logging.getLogger(__name__).info(
            "start call " + "[add_point_send_plan]" + " api" + "=>" + """添加积分发放计划"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/AddPointSendPlan", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_point_send_plan]" + " api success!"
        )
        return response

    @allure.step("""获取积分发放计划""")
    def get_point_send_plans(
        self, request: GetPointSendPlansReq
    ) -> GetPointSendPlansResp:
        """获取积分发放计划"""
        logging.getLogger(__name__).info(
            "start call " + "[get_point_send_plans]" + " api" + "=>" + """获取积分发放计划"""
        )
        response = GetPointSendPlansResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetPointSendPlans", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_point_send_plans]" + " api success!"
        )
        return response

    @allure.step("""添加系列""")
    def add_comic_series(self, request: AddComicSeriesReq) -> DefaultResponseWithID:
        """添加系列"""
        logging.getLogger(__name__).info(
            "start call " + "[add_comic_series]" + " api" + "=>" + """添加系列"""
        )
        response = DefaultResponseWithID()
        self._do_twirp_rpc("/manage.v0.Manage/AddComicSeries", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_comic_series]" + " api success!"
        )
        return response

    @allure.step("""修改系列""")
    def edit_comic_series(self, request: EditComicSeriesReq) -> DefaultResponse:
        """修改系列"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_comic_series]" + " api" + "=>" + """修改系列"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditComicSeries", request, response)
        logging.getLogger(__name__).info(
            "call " + "[edit_comic_series]" + " api success!"
        )
        return response

    @allure.step("""删除系列""")
    def del_comic_series(self, request: DelDefaultReq) -> DefaultResponse:
        """删除系列"""
        logging.getLogger(__name__).info(
            "start call " + "[del_comic_series]" + " api" + "=>" + """删除系列"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelComicSeries", request, response)
        logging.getLogger(__name__).info(
            "call " + "[del_comic_series]" + " api success!"
        )
        return response

    @allure.step("""添加系列漫画""")
    def add_comic_to_series(
        self, request: AddComicToSeriesReq
    ) -> DefaultResponseWithID:
        """添加系列漫画"""
        logging.getLogger(__name__).info(
            "start call " + "[add_comic_to_series]" + " api" + "=>" + """添加系列漫画"""
        )
        response = DefaultResponseWithID()
        self._do_twirp_rpc("/manage.v0.Manage/AddComicToSeries", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_comic_to_series]" + " api success!"
        )
        return response

    @allure.step("""编辑系列漫画""")
    def edit_comic_in_series(self, request: EditComicInSeriesReq) -> DefaultResponse:
        """编辑系列漫画"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_comic_in_series]" + " api" + "=>" + """编辑系列漫画"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditComicInSeries", request, response)
        logging.getLogger(__name__).info(
            "call " + "[edit_comic_in_series]" + " api success!"
        )
        return response

    @allure.step("""删除系列漫画""")
    def del_comic_in_series(self, request: DelDefaultReq) -> DefaultResponse:
        """删除系列漫画"""
        logging.getLogger(__name__).info(
            "start call " + "[del_comic_in_series]" + " api" + "=>" + """删除系列漫画"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelComicInSeries", request, response)
        logging.getLogger(__name__).info(
            "call " + "[del_comic_in_series]" + " api success!"
        )
        return response

    @allure.step("""获取系列""")
    def list_series(self, request: EmptyRequest) -> ListSeriesResp:
        """获取系列"""
        logging.getLogger(__name__).info(
            "start call " + "[list_series]" + " api" + "=>" + """获取系列"""
        )
        response = ListSeriesResp()
        self._do_twirp_rpc("/manage.v0.Manage/ListSeries", request, response)
        logging.getLogger(__name__).info("call " + "[list_series]" + " api success!")
        return response

    @allure.step("""用户行为记录查询""")
    def get_action(self, request: GetActionReq) -> GetActionResp:
        """用户行为记录查询"""
        logging.getLogger(__name__).info(
            "start call " + "[get_action]" + " api" + "=>" + """用户行为记录查询"""
        )
        response = GetActionResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetAction", request, response)
        logging.getLogger(__name__).info("call " + "[get_action]" + " api success!")
        return response

    @allure.step("""新增或者编辑业务对应的定时设置""")
    def edit_schedule_plan(self, request: EditSchedulePlanReq) -> DefaultResponse:
        """新增或者编辑业务对应的定时设置"""
        logging.getLogger(__name__).info(
            "start call "
            + "[edit_schedule_plan]"
            + " api"
            + "=>"
            + """新增或者编辑业务对应的定时设置"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditSchedulePlan", request, response)
        logging.getLogger(__name__).info(
            "call " + "[edit_schedule_plan]" + " api success!"
        )
        return response

    @allure.step("""通过单话 id 查询漫画相关信息""")
    def search_by_episode_i_d(
        self, request: SearchByEpisodeIDReq
    ) -> SearchByEpisodeIDResp:
        """通过单话 id 查询漫画相关信息"""
        logging.getLogger(__name__).info(
            "start call "
            + "[search_by_episode_i_d]"
            + " api"
            + "=>"
            + """通过单话 id 查询漫画相关信息"""
        )
        response = SearchByEpisodeIDResp()
        self._do_twirp_rpc("/manage.v0.Manage/SearchByEpisodeID", request, response)
        logging.getLogger(__name__).info(
            "call " + "[search_by_episode_i_d]" + " api success!"
        )
        return response

    @allure.step("""单独调整 Ord 和 卷 id，免审核""")
    def update_ord_chapter_i_d(self, request: UpdateOrdChapterIDReq) -> DefaultResponse:
        """单独调整 Ord 和 卷 id，免审核"""
        logging.getLogger(__name__).info(
            "start call "
            + "[update_ord_chapter_i_d]"
            + " api"
            + "=>"
            + """单独调整 Ord 和 卷 id，免审核"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/UpdateOrdChapterID", request, response)
        logging.getLogger(__name__).info(
            "call " + "[update_ord_chapter_i_d]" + " api success!"
        )
        return response

    @allure.step("""获取缓存 key 信息""")
    def get_cached_keys(self, request: EmptyRequest) -> GetCachedKeysResp:
        """获取缓存 key 信息"""
        logging.getLogger(__name__).info(
            "start call " + "[get_cached_keys]" + " api" + "=>" + """获取缓存 key 信息"""
        )
        response = GetCachedKeysResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetCachedKeys", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_cached_keys]" + " api success!"
        )
        return response

    @allure.step("""缓存 key 的操作""")
    def key_operate(self, request: KeyOperateReq) -> KeyOperateResp:
        """缓存 key 的操作"""
        logging.getLogger(__name__).info(
            "start call " + "[key_operate]" + " api" + "=>" + """缓存 key 的操作"""
        )
        response = KeyOperateResp()
        self._do_twirp_rpc("/manage.v0.Manage/KeyOperate", request, response)
        logging.getLogger(__name__).info("call " + "[key_operate]" + " api success!")
        return response

    @allure.step("""获取活动实物奖品""")
    def get_act_prize_list(self, request: GetActPrizeListReq) -> GetActPrizeListResp:
        """获取活动实物奖品"""
        logging.getLogger(__name__).info(
            "start call " + "[get_act_prize_list]" + " api" + "=>" + """获取活动实物奖品"""
        )
        response = GetActPrizeListResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetActPrizeList", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_act_prize_list]" + " api success!"
        )
        return response

    @allure.step("""解锁订单退单， 取消漫画阅读授权""")
    def refund_buy_order(self, request: RefundBuyOrderReq) -> DefaultResponse:
        """解锁订单退单， 取消漫画阅读授权"""
        logging.getLogger(__name__).info(
            "start call "
            + "[refund_buy_order]"
            + " api"
            + "=>"
            + """解锁订单退单， 取消漫画阅读授权"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/RefundBuyOrder", request, response)
        logging.getLogger(__name__).info(
            "call " + "[refund_buy_order]" + " api success!"
        )
        return response

    @allure.step("""编辑口令模版""")
    def edit_token_temp(self, request: EditTokenTempReq) -> DefaultResponse:
        """编辑口令模版"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_token_temp]" + " api" + "=>" + """编辑口令模版"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/EditTokenTemp", request, response)
        logging.getLogger(__name__).info(
            "call " + "[edit_token_temp]" + " api success!"
        )
        return response

    @allure.step("""删除口令模版""")
    def del_token_temp(self, request: DelTokenTempReq) -> DefaultResponse:
        """删除口令模版"""
        logging.getLogger(__name__).info(
            "start call " + "[del_token_temp]" + " api" + "=>" + """删除口令模版"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelTokenTemp", request, response)
        logging.getLogger(__name__).info("call " + "[del_token_temp]" + " api success!")
        return response

    @allure.step("""获取口令模版内容""")
    def get_token_temp_list(self, request: GetTokenTempListReq) -> GetTokenTempListResp:
        """获取口令模版内容"""
        logging.getLogger(__name__).info(
            "start call " + "[get_token_temp_list]" + " api" + "=>" + """获取口令模版内容"""
        )
        response = GetTokenTempListResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetTokenTempList", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_token_temp_list]" + " api success!"
        )
        return response

    @allure.step("""查询畅读卡购买记录""")
    def get_card_order_list(self, request: GetCardOrderListReq) -> GetCardOrderListResp:
        """查询畅读卡购买记录"""
        logging.getLogger(__name__).info(
            "start call " + "[get_card_order_list]" + " api" + "=>" + """查询畅读卡购买记录"""
        )
        response = GetCardOrderListResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetCardOrderList", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_card_order_list]" + " api success!"
        )
        return response

    @allure.step("""获取宝藏榜漫画列表""")
    def get_treasure_rank_comic_list(
        self, request: EmptyRequest
    ) -> GetTreasureRankComicListResp:
        """获取宝藏榜漫画列表"""
        logging.getLogger(__name__).info(
            "start call "
            + "[get_treasure_rank_comic_list]"
            + " api"
            + "=>"
            + """获取宝藏榜漫画列表"""
        )
        response = GetTreasureRankComicListResp()
        self._do_twirp_rpc(
            "/manage.v0.Manage/GetTreasureRankComicList", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[get_treasure_rank_comic_list]" + " api success!"
        )
        return response

    @allure.step("""新增宝藏榜漫画""")
    def add_treasure_rank_comic(
        self, request: AddTreasureRankComicReq
    ) -> DefaultResponse:
        """新增宝藏榜漫画"""
        logging.getLogger(__name__).info(
            "start call " + "[add_treasure_rank_comic]" + " api" + "=>" + """新增宝藏榜漫画"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/AddTreasureRankComic", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_treasure_rank_comic]" + " api success!"
        )
        return response

    @allure.step("""删除宝藏榜漫画""")
    def del_treasure_rank_comic(
        self, request: DelTreasureRankComicReq
    ) -> DefaultResponse:
        """删除宝藏榜漫画"""
        logging.getLogger(__name__).info(
            "start call " + "[del_treasure_rank_comic]" + " api" + "=>" + """删除宝藏榜漫画"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelTreasureRankComic", request, response)
        logging.getLogger(__name__).info(
            "call " + "[del_treasure_rank_comic]" + " api success!"
        )
        return response

    @allure.step("""获取领券活动列表""")
    def get_act_coupon_list(self, request: GetActCouponListReq) -> GetActCouponListResp:
        """获取领券活动列表"""
        logging.getLogger(__name__).info(
            "start call " + "[get_act_coupon_list]" + " api" + "=>" + """获取领券活动列表"""
        )
        response = GetActCouponListResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetActCouponList", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_act_coupon_list]" + " api success!"
        )
        return response

    @allure.step("""编辑领券活动""")
    def edit_act_coupon(self, request: GetActCoupon) -> EditActCouponResp:
        """编辑领券活动"""
        logging.getLogger(__name__).info(
            "start call " + "[edit_act_coupon]" + " api" + "=>" + """编辑领券活动"""
        )
        response = EditActCouponResp()
        self._do_twirp_rpc("/manage.v0.Manage/EditActCoupon", request, response)
        logging.getLogger(__name__).info(
            "call " + "[edit_act_coupon]" + " api success!"
        )
        return response

    @allure.step("""删除领券活动""")
    def del_act_coupon(self, request: DelActCouponReq) -> DefaultResponse:
        """删除领券活动"""
        logging.getLogger(__name__).info(
            "start call " + "[del_act_coupon]" + " api" + "=>" + """删除领券活动"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/DelActCoupon", request, response)
        logging.getLogger(__name__).info("call " + "[del_act_coupon]" + " api success!")
        return response

    @allure.step("""获取互动数据列表""")
    def list_interaction(self, request: ListInteractionReq) -> ListInteractionResp:
        """获取互动数据列表"""
        logging.getLogger(__name__).info(
            "start call " + "[list_interaction]" + " api" + "=>" + """获取互动数据列表"""
        )
        response = ListInteractionResp()
        self._do_twirp_rpc("/manage.v0.Manage/ListInteraction", request, response)
        logging.getLogger(__name__).info(
            "call " + "[list_interaction]" + " api success!"
        )
        return response

    @allure.step("""修改互动数据""")
    def update_interaction(self, request: UpdateInteractionReq) -> DefaultResponse:
        """修改互动数据"""
        logging.getLogger(__name__).info(
            "start call " + "[update_interaction]" + " api" + "=>" + """修改互动数据"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/UpdateInteraction", request, response)
        logging.getLogger(__name__).info(
            "call " + "[update_interaction]" + " api success!"
        )
        return response

    @allure.step("""获取竞品漫画列表""")
    def get_compete_comic_list(
        self, request: GetCompeteComicListReq
    ) -> GetCompeteComicListResp:
        """获取竞品漫画列表"""
        logging.getLogger(__name__).info(
            "start call " + "[get_compete_comic_list]" + " api" + "=>" + """获取竞品漫画列表"""
        )
        response = GetCompeteComicListResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetCompeteComicList", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_compete_comic_list]" + " api success!"
        )
        return response

    @allure.step("""关联竞品漫画""")
    def link_compete_comic(self, request: LinkCompeteComicReq) -> DefaultResponse:
        """关联竞品漫画"""
        logging.getLogger(__name__).info(
            "start call " + "[link_compete_comic]" + " api" + "=>" + """关联竞品漫画"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/LinkCompeteComic", request, response)
        logging.getLogger(__name__).info(
            "call " + "[link_compete_comic]" + " api success!"
        )
        return response

    @allure.step("""取关竞品漫画""")
    def unlink_compete_comic(self, request: UnlinkCompeteComicReq) -> DefaultResponse:
        """取关竞品漫画"""
        logging.getLogger(__name__).info(
            "start call " + "[unlink_compete_comic]" + " api" + "=>" + """取关竞品漫画"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/UnlinkCompeteComic", request, response)
        logging.getLogger(__name__).info(
            "call " + "[unlink_compete_comic]" + " api success!"
        )
        return response

    @allure.step("""获取地区枚举值""")
    def get_compete_comic_area(self, request: EmptyRequest) -> GetCompeteComicAreaResp:
        """获取地区枚举值"""
        logging.getLogger(__name__).info(
            "start call " + "[get_compete_comic_area]" + " api" + "=>" + """获取地区枚举值"""
        )
        response = GetCompeteComicAreaResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetCompeteComicArea", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_compete_comic_area]" + " api success!"
        )
        return response

    @allure.step("""批量撤回审核任务""")
    def cancel_verify_task(self, request: CancelVerifyTaskReq) -> DefaultResponse:
        """批量撤回审核任务"""
        logging.getLogger(__name__).info(
            "start call " + "[cancel_verify_task]" + " api" + "=>" + """批量撤回审核任务"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/CancelVerifyTask", request, response)
        logging.getLogger(__name__).info(
            "call " + "[cancel_verify_task]" + " api success!"
        )
        return response

    @allure.step("""获取内容风险等级风控开关值""")
    def get_risk_level_flags(self, request: EmptyRequest) -> RiskLevelFlagsResp:
        """获取内容风险等级风控开关值"""
        logging.getLogger(__name__).info(
            "start call "
            + "[get_risk_level_flags]"
            + " api"
            + "=>"
            + """获取内容风险等级风控开关值"""
        )
        response = RiskLevelFlagsResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetRiskLevelFlags", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_risk_level_flags]" + " api success!"
        )
        return response

    @allure.step("""修改内容风险等级风控开关值""")
    def set_risk_level_flags(self, request: RiskLevelFlagsData) -> DefaultResponse:
        """修改内容风险等级风控开关值"""
        logging.getLogger(__name__).info(
            "start call "
            + "[set_risk_level_flags]"
            + " api"
            + "=>"
            + """修改内容风险等级风控开关值"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/SetRiskLevelFlags", request, response)
        logging.getLogger(__name__).info(
            "call " + "[set_risk_level_flags]" + " api success!"
        )
        return response

    @allure.step("""获取百科封面风险等级控制""")
    def get_wiki_cover_conf(self, request: EmptyRequest) -> GetWikiCoverConfResp:
        """获取百科封面风险等级控制"""
        logging.getLogger(__name__).info(
            "start call " + "[get_wiki_cover_conf]" + " api" + "=>" + """获取百科封面风险等级控制"""
        )
        response = GetWikiCoverConfResp()
        self._do_twirp_rpc("/manage.v0.Manage/GetWikiCoverConf", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_wiki_cover_conf]" + " api success!"
        )
        return response

    @allure.step("""修改百科封面风险等级控制""")
    def set_wiki_cover_conf(self, request: WikiCoverConfData) -> DefaultResponse:
        """修改百科封面风险等级控制"""
        logging.getLogger(__name__).info(
            "start call " + "[set_wiki_cover_conf]" + " api" + "=>" + """修改百科封面风险等级控制"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/manage.v0.Manage/SetWikiCoverConf", request, response)
        logging.getLogger(__name__).info(
            "call " + "[set_wiki_cover_conf]" + " api success!"
        )
        return response
