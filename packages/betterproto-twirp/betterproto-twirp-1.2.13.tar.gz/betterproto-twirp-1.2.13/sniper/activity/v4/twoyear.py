# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: activity/v4/twoyear.proto
# plugin: python-betterproto
import logging
from typing import List

import allure
from dataclasses import dataclass

import betterproto


@dataclass
class GroupIdResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "GroupIdData" = betterproto.message_field(3)


@dataclass
class GroupIdData(betterproto.Message):
    # 1-充过30元 2-未充过30元
    id: int = betterproto.int32_field(1)


@dataclass
class QExchangeReq(betterproto.Message):
    id: int = betterproto.int32_field(1)


@dataclass
class AnswerReq(betterproto.Message):
    # 题号
    qid: int = betterproto.int32_field(1)
    # 答案 1-A 2-B 3-C 4-D 按EXCEL顺序排列
    answer: List[int] = betterproto.int32_field(2)


@dataclass
class QuestionReq(betterproto.Message):
    # 属于哪部原作
    comic: str = betterproto.string_field(1)
    # 题目
    question: str = betterproto.string_field(2)
    # 答案1（正确答案）
    answer1: str = betterproto.string_field(3)
    # 答案2
    answer2: str = betterproto.string_field(4)
    # 答案3
    answer3: str = betterproto.string_field(5)
    # 答案4
    answer4: str = betterproto.string_field(6)


@dataclass
class AnswerHomeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "AnswerHomeData" = betterproto.message_field(3)


@dataclass
class AnswerHomeData(betterproto.Message):
    # 当前时间
    now: str = betterproto.string_field(1)
    # 今日已答题 1-已答 0-未答
    done: int = betterproto.int32_field(2)
    # 今日出题数
    qst_num: int = betterproto.int32_field(3)
    # 元气点数
    pt: int = betterproto.int32_field(4)
    # 已兑换信息 固定6元素数组 0-未兑换 1-已兑换
    ex_list: List[int] = betterproto.int32_field(5)
    # 题号
    qid: int = betterproto.int32_field(6)


@dataclass
class AnswerResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "AnswerData" = betterproto.message_field(3)


@dataclass
class AnswerData(betterproto.Message):
    # 正确数
    correct: int = betterproto.int32_field(1)
    # 获得点数
    pt: int = betterproto.int32_field(2)
    # 连续答题天数
    cont: int = betterproto.int32_field(3)
    # 下一档奖励天数
    next_day: int = betterproto.int32_field(4)
    # 下一档奖励元气值
    next_pt: int = betterproto.int32_field(5)
    # 用户名
    name: str = betterproto.string_field(6)
    # 头像
    face: str = betterproto.string_field(7)


@dataclass
class RecRewardReq(betterproto.Message):
    id: int = betterproto.int32_field(1)


@dataclass
class HomeResp2(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "HomeData2" = betterproto.message_field(3)


@dataclass
class HomeData2(betterproto.Message):
    # 当前时间
    now: str = betterproto.string_field(1)
    # 签到状态 固定10元素数组 0-未签 1-已签
    sign: List[int] = betterproto.int32_field(2)
    # 今日签到状态 0-未签 1-已签
    today_sign: int = betterproto.int32_field(3)
    # 弹幕
    danmaku: List["Danmaku"] = betterproto.message_field(4)
    # 总榜
    total_rank: List["Rank"] = betterproto.message_field(5)
    # 今日榜
    today_rank: List["Rank"] = betterproto.message_field(6)
    # 昨日榜
    ystd_rank: List["Rank"] = betterproto.message_field(7)
    # 总榜我的名次
    total_my: "Rank" = betterproto.message_field(8)
    # 今日榜我的名次
    today_my: "Rank" = betterproto.message_field(9)
    # 昨日榜我的名次
    ystd_my: "Rank" = betterproto.message_field(10)
    # 累计充值
    recharge: int = betterproto.int32_field(11)
    # 累计回馈领取 固定10元素数组 0-未领取 1-已领取 2-不可领取
    rchg_done: List[int] = betterproto.int32_field(12)
    # 历史充值
    his_recharge: int = betterproto.int32_field(13)
    # 历史充值已领取  0-未领取 1-已领取
    his_done: int = betterproto.int32_field(14)
    # 已预约
    order: int = betterproto.int32_field(15)


@dataclass
class Rank(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    face: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    # 0代表不在榜单
    rank: int = betterproto.int32_field(4)
    score: int = betterproto.int32_field(5)


@dataclass
class Danmaku(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    name: str = betterproto.string_field(2)
    face: str = betterproto.string_field(3)
    # 弹幕类型 1-回馈礼包领取 2-限时累计领取 3-当日第一 4-总榜第一 5-总榜第二 6-总榜第三
    type: int = betterproto.int32_field(4)


@dataclass
class EmptyRequest2(betterproto.Message):
    pass


@dataclass
class DefaultResponse2(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "EmptyData2" = betterproto.message_field(3)


@dataclass
class EmptyData2(betterproto.Message):
    pass


class TwoyearStub(betterproto.ServiceStub):
    """2020国庆活动"""

    @allure.step("""首页""")
    def home(self, request: EmptyRequest2) -> HomeResp2:
        """首页"""
        logging.getLogger(__name__).info(
            "start call " + "[home]" + " api" + "=>" + """首页"""
        )
        response = HomeResp2()
        self._do_twirp_rpc("/activity.v4.Twoyear/Home", request, response)
        logging.getLogger(__name__).info("call " + "[home]" + " api success!")
        return response

    @allure.step("""签到""")
    def sign(self, request: EmptyRequest2) -> DefaultResponse2:
        """签到"""
        logging.getLogger(__name__).info(
            "start call " + "[sign]" + " api" + "=>" + """签到"""
        )
        response = DefaultResponse2()
        self._do_twirp_rpc("/activity.v4.Twoyear/Sign", request, response)
        logging.getLogger(__name__).info("call " + "[sign]" + " api success!")
        return response

    @allure.step("""领取历史奖励""")
    def rec_history(self, request: EmptyRequest2) -> DefaultResponse2:
        """领取历史奖励"""
        logging.getLogger(__name__).info(
            "start call " + "[rec_history]" + " api" + "=>" + """领取历史奖励"""
        )
        response = DefaultResponse2()
        self._do_twirp_rpc("/activity.v4.Twoyear/RecHistory", request, response)
        logging.getLogger(__name__).info("call " + "[rec_history]" + " api success!")
        return response

    @allure.step("""领取累计奖励""")
    def rec_reward(self, request: RecRewardReq) -> DefaultResponse2:
        """领取累计奖励"""
        logging.getLogger(__name__).info(
            "start call " + "[rec_reward]" + " api" + "=>" + """领取累计奖励"""
        )
        response = DefaultResponse2()
        self._do_twirp_rpc("/activity.v4.Twoyear/RecReward", request, response)
        logging.getLogger(__name__).info("call " + "[rec_reward]" + " api success!")
        return response

    @allure.step("""预约""")
    def order(self, request: EmptyRequest2) -> DefaultResponse2:
        """预约"""
        logging.getLogger(__name__).info(
            "start call " + "[order]" + " api" + "=>" + """预约"""
        )
        response = DefaultResponse2()
        self._do_twirp_rpc("/activity.v4.Twoyear/Order", request, response)
        logging.getLogger(__name__).info("call " + "[order]" + " api success!")
        return response

    @allure.step("""答题首页""")
    def answer_home(self, request: EmptyRequest2) -> AnswerHomeResp:
        """答题首页"""
        logging.getLogger(__name__).info(
            "start call " + "[answer_home]" + " api" + "=>" + """答题首页"""
        )
        response = AnswerHomeResp()
        self._do_twirp_rpc("/activity.v4.Twoyear/AnswerHome", request, response)
        logging.getLogger(__name__).info("call " + "[answer_home]" + " api success!")
        return response

    @allure.step("""答题""")
    def answer(self, request: AnswerReq) -> AnswerResp:
        """答题"""
        logging.getLogger(__name__).info(
            "start call " + "[answer]" + " api" + "=>" + """答题"""
        )
        response = AnswerResp()
        self._do_twirp_rpc("/activity.v4.Twoyear/Answer", request, response)
        logging.getLogger(__name__).info("call " + "[answer]" + " api success!")
        return response

    @allure.step("""出题""")
    def question(self, request: QuestionReq) -> DefaultResponse2:
        """出题"""
        logging.getLogger(__name__).info(
            "start call " + "[question]" + " api" + "=>" + """出题"""
        )
        response = DefaultResponse2()
        self._do_twirp_rpc("/activity.v4.Twoyear/Question", request, response)
        logging.getLogger(__name__).info("call " + "[question]" + " api success!")
        return response

    @allure.step("""分享""")
    def share(self, request: EmptyRequest2) -> DefaultResponse2:
        """分享"""
        logging.getLogger(__name__).info(
            "start call " + "[share]" + " api" + "=>" + """分享"""
        )
        response = DefaultResponse2()
        self._do_twirp_rpc("/activity.v4.Twoyear/Share", request, response)
        logging.getLogger(__name__).info("call " + "[share]" + " api success!")
        return response

    @allure.step("""答题奖品""")
    def q_exchange(self, request: QExchangeReq) -> DefaultResponse2:
        """答题奖品"""
        logging.getLogger(__name__).info(
            "start call " + "[q_exchange]" + " api" + "=>" + """答题奖品"""
        )
        response = DefaultResponse2()
        self._do_twirp_rpc("/activity.v4.Twoyear/QExchange", request, response)
        logging.getLogger(__name__).info("call " + "[q_exchange]" + " api success!")
        return response

    @allure.step("""30元用户""")
    def group_id(self, request: EmptyRequest2) -> GroupIdResp:
        """30元用户"""
        logging.getLogger(__name__).info(
            "start call " + "[group_id]" + " api" + "=>" + """30元用户"""
        )
        response = GroupIdResp()
        self._do_twirp_rpc("/activity.v4.Twoyear/GroupId", request, response)
        logging.getLogger(__name__).info("call " + "[group_id]" + " api success!")
        return response
