# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: util/v0/conf.proto
# plugin: python-betterproto
import logging
from typing import List

import allure
from dataclasses import dataclass

import betterproto


@dataclass
class EmptyData(betterproto.Message):
    pass


@dataclass
class ListFilesResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "Files" = betterproto.message_field(3)


@dataclass
class Files(betterproto.Message):
    # 文件名列表
    files: List["File"] = betterproto.message_field(1)


@dataclass
class File(betterproto.Message):
    # 文件名
    filename: str = betterproto.string_field(1)
    # 文件注释
    comment: str = betterproto.string_field(2)


@dataclass
class SetReq(betterproto.Message):
    # 配置文件名
    filename: str = betterproto.string_field(1)
    # 配置文件 键
    key: str = betterproto.string_field(2)
    # 配置文件 值
    val: str = betterproto.string_field(3)
    # 配置文件 备注(注释)
    comment: str = betterproto.string_field(4)
    # 仅在添加新配置的时候传该字段 编辑已有字段的时候不传该字段或者空字符串 auto/string/bool/int/float64/time
    type: str = betterproto.string_field(5)
    # 分组名, 没有则不传
    group: str = betterproto.string_field(6)


@dataclass
class DefaultResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "EmptyData" = betterproto.message_field(3)


@dataclass
class ListReq(betterproto.Message):
    # 配置文件名
    filename: str = betterproto.string_field(1)
    # 配置key名(不传则不筛选)
    key: str = betterproto.string_field(2)
    # 配置分组名(不传则不筛选)
    group: str = betterproto.string_field(3)


@dataclass
class ListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ConfData" = betterproto.message_field(3)


@dataclass
class ConfData(betterproto.Message):
    # 配置列表
    confs: List["ConfKV"] = betterproto.message_field(1)
    # 所有的分组列表
    groups: List[str] = betterproto.string_field(2)


@dataclass
class ConfKV(betterproto.Message):
    # 键
    key: str = betterproto.string_field(1)
    # 值
    val: str = betterproto.string_field(2)
    # 注释
    comment: str = betterproto.string_field(3)
    # string/bool/int/float64
    type: str = betterproto.string_field(4)
    # 分组
    group: str = betterproto.string_field(5)


class ConfStub(betterproto.ServiceStub):
    """配置文件相关接口"""

    @allure.step("""列出支持修改的配置文件""")
    def list_files(self, request: EmptyData) -> ListFilesResp:
        """列出支持修改的配置文件"""
        logging.getLogger(__name__).info(
            "start call " + "[list_files]" + " api" + "=>" + """列出支持修改的配置文件"""
        )
        response = ListFilesResp()
        self._do_twirp_rpc("/util.v0.Conf/ListFiles", request, response)
        logging.getLogger(__name__).info("call " + "[list_files]" + " api success!")
        return response

    @allure.step("""列出配置中心特定的配置文件具体配置列表""")
    def list(self, request: ListReq) -> ListResp:
        """列出配置中心特定的配置文件具体配置列表"""
        logging.getLogger(__name__).info(
            "start call " + "[list]" + " api" + "=>" + """列出配置中心特定的配置文件具体配置列表"""
        )
        response = ListResp()
        self._do_twirp_rpc("/util.v0.Conf/List", request, response)
        logging.getLogger(__name__).info("call " + "[list]" + " api success!")
        return response

    @allure.step("""修改配置中心特定的配置文件配置""")
    def set(self, request: SetReq) -> DefaultResp:
        """修改配置中心特定的配置文件配置"""
        logging.getLogger(__name__).info(
            "start call " + "[set]" + " api" + "=>" + """修改配置中心特定的配置文件配置"""
        )
        response = DefaultResp()
        self._do_twirp_rpc("/util.v0.Conf/Set", request, response)
        logging.getLogger(__name__).info("call " + "[set]" + " api success!")
        return response
