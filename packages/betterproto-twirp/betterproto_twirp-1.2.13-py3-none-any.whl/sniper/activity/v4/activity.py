# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: activity/v4/activity.proto
# plugin: python-betterproto
import logging
from typing import List

import allure
from dataclasses import dataclass

import betterproto


@dataclass
class WindowResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "WindowData" = betterproto.message_field(3)


@dataclass
class WindowData(betterproto.Message):
    # 1-今日已弹窗
    done: int = betterproto.int32_field(1)


@dataclass
class NovBuyHomeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "NovBuyHomeData" = betterproto.message_field(3)


@dataclass
class NovBuyHomeData(betterproto.Message):
    # 已购数量 数组索引 = 礼包ID 0号元素默认留空
    buy_num: List[int] = betterproto.int32_field(1)


@dataclass
class TianguanBookBuyReq(betterproto.Message):
    # 1-第二卷 2-第三卷
    book: int = betterproto.int32_field(1)


@dataclass
class SuanHomeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SuanHomeData" = betterproto.message_field(3)


@dataclass
class SuanHomeData(betterproto.Message):
    # 柠檬值
    point: int = betterproto.int32_field(1)
    # 签到日(15-24)
    signed_day: List[int] = betterproto.int32_field(2)
    # 已领福袋 1-原版书 2-畅读卡 3~5-惊喜福袋 6-特典 漫画ID-作品福袋
    done: List[int] = betterproto.int32_field(3)
    # 实体书库存
    book: int = betterproto.int32_field(4)
    # 畅读卡库存
    card: int = betterproto.int32_field(5)
    # 当前时间
    now: str = betterproto.string_field(6)


@dataclass
class SuanExchangeReq(betterproto.Message):
    # 领取类型 1-原版书 2-畅读卡 3~5-惊喜福袋 6-特典 漫画ID-作品福袋
    id: int = betterproto.int32_field(1)


@dataclass
class TianguanDanmakuResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "TianguanDanmakuData" = betterproto.message_field(3)


@dataclass
class TianguanDanmakuData(betterproto.Message):
    list: List["TianguanDanmaku"] = betterproto.message_field(1)
    gold: int = betterproto.int32_field(2)
    # 库存
    gift1: int = betterproto.int32_field(3)
    gift2: int = betterproto.int32_field(4)
    gift3: int = betterproto.int32_field(5)


@dataclass
class TianguanDanmaku(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    face: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    gold: int = betterproto.int32_field(4)


@dataclass
class TianguanMyDanmakuResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "TianguanMyDanmakuData" = betterproto.message_field(3)


@dataclass
class TianguanMyDanmakuData(betterproto.Message):
    list: List["TianguanDanmaku"] = betterproto.message_field(1)


@dataclass
class TianguanBuyReq(betterproto.Message):
    type: int = betterproto.int32_field(1)


@dataclass
class TianguanBuyResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "TianguanBuyData" = betterproto.message_field(3)


@dataclass
class TianguanBuyData(betterproto.Message):
    # 唯一标识
    id: int = betterproto.int32_field(1)
    # 默认姓名
    name: str = betterproto.string_field(2)
    # 默认电话
    phone: str = betterproto.string_field(3)
    # 默认地址
    addr: str = betterproto.string_field(4)
    # 礼包类型
    type: int = betterproto.int32_field(5)


@dataclass
class TianguanMyGiftResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "TianguanMyGiftData" = betterproto.message_field(3)


@dataclass
class TianguanMyGiftData(betterproto.Message):
    list: List["TianguanBuyData"] = betterproto.message_field(1)


@dataclass
class TianguanAddrReq(betterproto.Message):
    id: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    phone: str = betterproto.string_field(3)
    addr: str = betterproto.string_field(4)


@dataclass
class UserLikeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "UserLikeData" = betterproto.message_field(3)


@dataclass
class UserLikeData(betterproto.Message):
    # 0-默认 1-国漫 2-日漫 3-韩漫
    status: int = betterproto.int32_field(1)


@dataclass
class GaokaoHomeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "GaokaoHomeData" = betterproto.message_field(3)


@dataclass
class GaokaoHomeData(betterproto.Message):
    # 累计数值
    point: int = betterproto.int32_field(1)
    # 已购买
    buy: int = betterproto.int32_field(2)
    # 已追漫
    fav: int = betterproto.int32_field(3)
    # 姓名
    name: str = betterproto.string_field(4)
    # 地址
    addr: str = betterproto.string_field(5)
    # 电话
    phone: str = betterproto.string_field(6)
    # 当前金币
    gold: int = betterproto.int32_field(7)


@dataclass
class GaokaoEditReq(betterproto.Message):
    # 姓名
    name: str = betterproto.string_field(1)
    # 地址
    addr: str = betterproto.string_field(2)
    # 电话
    phone: str = betterproto.string_field(3)


@dataclass
class S10HomeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "S10HomeData" = betterproto.message_field(3)


@dataclass
class S10HomeData(betterproto.Message):
    # 绑定手机 1-绑定 0-未绑定
    phone: int = betterproto.int32_field(1)
    # 风控 1-封禁 0-正常
    ban: int = betterproto.int32_field(2)
    # 关注领取状态
    follow: int = betterproto.int32_field(3)
    # 追漫领取状态
    fav: int = betterproto.int32_field(4)
    # 阅读领取状态
    read: int = betterproto.int32_field(5)


@dataclass
class S10RecReq(betterproto.Message):
    # 1-关注 2-追漫 3-阅读
    type: int = betterproto.int32_field(1)


@dataclass
class YuanlongHomeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "YuanlongHomeData" = betterproto.message_field(3)


@dataclass
class YuanlongHomeData(betterproto.Message):
    # 题目 第一天是814 最后一天是822 以此类推
    qid: int = betterproto.int32_field(1)
    # 当前时间
    now: str = betterproto.string_field(2)
    # 今日已答题
    done: int = betterproto.int32_field(3)
    # 灵气值
    lingqi: int = betterproto.int32_field(4)


@dataclass
class YuanlongAnswerReq(betterproto.Message):
    # 题号
    qid: int = betterproto.int32_field(1)
    # 答案数组 A-1 B-2 C-3 以EXCEL表格中的为准
    answers: List[int] = betterproto.int32_field(2)


@dataclass
class YuanlongAnswerResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "YuanlongAnswerData" = betterproto.message_field(3)


@dataclass
class YuanlongAnswerData(betterproto.Message):
    # 正确数
    correct: int = betterproto.int32_field(1)
    # 连续天数
    day: int = betterproto.int32_field(2)
    # 灵气值
    lingqi: int = betterproto.int32_field(3)


@dataclass
class YuanlongCheatResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "YuanlongCheatData" = betterproto.message_field(3)


@dataclass
class YuanlongCheatData(betterproto.Message):
    tips: str = betterproto.string_field(1)


@dataclass
class FanpaiHomeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "FanpaiHomeData" = betterproto.message_field(3)


@dataclass
class FanpaiHomeData(betterproto.Message):
    # 签到次数
    sign: int = betterproto.int32_field(1)
    # 分享次数
    share: int = betterproto.int32_field(2)
    # 战力值
    pt: int = betterproto.int32_field(3)
    # 综合战力值
    total: int = betterproto.int32_field(4)
    # 实时票池
    pool: List["FanpaiPool"] = betterproto.message_field(5)
    # 今日已领
    done: int = betterproto.int32_field(6)
    # 追漫状态 1-老友 0-新人
    fav: int = betterproto.int32_field(7)


@dataclass
class FanpaiPool(betterproto.Message):
    # 战力值
    pt: int = betterproto.int32_field(1)
    # 最佳助攻
    uid: int = betterproto.int64_field(2)
    name: str = betterproto.string_field(3)
    face: str = betterproto.string_field(4)


@dataclass
class FanpaiSupportReq(betterproto.Message):
    # 票池
    pool: int = betterproto.int32_field(1)
    # 投票数
    num: int = betterproto.int32_field(2)


@dataclass
class EmptyRequest(betterproto.Message):
    pass


@dataclass
class DefaultResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "EmptyData" = betterproto.message_field(3)


@dataclass
class EmptyData(betterproto.Message):
    pass


@dataclass
class SummerChipsResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SummerChipsData" = betterproto.message_field(3)


@dataclass
class SummerChipsData(betterproto.Message):
    num: int = betterproto.int32_field(1)


@dataclass
class SummerHomeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SummerHomeData" = betterproto.message_field(3)


@dataclass
class SummerHomeData(betterproto.Message):
    # 当前时间
    now: str = betterproto.string_field(1)
    # 礼包状态 1-已购买
    gift: int = betterproto.int32_field(2)
    # 首冲状态
    first: int = betterproto.int32_field(3)


@dataclass
class SummerRicherResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SummerRicherData" = betterproto.message_field(3)


@dataclass
class SummerRicherData(betterproto.Message):
    # 当前时间
    now: str = betterproto.string_field(1)
    # 骰子数
    num: int = betterproto.int32_field(2)
    # 当前地图ID 0代表未进行游戏
    current: int = betterproto.int32_field(3)
    map1: "SummerMap" = betterproto.message_field(4)
    map2: "SummerMap" = betterproto.message_field(5)
    map3: "SummerMap" = betterproto.message_field(6)
    map4: "SummerMap" = betterproto.message_field(7)
    rank: List["SummerRicherRank"] = betterproto.message_field(8)
    # 首冲
    first: int = betterproto.int32_field(9)


@dataclass
class SummerMap(betterproto.Message):
    # 编号
    id: int = betterproto.int32_field(1)
    # 当前格 0-起点
    cur: int = betterproto.int32_field(2)
    # 总步数
    total: int = betterproto.int32_field(3)


@dataclass
class SummerRicherListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SummerRicherListData" = betterproto.message_field(3)


@dataclass
class SummerRicherListData(betterproto.Message):
    # 登录
    login: int = betterproto.int32_field(1)
    # 分享
    share: int = betterproto.int32_field(2)
    # 购买月卡
    card: int = betterproto.int32_field(3)
    # 夏日礼包
    gift: int = betterproto.int32_field(4)
    # 积分兑换
    point: int = betterproto.int32_field(5)


@dataclass
class SummerRicherDiceReq(betterproto.Message):
    # 地图
    map: int = betterproto.int32_field(1)
    # 当前位置
    cur: int = betterproto.int32_field(2)
    # 自动扫图
    auto: int = betterproto.int32_field(3)


@dataclass
class SummerRicherDiceResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SummerRicherDiceData" = betterproto.message_field(3)


@dataclass
class SummerRicherDiceData(betterproto.Message):
    # 前进步数
    step: int = betterproto.int32_field(1)
    # 奖品类型
    type: int = betterproto.int32_field(2)
    # 奖品文案(漫画名)
    msg: str = betterproto.string_field(3)
    # 购买ID
    id: int = betterproto.int32_field(4)
    # 累计奖励 1-233 2-500
    extra: int = betterproto.int32_field(5)


@dataclass
class SummerDanmakuResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SummerDanmakuData" = betterproto.message_field(3)


@dataclass
class SummerDanmakuData(betterproto.Message):
    list: List[str] = betterproto.string_field(1)


@dataclass
class SummerRicherPackResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["SummerRicherPackData"] = betterproto.message_field(3)


@dataclass
class SummerRicherPackData(betterproto.Message):
    # 格数
    step: int = betterproto.int32_field(1)
    # 奖品文案
    msg: str = betterproto.string_field(2)


@dataclass
class SummerRicherTodoResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["SummerRicherTodoData"] = betterproto.message_field(3)


@dataclass
class SummerRicherTodoData(betterproto.Message):
    # 购买凭证
    id: int = betterproto.int32_field(1)
    # 对应奖品类型
    type: int = betterproto.int32_field(2)


@dataclass
class SummerRicherPackReq(betterproto.Message):
    map: int = betterproto.int32_field(1)


@dataclass
class SummerRicherTodoReq(betterproto.Message):
    map: int = betterproto.int32_field(1)


@dataclass
class SummerRicherRankReq(betterproto.Message):
    # 排行榜ID
    rank: int = betterproto.int32_field(1)


@dataclass
class SummerRicherRankResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SummerRicherRankData" = betterproto.message_field(3)


@dataclass
class SummerRicherRankData(betterproto.Message):
    list: List["SummerRicherRank"] = betterproto.message_field(1)
    my: "SummerRicherRank" = betterproto.message_field(2)


@dataclass
class SummerRicherRank(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    face: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    rank: int = betterproto.int32_field(4)
    score: int = betterproto.int32_field(5)


@dataclass
class SummerRicherShareReq(betterproto.Message):
    map: int = betterproto.int32_field(1)


@dataclass
class SummerHostelMyResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SummerHostelMyData" = betterproto.message_field(3)


@dataclass
class SummerHostelMyData(betterproto.Message):
    # 漫币余额
    gold: int = betterproto.int32_field(1)
    # 寄存箱
    box: List["HostelCard"] = betterproto.message_field(2)


@dataclass
class HostelCard(betterproto.Message):
    # 唯一标识
    id: int = betterproto.int32_field(1)
    # 漫画名
    title: str = betterproto.string_field(2)
    # 封面
    cover: str = betterproto.string_field(3)


@dataclass
class SummerHostelDrawReq(betterproto.Message):
    # 0-免费 1-1抽 10-10抽
    num: int = betterproto.int32_field(1)


@dataclass
class SummerHostelDrawResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SummerHostelDrawData" = betterproto.message_field(3)


@dataclass
class SummerHostelDrawData(betterproto.Message):
    cards: List["HostelCard"] = betterproto.message_field(2)


@dataclass
class SummerHostelMarketResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SummerHostelMarketData" = betterproto.message_field(3)


@dataclass
class SummerHostelMarketData(betterproto.Message):
    # 刷新次数
    refresh: int = betterproto.int32_field(1)
    # 漫画列表
    comic_list: List["HostelComic"] = betterproto.message_field(2)


@dataclass
class SummerFuliHomeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SummerFuliHomeData" = betterproto.message_field(3)


@dataclass
class SummerFuliHomeData(betterproto.Message):
    # 当前时间
    now: str = betterproto.string_field(1)
    # 签到日期 ( 821 - 904)
    sign: List[int] = betterproto.int32_field(2)
    # 签到天数
    sign_cnt: int = betterproto.int32_field(3)
    # 今日签到
    today_done: int = betterproto.int32_field(4)
    # 已抽奖
    draw_done: int = betterproto.int32_field(5)
    # 用户数
    user_cnt: int = betterproto.int32_field(6)
    # 手机
    tel: int = betterproto.int32_field(7)


@dataclass
class SummerFuliCouponResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SummerFuliCouponData" = betterproto.message_field(3)


@dataclass
class SummerFuliCouponData(betterproto.Message):
    # 福利券数量
    num: int = betterproto.int32_field(1)


@dataclass
class SummerFuliDrawResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SummerFuliDrawData" = betterproto.message_field(3)


@dataclass
class SummerFuliDrawData(betterproto.Message):
    # 0-未中奖
    prize: int = betterproto.int32_field(1)


@dataclass
class SummerFuliMineResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SummerFuliMineData" = betterproto.message_field(3)


@dataclass
class SummerFuliMineData(betterproto.Message):
    prize: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    addr: str = betterproto.string_field(3)
    phone: str = betterproto.string_field(4)


@dataclass
class SummerFuliAddrReq(betterproto.Message):
    name: str = betterproto.string_field(1)
    addr: str = betterproto.string_field(2)
    phone: str = betterproto.string_field(3)


@dataclass
class SummerFuliUserResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SummerFuliUserData" = betterproto.message_field(3)


@dataclass
class FuliUser(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    prize: int = betterproto.int32_field(2)
    name: str = betterproto.string_field(3)
    face: str = betterproto.string_field(4)


@dataclass
class SummerFuliUserData(betterproto.Message):
    list: List["FuliUser"] = betterproto.message_field(1)


@dataclass
class HostelComic(betterproto.Message):
    # 漫画ID
    comic_id: int = betterproto.int32_field(1)
    # 漫画封面
    cover: str = betterproto.string_field(2)
    # 漫画名
    title: str = betterproto.string_field(3)


@dataclass
class SummerHostelExchangeReq(betterproto.Message):
    # 卡片标识
    id: int = betterproto.int32_field(1)
    # 兑换漫画ID 0-兑换为卡面漫画
    cid: int = betterproto.int32_field(2)


@dataclass
class SummerHostelMarketReq(betterproto.Message):
    # 1-刷新 0-不刷新
    refresh: int = betterproto.int32_field(1)


@dataclass
class SummerGroupResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["SummerGroupData"] = betterproto.message_field(3)


@dataclass
class SummerGroupData(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    face: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)


@dataclass
class ChunwuHomeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ChunwuHomeData" = betterproto.message_field(3)


@dataclass
class ChunwuHomeData(betterproto.Message):
    # 真爱票数
    ticket: int = betterproto.int32_field(1)
    # 实时票数
    pool1: int = betterproto.int32_field(2)
    pool2: int = betterproto.int32_field(3)
    pool3: int = betterproto.int32_field(4)
    pool4: int = betterproto.int32_field(5)
    pool5: int = betterproto.int32_field(6)
    # 最佳助攻
    name1: str = betterproto.string_field(7)
    face1: str = betterproto.string_field(8)
    name2: str = betterproto.string_field(9)
    face2: str = betterproto.string_field(10)
    name3: str = betterproto.string_field(11)
    face3: str = betterproto.string_field(12)
    name4: str = betterproto.string_field(13)
    face4: str = betterproto.string_field(14)
    name5: str = betterproto.string_field(15)
    face5: str = betterproto.string_field(16)
    # 今日已领-春物语
    done1: int = betterproto.int32_field(17)
    # 今日已领-妄言录
    done2: int = betterproto.int32_field(18)


@dataclass
class ChunwuSupportReq(betterproto.Message):
    # 奖池
    pool: int = betterproto.int32_field(1)
    # 投票数
    num: int = betterproto.int32_field(2)


@dataclass
class ChunwuResultReq(betterproto.Message):
    # 奖池
    pool: int = betterproto.int32_field(1)
    # 阶段
    level: int = betterproto.int32_field(2)


@dataclass
class ChunwuResultResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ChunwuResultData" = betterproto.message_field(3)


@dataclass
class ChunwuResultData(betterproto.Message):
    list: List["ChunwuUser"] = betterproto.message_field(1)


@dataclass
class ChunwuUser(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    name: str = betterproto.string_field(2)
    face: str = betterproto.string_field(3)


@dataclass
class ChunwuEditReq(betterproto.Message):
    name: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)
    phone: str = betterproto.string_field(3)


@dataclass
class ChunwuSignReq(betterproto.Message):
    id: int = betterproto.int32_field(1)


@dataclass
class ChunwuAddressResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ChunwuAddressData" = betterproto.message_field(3)


@dataclass
class ChunwuAddressData(betterproto.Message):
    name: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)
    phone: str = betterproto.string_field(3)


@dataclass
class NovTaskHomeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "NovTaskHomeData" = betterproto.message_field(3)


@dataclass
class NovTaskHomeData(betterproto.Message):
    now: str = betterproto.string_field(1)
    # 闪电值
    pt: int = betterproto.int32_field(2)
    # 奖励领取状态 10元素数组 1-已领取
    rewards: List[int] = betterproto.int32_field(3)
    # 碎片值
    chip: int = betterproto.int32_field(4)
    # 当前任务列表
    task: List["NovTask"] = betterproto.message_field(5)


@dataclass
class NovTask(betterproto.Message):
    # 任务编号
    id: int = betterproto.int32_field(1)
    # 完成状态 0-未完成 1-未领取 2-已领取
    done: int = betterproto.int32_field(2)
    # 相关完成数量
    data: int = betterproto.int32_field(3)


@dataclass
class NovTaskDoneReq(betterproto.Message):
    # 任务编号
    id: int = betterproto.int32_field(1)


@dataclass
class NovRewardReq(betterproto.Message):
    # 从0开始
    id: int = betterproto.int32_field(1)


class ActivityStub(betterproto.ServiceStub):
    """活动服务"""

    @allure.step("""十一月阅读-首页""")
    def nov_task_home(self, request: EmptyRequest) -> NovTaskHomeResp:
        """十一月阅读-首页"""
        logging.getLogger(__name__).info(
            "start call " + "[nov_task_home]" + " api" + "=>" + """十一月阅读-首页"""
        )
        response = NovTaskHomeResp()
        self._do_twirp_rpc("/activity.v4.Activity/NovTaskHome", request, response)
        logging.getLogger(__name__).info("call " + "[nov_task_home]" + " api success!")
        return response

    @allure.step("""十一月阅读-领取任务奖励""")
    def nov_task_done(self, request: NovTaskDoneReq) -> DefaultResponse:
        """十一月阅读-领取任务奖励"""
        logging.getLogger(__name__).info(
            "start call " + "[nov_task_done]" + " api" + "=>" + """十一月阅读-领取任务奖励"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v4.Activity/NovTaskDone", request, response)
        logging.getLogger(__name__).info("call " + "[nov_task_done]" + " api success!")
        return response

    @allure.step("""十一月阅读-领取闪电奖励""")
    def nov_task_reward(self, request: NovRewardReq) -> DefaultResponse:
        """十一月阅读-领取闪电奖励"""
        logging.getLogger(__name__).info(
            "start call " + "[nov_task_reward]" + " api" + "=>" + """十一月阅读-领取闪电奖励"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v4.Activity/NovTaskReward", request, response)
        logging.getLogger(__name__).info(
            "call " + "[nov_task_reward]" + " api success!"
        )
        return response

    @allure.step("""十一月阅读-分享""")
    def nov_task_share(self, request: EmptyRequest) -> DefaultResponse:
        """十一月阅读-分享"""
        logging.getLogger(__name__).info(
            "start call " + "[nov_task_share]" + " api" + "=>" + """十一月阅读-分享"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v4.Activity/NovTaskShare", request, response)
        logging.getLogger(__name__).info("call " + "[nov_task_share]" + " api success!")
        return response

    @allure.step("""十一月贩售-首页""")
    def nov_buy_home(self, request: EmptyRequest) -> NovBuyHomeResp:
        """十一月贩售-首页"""
        logging.getLogger(__name__).info(
            "start call " + "[nov_buy_home]" + " api" + "=>" + """十一月贩售-首页"""
        )
        response = NovBuyHomeResp()
        self._do_twirp_rpc("/activity.v4.Activity/NovBuyHome", request, response)
        logging.getLogger(__name__).info("call " + "[nov_buy_home]" + " api success!")
        return response

    @allure.step("""十一月贩售-购买福袋""")
    def nov_buy(self, request: TianguanBuyReq) -> TianguanBuyResp:
        """十一月贩售-购买福袋"""
        logging.getLogger(__name__).info(
            "start call " + "[nov_buy]" + " api" + "=>" + """十一月贩售-购买福袋"""
        )
        response = TianguanBuyResp()
        self._do_twirp_rpc("/activity.v4.Activity/NovBuy", request, response)
        logging.getLogger(__name__).info("call " + "[nov_buy]" + " api success!")
        return response

    @allure.step("""十一月贩售-我的福袋""")
    def nov_my_gift(self, request: EmptyRequest) -> TianguanMyGiftResp:
        """十一月贩售-我的福袋"""
        logging.getLogger(__name__).info(
            "start call " + "[nov_my_gift]" + " api" + "=>" + """十一月贩售-我的福袋"""
        )
        response = TianguanMyGiftResp()
        self._do_twirp_rpc("/activity.v4.Activity/NovMyGift", request, response)
        logging.getLogger(__name__).info("call " + "[nov_my_gift]" + " api success!")
        return response

    @allure.step("""十一月贩售-填写地址""")
    def nov_addr(self, request: TianguanAddrReq) -> DefaultResponse:
        """十一月贩售-填写地址"""
        logging.getLogger(__name__).info(
            "start call " + "[nov_addr]" + " api" + "=>" + """十一月贩售-填写地址"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v4.Activity/NovAddr", request, response)
        logging.getLogger(__name__).info("call " + "[nov_addr]" + " api success!")
        return response

    @allure.step("""暑假-每日领券福利首页""")
    def summer_fuli_home(self, request: EmptyRequest) -> SummerFuliHomeResp:
        """暑假-每日领券福利首页"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_fuli_home]" + " api" + "=>" + """暑假-每日领券福利首页"""
        )
        response = SummerFuliHomeResp()
        self._do_twirp_rpc("/activity.v4.Activity/SummerFuliHome", request, response)
        logging.getLogger(__name__).info(
            "call " + "[summer_fuli_home]" + " api success!"
        )
        return response

    @allure.step("""暑假-领券""")
    def summer_fuli_coupon(self, request: EmptyRequest) -> SummerFuliCouponResp:
        """暑假-领券"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_fuli_coupon]" + " api" + "=>" + """暑假-领券"""
        )
        response = SummerFuliCouponResp()
        self._do_twirp_rpc("/activity.v4.Activity/SummerFuliCoupon", request, response)
        logging.getLogger(__name__).info(
            "call " + "[summer_fuli_coupon]" + " api success!"
        )
        return response

    @allure.step("""暑假-抽奖""")
    def summer_fuli_draw(self, request: EmptyRequest) -> SummerFuliDrawResp:
        """暑假-抽奖"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_fuli_draw]" + " api" + "=>" + """暑假-抽奖"""
        )
        response = SummerFuliDrawResp()
        self._do_twirp_rpc("/activity.v4.Activity/SummerFuliDraw", request, response)
        logging.getLogger(__name__).info(
            "call " + "[summer_fuli_draw]" + " api success!"
        )
        return response

    @allure.step("""暑假-我的奖品""")
    def summer_fuli_mine(self, request: EmptyRequest) -> SummerFuliMineResp:
        """暑假-我的奖品"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_fuli_mine]" + " api" + "=>" + """暑假-我的奖品"""
        )
        response = SummerFuliMineResp()
        self._do_twirp_rpc("/activity.v4.Activity/SummerFuliMine", request, response)
        logging.getLogger(__name__).info(
            "call " + "[summer_fuli_mine]" + " api success!"
        )
        return response

    @allure.step("""暑假-填写地址""")
    def summer_fuli_addr(self, request: SummerFuliAddrReq) -> DefaultResponse:
        """暑假-填写地址"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_fuli_addr]" + " api" + "=>" + """暑假-填写地址"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v4.Activity/SummerFuliAddr", request, response)
        logging.getLogger(__name__).info(
            "call " + "[summer_fuli_addr]" + " api success!"
        )
        return response

    @allure.step("""暑假-中奖用户""")
    def summer_fuli_user(self, request: EmptyRequest) -> SummerFuliUserResp:
        """暑假-中奖用户"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_fuli_user]" + " api" + "=>" + """暑假-中奖用户"""
        )
        response = SummerFuliUserResp()
        self._do_twirp_rpc("/activity.v4.Activity/SummerFuliUser", request, response)
        logging.getLogger(__name__).info(
            "call " + "[summer_fuli_user]" + " api success!"
        )
        return response

    @allure.step("""元龙-首页""")
    def yuanlong_home(self, request: EmptyRequest) -> YuanlongHomeResp:
        """元龙-首页"""
        logging.getLogger(__name__).info(
            "start call " + "[yuanlong_home]" + " api" + "=>" + """元龙-首页"""
        )
        response = YuanlongHomeResp()
        self._do_twirp_rpc("/activity.v4.Activity/YuanlongHome", request, response)
        logging.getLogger(__name__).info("call " + "[yuanlong_home]" + " api success!")
        return response

    @allure.step("""元龙-答题""")
    def yuanlong_answer(self, request: YuanlongAnswerReq) -> YuanlongAnswerResp:
        """元龙-答题"""
        logging.getLogger(__name__).info(
            "start call " + "[yuanlong_answer]" + " api" + "=>" + """元龙-答题"""
        )
        response = YuanlongAnswerResp()
        self._do_twirp_rpc("/activity.v4.Activity/YuanlongAnswer", request, response)
        logging.getLogger(__name__).info(
            "call " + "[yuanlong_answer]" + " api success!"
        )
        return response

    @allure.step("""元龙-小抄""")
    def yuanlong_cheat(self, request: EmptyRequest) -> YuanlongCheatResp:
        """元龙-小抄"""
        logging.getLogger(__name__).info(
            "start call " + "[yuanlong_cheat]" + " api" + "=>" + """元龙-小抄"""
        )
        response = YuanlongCheatResp()
        self._do_twirp_rpc("/activity.v4.Activity/YuanlongCheat", request, response)
        logging.getLogger(__name__).info("call " + "[yuanlong_cheat]" + " api success!")
        return response

    @allure.step("""反派-首页""")
    def fanpai_home(self, request: EmptyRequest) -> FanpaiHomeResp:
        """反派-首页"""
        logging.getLogger(__name__).info(
            "start call " + "[fanpai_home]" + " api" + "=>" + """反派-首页"""
        )
        response = FanpaiHomeResp()
        self._do_twirp_rpc("/activity.v4.Activity/FanpaiHome", request, response)
        logging.getLogger(__name__).info("call " + "[fanpai_home]" + " api success!")
        return response

    @allure.step("""反派-领取""")
    def fanpai_sign(self, request: EmptyRequest) -> DefaultResponse:
        """反派-领取"""
        logging.getLogger(__name__).info(
            "start call " + "[fanpai_sign]" + " api" + "=>" + """反派-领取"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v4.Activity/FanpaiSign", request, response)
        logging.getLogger(__name__).info("call " + "[fanpai_sign]" + " api success!")
        return response

    @allure.step("""反派-分享""")
    def fanpai_share(self, request: EmptyRequest) -> DefaultResponse:
        """反派-分享"""
        logging.getLogger(__name__).info(
            "start call " + "[fanpai_share]" + " api" + "=>" + """反派-分享"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v4.Activity/FanpaiShare", request, response)
        logging.getLogger(__name__).info("call " + "[fanpai_share]" + " api success!")
        return response

    @allure.step("""反派-投票""")
    def fanpai_support(self, request: FanpaiSupportReq) -> DefaultResponse:
        """反派-投票"""
        logging.getLogger(__name__).info(
            "start call " + "[fanpai_support]" + " api" + "=>" + """反派-投票"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v4.Activity/FanpaiSupport", request, response)
        logging.getLogger(__name__).info("call " + "[fanpai_support]" + " api success!")
        return response

    @allure.step("""暑假-组队""")
    def summer_group(self, request: EmptyRequest) -> SummerGroupResp:
        """暑假-组队"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_group]" + " api" + "=>" + """暑假-组队"""
        )
        response = SummerGroupResp()
        self._do_twirp_rpc("/activity.v4.Activity/SummerGroup", request, response)
        logging.getLogger(__name__).info("call " + "[summer_group]" + " api success!")
        return response

    @allure.step("""暑假-首页""")
    def summer_home(self, request: EmptyRequest) -> SummerHomeResp:
        """暑假-首页"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_home]" + " api" + "=>" + """暑假-首页"""
        )
        response = SummerHomeResp()
        self._do_twirp_rpc("/activity.v4.Activity/SummerHome", request, response)
        logging.getLogger(__name__).info("call " + "[summer_home]" + " api success!")
        return response

    @allure.step("""暑假-大富翁-数据""")
    def summer_richer(self, request: EmptyRequest) -> SummerRicherResp:
        """暑假-大富翁-数据"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_richer]" + " api" + "=>" + """暑假-大富翁-数据"""
        )
        response = SummerRicherResp()
        self._do_twirp_rpc("/activity.v4.Activity/SummerRicher", request, response)
        logging.getLogger(__name__).info("call " + "[summer_richer]" + " api success!")
        return response

    @allure.step("""暑假-大富翁-任务清单""")
    def summer_richer_list(self, request: EmptyRequest) -> SummerRicherListResp:
        """暑假-大富翁-任务清单"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_richer_list]" + " api" + "=>" + """暑假-大富翁-任务清单"""
        )
        response = SummerRicherListResp()
        self._do_twirp_rpc("/activity.v4.Activity/SummerRicherList", request, response)
        logging.getLogger(__name__).info(
            "call " + "[summer_richer_list]" + " api success!"
        )
        return response

    @allure.step("""暑假-大富翁-投骰子""")
    def summer_richer_dice(self, request: SummerRicherDiceReq) -> SummerRicherDiceResp:
        """暑假-大富翁-投骰子"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_richer_dice]" + " api" + "=>" + """暑假-大富翁-投骰子"""
        )
        response = SummerRicherDiceResp()
        self._do_twirp_rpc("/activity.v4.Activity/SummerRicherDice", request, response)
        logging.getLogger(__name__).info(
            "call " + "[summer_richer_dice]" + " api success!"
        )
        return response

    @allure.step("""暑假-弹幕""")
    def summer_danmaku(self, request: EmptyRequest) -> SummerDanmakuResp:
        """暑假-弹幕"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_danmaku]" + " api" + "=>" + """暑假-弹幕"""
        )
        response = SummerDanmakuResp()
        self._do_twirp_rpc("/activity.v4.Activity/SummerDanmaku", request, response)
        logging.getLogger(__name__).info("call " + "[summer_danmaku]" + " api success!")
        return response

    @allure.step("""暑假-大富翁-背包""")
    def summer_richer_pack(self, request: SummerRicherPackReq) -> SummerRicherPackResp:
        """暑假-大富翁-背包"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_richer_pack]" + " api" + "=>" + """暑假-大富翁-背包"""
        )
        response = SummerRicherPackResp()
        self._do_twirp_rpc("/activity.v4.Activity/SummerRicherPack", request, response)
        logging.getLogger(__name__).info(
            "call " + "[summer_richer_pack]" + " api success!"
        )
        return response

    @allure.step("""暑假-大富翁-未用奖励""")
    def summer_richer_todo(self, request: SummerRicherTodoReq) -> SummerRicherTodoResp:
        """暑假-大富翁-未用奖励"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_richer_todo]" + " api" + "=>" + """暑假-大富翁-未用奖励"""
        )
        response = SummerRicherTodoResp()
        self._do_twirp_rpc("/activity.v4.Activity/SummerRicherTodo", request, response)
        logging.getLogger(__name__).info(
            "call " + "[summer_richer_todo]" + " api success!"
        )
        return response

    @allure.step("""暑假-大富翁-排行榜""")
    def summer_richer_rank(self, request: SummerRicherRankReq) -> SummerRicherRankResp:
        """暑假-大富翁-排行榜"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_richer_rank]" + " api" + "=>" + """暑假-大富翁-排行榜"""
        )
        response = SummerRicherRankResp()
        self._do_twirp_rpc("/activity.v4.Activity/SummerRicherRank", request, response)
        logging.getLogger(__name__).info(
            "call " + "[summer_richer_rank]" + " api success!"
        )
        return response

    @allure.step("""暑假-大富翁-分享""")
    def summer_richer_share(self, request: SummerRicherShareReq) -> DefaultResponse:
        """暑假-大富翁-分享"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_richer_share]" + " api" + "=>" + """暑假-大富翁-分享"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v4.Activity/SummerRicherShare", request, response)
        logging.getLogger(__name__).info(
            "call " + "[summer_richer_share]" + " api success!"
        )
        return response

    @allure.step("""暑假-大富翁-积分兑换""")
    def summer_richer_exchange(self, request: EmptyRequest) -> DefaultResponse:
        """暑假-大富翁-积分兑换"""
        logging.getLogger(__name__).info(
            "start call "
            + "[summer_richer_exchange]"
            + " api"
            + "=>"
            + """暑假-大富翁-积分兑换"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc(
            "/activity.v4.Activity/SummerRicherExchange", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[summer_richer_exchange]" + " api success!"
        )
        return response

    @allure.step("""暑假-大富翁-积分购买格""")
    def summer_richer_exchange2(self, request: EmptyRequest) -> DefaultResponse:
        """暑假-大富翁-积分购买格"""
        logging.getLogger(__name__).info(
            "start call "
            + "[summer_richer_exchange2]"
            + " api"
            + "=>"
            + """暑假-大富翁-积分购买格"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc(
            "/activity.v4.Activity/SummerRicherExchange2", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[summer_richer_exchange2]" + " api success!"
        )
        return response

    @allure.step("""暑假-抽卡旅店-我的卡片""")
    def summer_hostel_my(self, request: EmptyRequest) -> SummerHostelMyResp:
        """暑假-抽卡旅店-我的卡片"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_hostel_my]" + " api" + "=>" + """暑假-抽卡旅店-我的卡片"""
        )
        response = SummerHostelMyResp()
        self._do_twirp_rpc("/activity.v4.Activity/SummerHostelMy", request, response)
        logging.getLogger(__name__).info(
            "call " + "[summer_hostel_my]" + " api success!"
        )
        return response

    @allure.step("""暑假-抽卡旅店-抽卡""")
    def summer_hostel_draw(self, request: SummerHostelDrawReq) -> SummerHostelDrawResp:
        """暑假-抽卡旅店-抽卡"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_hostel_draw]" + " api" + "=>" + """暑假-抽卡旅店-抽卡"""
        )
        response = SummerHostelDrawResp()
        self._do_twirp_rpc("/activity.v4.Activity/SummerHostelDraw", request, response)
        logging.getLogger(__name__).info(
            "call " + "[summer_hostel_draw]" + " api success!"
        )
        return response

    @allure.step("""暑假-抽卡旅店-抽卡集市(刷新)""")
    def summer_hostel_market(
        self, request: SummerHostelMarketReq
    ) -> SummerHostelMarketResp:
        """暑假-抽卡旅店-抽卡集市(刷新)"""
        logging.getLogger(__name__).info(
            "start call "
            + "[summer_hostel_market]"
            + " api"
            + "=>"
            + """暑假-抽卡旅店-抽卡集市(刷新)"""
        )
        response = SummerHostelMarketResp()
        self._do_twirp_rpc(
            "/activity.v4.Activity/SummerHostelMarket", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[summer_hostel_market]" + " api success!"
        )
        return response

    @allure.step("""暑假-抽卡旅店-兑换""")
    def summer_hostel_exchange(
        self, request: SummerHostelExchangeReq
    ) -> DefaultResponse:
        """暑假-抽卡旅店-兑换"""
        logging.getLogger(__name__).info(
            "start call "
            + "[summer_hostel_exchange]"
            + " api"
            + "=>"
            + """暑假-抽卡旅店-兑换"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc(
            "/activity.v4.Activity/SummerHostelExchange", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[summer_hostel_exchange]" + " api success!"
        )
        return response

    @allure.step("""暑假-抽卡旅店-一键兑换""")
    def summer_hostel_exchange_all(self, request: EmptyRequest) -> DefaultResponse:
        """暑假-抽卡旅店-一键兑换"""
        logging.getLogger(__name__).info(
            "start call "
            + "[summer_hostel_exchange_all]"
            + " api"
            + "=>"
            + """暑假-抽卡旅店-一键兑换"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc(
            "/activity.v4.Activity/SummerHostelExchangeAll", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[summer_hostel_exchange_all]" + " api success!"
        )
        return response

    @allure.step("""暑假-碎片数""")
    def summer_chips(self, request: EmptyRequest) -> SummerChipsResp:
        """暑假-碎片数"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_chips]" + " api" + "=>" + """暑假-碎片数"""
        )
        response = SummerChipsResp()
        self._do_twirp_rpc("/activity.v4.Activity/SummerChips", request, response)
        logging.getLogger(__name__).info("call " + "[summer_chips]" + " api success!")
        return response

    @allure.step("""暑假-合成碎片""")
    def summer_synth(self, request: EmptyRequest) -> DefaultResponse:
        """暑假-合成碎片"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_synth]" + " api" + "=>" + """暑假-合成碎片"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v4.Activity/SummerSynth", request, response)
        logging.getLogger(__name__).info("call " + "[summer_synth]" + " api success!")
        return response

    @allure.step("""春物-领票""")
    def chunwu_sign(self, request: ChunwuSignReq) -> DefaultResponse:
        """春物-领票"""
        logging.getLogger(__name__).info(
            "start call " + "[chunwu_sign]" + " api" + "=>" + """春物-领票"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v4.Activity/ChunwuSign", request, response)
        logging.getLogger(__name__).info("call " + "[chunwu_sign]" + " api success!")
        return response

    @allure.step("""春物-应援""")
    def chunwu_support(self, request: ChunwuSupportReq) -> DefaultResponse:
        """春物-应援"""
        logging.getLogger(__name__).info(
            "start call " + "[chunwu_support]" + " api" + "=>" + """春物-应援"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v4.Activity/ChunwuSupport", request, response)
        logging.getLogger(__name__).info("call " + "[chunwu_support]" + " api success!")
        return response

    @allure.step("""春物-中奖结果""")
    def chunwu_result(self, request: ChunwuResultReq) -> ChunwuResultResp:
        """春物-中奖结果"""
        logging.getLogger(__name__).info(
            "start call " + "[chunwu_result]" + " api" + "=>" + """春物-中奖结果"""
        )
        response = ChunwuResultResp()
        self._do_twirp_rpc("/activity.v4.Activity/ChunwuResult", request, response)
        logging.getLogger(__name__).info("call " + "[chunwu_result]" + " api success!")
        return response

    @allure.step("""春物-填写地址""")
    def chunwu_edit(self, request: ChunwuEditReq) -> DefaultResponse:
        """春物-填写地址"""
        logging.getLogger(__name__).info(
            "start call " + "[chunwu_edit]" + " api" + "=>" + """春物-填写地址"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v4.Activity/ChunwuEdit", request, response)
        logging.getLogger(__name__).info("call " + "[chunwu_edit]" + " api success!")
        return response

    @allure.step("""春物-首页""")
    def chunwu_home(self, request: EmptyRequest) -> ChunwuHomeResp:
        """春物-首页"""
        logging.getLogger(__name__).info(
            "start call " + "[chunwu_home]" + " api" + "=>" + """春物-首页"""
        )
        response = ChunwuHomeResp()
        self._do_twirp_rpc("/activity.v4.Activity/ChunwuHome", request, response)
        logging.getLogger(__name__).info("call " + "[chunwu_home]" + " api success!")
        return response

    @allure.step("""春物-地址信息""")
    def chunwu_address(self, request: EmptyRequest) -> ChunwuAddressResp:
        """春物-地址信息"""
        logging.getLogger(__name__).info(
            "start call " + "[chunwu_address]" + " api" + "=>" + """春物-地址信息"""
        )
        response = ChunwuAddressResp()
        self._do_twirp_rpc("/activity.v4.Activity/ChunwuAddress", request, response)
        logging.getLogger(__name__).info("call " + "[chunwu_address]" + " api success!")
        return response

    @allure.step("""S10-首页""")
    def s10_home(self, request: EmptyRequest) -> S10HomeResp:
        """S10-首页"""
        logging.getLogger(__name__).info(
            "start call " + "[s10_home]" + " api" + "=>" + """S10-首页"""
        )
        response = S10HomeResp()
        self._do_twirp_rpc("/activity.v4.Activity/S10Home", request, response)
        logging.getLogger(__name__).info("call " + "[s10_home]" + " api success!")
        return response

    @allure.step("""S10-领取""")
    def s10_rec(self, request: S10RecReq) -> DefaultResponse:
        """S10-领取"""
        logging.getLogger(__name__).info(
            "start call " + "[s10_rec]" + " api" + "=>" + """S10-领取"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v4.Activity/S10Rec", request, response)
        logging.getLogger(__name__).info("call " + "[s10_rec]" + " api success!")
        return response

    @allure.step("""全球高考-首页""")
    def gaokao_home(self, request: EmptyRequest) -> GaokaoHomeResp:
        """全球高考-首页"""
        logging.getLogger(__name__).info(
            "start call " + "[gaokao_home]" + " api" + "=>" + """全球高考-首页"""
        )
        response = GaokaoHomeResp()
        self._do_twirp_rpc("/activity.v4.Activity/GaokaoHome", request, response)
        logging.getLogger(__name__).info("call " + "[gaokao_home]" + " api success!")
        return response

    @allure.step("""全球高考-购买""")
    def gaokao_buy(self, request: EmptyRequest) -> DefaultResponse:
        """全球高考-购买"""
        logging.getLogger(__name__).info(
            "start call " + "[gaokao_buy]" + " api" + "=>" + """全球高考-购买"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v4.Activity/GaokaoBuy", request, response)
        logging.getLogger(__name__).info("call " + "[gaokao_buy]" + " api success!")
        return response

    @allure.step("""全球高考-修改地址""")
    def gaokao_edit(self, request: GaokaoEditReq) -> DefaultResponse:
        """全球高考-修改地址"""
        logging.getLogger(__name__).info(
            "start call " + "[gaokao_edit]" + " api" + "=>" + """全球高考-修改地址"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v4.Activity/GaokaoEdit", request, response)
        logging.getLogger(__name__).info("call " + "[gaokao_edit]" + " api success!")
        return response

    @allure.step("""用户偏好算法""")
    def user_like(self, request: EmptyRequest) -> UserLikeResp:
        """用户偏好算法"""
        logging.getLogger(__name__).info(
            "start call " + "[user_like]" + " api" + "=>" + """用户偏好算法"""
        )
        response = UserLikeResp()
        self._do_twirp_rpc("/activity.v4.Activity/UserLike", request, response)
        logging.getLogger(__name__).info("call " + "[user_like]" + " api success!")
        return response

    @allure.step("""天官赐福-弹幕""")
    def tianguan_danmaku(self, request: EmptyRequest) -> TianguanDanmakuResp:
        """天官赐福-弹幕"""
        logging.getLogger(__name__).info(
            "start call " + "[tianguan_danmaku]" + " api" + "=>" + """天官赐福-弹幕"""
        )
        response = TianguanDanmakuResp()
        self._do_twirp_rpc("/activity.v4.Activity/TianguanDanmaku", request, response)
        logging.getLogger(__name__).info(
            "call " + "[tianguan_danmaku]" + " api success!"
        )
        return response

    @allure.step("""天官赐福-我的投喂""")
    def tianguan_my_danmaku(self, request: EmptyRequest) -> TianguanMyDanmakuResp:
        """天官赐福-我的投喂"""
        logging.getLogger(__name__).info(
            "start call " + "[tianguan_my_danmaku]" + " api" + "=>" + """天官赐福-我的投喂"""
        )
        response = TianguanMyDanmakuResp()
        self._do_twirp_rpc("/activity.v4.Activity/TianguanMyDanmaku", request, response)
        logging.getLogger(__name__).info(
            "call " + "[tianguan_my_danmaku]" + " api success!"
        )
        return response

    @allure.step("""天官赐福-购买福袋""")
    def tianguan_buy(self, request: TianguanBuyReq) -> TianguanBuyResp:
        """天官赐福-购买福袋"""
        logging.getLogger(__name__).info(
            "start call " + "[tianguan_buy]" + " api" + "=>" + """天官赐福-购买福袋"""
        )
        response = TianguanBuyResp()
        self._do_twirp_rpc("/activity.v4.Activity/TianguanBuy", request, response)
        logging.getLogger(__name__).info("call " + "[tianguan_buy]" + " api success!")
        return response

    @allure.step("""天官赐福-我的福袋""")
    def tianguan_my_gift(self, request: EmptyRequest) -> TianguanMyGiftResp:
        """天官赐福-我的福袋"""
        logging.getLogger(__name__).info(
            "start call " + "[tianguan_my_gift]" + " api" + "=>" + """天官赐福-我的福袋"""
        )
        response = TianguanMyGiftResp()
        self._do_twirp_rpc("/activity.v4.Activity/TianguanMyGift", request, response)
        logging.getLogger(__name__).info(
            "call " + "[tianguan_my_gift]" + " api success!"
        )
        return response

    @allure.step("""天官赐福-填写地址""")
    def tianguan_addr(self, request: TianguanAddrReq) -> DefaultResponse:
        """天官赐福-填写地址"""
        logging.getLogger(__name__).info(
            "start call " + "[tianguan_addr]" + " api" + "=>" + """天官赐福-填写地址"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v4.Activity/TianguanAddr", request, response)
        logging.getLogger(__name__).info("call " + "[tianguan_addr]" + " api success!")
        return response

    @allure.step("""天官赐福-领取挂件""")
    def tianguan_rec(self, request: EmptyRequest) -> DefaultResponse:
        """天官赐福-领取挂件"""
        logging.getLogger(__name__).info(
            "start call " + "[tianguan_rec]" + " api" + "=>" + """天官赐福-领取挂件"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v4.Activity/TianguanRec", request, response)
        logging.getLogger(__name__).info("call " + "[tianguan_rec]" + " api success!")
        return response

    @allure.step("""非常酸-首页""")
    def suan_home(self, request: EmptyRequest) -> SuanHomeResp:
        """非常酸-首页"""
        logging.getLogger(__name__).info(
            "start call " + "[suan_home]" + " api" + "=>" + """非常酸-首页"""
        )
        response = SuanHomeResp()
        self._do_twirp_rpc("/activity.v4.Activity/SuanHome", request, response)
        logging.getLogger(__name__).info("call " + "[suan_home]" + " api success!")
        return response

    @allure.step("""非常酸-签到""")
    def suan_sign(self, request: EmptyRequest) -> DefaultResponse:
        """非常酸-签到"""
        logging.getLogger(__name__).info(
            "start call " + "[suan_sign]" + " api" + "=>" + """非常酸-签到"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v4.Activity/SuanSign", request, response)
        logging.getLogger(__name__).info("call " + "[suan_sign]" + " api success!")
        return response

    @allure.step("""非常酸-兑换""")
    def suan_exchange(self, request: SuanExchangeReq) -> DefaultResponse:
        """非常酸-兑换"""
        logging.getLogger(__name__).info(
            "start call " + "[suan_exchange]" + " api" + "=>" + """非常酸-兑换"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v4.Activity/SuanExchange", request, response)
        logging.getLogger(__name__).info("call " + "[suan_exchange]" + " api success!")
        return response

    @allure.step("""弹窗记录""")
    def set_window(self, request: EmptyRequest) -> DefaultResponse:
        """弹窗记录"""
        logging.getLogger(__name__).info(
            "start call " + "[set_window]" + " api" + "=>" + """弹窗记录"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v4.Activity/SetWindow", request, response)
        logging.getLogger(__name__).info("call " + "[set_window]" + " api success!")
        return response

    @allure.step("""今日弹窗""")
    def window(self, request: EmptyRequest) -> WindowResp:
        """今日弹窗"""
        logging.getLogger(__name__).info(
            "start call " + "[window]" + " api" + "=>" + """今日弹窗"""
        )
        response = WindowResp()
        self._do_twirp_rpc("/activity.v4.Activity/Window", request, response)
        logging.getLogger(__name__).info("call " + "[window]" + " api success!")
        return response
