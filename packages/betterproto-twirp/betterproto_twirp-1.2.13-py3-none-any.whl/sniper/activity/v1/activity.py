# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: activity/v1/activity.proto
# plugin: python-betterproto
import logging
from typing import List, Optional

import allure
from dataclasses import dataclass

import betterproto


@dataclass
class ClockInReq(betterproto.Message):
    # 签到类型 0-普通日常签到 1-新手任务签到
    type: int = betterproto.int32_field(1)


@dataclass
class OnGDTAdvertiseCallbackResp(betterproto.Message):
    ret: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)


@dataclass
class OnGDTAdvertiseCallbackReq(betterproto.Message):
    # 广告主在腾讯社交广告（e.qq.com）的账户id
    advertiser_id: int = betterproto.int64_field(1)
    # ⼴告计划id
    campaign_id: str = betterproto.string_field(2)
    # ⼴告id
    adgroup_id: str = betterproto.string_field(3)
    # 创意id
    creative_id: str = betterproto.string_field(4)
    # 设备id，由IMEI（Android应用）md5生成，或是由IDFA（iOS应用）md5生成；
    muid: str = betterproto.string_field(5)
    # Android应用为应用宝移动应用的id，或者iOS应用在Apple App Store的id；创建转化时，需填入此appid
    product_id: int = betterproto.int64_field(6)
    # app类型；取值为 android或ios（联盟Android为unionandroid）；注意是小写；根据广告主在腾讯社交广告（e.qq.com）创
    # 建转化时提交的基本信息关联；
    product_type: str = betterproto.string_field(7)
    # 点击发生的时间，由腾讯社交广告系统生成，取值为标准时间戳，秒级别
    click_time: int = betterproto.int64_field(8)
    # 腾讯社交广告后台生成的点击id，腾讯社交广告系统中标识用户每次点击生成的唯一标识
    click_id: str = betterproto.string_field(9)
    # 应⽤直达url
    deep_link_url: str = betterproto.string_field(10)
    # H5⼴告落地⻚url
    dest_url: str = betterproto.string_field(11)
    # H5⼴告操作系统类型
    device_os_type: str = betterproto.string_field(12)
    # 商品ID
    sku_id: str = betterproto.string_field(13)
    # 广告标题
    adgroup_name: str = betterproto.string_field(14)
    # salt
    salt: str = betterproto.string_field(15)


@dataclass
class ComradePrizeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ComradePrizeData" = betterproto.message_field(3)


@dataclass
class ComradePrizeData(betterproto.Message):
    fp: "ComradePrize" = betterproto.message_field(1)
    coupon: List["ComradePrize"] = betterproto.message_field(2)


@dataclass
class ComradePrize(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    name: str = betterproto.string_field(2)
    face: str = betterproto.string_field(3)


@dataclass
class ComradeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ComradeData" = betterproto.message_field(3)


@dataclass
class ShareComicResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ShareComicInfo" = betterproto.message_field(3)


@dataclass
class ShareComicInfo(betterproto.Message):
    # 获得的积分
    point: int = betterproto.int32_field(1)


@dataclass
class ComradeData(betterproto.Message):
    # 当前时间
    now: str = betterproto.string_field(1)
    # 今日领取状态 0-未领取 1-已领取
    received: int = betterproto.int32_field(2)
    # 是否在活动期间 0-否 1-是
    active: int = betterproto.int32_field(3)
    # 抽奖次数
    lottery: int = betterproto.int32_field(4)
    # 年度大会员 1-是 0-否
    svip: int = betterproto.int32_field(5)


@dataclass
class AniCouponInitResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "AniCouponInitData" = betterproto.message_field(3)


@dataclass
class AniCouponInitData(betterproto.Message):
    # 新用户标识 1-新用户 0-非新用户
    is_new: int = betterproto.int32_field(1)
    # 今日领取数
    rec_num: int = betterproto.int32_field(2)
    # 券列表
    list: List["AniCouponList"] = betterproto.message_field(3)


@dataclass
class AniCouponList(betterproto.Message):
    # 漫读券ID
    coupon_id: int = betterproto.int32_field(1)
    # 库存
    num: int = betterproto.int32_field(2)
    # 领取标志 1-已领取 0-未领取
    received: int = betterproto.int32_field(3)


@dataclass
class AniCouponReq(betterproto.Message):
    # 漫读券ID
    comic_id: int = betterproto.int32_field(1)


@dataclass
class AniCouponResp(betterproto.Message):
    # 503-未登录 504-活动未开始 506-已领2个 507-选择漫画已领取 508-非新用户
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "EmptyData" = betterproto.message_field(3)


@dataclass
class BmoeInitResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "BmoeInitData" = betterproto.message_field(3)


@dataclass
class BmoeInitData(betterproto.Message):
    # 当前时间
    now: str = betterproto.string_field(1)


@dataclass
class BmoeGroupReq(betterproto.Message):
    # 小组编号 1~4
    group: int = betterproto.int32_field(1)


@dataclass
class BmoeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "BmoeData" = betterproto.message_field(3)


@dataclass
class BmoeData(betterproto.Message):
    now: str = betterproto.string_field(1)
    list: List["BmoeList"] = betterproto.message_field(2)


@dataclass
class BmoeList(betterproto.Message):
    # 漫画ID
    comic_id: int = betterproto.int32_field(1)
    # 标题
    title: str = betterproto.string_field(2)
    # 封面
    cover: str = betterproto.string_field(3)
    # 粉丝值
    score: int = betterproto.int64_field(4)
    # 排名
    rank: int = betterproto.int32_field(5)


@dataclass
class SummerFavRankResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["SummerFavData"] = betterproto.message_field(3)


@dataclass
class SummerFavData(betterproto.Message):
    # 漫画ID
    comic_id: int = betterproto.int32_field(1)
    # 战力值
    score: int = betterproto.int32_field(2)
    # 排名
    rank: int = betterproto.int32_field(3)


@dataclass
class SummerRankReq(betterproto.Message):
    id: int = betterproto.int32_field(1)


@dataclass
class SummerRankResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SummerRankData" = betterproto.message_field(3)


@dataclass
class SummerRankData(betterproto.Message):
    myself: "SummerRankList" = betterproto.message_field(1)
    list: List["SummerRankList"] = betterproto.message_field(2)
    # 当前时间 RFC3339
    now: str = betterproto.string_field(3)


@dataclass
class SummerRankList(betterproto.Message):
    # 用户ID
    uid: int = betterproto.int64_field(1)
    # 用户昵称
    name: str = betterproto.string_field(2)
    # 用户头像
    face: str = betterproto.string_field(3)
    # 奖品ID
    prize: int = betterproto.int32_field(4)
    # 贡献值
    score: int = betterproto.int64_field(5)
    # 排名
    rank: int = betterproto.int32_field(6)


@dataclass
class SummerShareReq(betterproto.Message):
    pass


@dataclass
class SummerScoreReq(betterproto.Message):
    pass


@dataclass
class SummerScoreResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SummerScoreData" = betterproto.message_field(3)


@dataclass
class SummerScoreData(betterproto.Message):
    # 当前分
    score: int = betterproto.int32_field(1)
    # 领取状态
    received: List[int] = betterproto.int32_field(2)
    # 今日评论进度
    comment: int = betterproto.int32_field(3)
    # 今日阅读进度
    read: int = betterproto.int32_field(4)
    # 今日分享进度
    share: int = betterproto.int32_field(5)
    # 购买礼包
    gift: int = betterproto.int32_field(6)
    # 追漫活动成长值
    fav: int = betterproto.int32_field(7)
    # 答题活动成长值
    question: int = betterproto.int32_field(8)
    # 直播活动成长值
    live: int = betterproto.int32_field(9)
    # 服务器时间
    now: str = betterproto.string_field(10)


@dataclass
class SummerRewardReq(betterproto.Message):
    # 领取阶段
    number: int = betterproto.int32_field(1)


@dataclass
class SummerRewardResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SummerRewardData" = betterproto.message_field(3)


@dataclass
class SummerRewardData(betterproto.Message):
    pass


@dataclass
class SummerQuestionInitReq(betterproto.Message):
    pass


@dataclass
class SummerQuestionInitResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SummerQuestionInitData" = betterproto.message_field(3)


@dataclass
class SummerQuestionInitData(betterproto.Message):
    # 1-今日已答题
    done: int = betterproto.int32_field(1)
    # 题号(705 706 707 708 709) 0-今天么得题
    qid: int = betterproto.int32_field(2)


@dataclass
class SummerQuestionReq(betterproto.Message):
    # 题号
    qid: int = betterproto.int32_field(1)
    # 用户答案
    answer: List[int] = betterproto.int32_field(2)


@dataclass
class SummerQuestionResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SummerQuestionData" = betterproto.message_field(3)


@dataclass
class SummerQuestionData(betterproto.Message):
    # 奖励 1-积分1 2-积分3 3-你可真机智挂件 4-真相只有一个挂件 5-柯南漫读券
    prizes: List[int] = betterproto.int32_field(1)
    # 全答对 1-全对
    all_correct: int = betterproto.int32_field(2)


@dataclass
class SummerLotteryInitReq(betterproto.Message):
    pass


@dataclass
class SummerLotteryInitResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SummerLotteryInitData" = betterproto.message_field(3)


@dataclass
class SummerLotteryInitData(betterproto.Message):
    # 抽奖次数
    num: int = betterproto.int32_field(1)
    # 奖品编号
    prizes: List[int] = betterproto.int32_field(2)
    # 中奖通知
    notices: List["SummerPrizeShort"] = betterproto.message_field(3)


@dataclass
class SummerDrawReq(betterproto.Message):
    # 仅支持输入 1-单抽 10-十连抽
    num: int = betterproto.int32_field(1)


@dataclass
class SummerDrawResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["SummerPrize"] = betterproto.message_field(3)


@dataclass
class SummerLotteryListReq(betterproto.Message):
    pass


@dataclass
class SummerLotteryListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["SummerPrize"] = betterproto.message_field(3)


@dataclass
class SummerPrizeShort(betterproto.Message):
    # 奖品类型
    type: int = betterproto.int32_field(1)
    # 用户ID
    uid: int = betterproto.int64_field(2)
    # 用户昵称
    name: str = betterproto.string_field(3)


@dataclass
class SummerPrize(betterproto.Message):
    # 唯一标识
    id: int = betterproto.int32_field(1)
    # 奖品类型
    type: int = betterproto.int32_field(2)
    # 姓名
    name: str = betterproto.string_field(3)
    # 地址
    address: str = betterproto.string_field(4)
    # 手机号
    phone: str = betterproto.string_field(5)
    # QQ
    qq: str = betterproto.string_field(6)
    # 中奖时间
    date: str = betterproto.string_field(7)


@dataclass
class SummerGiftReq(betterproto.Message):
    pass


@dataclass
class SummerGiftResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SummerGiftData" = betterproto.message_field(3)


@dataclass
class SummerGiftData(betterproto.Message):
    received: int = betterproto.int32_field(1)


@dataclass
class DuanwuInitReq(betterproto.Message):
    pass


@dataclass
class DuanwuInitResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "DuanInitData" = betterproto.message_field(3)


@dataclass
class DuanInitData(betterproto.Message):
    # 抽奖次数
    num: int = betterproto.int32_field(1)
    # 漫画列表
    list: List["ComicList"] = betterproto.message_field(2)
    # 锦鲤用户ID
    luck_uid: int = betterproto.int64_field(3)
    # 锦鲤用户名
    name: str = betterproto.string_field(4)
    # 锦鲤用户头像
    face: str = betterproto.string_field(5)


@dataclass
class ComicList(betterproto.Message):
    # 漫画ID
    id: int = betterproto.int32_field(1)
    # 漫画标题
    title: str = betterproto.string_field(2)
    # 漫画封面
    cover: str = betterproto.string_field(3)


@dataclass
class DuanwuReq(betterproto.Message):
    pass


@dataclass
class DuanwuResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "DuanwuData" = betterproto.message_field(3)


@dataclass
class DuanwuData(betterproto.Message):
    # 三连 1-三连
    triple: int = betterproto.int32_field(1)
    # 漫读券
    coupons: List["CouponList"] = betterproto.message_field(2)


@dataclass
class CouponList(betterproto.Message):
    # 漫读券ID
    coupon_id: int = betterproto.int32_field(1)
    # 漫画名
    title: str = betterproto.string_field(2)
    # 漫画ID
    comic_id: int = betterproto.int32_field(3)


@dataclass
class SendBuglyReq(betterproto.Message):
    """bugly 信息 json 格式为驼峰，不是下划线分割"""

    # 事件类型 1.每日 Crash 统计: bugly_crash_trend 2.TAG Crash 数据: bugly_tag
    event_type: str = betterproto.string_field(1)
    # 时间戳
    timestamp: int = betterproto.int64_field(2)
    is_encrypt: int = betterproto.int32_field(3)
    event_content: "EventContent" = betterproto.message_field(4)
    signature: str = betterproto.string_field(5)


@dataclass
class EventContent(betterproto.Message):
    datas: List["Bugly"] = betterproto.message_field(1)
    app_id: str = betterproto.string_field(2)
    # 平台
    platform_id: int = betterproto.int32_field(3)
    # app 名称
    app_name: str = betterproto.string_field(4)
    date: str = betterproto.string_field(5)
    app_url: str = betterproto.string_field(6)


@dataclass
class Bugly(betterproto.Message):
    # 联网用户数
    access_user: int = betterproto.int32_field(1)
    # crash 次数
    crash_count: int = betterproto.int32_field(2)
    # crash 影响用户数
    crash_user: int = betterproto.int32_field(3)
    version: str = betterproto.string_field(4)
    url: str = betterproto.string_field(5)
    # 崩溃率
    rate: float = betterproto.double_field(6)


@dataclass
class CouponSetIDReq(betterproto.Message):
    # 模板ID
    set_id: int = betterproto.int32_field(1)


@dataclass
class AnimeFinishPacksResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "AnimeFinishPacksData" = betterproto.message_field(3)


@dataclass
class AnimeFinishPacksData(betterproto.Message):
    # 活动基本状态: 1.正常 2.未登录 3.活动尚未开始 4.活动已经结束 5.不是新用户 6.已领取任意礼包
    status: int = betterproto.int32_field(1)
    # 领取过的礼包ID(模板ID)
    received_id: int = betterproto.int32_field(2)
    packs: List["AnimeFinishPack"] = betterproto.message_field(3)


@dataclass
class AnimeFinishPack(betterproto.Message):
    # 漫画封面
    cover: str = betterproto.string_field(1)
    # 漫画标题
    title: str = betterproto.string_field(2)
    # 领取状态: 1.可领取 2.没有追番 3.基本条件不符(活动基本状态不符)
    status: int = betterproto.int32_field(3)
    # 漫画ID
    comic_id: int = betterproto.int32_field(4)
    # 礼包ID(模板ID)
    set_id: int = betterproto.int32_field(5)
    # 是否完结 1:是 0:否 -1:未开刊
    is_finish: int = betterproto.int32_field(12)


@dataclass
class DiscountComics(betterproto.Message):
    comic_id: int = betterproto.int32_field(1)
    comic_title: str = betterproto.string_field(2)
    default_cover: str = betterproto.string_field(3)
    # 如果是彩蛋漫画，此处显示的是第几本漫画，从1开始。其他打折书籍此处显示0
    order: int = betterproto.int32_field(4)
    # 彩蛋书籍，0表示未开启打折，1表示正在打折，2表示已经过了打折时间
    is_discount: int = betterproto.int32_field(5)
    # 彩蛋漫画打折剩余时间
    time: float = betterproto.float_field(6)


@dataclass
class RedeemCouponInfo(betterproto.Message):
    id: int = betterproto.int32_field(1)
    uid: int = betterproto.int64_field(2)
    # 类型：1-通用券 2-专属券
    type: int = betterproto.int32_field(3)
    # 获取原因，1.大会员特权、2.资深用户福利、3.大会员福利、4.预约福利
    reason: int = betterproto.int32_field(4)
    # 总数量
    amount: int = betterproto.int32_field(5)
    # 可用数量
    remain_amount: int = betterproto.int32_field(6)
    # 限定范围
    limit_scope: str = betterproto.string_field(7)
    # 过期时间 格式 2006-01-02 15:04:05
    expire_time: str = betterproto.string_field(8)
    # 发放时间 格式 2006-01-02 15:04:05
    create_time: str = betterproto.string_field(9)
    # 类型描述
    type_title: str = betterproto.string_field(10)


@dataclass
class RedeemCouponResp(betterproto.Message):
    # 1-兑换码不正确 2-兑换码已被使用 3-该兑换码无法兑换 4-该兑换码已过期 5-该兑换码的漫读券仅能获得一次
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    # 领取的劵信息
    data: List["RedeemCouponInfo"] = betterproto.message_field(3)


@dataclass
class RedeemCouponReq(betterproto.Message):
    # 兑换码
    code: str = betterproto.string_field(1)


@dataclass
class WxJSAPISignatureReq(betterproto.Message):
    url: str = betterproto.string_field(1)


@dataclass
class WxJSAPISignatureResp(betterproto.Message):
    # 0: 正常，1: 缓存未命中
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "WxJSAPISignature" = betterproto.message_field(3)


@dataclass
class WxJSAPISignature(betterproto.Message):
    appid: str = betterproto.string_field(1)
    timestamp: int = betterproto.int64_field(2)
    noncestr: str = betterproto.string_field(3)
    signature: str = betterproto.string_field(4)


@dataclass
class BuyCouponProductReq(betterproto.Message):
    count: int = betterproto.int32_field(1)
    pay_amount: int = betterproto.int64_field(2)


@dataclass
class GetPointOrdersReq(betterproto.Message):
    # 页码
    page_num: int = betterproto.int32_field(1)
    # 条目数
    page_size: int = betterproto.int32_field(2)
    # 年份 范围 >= 2019; 范围<= 当前年份，不传该参数默认为当前年份
    order_year: int = betterproto.int32_field(3)


@dataclass
class GetPointOrdersResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["PointOrder"] = betterproto.message_field(3)


@dataclass
class PointOrder(betterproto.Message):
    # 订单标题
    order_title: str = betterproto.string_field(1)
    # 兑换的商品数量
    count: int = betterproto.int32_field(2)
    # 兑换的商品花费
    pay_amount: int = betterproto.int64_field(3)
    # 订单创建时间(+0800) 格式: "2006-01-02 15:04:05"
    ctime: str = betterproto.string_field(4)


@dataclass
class CouponPointShopResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "CouponPointShopData" = betterproto.message_field(3)


@dataclass
class CouponPointShopData(betterproto.Message):
    # 若用户已登录，返回剩余积分, 默认为0(0值不代表未登录, 客户端需自行判断)
    remain_point: int = betterproto.int64_field(1)
    # 劵商品剩余数量
    remain_amount: int = betterproto.int32_field(2)
    # 劵商品总量
    total_amount: int = betterproto.int32_field(3)
    # 劵商品单价
    cost: int = betterproto.int32_field(4)


@dataclass
class DefaultResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "EmptyData" = betterproto.message_field(3)


@dataclass
class EmptyData(betterproto.Message):
    pass


@dataclass
class AppOrderReq(betterproto.Message):
    phone: str = betterproto.string_field(1)


@dataclass
class EmptyRequest(betterproto.Message):
    pass


@dataclass
class OrderCntResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: int = betterproto.int32_field(3)


@dataclass
class LuckyTimesResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    # 抽奖次数
    data: int = betterproto.int32_field(3)


@dataclass
class LuckyDrawResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "LuckyDrawData" = betterproto.message_field(3)


@dataclass
class LuckyDrawData(betterproto.Message):
    # 奖品编号 0-谢谢参与 1-漫读券*1 2-漫读券*10 3-漫读券*100 4-随机手办 5-PS4 6-NS 7-iPhone
    type: int = betterproto.int32_field(1)
    # 奖品唯一识别号
    id: int = betterproto.int32_field(2)


@dataclass
class ShareResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    # 当前抽奖次数
    data: int = betterproto.int32_field(3)


@dataclass
class MyPrizeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    # 奖品列表
    data: List["MyPrizeData"] = betterproto.message_field(3)


@dataclass
class MyPrizeData(betterproto.Message):
    # 唯一ID
    id: int = betterproto.int32_field(1)
    # 奖品编号 1-漫读券*1 2-漫读券*10 3-漫读券*100 4-随机手办 5-PS4 6-NS 7-iPhone
    type: int = betterproto.int32_field(2)
    # 获奖时间 RFC3339
    time: str = betterproto.string_field(3)
    # 姓名
    name: str = betterproto.string_field(4)
    # 电话
    phone: str = betterproto.string_field(5)
    # QQ
    qq: str = betterproto.string_field(6)
    # 地址
    address: str = betterproto.string_field(7)


@dataclass
class AddressReq(betterproto.Message):
    # 唯一ID
    id: int = betterproto.int32_field(1)
    # 姓名
    name: str = betterproto.string_field(4)
    # 电话
    phone: str = betterproto.string_field(5)
    # QQ
    qq: str = betterproto.string_field(6)
    # 地址
    address: str = betterproto.string_field(7)


@dataclass
class AwardListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    # 获奖列表
    data: List["AwardListData"] = betterproto.message_field(3)


@dataclass
class AwardListData(betterproto.Message):
    # 用户昵称
    nick_name: str = betterproto.string_field(1)
    # 奖品编号 1-漫读券*1 2-漫读券*10 3-漫读券*100 4-随机手办 5-PS4 6-NS 7-iPhone
    prize_type: int = betterproto.int32_field(2)


@dataclass
class UserClockInResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "UserClockIn" = betterproto.message_field(3)


@dataclass
class UserClockIn(betterproto.Message):
    # 连续签到天数
    day_count: int = betterproto.int32_field(1)
    # 今天签到状态 0-未签 1-已签
    status: int = betterproto.int32_field(2)
    # 积分列表
    points: List[int] = betterproto.int32_field(3)
    # 积分图标
    credit_icon: str = betterproto.string_field(4)
    # 签到前图标
    sign_before_icon: str = betterproto.string_field(5)
    # 今日签到图
    sign_today_icon: str = betterproto.string_field(6)
    # 呼吸特效图
    breathe_icon: str = betterproto.string_field(7)
    # 积分详情列表
    point_infos: List["PointInfo"] = betterproto.message_field(8)
    # 大于 10 积分的图标
    new_credit_x_icon: str = betterproto.string_field(9)
    # 券
    coupon_pic: str = betterproto.string_field(10)


@dataclass
class PointInfo(betterproto.Message):
    # 实际积分
    point: int = betterproto.int32_field(1)
    # 原始积分
    origin_point: int = betterproto.int32_field(2)
    # 是否在活动中
    is_activity: bool = betterproto.bool_field(3)
    # 标题
    title: str = betterproto.string_field(4)


@dataclass
class PointIncomeRequest(betterproto.Message):
    # 页码
    page_num: int = betterproto.int32_field(1)
    # 条目数
    page_size: int = betterproto.int32_field(2)


@dataclass
class PointIncomeListResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    # 积分入账列表
    data: List["PointIncomeDetail"] = betterproto.message_field(3)


@dataclass
class PointIncomeDetail(betterproto.Message):
    # 任务标题
    task_title: str = betterproto.string_field(1)
    # 任务完成时间
    task_time: str = betterproto.string_field(2)
    # 任务获得积分
    point: int = betterproto.int32_field(3)


@dataclass
class UserTaskResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["UserTask"] = betterproto.message_field(3)


@dataclass
class UserTask(betterproto.Message):
    # 任务标题
    title: str = betterproto.string_field(1)
    # 任务可获得积分
    point: int = betterproto.int32_field(2)
    # 任务完成状态 0:未完成 1:已完成
    status: int = betterproto.int32_field(3)


@dataclass
class ReadTaskRequest(betterproto.Message):
    # 累计阅读时长 单位:分钟 时长范围 >5 ; 时长范围 <= 1440
    read_minute: int = betterproto.int32_field(1)


@dataclass
class ReadTaskResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["ReadTask"] = betterproto.message_field(3)


@dataclass
class ReadTask(betterproto.Message):
    # 标题
    title: str = betterproto.string_field(1)
    # 累计阅读时长 分钟
    minute: int = betterproto.int32_field(2)
    # 获得积分
    point: int = betterproto.int32_field(3)


@dataclass
class RecievedCouponResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "RecievedCoupon" = betterproto.message_field(3)


@dataclass
class RecievedCoupon(betterproto.Message):
    # 漫读券数量
    amount: int = betterproto.int32_field(1)
    # 下载福利领取时间 格式 "2019-01-01 09:12:10"
    receive_time: str = betterproto.string_field(2)


@dataclass
class GetWelfareReq(betterproto.Message):
    # 福利周第几轮活动,1代表第一轮，总共三轮活动
    order: int = betterproto.int32_field(1)


@dataclass
class GetWelfareResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["WelfareBookShelf"] = betterproto.message_field(3)


@dataclass
class WelfareBookShelf(betterproto.Message):
    # 漫画id
    comic_id: int = betterproto.int32_field(1)
    # 漫画标题
    title: str = betterproto.string_field(2)
    # 漫画有效购买的数量
    pay_amount: int = betterproto.int32_field(3)
    # 漫画默认封面
    default_cover: str = betterproto.string_field(4)
    # 0:可以兑换 1:不能兑换 2:尚未登陆
    status: int = betterproto.int32_field(5)


@dataclass
class WelfareCouponReq(betterproto.Message):
    # 漫画id
    comic_id: int = betterproto.int32_field(1)


@dataclass
class WelfareCouponResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "GoldEpisode" = betterproto.message_field(3)


@dataclass
class GoldEpisode(betterproto.Message):
    # 兑换的券数
    number: int = betterproto.int32_field(1)


@dataclass
class ComicPrizeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["ComicPrizePool"] = betterproto.message_field(3)


@dataclass
class ComicPrizePool(betterproto.Message):
    # 漫画id
    comic_id: int = betterproto.int32_field(1)
    # 漫画封面
    default_cover: str = betterproto.string_field(2)
    # 漫画标题
    comic_title: str = betterproto.string_field(3)


@dataclass
class SlotMachineResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SlotMachine" = betterproto.message_field(3)


@dataclass
class SlotMachine(betterproto.Message):
    # 漫画id
    left_comic_id: int = betterproto.int32_field(1)
    middle_comic_id: int = betterproto.int32_field(2)
    right_comic_id: int = betterproto.int32_field(3)


@dataclass
class LuckyGuyResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "LuckyGuy" = betterproto.message_field(3)


@dataclass
class LuckyGuy(betterproto.Message):
    # 抽奖次数
    lucky_times: int = betterproto.int32_field(1)
    # 欧皇uid,0表示当前无欧皇
    uid: int = betterproto.int64_field(2)
    # 欧皇昵称
    nick_name: str = betterproto.string_field(3)
    # 欧皇头像
    face: str = betterproto.string_field(4)


@dataclass
class LaborTimesResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "LaborTimeData" = betterproto.message_field(3)


@dataclass
class LaborTimeData(betterproto.Message):
    num: int = betterproto.int32_field(1)


@dataclass
class LaborDrawResp(betterproto.Message):
    # 504-活动未开始 505-已达上限 506-次数为0
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "LaborDrawData" = betterproto.message_field(3)


@dataclass
class LaborDrawData(betterproto.Message):
    # 奖品编号
    type: int = betterproto.int32_field(1)
    # 奖品唯一识别号
    id: int = betterproto.int32_field(2)
    # 文案
    text: str = betterproto.string_field(3)


@dataclass
class LaborCouponReq(betterproto.Message):
    # 优惠券ID
    coupon_ids: List[int] = betterproto.int32_field(1)


@dataclass
class LaborCouponResp(betterproto.Message):
    # 506-今日已领
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "EmptyData" = betterproto.message_field(3)


@dataclass
class ActivityOrderResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ActivityOrder" = betterproto.message_field(3)


@dataclass
class ActivityOrder(betterproto.Message):
    # 当前活动轮数
    order: int = betterproto.int32_field(1)


@dataclass
class PokemonTimesResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "PokemonTimesData" = betterproto.message_field(3)


@dataclass
class PokemonTimesData(betterproto.Message):
    num: int = betterproto.int32_field(1)


@dataclass
class PokemonDrawReq(betterproto.Message):
    # 抽奖次数 目前只支持1和10
    num: int = betterproto.int32_field(1)


@dataclass
class PokemonDrawResp(betterproto.Message):
    # 504-活动未开始 506-次数为0
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["PokemonDrawData"] = betterproto.message_field(3)


@dataclass
class PokemonDrawData(betterproto.Message):
    # 奖品编号
    type: int = betterproto.int32_field(1)
    # 奖品唯一识别号
    id: int = betterproto.int32_field(2)
    # 文案
    text: str = betterproto.string_field(3)


@dataclass
class GenShortURLReq(betterproto.Message):
    # 待转换的长连接
    url: str = betterproto.string_field(1)


@dataclass
class GenShortURLResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "GenShortURLData" = betterproto.message_field(3)


@dataclass
class GenShortURLData(betterproto.Message):
    # 短链接
    url: str = betterproto.string_field(1)


@dataclass
class OnAdvertiseCallbackReq(betterproto.Message):
    # 用于追踪来源广告的追踪ID
    track_id: str = betterproto.string_field(1)
    # B 站创意ID
    creative_id: str = betterproto.string_field(2)
    # 客户端操作系统, 具体见文档
    os: int = betterproto.int32_field(3)
    # 用户终端的IMEI
    imei: str = betterproto.string_field(4)
    # 用户终端的eth0接口的MAC地址
    mac1: str = betterproto.string_field(5)
    # iOS IDFA适用于iOS6及以上
    idfa: str = betterproto.string_field(6)
    # Android Advertising ID
    aaid: str = betterproto.string_field(7)
    # 用户终端的 Android ID
    android_id: str = betterproto.string_field(8)
    # 投放系统服务器观察到的用户远程IP
    ip: str = betterproto.string_field(9)
    # 数据上报终端设备的User Agent
    ua: str = betterproto.string_field(10)
    # 客户端触发监测的时间(UTC 时间戳，自1970年起的毫秒数)
    ts: int = betterproto.int64_field(11)


class ActivityStub(betterproto.ServiceStub):
    """活动服务(非广义上的活动, 包括许多非核心业务)"""

    @allure.step("""接收广告回调""")
    def on_advertise_callback(self, request: OnAdvertiseCallbackReq) -> DefaultResponse:
        """接收广告回调"""
        logging.getLogger(__name__).info(
            "start call " + "[on_advertise_callback]" + " api" + "=>" + """接收广告回调"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc(
            "/activity.v1.Activity/OnAdvertiseCallback", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[on_advertise_callback]" + " api success!"
        )
        return response

    @allure.step("""接收广点通广告回调""")
    def on_g_d_t_advertise_callback(
        self, request: OnGDTAdvertiseCallbackReq
    ) -> OnGDTAdvertiseCallbackResp:
        """接收广点通广告回调"""
        logging.getLogger(__name__).info(
            "start call "
            + "[on_g_d_t_advertise_callback]"
            + " api"
            + "=>"
            + """接收广点通广告回调"""
        )
        response = OnGDTAdvertiseCallbackResp()
        self._do_twirp_rpc(
            "/activity.v1.Activity/OnGDTAdvertiseCallback", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[on_g_d_t_advertise_callback]" + " api success!"
        )
        return response

    @allure.step("""转发 bugly 崩溃率数据到企业微信""")
    def send_bugly_message(self, request: SendBuglyReq) -> DefaultResponse:
        """转发 bugly 崩溃率数据到企业微信"""
        logging.getLogger(__name__).info(
            "start call "
            + "[send_bugly_message]"
            + " api"
            + "=>"
            + """转发 bugly 崩溃率数据到企业微信"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v1.Activity/SendBuglyMessage", request, response)
        logging.getLogger(__name__).info(
            "call " + "[send_bugly_message]" + " api success!"
        )
        return response

    @allure.step("""获取微信jsapi签名""")
    def get_wx_j_s_a_p_i_signature(
        self, request: WxJSAPISignatureReq
    ) -> WxJSAPISignatureResp:
        """获取微信jsapi签名"""
        logging.getLogger(__name__).info(
            "start call "
            + "[get_wx_j_s_a_p_i_signature]"
            + " api"
            + "=>"
            + """获取微信jsapi签名"""
        )
        response = WxJSAPISignatureResp()
        self._do_twirp_rpc(
            "/activity.v1.Activity/GetWxJSAPISignature", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[get_wx_j_s_a_p_i_signature]" + " api success!"
        )
        return response

    @allure.step("""生成短链""")
    def gen_short_u_r_l(self, request: GenShortURLReq) -> GenShortURLResp:
        """生成短链"""
        logging.getLogger(__name__).info(
            "start call " + "[gen_short_u_r_l]" + " api" + "=>" + """生成短链"""
        )
        response = GenShortURLResp()
        self._do_twirp_rpc("/activity.v1.Activity/GenShortURL", request, response)
        logging.getLogger(__name__).info(
            "call " + "[gen_short_u_r_l]" + " api success!"
        )
        return response

    @allure.step("""B漫番剧完结拉新活动: 获取番剧完结礼包列表""")
    def get_anime_finish_packs(self, request: EmptyRequest) -> AnimeFinishPacksResp:
        """B漫番剧完结拉新活动: 获取番剧完结礼包列表"""
        logging.getLogger(__name__).info(
            "start call "
            + "[get_anime_finish_packs]"
            + " api"
            + "=>"
            + """B漫番剧完结拉新活动: 获取番剧完结礼包列表"""
        )
        response = AnimeFinishPacksResp()
        self._do_twirp_rpc(
            "/activity.v1.Activity/GetAnimeFinishPacks", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[get_anime_finish_packs]" + " api success!"
        )
        return response

    @allure.step("""抽奖次数""")
    def lucky_times(self, request: EmptyRequest) -> LuckyTimesResp:
        """抽奖次数"""
        logging.getLogger(__name__).info(
            "start call " + "[lucky_times]" + " api" + "=>" + """抽奖次数"""
        )
        response = LuckyTimesResp()
        self._do_twirp_rpc("/activity.v1.Activity/LuckyTimes", request, response)
        logging.getLogger(__name__).info("call " + "[lucky_times]" + " api success!")
        return response

    @allure.step("""抽奖""")
    def luck_draw(self, request: EmptyRequest) -> LuckyDrawResp:
        """抽奖"""
        logging.getLogger(__name__).info(
            "start call " + "[luck_draw]" + " api" + "=>" + """抽奖"""
        )
        response = LuckyDrawResp()
        self._do_twirp_rpc("/activity.v1.Activity/LuckDraw", request, response)
        logging.getLogger(__name__).info("call " + "[luck_draw]" + " api success!")
        return response

    @allure.step("""分享接口""")
    def share(self, request: EmptyRequest) -> ShareResp:
        """分享接口"""
        logging.getLogger(__name__).info(
            "start call " + "[share]" + " api" + "=>" + """分享接口"""
        )
        response = ShareResp()
        self._do_twirp_rpc("/activity.v1.Activity/Share", request, response)
        logging.getLogger(__name__).info("call " + "[share]" + " api success!")
        return response

    @allure.step("""我的奖品""")
    def my_prize(self, request: EmptyRequest) -> MyPrizeResp:
        """我的奖品"""
        logging.getLogger(__name__).info(
            "start call " + "[my_prize]" + " api" + "=>" + """我的奖品"""
        )
        response = MyPrizeResp()
        self._do_twirp_rpc("/activity.v1.Activity/MyPrize", request, response)
        logging.getLogger(__name__).info("call " + "[my_prize]" + " api success!")
        return response

    @allure.step("""填写地址""")
    def address(self, request: AddressReq) -> DefaultResponse:
        """填写地址"""
        logging.getLogger(__name__).info(
            "start call " + "[address]" + " api" + "=>" + """填写地址"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v1.Activity/Address", request, response)
        logging.getLogger(__name__).info("call " + "[address]" + " api success!")
        return response

    @allure.step("""获奖名单""")
    def award_list(self, request: EmptyRequest) -> AwardListResp:
        """获奖名单"""
        logging.getLogger(__name__).info(
            "start call " + "[award_list]" + " api" + "=>" + """获奖名单"""
        )
        response = AwardListResp()
        self._do_twirp_rpc("/activity.v1.Activity/AwardList", request, response)
        logging.getLogger(__name__).info("call " + "[award_list]" + " api success!")
        return response

    @allure.step("""用户签到""")
    def clock_in(self, request: ClockInReq) -> DefaultResponse:
        """用户签到"""
        logging.getLogger(__name__).info(
            "start call " + "[clock_in]" + " api" + "=>" + """用户签到"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v1.Activity/ClockIn", request, response)
        logging.getLogger(__name__).info("call " + "[clock_in]" + " api success!")
        return response

    @allure.step("""获取签到信息""")
    def get_clock_in_info(self, request: EmptyRequest) -> UserClockInResponse:
        """获取签到信息"""
        logging.getLogger(__name__).info(
            "start call " + "[get_clock_in_info]" + " api" + "=>" + """获取签到信息"""
        )
        response = UserClockInResponse()
        self._do_twirp_rpc("/activity.v1.Activity/GetClockInInfo", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_clock_in_info]" + " api success!"
        )
        return response

    @allure.step("""商城(漫读劵)展示接口: h5临时用，待积分商城上线后会下线""")
    def get_coupon_point_shop(self, request: EmptyRequest) -> CouponPointShopResp:
        """商城(漫读劵)展示接口: h5临时用，待积分商城上线后会下线"""
        logging.getLogger(__name__).info(
            "start call "
            + "[get_coupon_point_shop]"
            + " api"
            + "=>"
            + """商城(漫读劵)展示接口: h5临时用，待积分商城上线后会下线"""
        )
        response = CouponPointShopResp()
        self._do_twirp_rpc(
            "/activity.v1.Activity/GetCouponPointShop", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[get_coupon_point_shop]" + " api success!"
        )
        return response

    @allure.step(
        """
        积分兑换漫读劵: h5临时用，待积分商城上线后会下线 code: 0.成功, 1.失败:积分不够, 2.失败:库存不够, 3.失败:积分不匹配
        """
    )
    def buy_coupon_product(self, request: BuyCouponProductReq) -> DefaultResponse:
        """
        积分兑换漫读劵: h5临时用，待积分商城上线后会下线 code: 0.成功, 1.失败:积分不够, 2.失败:库存不够, 3.失败:积分不匹配
        """
        logging.getLogger(__name__).info(
            "start call "
            + "[buy_coupon_product]"
            + " api"
            + "=>"
            + """
        积分兑换漫读劵: h5临时用，待积分商城上线后会下线 code: 0.成功, 1.失败:积分不够, 2.失败:库存不够, 3.失败:积分不匹配
        """
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v1.Activity/BuyCouponProduct", request, response)
        logging.getLogger(__name__).info(
            "call " + "[buy_coupon_product]" + " api success!"
        )
        return response

    @allure.step("""积分入账列表""")
    def get_point_income_list(
        self, request: PointIncomeRequest
    ) -> PointIncomeListResponse:
        """积分入账列表"""
        logging.getLogger(__name__).info(
            "start call " + "[get_point_income_list]" + " api" + "=>" + """积分入账列表"""
        )
        response = PointIncomeListResponse()
        self._do_twirp_rpc(
            "/activity.v1.Activity/GetPointIncomeList", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[get_point_income_list]" + " api success!"
        )
        return response

    @allure.step("""用户积分商城消费订单(需登录)""")
    def get_point_orders(self, request: GetPointOrdersReq) -> GetPointOrdersResp:
        """用户积分商城消费订单(需登录)"""
        logging.getLogger(__name__).info(
            "start call " + "[get_point_orders]" + " api" + "=>" + """用户积分商城消费订单(需登录)"""
        )
        response = GetPointOrdersResp()
        self._do_twirp_rpc("/activity.v1.Activity/GetPointOrders", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_point_orders]" + " api success!"
        )
        return response

    @allure.step("""分享漫画""")
    def share_comic(self, request: EmptyRequest) -> ShareComicResp:
        """分享漫画"""
        logging.getLogger(__name__).info(
            "start call " + "[share_comic]" + " api" + "=>" + """分享漫画"""
        )
        response = ShareComicResp()
        self._do_twirp_rpc("/activity.v1.Activity/ShareComic", request, response)
        logging.getLogger(__name__).info("call " + "[share_comic]" + " api success!")
        return response

    @allure.step("""获取任务列表""")
    def get_task_list(self, request: EmptyRequest) -> UserTaskResponse:
        """获取任务列表"""
        logging.getLogger(__name__).info(
            "start call " + "[get_task_list]" + " api" + "=>" + """获取任务列表"""
        )
        response = UserTaskResponse()
        self._do_twirp_rpc("/activity.v1.Activity/GetTaskList", request, response)
        logging.getLogger(__name__).info("call " + "[get_task_list]" + " api success!")
        return response

    @allure.step(
        """
        兑换码兑换漫读券(兑换码长度18位) code: 0.成功, 1.兑换失败(兑换码过期 or 不存在 or 已兑换), 2.长度不符
        """
    )
    def redeem_coupon(self, request: RedeemCouponReq) -> RedeemCouponResp:
        """
        兑换码兑换漫读券(兑换码长度18位) code: 0.成功, 1.兑换失败(兑换码过期 or 不存在 or 已兑换), 2.长度不符
        """
        logging.getLogger(__name__).info(
            "start call "
            + "[redeem_coupon]"
            + " api"
            + "=>"
            + """
        兑换码兑换漫读券(兑换码长度18位) code: 0.成功, 1.兑换失败(兑换码过期 or 不存在 or 已兑换), 2.长度不符
        """
        )
        response = RedeemCouponResp()
        self._do_twirp_rpc("/activity.v1.Activity/RedeemCoupon", request, response)
        logging.getLogger(__name__).info("call " + "[redeem_coupon]" + " api success!")
        return response

    @allure.step("""用户领取下载福利""")
    def get_download_coupon(self, request: EmptyRequest) -> RecievedCouponResponse:
        """用户领取下载福利"""
        logging.getLogger(__name__).info(
            "start call " + "[get_download_coupon]" + " api" + "=>" + """用户领取下载福利"""
        )
        response = RecievedCouponResponse()
        self._do_twirp_rpc("/activity.v1.Activity/GetDownloadCoupon", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_download_coupon]" + " api success!"
        )
        return response

    @allure.step("""福利周活动查询书单及购买次数""")
    def get_comic_buy_records(self, request: GetWelfareReq) -> GetWelfareResp:
        """福利周活动查询书单及购买次数"""
        logging.getLogger(__name__).info(
            "start call "
            + "[get_comic_buy_records]"
            + " api"
            + "=>"
            + """福利周活动查询书单及购买次数"""
        )
        response = GetWelfareResp()
        self._do_twirp_rpc(
            "/activity.v1.Activity/GetComicBuyRecords", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[get_comic_buy_records]" + " api success!"
        )
        return response

    @allure.step("""福利周活动兑换券 0表示兑换成功 1表示兑换失败""")
    def get_welfare_coupon(self, request: WelfareCouponReq) -> WelfareCouponResp:
        """福利周活动兑换券 0表示兑换成功 1表示兑换失败"""
        logging.getLogger(__name__).info(
            "start call "
            + "[get_welfare_coupon]"
            + " api"
            + "=>"
            + """福利周活动兑换券 0表示兑换成功 1表示兑换失败"""
        )
        response = WelfareCouponResp()
        self._do_twirp_rpc("/activity.v1.Activity/GetWelfareCoupon", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_welfare_coupon]" + " api success!"
        )
        return response

    @allure.step("""福利周抽奖活动奖池""")
    def get_prize_pool(self, request: EmptyRequest) -> ComicPrizeResp:
        """福利周抽奖活动奖池"""
        logging.getLogger(__name__).info(
            "start call " + "[get_prize_pool]" + " api" + "=>" + """福利周抽奖活动奖池"""
        )
        response = ComicPrizeResp()
        self._do_twirp_rpc("/activity.v1.Activity/GetPrizePool", request, response)
        logging.getLogger(__name__).info("call " + "[get_prize_pool]" + " api success!")
        return response

    @allure.step("""福利周活动抽奖 0表示抽奖成功，1表示抽奖失败""")
    def slot_machine(self, request: EmptyRequest) -> SlotMachineResp:
        """福利周活动抽奖 0表示抽奖成功，1表示抽奖失败"""
        logging.getLogger(__name__).info(
            "start call "
            + "[slot_machine]"
            + " api"
            + "=>"
            + """福利周活动抽奖 0表示抽奖成功，1表示抽奖失败"""
        )
        response = SlotMachineResp()
        self._do_twirp_rpc("/activity.v1.Activity/SlotMachine", request, response)
        logging.getLogger(__name__).info("call " + "[slot_machine]" + " api success!")
        return response

    @allure.step("""查询福利周活动抽奖次数和欧皇""")
    def get_lucky_info(self, request: EmptyRequest) -> LuckyGuyResp:
        """查询福利周活动抽奖次数和欧皇"""
        logging.getLogger(__name__).info(
            "start call " + "[get_lucky_info]" + " api" + "=>" + """查询福利周活动抽奖次数和欧皇"""
        )
        response = LuckyGuyResp()
        self._do_twirp_rpc("/activity.v1.Activity/GetLuckyInfo", request, response)
        logging.getLogger(__name__).info("call " + "[get_lucky_info]" + " api success!")
        return response

    @allure.step("""查询当前时间处于活动第几轮""")
    def get_activity_order(self, request: EmptyRequest) -> ActivityOrderResp:
        """查询当前时间处于活动第几轮"""
        logging.getLogger(__name__).info(
            "start call " + "[get_activity_order]" + " api" + "=>" + """查询当前时间处于活动第几轮"""
        )
        response = ActivityOrderResp()
        self._do_twirp_rpc("/activity.v1.Activity/GetActivityOrder", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_activity_order]" + " api success!"
        )
        return response

    @allure.step("""五一抽奖次数""")
    def labor_times(self, request: EmptyRequest) -> LaborTimesResp:
        """五一抽奖次数"""
        logging.getLogger(__name__).info(
            "start call " + "[labor_times]" + " api" + "=>" + """五一抽奖次数"""
        )
        response = LaborTimesResp()
        self._do_twirp_rpc("/activity.v1.Activity/LaborTimes", request, response)
        logging.getLogger(__name__).info("call " + "[labor_times]" + " api success!")
        return response

    @allure.step("""五一抽奖""")
    def labor_draw(self, request: EmptyRequest) -> LaborDrawResp:
        """五一抽奖"""
        logging.getLogger(__name__).info(
            "start call " + "[labor_draw]" + " api" + "=>" + """五一抽奖"""
        )
        response = LaborDrawResp()
        self._do_twirp_rpc("/activity.v1.Activity/LaborDraw", request, response)
        logging.getLogger(__name__).info("call " + "[labor_draw]" + " api success!")
        return response

    @allure.step("""五一领券""")
    def labor_coupon(self, request: LaborCouponReq) -> LaborCouponResp:
        """五一领券"""
        logging.getLogger(__name__).info(
            "start call " + "[labor_coupon]" + " api" + "=>" + """五一领券"""
        )
        response = LaborCouponResp()
        self._do_twirp_rpc("/activity.v1.Activity/LaborCoupon", request, response)
        logging.getLogger(__name__).info("call " + "[labor_coupon]" + " api success!")
        return response

    @allure.step("""宝可梦抽奖""")
    def pokemon_times(self, request: EmptyRequest) -> PokemonTimesResp:
        """宝可梦抽奖"""
        logging.getLogger(__name__).info(
            "start call " + "[pokemon_times]" + " api" + "=>" + """宝可梦抽奖"""
        )
        response = PokemonTimesResp()
        self._do_twirp_rpc("/activity.v1.Activity/PokemonTimes", request, response)
        logging.getLogger(__name__).info("call " + "[pokemon_times]" + " api success!")
        return response

    @allure.step("""宝可梦抽奖次数""")
    def pokemon_draw(self, request: PokemonDrawReq) -> PokemonDrawResp:
        """宝可梦抽奖次数"""
        logging.getLogger(__name__).info(
            "start call " + "[pokemon_draw]" + " api" + "=>" + """宝可梦抽奖次数"""
        )
        response = PokemonDrawResp()
        self._do_twirp_rpc("/activity.v1.Activity/PokemonDraw", request, response)
        logging.getLogger(__name__).info("call " + "[pokemon_draw]" + " api success!")
        return response

    @allure.step("""端午节抽奖-初始化""")
    def duanwu_init(self, request: DuanwuInitReq) -> DuanwuInitResp:
        """端午节抽奖-初始化"""
        logging.getLogger(__name__).info(
            "start call " + "[duanwu_init]" + " api" + "=>" + """端午节抽奖-初始化"""
        )
        response = DuanwuInitResp()
        self._do_twirp_rpc("/activity.v1.Activity/DuanwuInit", request, response)
        logging.getLogger(__name__).info("call " + "[duanwu_init]" + " api success!")
        return response

    @allure.step("""端午抽奖""")
    def duanwu(self, request: DuanwuReq) -> DuanwuResp:
        """端午抽奖"""
        logging.getLogger(__name__).info(
            "start call " + "[duanwu]" + " api" + "=>" + """端午抽奖"""
        )
        response = DuanwuResp()
        self._do_twirp_rpc("/activity.v1.Activity/Duanwu", request, response)
        logging.getLogger(__name__).info("call " + "[duanwu]" + " api success!")
        return response

    @allure.step("""送券福利周""")
    def summer_coupon(self, request: EmptyRequest) -> DefaultResponse:
        """送券福利周"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_coupon]" + " api" + "=>" + """送券福利周"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v1.Activity/SummerCoupon", request, response)
        logging.getLogger(__name__).info("call " + "[summer_coupon]" + " api success!")
        return response

    @allure.step("""暑期一元礼包""")
    def summer_gift(self, request: SummerGiftReq) -> SummerGiftResp:
        """暑期一元礼包"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_gift]" + " api" + "=>" + """暑期一元礼包"""
        )
        response = SummerGiftResp()
        self._do_twirp_rpc("/activity.v1.Activity/SummerGift", request, response)
        logging.getLogger(__name__).info("call " + "[summer_gift]" + " api success!")
        return response

    @allure.step("""暑假抽奖首页""")
    def summer_lottery_init(
        self, request: SummerLotteryInitReq
    ) -> SummerLotteryInitResp:
        """暑假抽奖首页"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_lottery_init]" + " api" + "=>" + """暑假抽奖首页"""
        )
        response = SummerLotteryInitResp()
        self._do_twirp_rpc("/activity.v1.Activity/SummerLotteryInit", request, response)
        logging.getLogger(__name__).info(
            "call " + "[summer_lottery_init]" + " api success!"
        )
        return response

    @allure.step("""暑假抽奖""")
    def summer_lottery_draw(self, request: SummerDrawReq) -> SummerDrawResp:
        """暑假抽奖"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_lottery_draw]" + " api" + "=>" + """暑假抽奖"""
        )
        response = SummerDrawResp()
        self._do_twirp_rpc("/activity.v1.Activity/SummerLotteryDraw", request, response)
        logging.getLogger(__name__).info(
            "call " + "[summer_lottery_draw]" + " api success!"
        )
        return response

    @allure.step("""暑假抽奖实物地址""")
    def summer_lottery_address(self, request: SummerPrize) -> DefaultResponse:
        """暑假抽奖实物地址"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_lottery_address]" + " api" + "=>" + """暑假抽奖实物地址"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc(
            "/activity.v1.Activity/SummerLotteryAddress", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[summer_lottery_address]" + " api success!"
        )
        return response

    @allure.step("""暑假获奖记录""")
    def summer_lottery_list(
        self, request: SummerLotteryListReq
    ) -> SummerLotteryListResp:
        """暑假获奖记录"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_lottery_list]" + " api" + "=>" + """暑假获奖记录"""
        )
        response = SummerLotteryListResp()
        self._do_twirp_rpc("/activity.v1.Activity/SummerLotteryList", request, response)
        logging.getLogger(__name__).info(
            "call " + "[summer_lottery_list]" + " api success!"
        )
        return response

    @allure.step("""暑假答题题库""")
    def summer_question_init(
        self, request: SummerQuestionInitReq
    ) -> SummerQuestionInitResp:
        """暑假答题题库"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_question_init]" + " api" + "=>" + """暑假答题题库"""
        )
        response = SummerQuestionInitResp()
        self._do_twirp_rpc(
            "/activity.v1.Activity/SummerQuestionInit", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[summer_question_init]" + " api success!"
        )
        return response

    @allure.step("""暑假答题""")
    def summer_question(self, request: SummerQuestionReq) -> SummerQuestionResp:
        """暑假答题"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_question]" + " api" + "=>" + """暑假答题"""
        )
        response = SummerQuestionResp()
        self._do_twirp_rpc("/activity.v1.Activity/SummerQuestion", request, response)
        logging.getLogger(__name__).info(
            "call " + "[summer_question]" + " api success!"
        )
        return response

    @allure.step("""暑假养成""")
    def summer_score(self, request: SummerScoreReq) -> SummerScoreResp:
        """暑假养成"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_score]" + " api" + "=>" + """暑假养成"""
        )
        response = SummerScoreResp()
        self._do_twirp_rpc("/activity.v1.Activity/SummerScore", request, response)
        logging.getLogger(__name__).info("call " + "[summer_score]" + " api success!")
        return response

    @allure.step("""暑假养成奖励""")
    def summer_reward(self, request: SummerRewardReq) -> SummerRewardResp:
        """暑假养成奖励"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_reward]" + " api" + "=>" + """暑假养成奖励"""
        )
        response = SummerRewardResp()
        self._do_twirp_rpc("/activity.v1.Activity/SummerReward", request, response)
        logging.getLogger(__name__).info("call " + "[summer_reward]" + " api success!")
        return response

    @allure.step("""暑假分享""")
    def summer_share(self, request: SummerShareReq) -> DefaultResponse:
        """暑假分享"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_share]" + " api" + "=>" + """暑假分享"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v1.Activity/SummerShare", request, response)
        logging.getLogger(__name__).info("call " + "[summer_share]" + " api success!")
        return response

    @allure.step("""暑假榜单""")
    def summer_rank(self, request: SummerRankReq) -> SummerRankResp:
        """暑假榜单"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_rank]" + " api" + "=>" + """暑假榜单"""
        )
        response = SummerRankResp()
        self._do_twirp_rpc("/activity.v1.Activity/SummerRank", request, response)
        logging.getLogger(__name__).info("call " + "[summer_rank]" + " api success!")
        return response

    @allure.step("""暑假战力值""")
    def summer_fav_rank(self, request: EmptyRequest) -> SummerFavRankResp:
        """暑假战力值"""
        logging.getLogger(__name__).info(
            "start call " + "[summer_fav_rank]" + " api" + "=>" + """暑假战力值"""
        )
        response = SummerFavRankResp()
        self._do_twirp_rpc("/activity.v1.Activity/SummerFavRank", request, response)
        logging.getLogger(__name__).info(
            "call " + "[summer_fav_rank]" + " api success!"
        )
        return response

    @allure.step("""B萌初始化""")
    def bmoe_init(self, request: EmptyRequest) -> BmoeInitResp:
        """B萌初始化"""
        logging.getLogger(__name__).info(
            "start call " + "[bmoe_init]" + " api" + "=>" + """B萌初始化"""
        )
        response = BmoeInitResp()
        self._do_twirp_rpc("/activity.v1.Activity/BmoeInit", request, response)
        logging.getLogger(__name__).info("call " + "[bmoe_init]" + " api success!")
        return response

    @allure.step("""B萌海选""")
    def bmoe_audition(self, request: EmptyRequest) -> BmoeResp:
        """B萌海选"""
        logging.getLogger(__name__).info(
            "start call " + "[bmoe_audition]" + " api" + "=>" + """B萌海选"""
        )
        response = BmoeResp()
        self._do_twirp_rpc("/activity.v1.Activity/BmoeAudition", request, response)
        logging.getLogger(__name__).info("call " + "[bmoe_audition]" + " api success!")
        return response

    @allure.step("""B萌小组赛""")
    def bmoe_group(self, request: BmoeGroupReq) -> BmoeResp:
        """B萌小组赛"""
        logging.getLogger(__name__).info(
            "start call " + "[bmoe_group]" + " api" + "=>" + """B萌小组赛"""
        )
        response = BmoeResp()
        self._do_twirp_rpc("/activity.v1.Activity/BmoeGroup", request, response)
        logging.getLogger(__name__).info("call " + "[bmoe_group]" + " api success!")
        return response

    @allure.step("""B萌决赛""")
    def bmoe_final(self, request: EmptyRequest) -> BmoeResp:
        """B萌决赛"""
        logging.getLogger(__name__).info(
            "start call " + "[bmoe_final]" + " api" + "=>" + """B萌决赛"""
        )
        response = BmoeResp()
        self._do_twirp_rpc("/activity.v1.Activity/BmoeFinal", request, response)
        logging.getLogger(__name__).info("call " + "[bmoe_final]" + " api success!")
        return response

    @allure.step("""番推漫首页""")
    def ani_coupon_init(self, request: EmptyRequest) -> AniCouponInitResp:
        """番推漫首页"""
        logging.getLogger(__name__).info(
            "start call " + "[ani_coupon_init]" + " api" + "=>" + """番推漫首页"""
        )
        response = AniCouponInitResp()
        self._do_twirp_rpc("/activity.v1.Activity/AniCouponInit", request, response)
        logging.getLogger(__name__).info(
            "call " + "[ani_coupon_init]" + " api success!"
        )
        return response

    @allure.step("""番推漫领券""")
    def ani_coupon(self, request: AniCouponReq) -> AniCouponResp:
        """番推漫领券"""
        logging.getLogger(__name__).info(
            "start call " + "[ani_coupon]" + " api" + "=>" + """番推漫领券"""
        )
        response = AniCouponResp()
        self._do_twirp_rpc("/activity.v1.Activity/AniCoupon", request, response)
        logging.getLogger(__name__).info("call " + "[ani_coupon]" + " api success!")
        return response

    @allure.step("""站友日""")
    def comrade(self, request: EmptyRequest) -> ComradeResp:
        """站友日"""
        logging.getLogger(__name__).info(
            "start call " + "[comrade]" + " api" + "=>" + """站友日"""
        )
        response = ComradeResp()
        self._do_twirp_rpc("/activity.v1.Activity/Comrade", request, response)
        logging.getLogger(__name__).info("call " + "[comrade]" + " api success!")
        return response

    @allure.step("""站友日奖品公示""")
    def comrade_prize(self, request: EmptyRequest) -> ComradePrizeResp:
        """站友日奖品公示"""
        logging.getLogger(__name__).info(
            "start call " + "[comrade_prize]" + " api" + "=>" + """站友日奖品公示"""
        )
        response = ComradePrizeResp()
        self._do_twirp_rpc("/activity.v1.Activity/ComradePrize", request, response)
        logging.getLogger(__name__).info("call " + "[comrade_prize]" + " api success!")
        return response
