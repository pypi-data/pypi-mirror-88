# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: activity/v1/tianguan2007.proto
# plugin: python-betterproto
import logging
from typing import List, Optional

import allure
from dataclasses import dataclass

import betterproto


@dataclass
class Tianguan2007EmptyData(betterproto.Message):
    pass


@dataclass
class DefaultResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "Tianguan2007EmptyData" = betterproto.message_field(3)


@dataclass
class TgcfDrawResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "TgcfDrawData" = betterproto.message_field(3)


@dataclass
class TgcfDrawData(betterproto.Message):
    # 奖品 id，详见 tapd 奖品文档
    results: List[int] = betterproto.int32_field(1)


@dataclass
class TgcfDrawReq(betterproto.Message):
    # 抽奖次数，大于 0  且小于等于 10
    turn: int = betterproto.int32_field(1)


@dataclass
class TgcfSubmitAddressReq(betterproto.Message):
    # 购买记录 id，从 init 或购买接口中获取
    record_id: int = betterproto.int32_field(1)
    data: "TgcfAddressItem" = betterproto.message_field(2)


@dataclass
class TgcfGetAddressResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "TgcfAddressItem" = betterproto.message_field(3)


@dataclass
class TgcfSelfPurchaseResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "TgcfSelfPurchaseData" = betterproto.message_field(3)


@dataclass
class TgcfSelfPurchaseData(betterproto.Message):
    record_id: int = betterproto.int32_field(1)


@dataclass
class TgcfGetAddressReq(betterproto.Message):
    # 记录 ID：从 init 或购买接口中获取
    record_id: int = betterproto.int32_field(1)


@dataclass
class TgcfAddressItem(betterproto.Message):
    name: str = betterproto.string_field(1)
    phone: str = betterproto.string_field(2)
    address: str = betterproto.string_field(3)


@dataclass
class TgcfPresentRankResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "TgcfPresentRankData" = betterproto.message_field(3)


@dataclass
class TgcfPresentRankData(betterproto.Message):
    list: List["TgcfPresentRankItem"] = betterproto.message_field(1)


@dataclass
class TgcfPresentRankItem(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    name: str = betterproto.string_field(2)
    avatar: str = betterproto.string_field(3)
    score: int = betterproto.int32_field(4)


@dataclass
class TgcfTokenInfoResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "TgcfTokenInfoData" = betterproto.message_field(3)


@dataclass
class TgcfTokenInfoData(betterproto.Message):
    # 礼包名称
    package_name: str = betterproto.string_field(1)
    # 赠送者用户名
    user_name: str = betterproto.string_field(2)


@dataclass
class TgcfTokenInfoReq(betterproto.Message):
    id: int = betterproto.int32_field(1)
    sign: str = betterproto.string_field(2)


@dataclass
class TgcfPresentListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "TgcfPresentListData" = betterproto.message_field(3)


@dataclass
class TgcfPresentListData(betterproto.Message):
    list: List["TgcfPresentListItem"] = betterproto.message_field(1)


@dataclass
class TgcfPresentListItem(betterproto.Message):
    id: int = betterproto.int32_field(1)
    sign: str = betterproto.string_field(2)
    # 买赠剩余份数
    remain: int = betterproto.int32_field(3)
    # 买赠礼包名
    name: str = betterproto.string_field(4)


@dataclass
class TgcfPresentPurchaseResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "TgcfPresentPurchaseData" = betterproto.message_field(3)


@dataclass
class TgcfPresentPurchaseData(betterproto.Message):
    # 买赠 id
    id: int = betterproto.int32_field(1)
    # 买赠签名
    sign: str = betterproto.string_field(2)


@dataclass
class TgcfPresentPurchaseReq(betterproto.Message):
    # 礼包 id
    package_id: int = betterproto.int32_field(1)
    # 购买总数
    quantity: int = betterproto.int32_field(2)


@dataclass
class TgcfSelfPurchaseReq(betterproto.Message):
    # 礼包 id
    package_id: int = betterproto.int32_field(1)
    # 前端展示的总金额（仅作校验）
    purchase_amount: int = betterproto.int32_field(2)


@dataclass
class TgcfInitResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "TgcfInitData" = betterproto.message_field(3)


@dataclass
class TgcfInitData(betterproto.Message):
    # 当前时间 RFC 3339
    now: str = betterproto.string_field(1)
    # 漫币余额
    gold: int = betterproto.int32_field(2)
    # 剩余抽奖次数
    draw_chance: int = betterproto.int32_field(3)
    # 礼包信息
    packages: List["TgcfPackageInfo"] = betterproto.message_field(4)
    # 我的买赠数量
    present_count: int = betterproto.int32_field(5)


@dataclass
class TgcfPackageInfo(betterproto.Message):
    # 礼包 id： 1. 第二卷 2. 第三卷 3. 半月福袋壹 4. 半月福袋贰
    id: int = betterproto.int32_field(1)
    # 礼包原始价格
    original_price: int = betterproto.int32_field(2)
    # 礼包最终价格：原始价格 - 已购章节价格
    final_price: int = betterproto.int32_field(3)
    # 礼包剩余个数。对于不限制个数的礼包恒为 1
    available_quantity: int = betterproto.int32_field(4)
    # 用户是否已购当前礼包（为自己）
    has_bought: bool = betterproto.bool_field(5)
    # 购买记录 id。仅实物奖励存在此字段
    record_id: int = betterproto.int32_field(6)


@dataclass
class TgcfPrizeListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "TgcfPrizeListData" = betterproto.message_field(3)


@dataclass
class TgcfPrizeListData(betterproto.Message):
    # 奖品 id 列表，详见奖品文档。
    list: List[int] = betterproto.int32_field(1)


class Tianguan2007Stub(betterproto.ServiceStub):
    @allure.step("""天官赐福 2007 活动初始化""")
    def tgcf_init(self, request: Tianguan2007EmptyData) -> TgcfInitResp:
        """天官赐福 2007 活动初始化"""
        logging.getLogger(__name__).info(
            "start call " + "[tgcf_init]" + " api" + "=>" + """天官赐福 2007 活动初始化"""
        )
        response = TgcfInitResp()
        self._do_twirp_rpc("/activity.v1.Tianguan2007/TgcfInit", request, response)
        logging.getLogger(__name__).info("call " + "[tgcf_init]" + " api success!")
        return response

    @allure.step("""天官赐福 2007 为自己购买""")
    def tgcf_self_purchase(self, request: TgcfSelfPurchaseReq) -> TgcfSelfPurchaseResp:
        """天官赐福 2007 为自己购买"""
        logging.getLogger(__name__).info(
            "start call "
            + "[tgcf_self_purchase]"
            + " api"
            + "=>"
            + """天官赐福 2007 为自己购买"""
        )
        response = TgcfSelfPurchaseResp()
        self._do_twirp_rpc(
            "/activity.v1.Tianguan2007/TgcfSelfPurchase", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[tgcf_self_purchase]" + " api success!"
        )
        return response

    @allure.step("""天官赐福 作为礼物购买""")
    def tgcf_present_purchase(
        self, request: TgcfPresentPurchaseReq
    ) -> TgcfPresentPurchaseResp:
        """天官赐福 作为礼物购买"""
        logging.getLogger(__name__).info(
            "start call "
            + "[tgcf_present_purchase]"
            + " api"
            + "=>"
            + """天官赐福 作为礼物购买"""
        )
        response = TgcfPresentPurchaseResp()
        self._do_twirp_rpc(
            "/activity.v1.Tianguan2007/TgcfPresentPurchase", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[tgcf_present_purchase]" + " api success!"
        )
        return response

    @allure.step("""天官赐福 买赠列表""")
    def tgcf_present_list(self, request: Tianguan2007EmptyData) -> TgcfPresentListResp:
        """天官赐福 买赠列表"""
        logging.getLogger(__name__).info(
            "start call " + "[tgcf_present_list]" + " api" + "=>" + """天官赐福 买赠列表"""
        )
        response = TgcfPresentListResp()
        self._do_twirp_rpc(
            "/activity.v1.Tianguan2007/TgcfPresentList", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[tgcf_present_list]" + " api success!"
        )
        return response

    @allure.step("""天官赐福 获取已填写的地址""")
    def tgcf_get_address(self, request: TgcfGetAddressReq) -> TgcfGetAddressResp:
        """天官赐福 获取已填写的地址"""
        logging.getLogger(__name__).info(
            "start call " + "[tgcf_get_address]" + " api" + "=>" + """天官赐福 获取已填写的地址"""
        )
        response = TgcfGetAddressResp()
        self._do_twirp_rpc(
            "/activity.v1.Tianguan2007/TgcfGetAddress", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[tgcf_get_address]" + " api success!"
        )
        return response

    @allure.step("""天官赐福 提交地址""")
    def tgcf_submit_address(self, request: TgcfSubmitAddressReq) -> DefaultResp:
        """天官赐福 提交地址"""
        logging.getLogger(__name__).info(
            "start call " + "[tgcf_submit_address]" + " api" + "=>" + """天官赐福 提交地址"""
        )
        response = DefaultResp()
        self._do_twirp_rpc(
            "/activity.v1.Tianguan2007/TgcfSubmitAddress", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[tgcf_submit_address]" + " api success!"
        )
        return response

    @allure.step("""天官赐福 收取礼包""")
    def tgcf_receive_present(self, request: TgcfTokenInfoReq) -> DefaultResp:
        """天官赐福 收取礼包"""
        logging.getLogger(__name__).info(
            "start call " + "[tgcf_receive_present]" + " api" + "=>" + """天官赐福 收取礼包"""
        )
        response = DefaultResp()
        self._do_twirp_rpc(
            "/activity.v1.Tianguan2007/TgcfReceivePresent", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[tgcf_receive_present]" + " api success!"
        )
        return response

    @allure.step("""天官赐福 买赠排行""")
    def tgcf_present_rank(self, request: Tianguan2007EmptyData) -> TgcfPresentRankResp:
        """天官赐福 买赠排行"""
        logging.getLogger(__name__).info(
            "start call " + "[tgcf_present_rank]" + " api" + "=>" + """天官赐福 买赠排行"""
        )
        response = TgcfPresentRankResp()
        self._do_twirp_rpc(
            "/activity.v1.Tianguan2007/TgcfPresentRank", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[tgcf_present_rank]" + " api success!"
        )
        return response

    @allure.step("""天官赐福 获取买赠礼包信息""")
    def tgcf_get_present_info(self, request: TgcfTokenInfoReq) -> TgcfTokenInfoResp:
        """天官赐福 获取买赠礼包信息"""
        logging.getLogger(__name__).info(
            "start call "
            + "[tgcf_get_present_info]"
            + " api"
            + "=>"
            + """天官赐福 获取买赠礼包信息"""
        )
        response = TgcfTokenInfoResp()
        self._do_twirp_rpc(
            "/activity.v1.Tianguan2007/TgcfGetPresentInfo", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[tgcf_get_present_info]" + " api success!"
        )
        return response

    @allure.step("""天官赐福 抽奖""")
    def tgcf_draw(self, request: TgcfDrawReq) -> TgcfDrawResp:
        """天官赐福 抽奖"""
        logging.getLogger(__name__).info(
            "start call " + "[tgcf_draw]" + " api" + "=>" + """天官赐福 抽奖"""
        )
        response = TgcfDrawResp()
        self._do_twirp_rpc("/activity.v1.Tianguan2007/TgcfDraw", request, response)
        logging.getLogger(__name__).info("call " + "[tgcf_draw]" + " api success!")
        return response

    @allure.step("""天官赐福实物奖品列表""")
    def prize_list(self, request: Tianguan2007EmptyData) -> TgcfPrizeListResp:
        """天官赐福实物奖品列表"""
        logging.getLogger(__name__).info(
            "start call " + "[prize_list]" + " api" + "=>" + """天官赐福实物奖品列表"""
        )
        response = TgcfPrizeListResp()
        self._do_twirp_rpc("/activity.v1.Tianguan2007/PrizeList", request, response)
        logging.getLogger(__name__).info("call " + "[prize_list]" + " api success!")
        return response
