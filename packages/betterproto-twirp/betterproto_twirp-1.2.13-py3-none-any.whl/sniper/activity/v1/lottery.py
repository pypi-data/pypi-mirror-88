# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: activity/v1/lottery.proto
# plugin: python-betterproto
import logging
from typing import List

import allure
from dataclasses import dataclass

import betterproto


@dataclass
class LotteryDefault(betterproto.Message):
    pass


@dataclass
class DrawReq(betterproto.Message):
    # 活动类型 1 联合大会员抽奖 @gt:0
    type: int = betterproto.int32_field(1)


@dataclass
class DrawResp(betterproto.Message):
    # 1 没有足够的抽奖机会哦~ 2 需要登录 3 你点的太快了哦~ 4 活动已下线
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "DrawData" = betterproto.message_field(3)


@dataclass
class DrawData(betterproto.Message):
    # 奖品 ID
    id: int = betterproto.int32_field(1)


@dataclass
class PrizeInfoResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "PrizeInfoData" = betterproto.message_field(3)


@dataclass
class PrizeInfoData(betterproto.Message):
    # 奖品信息
    prizes: List["Prize"] = betterproto.message_field(1)
    # 抽奖机会
    chances: int = betterproto.int32_field(2)


@dataclass
class InfoResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "InfoData" = betterproto.message_field(3)


@dataclass
class InfoData(betterproto.Message):
    # 奖品信息 6001 小电视海豹抱枕 6002 小电视泡面碗 6003 哔哩哔哩吸水地垫 6004 哔哩哔哩大桌垫 6005 小电视西瓜抱枕 6006
    # 哔哩哔哩颈枕 6007 谢谢参与
    prizes: List["Prize"] = betterproto.message_field(1)


@dataclass
class Prize(betterproto.Message):
    id: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)


class LotteryStub(betterproto.ServiceStub):
    @allure.step("""Draw 试试手气？ @auth""")
    def draw(self, request: DrawReq) -> DrawResp:
        """Draw 试试手气？ @auth"""
        logging.getLogger(__name__).info(
            "start call " + "[draw]" + " api" + "=>" + """Draw 试试手气？ @auth"""
        )
        response = DrawResp()
        self._do_twirp_rpc("/activity.v1.Lottery/Draw", request, response)
        logging.getLogger(__name__).info("call " + "[draw]" + " api success!")
        return response

    @allure.step("""PrizeInfo 奖品信息""")
    def prize_info(self, request: DrawReq) -> PrizeInfoResp:
        """PrizeInfo 奖品信息"""
        logging.getLogger(__name__).info(
            "start call " + "[prize_info]" + " api" + "=>" + """PrizeInfo 奖品信息"""
        )
        response = PrizeInfoResp()
        self._do_twirp_rpc("/activity.v1.Lottery/PrizeInfo", request, response)
        logging.getLogger(__name__).info("call " + "[prize_info]" + " api success!")
        return response

    @allure.step("""GotPrizes 已抽到的奖品 @auth""")
    def got_prizes(self, request: DrawReq) -> InfoResp:
        """GotPrizes 已抽到的奖品 @auth"""
        logging.getLogger(__name__).info(
            "start call "
            + "[got_prizes]"
            + " api"
            + "=>"
            + """GotPrizes 已抽到的奖品 @auth"""
        )
        response = InfoResp()
        self._do_twirp_rpc("/activity.v1.Lottery/GotPrizes", request, response)
        logging.getLogger(__name__).info("call " + "[got_prizes]" + " api success!")
        return response
