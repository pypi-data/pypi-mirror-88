# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: activity/v1/comment.proto
# plugin: python-betterproto
import logging
from typing import List

import allure
from dataclasses import dataclass

import betterproto


@dataclass
class EmptyCommentRequest(betterproto.Message):
    pass


@dataclass
class CommentList(betterproto.Message):
    """点评item 可拓展"""

    # 点评 ID
    id: int = betterproto.int64_field(1)
    # 漫画 ID
    comic_id: int = betterproto.int32_field(2)
    # 漫画封面
    comic_cover: str = betterproto.string_field(3)
    # 漫画标题
    comic_title: str = betterproto.string_field(4)
    # 点评用户名
    comment_user_name: str = betterproto.string_field(5)
    # 点评用户头像
    comment_user_face: str = betterproto.string_field(6)
    # 点评标题
    comment_title: str = betterproto.string_field(7)
    # 点评内容
    comment_content: str = betterproto.string_field(8)
    # 点评点赞数
    comment_like_num: int = betterproto.int32_field(9)
    # 用户是否点赞
    is_user_liked: bool = betterproto.bool_field(10)


@dataclass
class AGGetCommentsResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "AGGetCommentsData" = betterproto.message_field(3)


@dataclass
class AGGetCommentsData(betterproto.Message):
    comment_list: List["CommentList"] = betterproto.message_field(1)
    now: str = betterproto.string_field(2)


@dataclass
class AGGetCommentsRankResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "AGCommentRankList" = betterproto.message_field(3)


@dataclass
class AGCommentRankList(betterproto.Message):
    first: List["CommentList"] = betterproto.message_field(1)
    second: List["CommentList"] = betterproto.message_field(2)
    third: List["CommentList"] = betterproto.message_field(3)
    # 服务器时间
    now: str = betterproto.string_field(4)


class CommentStub(betterproto.ServiceStub):
    """点评类活动"""

    @allure.step("""八月点评活动  获取热门点评""")
    def a_g_get_comments(self, request: EmptyCommentRequest) -> AGGetCommentsResp:
        """八月点评活动  获取热门点评"""
        logging.getLogger(__name__).info(
            "start call " + "[a_g_get_comments]" + " api" + "=>" + """八月点评活动  获取热门点评"""
        )
        response = AGGetCommentsResp()
        self._do_twirp_rpc("/activity.v1.Comment/AGGetComments", request, response)
        logging.getLogger(__name__).info(
            "call " + "[a_g_get_comments]" + " api success!"
        )
        return response

    @allure.step("""八月点评活动 获取点评点赞排行榜""")
    def a_g_get_comments_rank(
        self, request: EmptyCommentRequest
    ) -> AGGetCommentsRankResp:
        """八月点评活动 获取点评点赞排行榜"""
        logging.getLogger(__name__).info(
            "start call "
            + "[a_g_get_comments_rank]"
            + " api"
            + "=>"
            + """八月点评活动 获取点评点赞排行榜"""
        )
        response = AGGetCommentsRankResp()
        self._do_twirp_rpc("/activity.v1.Comment/AGGetCommentsRank", request, response)
        logging.getLogger(__name__).info(
            "call " + "[a_g_get_comments_rank]" + " api success!"
        )
        return response
