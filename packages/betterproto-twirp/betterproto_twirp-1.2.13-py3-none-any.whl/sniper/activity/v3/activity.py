# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: activity/v3/activity.proto
# plugin: python-betterproto
import logging
from typing import Dict, List, Optional

import allure
from dataclasses import dataclass

import betterproto


@dataclass
class MizuharaHomeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "MizuharaHomeData" = betterproto.message_field(3)


@dataclass
class MizuharaHomeData(betterproto.Message):
    point: int = betterproto.int32_field(1)
    day1: List[int] = betterproto.int32_field(2)
    day2: List[int] = betterproto.int32_field(3)
    day3: List[int] = betterproto.int32_field(4)
    day4: List[int] = betterproto.int32_field(5)
    day5: List[int] = betterproto.int32_field(6)
    day6: List[int] = betterproto.int32_field(7)
    day7: List[int] = betterproto.int32_field(8)
    now: str = betterproto.string_field(9)


@dataclass
class YinvListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "YinvListData" = betterproto.message_field(3)


@dataclass
class YinvListData(betterproto.Message):
    list: List["YinvListPrize"] = betterproto.message_field(1)


@dataclass
class YinvListPrize(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    prize: int = betterproto.int32_field(2)
    date: str = betterproto.string_field(3)


@dataclass
class YinvAddressReq(betterproto.Message):
    id: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    phone: str = betterproto.string_field(3)
    address: str = betterproto.string_field(4)


@dataclass
class YinvHomeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "YinvHomeData" = betterproto.message_field(3)


@dataclass
class YinvHomeData(betterproto.Message):
    # 抽奖次数
    num: int = betterproto.int32_field(1)
    # 中奖信息
    notice: List["YinvDanmaku"] = betterproto.message_field(2)


@dataclass
class YinvDanmaku(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    uname: str = betterproto.string_field(2)
    prize: int = betterproto.int32_field(3)


@dataclass
class YinvDrawReq(betterproto.Message):
    num: int = betterproto.int32_field(1)


@dataclass
class YinvDrawResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "YinvDrawData" = betterproto.message_field(3)


@dataclass
class YinvDrawData(betterproto.Message):
    prize: int = betterproto.int32_field(1)
    id: int = betterproto.int32_field(2)


@dataclass
class PrizeCommentResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "PrizeCommentData" = betterproto.message_field(3)


@dataclass
class PrizeCommentData(betterproto.Message):
    # 第一期点赞奖
    prize1: "CommentDetail" = betterproto.message_field(1)
    # 第一期漫画封面
    cover1: str = betterproto.string_field(2)
    # 第二期点赞奖
    prize2: "CommentDetail" = betterproto.message_field(3)
    # 第二期漫画封面
    cover2: str = betterproto.string_field(4)
    # 第三期点赞奖
    prize3: "CommentDetail" = betterproto.message_field(5)
    # 第三期漫画封面
    cover3: str = betterproto.string_field(6)


@dataclass
class RandCommentResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "RandCommentData" = betterproto.message_field(3)


@dataclass
class RandCommentData(betterproto.Message):
    list: List["CommentDetail"] = betterproto.message_field(1)


@dataclass
class LongCommentResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "LongCommentData" = betterproto.message_field(3)


@dataclass
class LongCommentData(betterproto.Message):
    list: List["CommentDetail"] = betterproto.message_field(1)


@dataclass
class CommentDetail(betterproto.Message):
    # 漫画名
    comic: str = betterproto.string_field(1)
    # 用户头像
    face: str = betterproto.string_field(2)
    # 用户昵称
    uname: str = betterproto.string_field(3)
    # 分数
    point: int = betterproto.int32_field(4)
    # 标题
    title: str = betterproto.string_field(5)
    # 内容
    content: str = betterproto.string_field(6)
    # 点赞数
    support: int = betterproto.int32_field(7)
    # 已点赞
    support_done: bool = betterproto.bool_field(8)
    # 评论ID
    id: int = betterproto.int64_field(9)


@dataclass
class XiuxianBuyReq(betterproto.Message):
    comic_id: int = betterproto.int32_field(1)
    num: int = betterproto.int32_field(2)


@dataclass
class XiuxianDanmakuResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "XiuxianDanmakuData" = betterproto.message_field(3)


@dataclass
class XiuxianDanmakuData(betterproto.Message):
    list: List[str] = betterproto.string_field(1)


@dataclass
class YidongReq(betterproto.Message):
    phone: int = betterproto.int64_field(1)


@dataclass
class LaborDayWordsExchangeReq(betterproto.Message):
    # 1-9折卡 2-8.5折卡 3-3张福利券 4-2233张福利券
    id: int = betterproto.int32_field(1)


@dataclass
class LaborDayWordsDrawReq(betterproto.Message):
    # 1-单抽 5-五连抽
    num: int = betterproto.int32_field(1)


@dataclass
class LaborDayWordsDrawResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "LaborDayWordsDrawData" = betterproto.message_field(3)


@dataclass
class LaborDayWordsDrawData(betterproto.Message):
    results: List[int] = betterproto.int32_field(1)


@dataclass
class LaborDayWordsResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "LaborDayWordsData" = betterproto.message_field(3)


@dataclass
class LaborDayWordsData(betterproto.Message):
    # 抽奖次数
    num: int = betterproto.int32_field(1)
    # 这
    w1: int = betterproto.int32_field(2)
    # 本
    w2: int = betterproto.int32_field(3)
    # 漫
    w3: int = betterproto.int32_field(4)
    # 画
    w4: int = betterproto.int32_field(5)
    # 真
    w5: int = betterproto.int32_field(6)
    # 厉
    w6: int = betterproto.int32_field(7)
    # 害
    w7: int = betterproto.int32_field(8)
    # 余卡
    surplus: int = betterproto.int32_field(9)
    # 9折卡状态 1-不可兑换 下同
    d1: int = betterproto.int32_field(10)
    # 8.5折卡状态
    d2: int = betterproto.int32_field(11)
    # 3张福利券
    d3: int = betterproto.int32_field(12)
    # 2233张福利券
    d4: int = betterproto.int32_field(13)


@dataclass
class LaborDayComicRankReq(betterproto.Message):
    # 1-国韩漫 2-日漫
    type: int = betterproto.int32_field(1)


@dataclass
class LaborDayComicRankResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "LaborDayComicRankData" = betterproto.message_field(3)


@dataclass
class LaborDayComicRankData(betterproto.Message):
    list: List["LaborDayComicRankComic"] = betterproto.message_field(1)


@dataclass
class LaborDayComicRankComic(betterproto.Message):
    comic_id: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    cover: str = betterproto.string_field(3)
    score: int = betterproto.int64_field(4)
    rank: int = betterproto.int32_field(5)
    users: List["LaborDayComicRankUser"] = betterproto.message_field(6)


@dataclass
class LaborDayComicRankUser(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    name: str = betterproto.string_field(2)
    face: str = betterproto.string_field(3)


@dataclass
class LaborDayPickResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "LaborDayPickData" = betterproto.message_field(3)


@dataclass
class LaborDayPickData(betterproto.Message):
    # 剩余月票数
    num: int = betterproto.int32_field(1)
    # 推荐漫画
    list: List["LaborDayPickComic"] = betterproto.message_field(2)


@dataclass
class LaborDayPickComic(betterproto.Message):
    comic_id: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    cover: str = betterproto.string_field(3)


@dataclass
class LaborDayPrizeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "LaborDayPrizeData" = betterproto.message_field(3)


@dataclass
class LaborDayPrizeData(betterproto.Message):
    list: List["LaborDayPrize"] = betterproto.message_field(1)


@dataclass
class LaborDayPrize(betterproto.Message):
    # 唯一标识
    id: int = betterproto.int32_field(1)
    # 奖品
    type: int = betterproto.int32_field(2)
    # 中奖时间
    date: str = betterproto.string_field(3)


@dataclass
class LaborDayDrawReq(betterproto.Message):
    # 1-单抽 10-高级抽
    num: int = betterproto.int32_field(1)


@dataclass
class LaborDayDrawResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "LaborDayDrawData" = betterproto.message_field(3)


@dataclass
class LaborDayDrawData(betterproto.Message):
    prize: "LaborDayPrize" = betterproto.message_field(1)


@dataclass
class LaborDayRankResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "LaborDayRankData" = betterproto.message_field(3)


@dataclass
class LaborDayRankData(betterproto.Message):
    list: List["UserRank"] = betterproto.message_field(1)
    my: "UserRank" = betterproto.message_field(2)


@dataclass
class UserRank(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    name: str = betterproto.string_field(2)
    face: str = betterproto.string_field(3)
    score: int = betterproto.int32_field(4)
    rank: int = betterproto.int32_field(5)


@dataclass
class LaborDayHomeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "LaborDayHomeData" = betterproto.message_field(3)


@dataclass
class LaborDayHomeData(betterproto.Message):
    # 当前时间
    now: str = betterproto.string_field(1)
    # 抽奖次数
    num: int = betterproto.int32_field(2)
    # 礼包购买状态
    one: int = betterproto.int32_field(3)
    six: int = betterproto.int32_field(4)
    # 中奖公告
    notice: List[str] = betterproto.string_field(5)
    # 首次充值
    first: int = betterproto.int32_field(6)


@dataclass
class KaguyaHomeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "KaguyaHomeData" = betterproto.message_field(3)


@dataclass
class KaguyaHomeData(betterproto.Message):
    # 真爱票数
    ticket: int = betterproto.int32_field(1)
    # 实时票数
    pool1: int = betterproto.int32_field(2)
    pool2: int = betterproto.int32_field(3)
    pool3: int = betterproto.int32_field(4)
    pool4: int = betterproto.int32_field(5)
    pool5: int = betterproto.int32_field(6)
    # 最佳助攻
    name1: str = betterproto.string_field(7)
    face1: str = betterproto.string_field(8)
    name2: str = betterproto.string_field(9)
    face2: str = betterproto.string_field(10)
    name3: str = betterproto.string_field(11)
    face3: str = betterproto.string_field(12)
    name4: str = betterproto.string_field(13)
    face4: str = betterproto.string_field(14)
    name5: str = betterproto.string_field(15)
    face5: str = betterproto.string_field(16)
    # 今日已领
    done: int = betterproto.int32_field(17)


@dataclass
class KaguayaSupportReq(betterproto.Message):
    # 奖池
    pool: int = betterproto.int32_field(1)
    # 投票数
    num: int = betterproto.int32_field(2)


@dataclass
class KaguayaResultReq(betterproto.Message):
    # 奖池
    pool: int = betterproto.int32_field(1)
    # 阶段
    level: int = betterproto.int32_field(2)


@dataclass
class KaguayaResultResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "KaguayaResultData" = betterproto.message_field(3)


@dataclass
class KaguayaResultData(betterproto.Message):
    list: List["KaguyaUser"] = betterproto.message_field(1)


@dataclass
class KaguyaUser(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    name: str = betterproto.string_field(2)
    face: str = betterproto.string_field(3)


@dataclass
class KaguayaEditReq(betterproto.Message):
    name: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)
    phone: str = betterproto.string_field(3)


@dataclass
class OnePieceHomeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "OnePieceHomeData" = betterproto.message_field(3)


@dataclass
class OnePieceHomeData(betterproto.Message):
    # 当前时间
    now: str = betterproto.string_field(1)
    # 抽奖次数
    num: int = betterproto.int32_field(2)
    # 追漫状态
    fav: int = betterproto.int32_field(3)


@dataclass
class OnePieceDrawReq(betterproto.Message):
    # 1-单抽 10-十连抽
    num: int = betterproto.int32_field(1)


@dataclass
class OnePieceDrawResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "OnePieceDrawData" = betterproto.message_field(3)


@dataclass
class OnePieceDrawData(betterproto.Message):
    prizes: List["OnePiecePrize"] = betterproto.message_field(1)


@dataclass
class OnePiecePrize(betterproto.Message):
    # 唯一标识
    id: int = betterproto.int32_field(1)
    # 奖品
    type: int = betterproto.int32_field(2)
    # 中奖时间
    date: str = betterproto.string_field(3)


@dataclass
class OnePieceAddrReq(betterproto.Message):
    id: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    phone: str = betterproto.string_field(3)
    addr: str = betterproto.string_field(4)


@dataclass
class OnePiecePrizeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "OnePiecePrizeData" = betterproto.message_field(3)


@dataclass
class OnePiecePrizeData(betterproto.Message):
    list: List["OnePiecePrize"] = betterproto.message_field(1)


@dataclass
class BailianPrizeReq(betterproto.Message):
    pass


@dataclass
class BailianPrizeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "BailianPrizeData" = betterproto.message_field(3)


@dataclass
class BailianPrizeData(betterproto.Message):
    list: List[int] = betterproto.int32_field(1)


@dataclass
class BailianLotteryInitReq(betterproto.Message):
    pass


@dataclass
class BailianLotteryInitResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "BailianLotteryInitData" = betterproto.message_field(3)


@dataclass
class BailianLotteryInitData(betterproto.Message):
    # 抽奖次数
    num: int = betterproto.int32_field(1)
    # 弹幕信息
    list: List["BailianLotteryDanmaku"] = betterproto.message_field(2)


@dataclass
class BailianLotteryDanmaku(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    uname: str = betterproto.string_field(2)
    prize: int = betterproto.int32_field(3)


@dataclass
class BailianLotteryReq(betterproto.Message):
    pass


@dataclass
class BailianLotteryResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "BailianLotteryData" = betterproto.message_field(3)


@dataclass
class BailianLotteryData(betterproto.Message):
    prize: int = betterproto.int32_field(1)


@dataclass
class BailianAnswerInitReq(betterproto.Message):
    pass


@dataclass
class BailianAnswerInitResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "BailianAnswerInitData" = betterproto.message_field(3)


@dataclass
class BailianAnswerInitData(betterproto.Message):
    done: int = betterproto.int32_field(1)
    qids: List[int] = betterproto.int32_field(2)
    question: List["BailianQuestion"] = betterproto.message_field(3)


@dataclass
class BailianQuestion(betterproto.Message):
    id: int = betterproto.int32_field(1)
    q: str = betterproto.string_field(2)
    a1: str = betterproto.string_field(3)
    a2: str = betterproto.string_field(4)
    a3: str = betterproto.string_field(5)
    a4: str = betterproto.string_field(6)


@dataclass
class BailianAnswerReq(betterproto.Message):
    qids: List[int] = betterproto.int32_field(1)
    answers: List[int] = betterproto.int32_field(2)


@dataclass
class BailianAnswerResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "BailianAnswerData" = betterproto.message_field(3)


@dataclass
class BailianAnswerData(betterproto.Message):
    # 正确数
    correct: int = betterproto.int32_field(1)
    # 分数
    point: int = betterproto.int32_field(2)
    # 累计答题天数
    day: int = betterproto.int32_field(3)


@dataclass
class SuanmingReq(betterproto.Message):
    pass


@dataclass
class SuanmingResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "SuanmingData" = betterproto.message_field(3)


@dataclass
class SuanmingData(betterproto.Message):
    # 今日首次
    first: int = betterproto.int32_field(1)
    # 当前时间
    now: str = betterproto.string_field(2)


@dataclass
class AliPayHongbaoResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "AliPayHongbaoData" = betterproto.message_field(3)


@dataclass
class AliPayHongbaoData(betterproto.Message):
    # 是否还有满减红包
    has_hongbao: bool = betterproto.bool_field(1)
    # 当前时间，格式 "2006-01-02T15:04:05Z07:00"
    now: str = betterproto.string_field(2)


@dataclass
class AliPayHongbaoSignReq(betterproto.Message):
    # 待签名参数
    args: Dict[str, str] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass
class AliPayHongbaoSignResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "AliPayHongbaoSignData" = betterproto.message_field(3)


@dataclass
class AliPayHongbaoSignData(betterproto.Message):
    # 支付签名
    sign: str = betterproto.string_field(1)


@dataclass
class BailianEplistResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "BailianEplistData" = betterproto.message_field(3)


@dataclass
class BailianEplistData(betterproto.Message):
    # 漫读券ID
    coupon_id: List[int] = betterproto.int32_field(1)
    # 漫读券数量
    coupon_num: List[int] = betterproto.int32_field(2)
    # 话列表
    ep_list: List["EpInfo"] = betterproto.message_field(3)


@dataclass
class EpInfo(betterproto.Message):
    # 话ID epid
    id: int = betterproto.int32_field(1)
    # 序号
    ord: float = betterproto.float_field(2)
    # 付费模式 0.免费, 1.付费
    pay_mode: int = betterproto.int32_field(3)
    # 这是个神奇的字段 漫画为付费章节而且用户没有购买(以用户章节权限表为准)时返回 true 特别地，用户没有购买的付费章节参与限免活动时，该字段为
    # true
    is_locked: bool = betterproto.bool_field(4)
    # 短标题
    short_title: str = betterproto.string_field(5)
    # 标题，即长标题
    title: str = betterproto.string_field(6)
    # 当前章节是否限免
    is_in_free: bool = betterproto.bool_field(7)


@dataclass
class BailianHomeReq(betterproto.Message):
    pass


@dataclass
class BailianHomeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "BailianHomeData" = betterproto.message_field(3)


@dataclass
class BailianHomeData(betterproto.Message):
    # 漫币余额
    gold: int = betterproto.int32_field(1)
    # 1元礼包已购 1-已购 0-未够
    gift1: int = betterproto.int32_field(2)
    # 6元礼包已购 1-已购 0-未够
    gift2: int = betterproto.int32_field(3)
    # 30元礼包已购 1-已购 0-未够
    gift3: int = betterproto.int32_field(4)
    # 是否追漫
    is_fav: int = betterproto.int32_field(5)
    # 是否关注官方账号
    is_follow: int = betterproto.int32_field(6)
    # 当前时间
    now: str = betterproto.string_field(7)
    # 漫读券总数
    coupon: int = betterproto.int32_field(8)


@dataclass
class BailianBuyReq(betterproto.Message):
    # 礼包
    gift: int = betterproto.int32_field(1)


@dataclass
class BailianBuyResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "BailianBuyData" = betterproto.message_field(3)


@dataclass
class BailianBuyData(betterproto.Message):
    pass


@dataclass
class BailianInfoReq(betterproto.Message):
    uid: int = betterproto.int64_field(1)


@dataclass
class BailianInfoResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "BailianInfoData" = betterproto.message_field(3)


@dataclass
class BailianInfoData(betterproto.Message):
    # 队长
    leader: "BailianUser" = betterproto.message_field(1)
    # 当前折扣
    cutoff: int = betterproto.int32_field(2)
    # 当前券数量
    coupon: int = betterproto.int32_field(3)
    # 当前抽奖次数
    lottery: int = betterproto.int32_field(4)
    # 队伍状态 0-组建中 1-已结束
    status: int = betterproto.int32_field(5)
    # 队员
    member: List["BailianUser"] = betterproto.message_field(6)
    # 当前时间
    now: str = betterproto.string_field(7)
    # 追漫信息
    is_fav: int = betterproto.int32_field(8)


@dataclass
class BailianUser(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    name: str = betterproto.string_field(2)
    face: str = betterproto.string_field(3)
    # 新人标记
    noob: int = betterproto.int32_field(4)


@dataclass
class BailianOrganizeReq(betterproto.Message):
    pass


@dataclass
class BailianOrganizeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "EmptyData" = betterproto.message_field(3)


@dataclass
class BailianJoinReq(betterproto.Message):
    leader: int = betterproto.int64_field(1)


@dataclass
class BailianJoinResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "EmptyData" = betterproto.message_field(3)


@dataclass
class BailianLeaveReq(betterproto.Message):
    pass


@dataclass
class BailianLeaveResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "EmptyData" = betterproto.message_field(3)


@dataclass
class BailianDismissReq(betterproto.Message):
    pass


@dataclass
class BailianDismissResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "EmptyData" = betterproto.message_field(3)


@dataclass
class BailianSettleReq(betterproto.Message):
    pass


@dataclass
class BailianSettleResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "EmptyData" = betterproto.message_field(3)


@dataclass
class YuanxiaoHomeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "YuanxiaoHomeData" = betterproto.message_field(3)


@dataclass
class YuanxiaoHomeData(betterproto.Message):
    # 当前时间
    now: str = betterproto.string_field(1)
    # 抽奖次数
    num: int = betterproto.int32_field(2)
    # 今日已签到
    sign: int = betterproto.int32_field(3)
    # 今日已追漫
    fav: int = betterproto.int32_field(4)
    # 签到次数
    sign_num: int = betterproto.int32_field(5)
    # 一元礼包已买
    gift: int = betterproto.int32_field(6)


@dataclass
class YuanxiaoDrawResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "YuanxiaoDrawData" = betterproto.message_field(3)


@dataclass
class YuanxiaoDrawData(betterproto.Message):
    # 奖品
    prize: int = betterproto.int32_field(1)
    # 编号
    id: int = betterproto.int64_field(2)


@dataclass
class YuanxiaoPrizeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: List["YuanxiaoPrizeData"] = betterproto.message_field(3)


@dataclass
class YuanxiaoPrizeData(betterproto.Message):
    # 编号
    id: int = betterproto.int64_field(1)
    # 奖品
    prize: int = betterproto.int32_field(2)
    # 日期
    date: str = betterproto.string_field(3)
    # 姓名
    name: str = betterproto.string_field(4)
    # 手机
    phone: str = betterproto.string_field(5)
    # 地址
    address: str = betterproto.string_field(6)


@dataclass
class YuanxiaoSignResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "YuanxiaoSignData" = betterproto.message_field(3)


@dataclass
class YuanxiaoSignData(betterproto.Message):
    pass


@dataclass
class YuanxiaoAddressReq(betterproto.Message):
    id: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    address: str = betterproto.string_field(3)
    phone: str = betterproto.string_field(4)


@dataclass
class TianguanSharedReq(betterproto.Message):
    uid: int = betterproto.int64_field(1)


@dataclass
class TianguanSharedResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "TianguanSharedData" = betterproto.message_field(3)


@dataclass
class TianguanSharedData(betterproto.Message):
    # 灯火数
    fire: int = betterproto.int32_field(1)
    # 解锁明灯数
    score: int = betterproto.int32_field(2)
    # 总解锁明灯数
    total: int = betterproto.int32_field(4)


@dataclass
class TianguanResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "TianguanData" = betterproto.message_field(3)


@dataclass
class TianguanData(betterproto.Message):
    # 灯火数
    fire: int = betterproto.int32_field(1)
    # 解锁明灯数
    score: int = betterproto.int32_field(2)
    # 用户名
    name: str = betterproto.string_field(3)
    # 总解锁明灯数
    total: int = betterproto.int32_field(4)
    # 小游戏已玩
    play: int = betterproto.int32_field(5)
    # 分享获取灯火数
    share_num: int = betterproto.int32_field(6)
    # 分享人数
    share_people: int = betterproto.int32_field(7)


@dataclass
class TianguanShareReq(betterproto.Message):
    uid: int = betterproto.int64_field(1)


@dataclass
class TianguanShareResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "TianguanShareData" = betterproto.message_field(3)


@dataclass
class TianguanShareData(betterproto.Message):
    fire: int = betterproto.int32_field(1)


@dataclass
class TianguanGameReq(betterproto.Message):
    fire: int = betterproto.int32_field(1)


@dataclass
class ChineseNewyearRankResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ChineseNewyearRankData" = betterproto.message_field(3)


@dataclass
class ChineseNewyearRankData(betterproto.Message):
    list: List["NewyearRank"] = betterproto.message_field(1)
    my: "NewyearRank" = betterproto.message_field(2)


@dataclass
class NewyearRank(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    face: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    score: int = betterproto.int64_field(4)
    rank: int = betterproto.int32_field(5)


@dataclass
class ChineseNewyearResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ChineseNewyearData" = betterproto.message_field(3)


@dataclass
class ChineseNewyearData(betterproto.Message):
    total: int = betterproto.int32_field(1)
    fish: List["User"] = betterproto.message_field(2)
    big_fish: "User" = betterproto.message_field(3)


@dataclass
class User(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    face: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    num: int = betterproto.int32_field(4)


@dataclass
class TianbaoAnswerReq(betterproto.Message):
    answer: List[int] = betterproto.int32_field(1)


@dataclass
class TianbaoAnswerResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "TianbaoAnswerData" = betterproto.message_field(3)


@dataclass
class TianbaoAnswerData(betterproto.Message):
    correct: int = betterproto.int32_field(1)


@dataclass
class MarchAnswerReq(betterproto.Message):
    # 用户答案
    answer: List[int] = betterproto.int32_field(1)
    # 题号（日期）
    qid: int = betterproto.int32_field(2)


@dataclass
class MarchAnswerResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "MarchAnswerData" = betterproto.message_field(3)


@dataclass
class MarchAnswerData(betterproto.Message):
    correct: int = betterproto.int32_field(1)


@dataclass
class MarchQuestionReq(betterproto.Message):
    comic: str = betterproto.string_field(1)
    question: str = betterproto.string_field(2)
    answer1: str = betterproto.string_field(3)
    answer2: str = betterproto.string_field(4)
    answer3: str = betterproto.string_field(5)
    answer4: str = betterproto.string_field(6)


@dataclass
class MarchHomeReq(betterproto.Message):
    pass


@dataclass
class MarchHomeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "MarchHomeData" = betterproto.message_field(3)


@dataclass
class MarchHomeData(betterproto.Message):
    # 今日已答题
    done: int = betterproto.int32_field(1)
    # 当前时间 RFC3339
    now: str = betterproto.string_field(2)
    # 今日已提交题目
    question: int = betterproto.int32_field(3)
    # 昨天书单
    yesterday: List["MarQuestionComic"] = betterproto.message_field(4)
    # 今日书单
    today: List["MarQuestionComic"] = betterproto.message_field(5)
    # 明天书单
    tomorrow: List["MarQuestionComic"] = betterproto.message_field(6)
    # 题号(日期 320~326)
    qid: int = betterproto.int32_field(7)
    # 滚动弹幕
    danmaku: List[str] = betterproto.string_field(8)


@dataclass
class MarQuestionComic(betterproto.Message):
    # 漫画ID
    cid: int = betterproto.int32_field(1)
    # 漫画名
    title: str = betterproto.string_field(2)
    # 封面
    cover: str = betterproto.string_field(3)


@dataclass
class FirstPayResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "FirstPayData" = betterproto.message_field(3)


@dataclass
class FirstPayData(betterproto.Message):
    first_pay: int = betterproto.int32_field(1)


@dataclass
class ServerInfoReq(betterproto.Message):
    # 指定漫画ID
    comic_id: int = betterproto.int32_field(1)


@dataclass
class ServerInfoResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ServerData" = betterproto.message_field(3)


@dataclass
class ServerData(betterproto.Message):
    # 服务器时间
    time: str = betterproto.string_field(1)
    # 关注官方账号
    is_follow: int = betterproto.int32_field(2)
    # 追漫
    is_fav: int = betterproto.int32_field(3)
    # 首充用户
    is_first: int = betterproto.int32_field(4)
    # 钱包余额
    gold: int = betterproto.int32_field(5)


@dataclass
class EmptyRequest(betterproto.Message):
    pass


@dataclass
class DefaultResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "EmptyData" = betterproto.message_field(3)


@dataclass
class EmptyData(betterproto.Message):
    pass


@dataclass
class NewYearGuideResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "NewYearGuideData" = betterproto.message_field(3)


@dataclass
class NewYearGuideData(betterproto.Message):
    # 总能量
    total: int = betterproto.int32_field(1)
    # 漫画1
    comic1: int = betterproto.int32_field(2)
    # 漫画2
    comic2: int = betterproto.int32_field(3)
    # 漫画3
    comic3: int = betterproto.int32_field(4)
    # 漫画4
    comic4: int = betterproto.int32_field(5)
    # 漫画5
    comic5: int = betterproto.int32_field(6)
    # 漫画6
    comic6: int = betterproto.int32_field(7)
    # 漫画7
    comic7: int = betterproto.int32_field(8)
    # 漫画8
    comic8: int = betterproto.int32_field(9)
    # 漫画9
    comic9: int = betterproto.int32_field(10)
    # 漫画10
    comic10: int = betterproto.int32_field(11)
    # 当前时间 RFC3339
    now: str = betterproto.string_field(12)


@dataclass
class NewYearGuideFavReq(betterproto.Message):
    # 追漫ID 1-10  0代表全部
    id: int = betterproto.int32_field(1)


@dataclass
class TianguanAddressReq(betterproto.Message):
    id: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    phone: str = betterproto.string_field(3)
    address: str = betterproto.string_field(4)


@dataclass
class TianguanRankResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "TianguanRankData" = betterproto.message_field(3)


@dataclass
class TianguanRankData(betterproto.Message):
    rank: List["TianguanRank"] = betterproto.message_field(1)


@dataclass
class TianguanRank(betterproto.Message):
    rank: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    face: str = betterproto.string_field(3)


@dataclass
class TianguanSendListReq(betterproto.Message):
    gift: int = betterproto.int32_field(1)


@dataclass
class TianguanSendListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "TianguanSendListData" = betterproto.message_field(3)


@dataclass
class TianguanSendListData(betterproto.Message):
    list: List["TianguanSendList"] = betterproto.message_field(1)


@dataclass
class TianguanSendList(betterproto.Message):
    id: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    remain: int = betterproto.int32_field(3)
    sign: str = betterproto.string_field(4)


@dataclass
class TianguanReceiveReq(betterproto.Message):
    # 买赠序号
    id: int = betterproto.int32_field(1)
    # 买赠签名
    sign: str = betterproto.string_field(2)


@dataclass
class TianguanSendResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "TianguanSendData" = betterproto.message_field(3)


@dataclass
class TianguanSendData(betterproto.Message):
    # 买赠序号
    id: int = betterproto.int32_field(1)
    # 买赠签名
    sign: str = betterproto.string_field(2)


@dataclass
class TianguanSendReq(betterproto.Message):
    gift: int = betterproto.int32_field(1)
    num: int = betterproto.int32_field(2)


@dataclass
class TianguanBuyReq(betterproto.Message):
    gift: int = betterproto.int32_field(1)


@dataclass
class TianguanGiftResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "TianguanGiftData" = betterproto.message_field(3)


@dataclass
class TianguanGiftData(betterproto.Message):
    # 礼包1 动态价格
    gift1_price: int = betterproto.int32_field(1)
    # 礼包4 剩余数量
    gift4_num: int = betterproto.int32_field(2)
    # 礼包4 购买状态 1-可买 0-不可买
    gift4_status: int = betterproto.int32_field(3)
    # 已购状态
    gift1_done: int = betterproto.int32_field(4)
    gift2_done: int = betterproto.int32_field(5)
    gift3_done: int = betterproto.int32_field(6)
    # 买赠状态
    gift1_send: int = betterproto.int32_field(7)
    gift2_send: int = betterproto.int32_field(8)
    gift3_send: int = betterproto.int32_field(9)
    # 钱包余额
    wallet: int = betterproto.int32_field(10)
    # 礼包4 ID
    gift4_id: int = betterproto.int32_field(11)
    gift4_addr: str = betterproto.string_field(12)
    gift4_name: str = betterproto.string_field(13)
    gift4_phone: str = betterproto.string_field(14)


@dataclass
class TianguanBuyResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "TianguanBuyData" = betterproto.message_field(3)


@dataclass
class TianguanBuyData(betterproto.Message):
    id: int = betterproto.int32_field(1)


@dataclass
class TianguanGiftShareReq(betterproto.Message):
    id: int = betterproto.int32_field(1)
    sign: str = betterproto.string_field(2)


@dataclass
class TianguanGiftShareResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "TianguanGiftShareData" = betterproto.message_field(3)


@dataclass
class TianguanGiftShareData(betterproto.Message):
    name: str = betterproto.string_field(1)
    gift: str = betterproto.string_field(2)


@dataclass
class AliPayCouponResp(betterproto.Message):
    # code 0->success
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "AliPayCouponData" = betterproto.message_field(3)


@dataclass
class AliPayCouponData(betterproto.Message):
    # 是否还有满减红包
    has_hongbao: bool = betterproto.bool_field(1)
    # 1->未开始 2->进行中 3->已结束
    in_activity_time: int = betterproto.int32_field(2)
    # 当前时间，格式 "2006-01-02T15:04:05Z07:00"
    now: str = betterproto.string_field(3)
    # 是否登录
    is_login: bool = betterproto.bool_field(4)
    # 是否还有首充机会
    has_first_pay: bool = betterproto.bool_field(5)
    # 推荐漫画信息
    comic_info: List["AliPayCouponComicInfo"] = betterproto.message_field(6)


@dataclass
class AliPayCouponComicInfo(betterproto.Message):
    # 漫画id
    comic_id: int = betterproto.int32_field(1)
    # 漫画图片
    comic_pic: str = betterproto.string_field(2)
    # 漫画名称
    comic_title: str = betterproto.string_field(3)


@dataclass
class XiaomotouHomeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "XiaomotouHomeData" = betterproto.message_field(3)


@dataclass
class XiaomotouHomeData(betterproto.Message):
    # 当前装备
    playter: "XiaomotouPlayer" = betterproto.message_field(1)
    # 当前任务
    task: "XiaomotouTask" = betterproto.message_field(2)
    # 已获得道具
    items: List[int] = betterproto.int32_field(3)
    # 货币
    gold: int = betterproto.int32_field(4)
    # 当前时间
    now: str = betterproto.string_field(5)


@dataclass
class XiaomotouPlayer(betterproto.Message):
    head: int = betterproto.int32_field(1)
    eye: int = betterproto.int32_field(2)
    mouth: int = betterproto.int32_field(3)
    clothes: int = betterproto.int32_field(4)
    trousers: int = betterproto.int32_field(5)
    pendant: int = betterproto.int32_field(6)
    background: int = betterproto.int32_field(7)
    body: int = betterproto.int32_field(8)


@dataclass
class XiaomotouTask(betterproto.Message):
    # 任务ID
    id: int = betterproto.int32_field(1)
    # 开始时间
    start: str = betterproto.string_field(2)
    # 结束时间
    end: str = betterproto.string_field(3)


@dataclass
class XiaomotouBuyReq(betterproto.Message):
    # 道具ID
    id: int = betterproto.int32_field(1)


@dataclass
class XiaomotouSaveReq(betterproto.Message):
    head: int = betterproto.int32_field(1)
    eye: int = betterproto.int32_field(2)
    mouth: int = betterproto.int32_field(3)
    clothes: int = betterproto.int32_field(4)
    trousers: int = betterproto.int32_field(5)
    pendant: int = betterproto.int32_field(6)
    background: int = betterproto.int32_field(7)
    body: int = betterproto.int32_field(8)


@dataclass
class XiaomotouStartReq(betterproto.Message):
    id: int = betterproto.int32_field(1)


@dataclass
class XiaomotouCompleteResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "XiaomotouCompleteData" = betterproto.message_field(3)


@dataclass
class XiaomotouCompleteData(betterproto.Message):
    item: List[int] = betterproto.int32_field(1)
    gold: int = betterproto.int32_field(2)
    coupon: int = betterproto.int32_field(3)


@dataclass
class XiaomotouStartResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "XiaomotouStartData" = betterproto.message_field(3)


@dataclass
class XiaomotouStartData(betterproto.Message):
    # 任务ID
    id: int = betterproto.int32_field(1)
    # 开始时间
    start: str = betterproto.string_field(2)
    # 结束时间
    end: str = betterproto.string_field(3)


@dataclass
class KuntunHomeResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "KuntunHomeData" = betterproto.message_field(3)


@dataclass
class KuntunHomeData(betterproto.Message):
    # 游戏次数
    num: int = betterproto.int32_field(1)
    # 当前积分
    point: int = betterproto.int32_field(2)
    # 阅读章节
    read: int = betterproto.int32_field(3)
    # 追漫
    fav: int = betterproto.int32_field(4)
    # 分享
    share: int = betterproto.int32_field(5)
    # 兑换信息 `1-已兑换`
    exchange: List[int] = betterproto.int32_field(6)
    # 已发弹幕
    danmaku: int = betterproto.int32_field(7)


@dataclass
class KuntunGameReq(betterproto.Message):
    # 阶段 1-开始 2-结束
    step: int = betterproto.int32_field(1)
    # 分数
    point: int = betterproto.int32_field(2)


@dataclass
class KuntunExchangeReq(betterproto.Message):
    # 兑换ID
    id: int = betterproto.int32_field(1)


@dataclass
class KuntunRankResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "KuntunRankData" = betterproto.message_field(3)


@dataclass
class KuntunRankData(betterproto.Message):
    # 排行榜
    list: List["KuntunList"] = betterproto.message_field(1)
    # 我的排名
    my: "KuntunList" = betterproto.message_field(2)


@dataclass
class KuntunList(betterproto.Message):
    # 用户ID
    uid: int = betterproto.int64_field(1)
    # 用户头像
    face: str = betterproto.string_field(2)
    # 用户昵称
    name: str = betterproto.string_field(3)
    # 积分
    point: int = betterproto.int32_field(4)
    # 排名
    rank: int = betterproto.int32_field(5)


class ActivityStub(betterproto.ServiceStub):
    """活动服务"""

    @allure.step("""小魔头-首页""")
    def xiaomotou_home(self, request: EmptyRequest) -> XiaomotouHomeResp:
        """小魔头-首页"""
        logging.getLogger(__name__).info(
            "start call " + "[xiaomotou_home]" + " api" + "=>" + """小魔头-首页"""
        )
        response = XiaomotouHomeResp()
        self._do_twirp_rpc("/activity.v3.Activity/XiaomotouHome", request, response)
        logging.getLogger(__name__).info("call " + "[xiaomotou_home]" + " api success!")
        return response

    @allure.step("""小魔头-购买""")
    def xiaomotou_buy(self, request: XiaomotouBuyReq) -> DefaultResponse:
        """小魔头-购买"""
        logging.getLogger(__name__).info(
            "start call " + "[xiaomotou_buy]" + " api" + "=>" + """小魔头-购买"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v3.Activity/XiaomotouBuy", request, response)
        logging.getLogger(__name__).info("call " + "[xiaomotou_buy]" + " api success!")
        return response

    @allure.step("""小魔头-保存""")
    def xiaomotou_save(self, request: XiaomotouSaveReq) -> DefaultResponse:
        """小魔头-保存"""
        logging.getLogger(__name__).info(
            "start call " + "[xiaomotou_save]" + " api" + "=>" + """小魔头-保存"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v3.Activity/XiaomotouSave", request, response)
        logging.getLogger(__name__).info("call " + "[xiaomotou_save]" + " api success!")
        return response

    @allure.step("""小魔头-任务开始""")
    def xiaomotou_start(self, request: XiaomotouStartReq) -> XiaomotouStartResp:
        """小魔头-任务开始"""
        logging.getLogger(__name__).info(
            "start call " + "[xiaomotou_start]" + " api" + "=>" + """小魔头-任务开始"""
        )
        response = XiaomotouStartResp()
        self._do_twirp_rpc("/activity.v3.Activity/XiaomotouStart", request, response)
        logging.getLogger(__name__).info(
            "call " + "[xiaomotou_start]" + " api success!"
        )
        return response

    @allure.step("""小魔头-任务结束""")
    def xiaomotou_complete(self, request: EmptyRequest) -> XiaomotouCompleteResp:
        """小魔头-任务结束"""
        logging.getLogger(__name__).info(
            "start call " + "[xiaomotou_complete]" + " api" + "=>" + """小魔头-任务结束"""
        )
        response = XiaomotouCompleteResp()
        self._do_twirp_rpc("/activity.v3.Activity/XiaomotouComplete", request, response)
        logging.getLogger(__name__).info(
            "call " + "[xiaomotou_complete]" + " api success!"
        )
        return response

    @allure.step("""鲲吞天下-首页""")
    def kuntun_home(self, request: EmptyRequest) -> KuntunHomeResp:
        """鲲吞天下-首页"""
        logging.getLogger(__name__).info(
            "start call " + "[kuntun_home]" + " api" + "=>" + """鲲吞天下-首页"""
        )
        response = KuntunHomeResp()
        self._do_twirp_rpc("/activity.v3.Activity/KuntunHome", request, response)
        logging.getLogger(__name__).info("call " + "[kuntun_home]" + " api success!")
        return response

    @allure.step("""鲲吞天下-游戏""")
    def kuntun_game(self, request: KuntunGameReq) -> DefaultResponse:
        """鲲吞天下-游戏"""
        logging.getLogger(__name__).info(
            "start call " + "[kuntun_game]" + " api" + "=>" + """鲲吞天下-游戏"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v3.Activity/KuntunGame", request, response)
        logging.getLogger(__name__).info("call " + "[kuntun_game]" + " api success!")
        return response

    @allure.step("""鲲吞天下-奖品兑换""")
    def kuntun_exchange(self, request: KuntunExchangeReq) -> DefaultResponse:
        """鲲吞天下-奖品兑换"""
        logging.getLogger(__name__).info(
            "start call " + "[kuntun_exchange]" + " api" + "=>" + """鲲吞天下-奖品兑换"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v3.Activity/KuntunExchange", request, response)
        logging.getLogger(__name__).info(
            "call " + "[kuntun_exchange]" + " api success!"
        )
        return response

    @allure.step("""鲲吞天下-排行榜""")
    def kuntun_rank(self, request: EmptyRequest) -> KuntunRankResp:
        """鲲吞天下-排行榜"""
        logging.getLogger(__name__).info(
            "start call " + "[kuntun_rank]" + " api" + "=>" + """鲲吞天下-排行榜"""
        )
        response = KuntunRankResp()
        self._do_twirp_rpc("/activity.v3.Activity/KuntunRank", request, response)
        logging.getLogger(__name__).info("call " + "[kuntun_rank]" + " api success!")
        return response

    @allure.step("""鲲吞天下-人气长评""")
    def kuntun_long_comment(self, request: EmptyRequest) -> LongCommentResp:
        """鲲吞天下-人气长评"""
        logging.getLogger(__name__).info(
            "start call " + "[kuntun_long_comment]" + " api" + "=>" + """鲲吞天下-人气长评"""
        )
        response = LongCommentResp()
        self._do_twirp_rpc("/activity.v3.Activity/KuntunLongComment", request, response)
        logging.getLogger(__name__).info(
            "call " + "[kuntun_long_comment]" + " api success!"
        )
        return response

    @allure.step("""鲲吞天下-随机评论""")
    def kuntun_rand_comment(self, request: EmptyRequest) -> RandCommentResp:
        """鲲吞天下-随机评论"""
        logging.getLogger(__name__).info(
            "start call " + "[kuntun_rand_comment]" + " api" + "=>" + """鲲吞天下-随机评论"""
        )
        response = RandCommentResp()
        self._do_twirp_rpc("/activity.v3.Activity/KuntunRandComment", request, response)
        logging.getLogger(__name__).info(
            "call " + "[kuntun_rand_comment]" + " api success!"
        )
        return response

    @allure.step("""鲲吞天下-发弹幕""")
    def kuntun_danmaku(self, request: EmptyRequest) -> DefaultResponse:
        """鲲吞天下-发弹幕"""
        logging.getLogger(__name__).info(
            "start call " + "[kuntun_danmaku]" + " api" + "=>" + """鲲吞天下-发弹幕"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v3.Activity/KuntunDanmaku", request, response)
        logging.getLogger(__name__).info("call " + "[kuntun_danmaku]" + " api success!")
        return response

    @allure.step("""鲲吞天下-分享""")
    def kuntun_share(self, request: EmptyRequest) -> DefaultResponse:
        """鲲吞天下-分享"""
        logging.getLogger(__name__).info(
            "start call " + "[kuntun_share]" + " api" + "=>" + """鲲吞天下-分享"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v3.Activity/KuntunShare", request, response)
        logging.getLogger(__name__).info("call " + "[kuntun_share]" + " api success!")
        return response

    @allure.step("""海贼王-首页""")
    def one_piece_home(self, request: EmptyRequest) -> OnePieceHomeResp:
        """海贼王-首页"""
        logging.getLogger(__name__).info(
            "start call " + "[one_piece_home]" + " api" + "=>" + """海贼王-首页"""
        )
        response = OnePieceHomeResp()
        self._do_twirp_rpc("/activity.v3.Activity/OnePieceHome", request, response)
        logging.getLogger(__name__).info("call " + "[one_piece_home]" + " api success!")
        return response

    @allure.step("""海贼王-抽奖""")
    def one_piece_draw(self, request: OnePieceDrawReq) -> OnePieceDrawResp:
        """海贼王-抽奖"""
        logging.getLogger(__name__).info(
            "start call " + "[one_piece_draw]" + " api" + "=>" + """海贼王-抽奖"""
        )
        response = OnePieceDrawResp()
        self._do_twirp_rpc("/activity.v3.Activity/OnePieceDraw", request, response)
        logging.getLogger(__name__).info("call " + "[one_piece_draw]" + " api success!")
        return response

    @allure.step("""海贼王-填写地址""")
    def one_piece_addr(self, request: OnePieceAddrReq) -> DefaultResponse:
        """海贼王-填写地址"""
        logging.getLogger(__name__).info(
            "start call " + "[one_piece_addr]" + " api" + "=>" + """海贼王-填写地址"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v3.Activity/OnePieceAddr", request, response)
        logging.getLogger(__name__).info("call " + "[one_piece_addr]" + " api success!")
        return response

    @allure.step("""海贼王-中奖记录""")
    def one_piece_prize(self, request: EmptyRequest) -> OnePiecePrizeResp:
        """海贼王-中奖记录"""
        logging.getLogger(__name__).info(
            "start call " + "[one_piece_prize]" + " api" + "=>" + """海贼王-中奖记录"""
        )
        response = OnePiecePrizeResp()
        self._do_twirp_rpc("/activity.v3.Activity/OnePiecePrize", request, response)
        logging.getLogger(__name__).info(
            "call " + "[one_piece_prize]" + " api success!"
        )
        return response

    @allure.step("""三月答题""")
    def march_answer(self, request: MarchAnswerReq) -> MarchAnswerResp:
        """三月答题"""
        logging.getLogger(__name__).info(
            "start call " + "[march_answer]" + " api" + "=>" + """三月答题"""
        )
        response = MarchAnswerResp()
        self._do_twirp_rpc("/activity.v3.Activity/MarchAnswer", request, response)
        logging.getLogger(__name__).info("call " + "[march_answer]" + " api success!")
        return response

    @allure.step("""三月出题""")
    def march_question(self, request: MarchQuestionReq) -> DefaultResponse:
        """三月出题"""
        logging.getLogger(__name__).info(
            "start call " + "[march_question]" + " api" + "=>" + """三月出题"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v3.Activity/MarchQuestion", request, response)
        logging.getLogger(__name__).info("call " + "[march_question]" + " api success!")
        return response

    @allure.step("""三月首页""")
    def march_home(self, request: MarchHomeReq) -> MarchHomeResp:
        """三月首页"""
        logging.getLogger(__name__).info(
            "start call " + "[march_home]" + " api" + "=>" + """三月首页"""
        )
        response = MarchHomeResp()
        self._do_twirp_rpc("/activity.v3.Activity/MarchHome", request, response)
        logging.getLogger(__name__).info("call " + "[march_home]" + " api success!")
        return response

    @allure.step("""天官赐福-礼包首页""")
    def tianguan_gift(self, request: EmptyRequest) -> TianguanGiftResp:
        """天官赐福-礼包首页"""
        logging.getLogger(__name__).info(
            "start call " + "[tianguan_gift]" + " api" + "=>" + """天官赐福-礼包首页"""
        )
        response = TianguanGiftResp()
        self._do_twirp_rpc("/activity.v3.Activity/TianguanGift", request, response)
        logging.getLogger(__name__).info("call " + "[tianguan_gift]" + " api success!")
        return response

    @allure.step("""天官赐福-购买""")
    def tianguan_buy(self, request: TianguanBuyReq) -> TianguanBuyResp:
        """天官赐福-购买"""
        logging.getLogger(__name__).info(
            "start call " + "[tianguan_buy]" + " api" + "=>" + """天官赐福-购买"""
        )
        response = TianguanBuyResp()
        self._do_twirp_rpc("/activity.v3.Activity/TianguanBuy", request, response)
        logging.getLogger(__name__).info("call " + "[tianguan_buy]" + " api success!")
        return response

    @allure.step("""天官赐福-买赠""")
    def tianguan_send(self, request: TianguanSendReq) -> TianguanSendResp:
        """天官赐福-买赠"""
        logging.getLogger(__name__).info(
            "start call " + "[tianguan_send]" + " api" + "=>" + """天官赐福-买赠"""
        )
        response = TianguanSendResp()
        self._do_twirp_rpc("/activity.v3.Activity/TianguanSend", request, response)
        logging.getLogger(__name__).info("call " + "[tianguan_send]" + " api success!")
        return response

    @allure.step("""天官赐福-领取""")
    def tianguan_receive(self, request: TianguanReceiveReq) -> DefaultResponse:
        """天官赐福-领取"""
        logging.getLogger(__name__).info(
            "start call " + "[tianguan_receive]" + " api" + "=>" + """天官赐福-领取"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v3.Activity/TianguanReceive", request, response)
        logging.getLogger(__name__).info(
            "call " + "[tianguan_receive]" + " api success!"
        )
        return response

    @allure.step("""天官赐福-买赠列表""")
    def tianguan_send_list(self, request: TianguanSendListReq) -> TianguanSendListResp:
        """天官赐福-买赠列表"""
        logging.getLogger(__name__).info(
            "start call " + "[tianguan_send_list]" + " api" + "=>" + """天官赐福-买赠列表"""
        )
        response = TianguanSendListResp()
        self._do_twirp_rpc("/activity.v3.Activity/TianguanSendList", request, response)
        logging.getLogger(__name__).info(
            "call " + "[tianguan_send_list]" + " api success!"
        )
        return response

    @allure.step("""天官赐福-填写地址""")
    def tianguan_address(self, request: TianguanAddressReq) -> DefaultResponse:
        """天官赐福-填写地址"""
        logging.getLogger(__name__).info(
            "start call " + "[tianguan_address]" + " api" + "=>" + """天官赐福-填写地址"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v3.Activity/TianguanAddress", request, response)
        logging.getLogger(__name__).info(
            "call " + "[tianguan_address]" + " api success!"
        )
        return response

    @allure.step("""天官赐福-买赠排行榜""")
    def tianguan_rank(self, request: EmptyRequest) -> TianguanRankResp:
        """天官赐福-买赠排行榜"""
        logging.getLogger(__name__).info(
            "start call " + "[tianguan_rank]" + " api" + "=>" + """天官赐福-买赠排行榜"""
        )
        response = TianguanRankResp()
        self._do_twirp_rpc("/activity.v3.Activity/TianguanRank", request, response)
        logging.getLogger(__name__).info("call " + "[tianguan_rank]" + " api success!")
        return response

    @allure.step("""天官赐福-礼包分享页""")
    def tianguan_gift_share(
        self, request: TianguanGiftShareReq
    ) -> TianguanGiftShareResp:
        """天官赐福-礼包分享页"""
        logging.getLogger(__name__).info(
            "start call " + "[tianguan_gift_share]" + " api" + "=>" + """天官赐福-礼包分享页"""
        )
        response = TianguanGiftShareResp()
        self._do_twirp_rpc("/activity.v3.Activity/TianguanGiftShare", request, response)
        logging.getLogger(__name__).info(
            "call " + "[tianguan_gift_share]" + " api success!"
        )
        return response

    @allure.step("""开年新作""")
    def new_year_guide(self, request: EmptyRequest) -> NewYearGuideResp:
        """开年新作"""
        logging.getLogger(__name__).info(
            "start call " + "[new_year_guide]" + " api" + "=>" + """开年新作"""
        )
        response = NewYearGuideResp()
        self._do_twirp_rpc("/activity.v3.Activity/NewYearGuide", request, response)
        logging.getLogger(__name__).info("call " + "[new_year_guide]" + " api success!")
        return response

    @allure.step("""开年新作-追漫""")
    def new_year_guide_fav(self, request: NewYearGuideFavReq) -> DefaultResponse:
        """开年新作-追漫"""
        logging.getLogger(__name__).info(
            "start call " + "[new_year_guide_fav]" + " api" + "=>" + """开年新作-追漫"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v3.Activity/NewYearGuideFav", request, response)
        logging.getLogger(__name__).info(
            "call " + "[new_year_guide_fav]" + " api success!"
        )
        return response

    @allure.step("""服务器信息""")
    def server_info(self, request: ServerInfoReq) -> ServerInfoResp:
        """服务器信息"""
        logging.getLogger(__name__).info(
            "start call " + "[server_info]" + " api" + "=>" + """服务器信息"""
        )
        response = ServerInfoResp()
        self._do_twirp_rpc("/activity.v3.Activity/ServerInfo", request, response)
        logging.getLogger(__name__).info("call " + "[server_info]" + " api success!")
        return response

    @allure.step("""首冲信息""")
    def first_pay(self, request: EmptyRequest) -> FirstPayResp:
        """首冲信息"""
        logging.getLogger(__name__).info(
            "start call " + "[first_pay]" + " api" + "=>" + """首冲信息"""
        )
        response = FirstPayResp()
        self._do_twirp_rpc("/activity.v3.Activity/FirstPay", request, response)
        logging.getLogger(__name__).info("call " + "[first_pay]" + " api success!")
        return response

    @allure.step("""天宝伏妖录-活动页""")
    def tianbao_question(self, request: EmptyRequest) -> DefaultResponse:
        """天宝伏妖录-活动页"""
        logging.getLogger(__name__).info(
            "start call " + "[tianbao_question]" + " api" + "=>" + """天宝伏妖录-活动页"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v3.Activity/TianbaoQuestion", request, response)
        logging.getLogger(__name__).info(
            "call " + "[tianbao_question]" + " api success!"
        )
        return response

    @allure.step("""天宝伏妖录-答题""")
    def tianbao_answer(self, request: TianbaoAnswerReq) -> TianbaoAnswerResp:
        """天宝伏妖录-答题"""
        logging.getLogger(__name__).info(
            "start call " + "[tianbao_answer]" + " api" + "=>" + """天宝伏妖录-答题"""
        )
        response = TianbaoAnswerResp()
        self._do_twirp_rpc("/activity.v3.Activity/TianbaoAnswer", request, response)
        logging.getLogger(__name__).info("call " + "[tianbao_answer]" + " api success!")
        return response

    @allure.step("""神秘书屋-算命""")
    def suanming(self, request: SuanmingReq) -> SuanmingResp:
        """神秘书屋-算命"""
        logging.getLogger(__name__).info(
            "start call " + "[suanming]" + " api" + "=>" + """神秘书屋-算命"""
        )
        response = SuanmingResp()
        self._do_twirp_rpc("/activity.v3.Activity/Suanming", request, response)
        logging.getLogger(__name__).info("call " + "[suanming]" + " api success!")
        return response

    @allure.step("""春节祝福""")
    def chinese_newyear(self, request: EmptyRequest) -> ChineseNewyearResp:
        """春节祝福"""
        logging.getLogger(__name__).info(
            "start call " + "[chinese_newyear]" + " api" + "=>" + """春节祝福"""
        )
        response = ChineseNewyearResp()
        self._do_twirp_rpc("/activity.v3.Activity/ChineseNewyear", request, response)
        logging.getLogger(__name__).info(
            "call " + "[chinese_newyear]" + " api success!"
        )
        return response

    @allure.step()
    def chinese_newyear_danmaku(self, request: EmptyRequest) -> DefaultResponse:
        logging.getLogger(__name__).info(
            "start call " + "[chinese_newyear_danmaku]" + " api"
        )
        response = DefaultResponse()
        self._do_twirp_rpc(
            "/activity.v3.Activity/ChineseNewyearDanmaku", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[chinese_newyear_danmaku]" + " api success!"
        )
        return response

    @allure.step("""春节贡献榜""")
    def chinese_newyear_rank(self, request: EmptyRequest) -> ChineseNewyearRankResp:
        """春节贡献榜"""
        logging.getLogger(__name__).info(
            "start call " + "[chinese_newyear_rank]" + " api" + "=>" + """春节贡献榜"""
        )
        response = ChineseNewyearRankResp()
        self._do_twirp_rpc(
            "/activity.v3.Activity/ChineseNewyearRank", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[chinese_newyear_rank]" + " api success!"
        )
        return response

    @allure.step("""天官赐福-小游戏获得灯火""")
    def tianguan_game(self, request: TianguanGameReq) -> DefaultResponse:
        """天官赐福-小游戏获得灯火"""
        logging.getLogger(__name__).info(
            "start call " + "[tianguan_game]" + " api" + "=>" + """天官赐福-小游戏获得灯火"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v3.Activity/TianguanGame", request, response)
        logging.getLogger(__name__).info("call " + "[tianguan_game]" + " api success!")
        return response

    @allure.step("""天官赐福-分享获得等咯""")
    def tianguan_share(self, request: TianguanShareReq) -> TianguanShareResp:
        """天官赐福-分享获得等咯"""
        logging.getLogger(__name__).info(
            "start call " + "[tianguan_share]" + " api" + "=>" + """天官赐福-分享获得等咯"""
        )
        response = TianguanShareResp()
        self._do_twirp_rpc("/activity.v3.Activity/TianguanShare", request, response)
        logging.getLogger(__name__).info("call " + "[tianguan_share]" + " api success!")
        return response

    @allure.step("""天官赐福-首页""")
    def tianguan(self, request: EmptyRequest) -> TianguanResp:
        """天官赐福-首页"""
        logging.getLogger(__name__).info(
            "start call " + "[tianguan]" + " api" + "=>" + """天官赐福-首页"""
        )
        response = TianguanResp()
        self._do_twirp_rpc("/activity.v3.Activity/Tianguan", request, response)
        logging.getLogger(__name__).info("call " + "[tianguan]" + " api success!")
        return response

    @allure.step("""天官赐福-解锁""")
    def tianguan_unlock(self, request: EmptyRequest) -> DefaultResponse:
        """天官赐福-解锁"""
        logging.getLogger(__name__).info(
            "start call " + "[tianguan_unlock]" + " api" + "=>" + """天官赐福-解锁"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v3.Activity/TianguanUnlock", request, response)
        logging.getLogger(__name__).info(
            "call " + "[tianguan_unlock]" + " api success!"
        )
        return response

    @allure.step("""天官赐福-分享页""")
    def tianguan_shared(self, request: TianguanSharedReq) -> TianguanSharedResp:
        """天官赐福-分享页"""
        logging.getLogger(__name__).info(
            "start call " + "[tianguan_shared]" + " api" + "=>" + """天官赐福-分享页"""
        )
        response = TianguanSharedResp()
        self._do_twirp_rpc("/activity.v3.Activity/TianguanShared", request, response)
        logging.getLogger(__name__).info(
            "call " + "[tianguan_shared]" + " api success!"
        )
        return response

    @allure.step("""会员日""")
    def huiyuanri(self, request: EmptyRequest) -> DefaultResponse:
        """会员日"""
        logging.getLogger(__name__).info(
            "start call " + "[huiyuanri]" + " api" + "=>" + """会员日"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v3.Activity/Huiyuanri", request, response)
        logging.getLogger(__name__).info("call " + "[huiyuanri]" + " api success!")
        return response

    @allure.step("""元宵-首页""")
    def yuanxiao_home(self, request: EmptyRequest) -> YuanxiaoHomeResp:
        """元宵-首页"""
        logging.getLogger(__name__).info(
            "start call " + "[yuanxiao_home]" + " api" + "=>" + """元宵-首页"""
        )
        response = YuanxiaoHomeResp()
        self._do_twirp_rpc("/activity.v3.Activity/YuanxiaoHome", request, response)
        logging.getLogger(__name__).info("call " + "[yuanxiao_home]" + " api success!")
        return response

    @allure.step("""元宵-抽奖""")
    def yuanxiao_draw(self, request: EmptyRequest) -> YuanxiaoDrawResp:
        """元宵-抽奖"""
        logging.getLogger(__name__).info(
            "start call " + "[yuanxiao_draw]" + " api" + "=>" + """元宵-抽奖"""
        )
        response = YuanxiaoDrawResp()
        self._do_twirp_rpc("/activity.v3.Activity/YuanxiaoDraw", request, response)
        logging.getLogger(__name__).info("call " + "[yuanxiao_draw]" + " api success!")
        return response

    @allure.step("""元宵-我的奖品""")
    def yuanxiao_prize(self, request: EmptyRequest) -> YuanxiaoPrizeResp:
        """元宵-我的奖品"""
        logging.getLogger(__name__).info(
            "start call " + "[yuanxiao_prize]" + " api" + "=>" + """元宵-我的奖品"""
        )
        response = YuanxiaoPrizeResp()
        self._do_twirp_rpc("/activity.v3.Activity/YuanxiaoPrize", request, response)
        logging.getLogger(__name__).info("call " + "[yuanxiao_prize]" + " api success!")
        return response

    @allure.step("""元宵-填写地址""")
    def yuanxiao_address(self, request: YuanxiaoAddressReq) -> DefaultResponse:
        """元宵-填写地址"""
        logging.getLogger(__name__).info(
            "start call " + "[yuanxiao_address]" + " api" + "=>" + """元宵-填写地址"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v3.Activity/YuanxiaoAddress", request, response)
        logging.getLogger(__name__).info(
            "call " + "[yuanxiao_address]" + " api success!"
        )
        return response

    @allure.step("""元宵-签到""")
    def yuanxiao_sign(self, request: EmptyRequest) -> YuanxiaoSignResp:
        """元宵-签到"""
        logging.getLogger(__name__).info(
            "start call " + "[yuanxiao_sign]" + " api" + "=>" + """元宵-签到"""
        )
        response = YuanxiaoSignResp()
        self._do_twirp_rpc("/activity.v3.Activity/YuanxiaoSign", request, response)
        logging.getLogger(__name__).info("call " + "[yuanxiao_sign]" + " api success!")
        return response

    @allure.step("""百炼-创建队伍""")
    def bailian_organize(self, request: BailianOrganizeReq) -> BailianOrganizeResp:
        """百炼-创建队伍"""
        logging.getLogger(__name__).info(
            "start call " + "[bailian_organize]" + " api" + "=>" + """百炼-创建队伍"""
        )
        response = BailianOrganizeResp()
        self._do_twirp_rpc("/activity.v3.Activity/BailianOrganize", request, response)
        logging.getLogger(__name__).info(
            "call " + "[bailian_organize]" + " api success!"
        )
        return response

    @allure.step("""百炼-加入队伍""")
    def bailian_join(self, request: BailianJoinReq) -> BailianJoinResp:
        """百炼-加入队伍"""
        logging.getLogger(__name__).info(
            "start call " + "[bailian_join]" + " api" + "=>" + """百炼-加入队伍"""
        )
        response = BailianJoinResp()
        self._do_twirp_rpc("/activity.v3.Activity/BailianJoin", request, response)
        logging.getLogger(__name__).info("call " + "[bailian_join]" + " api success!")
        return response

    @allure.step("""百炼-离开队伍""")
    def bailian_leave(self, request: BailianLeaveReq) -> BailianLeaveResp:
        """百炼-离开队伍"""
        logging.getLogger(__name__).info(
            "start call " + "[bailian_leave]" + " api" + "=>" + """百炼-离开队伍"""
        )
        response = BailianLeaveResp()
        self._do_twirp_rpc("/activity.v3.Activity/BailianLeave", request, response)
        logging.getLogger(__name__).info("call " + "[bailian_leave]" + " api success!")
        return response

    @allure.step("""百炼-解散队伍""")
    def bailian_dismiss(self, request: BailianDismissReq) -> BailianDismissResp:
        """百炼-解散队伍"""
        logging.getLogger(__name__).info(
            "start call " + "[bailian_dismiss]" + " api" + "=>" + """百炼-解散队伍"""
        )
        response = BailianDismissResp()
        self._do_twirp_rpc("/activity.v3.Activity/BailianDismiss", request, response)
        logging.getLogger(__name__).info(
            "call " + "[bailian_dismiss]" + " api success!"
        )
        return response

    @allure.step("""百炼-结算""")
    def bailian_settle(self, request: BailianSettleReq) -> BailianSettleResp:
        """百炼-结算"""
        logging.getLogger(__name__).info(
            "start call " + "[bailian_settle]" + " api" + "=>" + """百炼-结算"""
        )
        response = BailianSettleResp()
        self._do_twirp_rpc("/activity.v3.Activity/BailianSettle", request, response)
        logging.getLogger(__name__).info("call " + "[bailian_settle]" + " api success!")
        return response

    @allure.step("""百炼-队伍信息""")
    def bailian_info(self, request: BailianInfoReq) -> BailianInfoResp:
        """百炼-队伍信息"""
        logging.getLogger(__name__).info(
            "start call " + "[bailian_info]" + " api" + "=>" + """百炼-队伍信息"""
        )
        response = BailianInfoResp()
        self._do_twirp_rpc("/activity.v3.Activity/BailianInfo", request, response)
        logging.getLogger(__name__).info("call " + "[bailian_info]" + " api success!")
        return response

    @allure.step("""百炼-首页""")
    def bailian_home(self, request: BailianHomeReq) -> BailianHomeResp:
        """百炼-首页"""
        logging.getLogger(__name__).info(
            "start call " + "[bailian_home]" + " api" + "=>" + """百炼-首页"""
        )
        response = BailianHomeResp()
        self._do_twirp_rpc("/activity.v3.Activity/BailianHome", request, response)
        logging.getLogger(__name__).info("call " + "[bailian_home]" + " api success!")
        return response

    @allure.step("""百炼-礼包购买""")
    def bailian_buy(self, request: BailianBuyReq) -> BailianBuyResp:
        """百炼-礼包购买"""
        logging.getLogger(__name__).info(
            "start call " + "[bailian_buy]" + " api" + "=>" + """百炼-礼包购买"""
        )
        response = BailianBuyResp()
        self._do_twirp_rpc("/activity.v3.Activity/BailianBuy", request, response)
        logging.getLogger(__name__).info("call " + "[bailian_buy]" + " api success!")
        return response

    @allure.step("""百炼-章节信息""")
    def bailian_eplist(self, request: EmptyRequest) -> BailianEplistResp:
        """百炼-章节信息"""
        logging.getLogger(__name__).info(
            "start call " + "[bailian_eplist]" + " api" + "=>" + """百炼-章节信息"""
        )
        response = BailianEplistResp()
        self._do_twirp_rpc("/activity.v3.Activity/BailianEplist", request, response)
        logging.getLogger(__name__).info("call " + "[bailian_eplist]" + " api success!")
        return response

    @allure.step("""百炼-答题初始化""")
    def bailian_answer_init(
        self, request: BailianAnswerInitReq
    ) -> BailianAnswerInitResp:
        """百炼-答题初始化"""
        logging.getLogger(__name__).info(
            "start call " + "[bailian_answer_init]" + " api" + "=>" + """百炼-答题初始化"""
        )
        response = BailianAnswerInitResp()
        self._do_twirp_rpc("/activity.v3.Activity/BailianAnswerInit", request, response)
        logging.getLogger(__name__).info(
            "call " + "[bailian_answer_init]" + " api success!"
        )
        return response

    @allure.step("""百炼-答题""")
    def bailian_answer(self, request: BailianAnswerReq) -> BailianAnswerResp:
        """百炼-答题"""
        logging.getLogger(__name__).info(
            "start call " + "[bailian_answer]" + " api" + "=>" + """百炼-答题"""
        )
        response = BailianAnswerResp()
        self._do_twirp_rpc("/activity.v3.Activity/BailianAnswer", request, response)
        logging.getLogger(__name__).info("call " + "[bailian_answer]" + " api success!")
        return response

    @allure.step("""百炼-抽奖初始化""")
    def bailian_lottery_init(
        self, request: BailianLotteryInitReq
    ) -> BailianLotteryInitResp:
        """百炼-抽奖初始化"""
        logging.getLogger(__name__).info(
            "start call " + "[bailian_lottery_init]" + " api" + "=>" + """百炼-抽奖初始化"""
        )
        response = BailianLotteryInitResp()
        self._do_twirp_rpc(
            "/activity.v3.Activity/BailianLotteryInit", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[bailian_lottery_init]" + " api success!"
        )
        return response

    @allure.step("""百炼-抽奖""")
    def bailian_lottery(self, request: BailianLotteryReq) -> BailianLotteryResp:
        """百炼-抽奖"""
        logging.getLogger(__name__).info(
            "start call " + "[bailian_lottery]" + " api" + "=>" + """百炼-抽奖"""
        )
        response = BailianLotteryResp()
        self._do_twirp_rpc("/activity.v3.Activity/BailianLottery", request, response)
        logging.getLogger(__name__).info(
            "call " + "[bailian_lottery]" + " api success!"
        )
        return response

    @allure.step("""百炼-奖品列表""")
    def bailian_prize(self, request: BailianPrizeReq) -> BailianPrizeResp:
        """百炼-奖品列表"""
        logging.getLogger(__name__).info(
            "start call " + "[bailian_prize]" + " api" + "=>" + """百炼-奖品列表"""
        )
        response = BailianPrizeResp()
        self._do_twirp_rpc("/activity.v3.Activity/BailianPrize", request, response)
        logging.getLogger(__name__).info("call " + "[bailian_prize]" + " api success!")
        return response

    @allure.step("""支付宝红包""")
    def ali_pay_hongbao(self, request: EmptyRequest) -> AliPayHongbaoResp:
        """支付宝红包"""
        logging.getLogger(__name__).info(
            "start call " + "[ali_pay_hongbao]" + " api" + "=>" + """支付宝红包"""
        )
        response = AliPayHongbaoResp()
        self._do_twirp_rpc("/activity.v3.Activity/AliPayHongbao", request, response)
        logging.getLogger(__name__).info(
            "call " + "[ali_pay_hongbao]" + " api success!"
        )
        return response

    @allure.step("""支付宝打折券二期""")
    def ali_pay_coupon(self, request: EmptyRequest) -> AliPayCouponResp:
        """支付宝打折券二期"""
        logging.getLogger(__name__).info(
            "start call " + "[ali_pay_coupon]" + " api" + "=>" + """支付宝打折券二期"""
        )
        response = AliPayCouponResp()
        self._do_twirp_rpc("/activity.v3.Activity/AliPayCoupon", request, response)
        logging.getLogger(__name__).info("call " + "[ali_pay_coupon]" + " api success!")
        return response

    @allure.step("""支付平台签名接口""")
    def ali_pay_hongbao_sign(
        self, request: AliPayHongbaoSignReq
    ) -> AliPayHongbaoSignResp:
        """支付平台签名接口"""
        logging.getLogger(__name__).info(
            "start call " + "[ali_pay_hongbao_sign]" + " api" + "=>" + """支付平台签名接口"""
        )
        response = AliPayHongbaoSignResp()
        self._do_twirp_rpc("/activity.v3.Activity/AliPayHongbaoSign", request, response)
        logging.getLogger(__name__).info(
            "call " + "[ali_pay_hongbao_sign]" + " api success!"
        )
        return response

    @allure.step("""辉夜-领票""")
    def kaguya_sign(self, request: EmptyRequest) -> DefaultResponse:
        """辉夜-领票"""
        logging.getLogger(__name__).info(
            "start call " + "[kaguya_sign]" + " api" + "=>" + """辉夜-领票"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v3.Activity/KaguyaSign", request, response)
        logging.getLogger(__name__).info("call " + "[kaguya_sign]" + " api success!")
        return response

    @allure.step("""辉夜-应援""")
    def kaguaya_support(self, request: KaguayaSupportReq) -> DefaultResponse:
        """辉夜-应援"""
        logging.getLogger(__name__).info(
            "start call " + "[kaguaya_support]" + " api" + "=>" + """辉夜-应援"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v3.Activity/KaguayaSupport", request, response)
        logging.getLogger(__name__).info(
            "call " + "[kaguaya_support]" + " api success!"
        )
        return response

    @allure.step("""辉夜-中奖结果""")
    def kaguaya_result(self, request: KaguayaResultReq) -> KaguayaResultResp:
        """辉夜-中奖结果"""
        logging.getLogger(__name__).info(
            "start call " + "[kaguaya_result]" + " api" + "=>" + """辉夜-中奖结果"""
        )
        response = KaguayaResultResp()
        self._do_twirp_rpc("/activity.v3.Activity/KaguayaResult", request, response)
        logging.getLogger(__name__).info("call " + "[kaguaya_result]" + " api success!")
        return response

    @allure.step("""辉夜-填写地址""")
    def kaguaya_edit(self, request: KaguayaEditReq) -> DefaultResponse:
        """辉夜-填写地址"""
        logging.getLogger(__name__).info(
            "start call " + "[kaguaya_edit]" + " api" + "=>" + """辉夜-填写地址"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v3.Activity/KaguayaEdit", request, response)
        logging.getLogger(__name__).info("call " + "[kaguaya_edit]" + " api success!")
        return response

    @allure.step("""辉夜-首页""")
    def kaguya_home(self, request: EmptyRequest) -> KaguyaHomeResp:
        """辉夜-首页"""
        logging.getLogger(__name__).info(
            "start call " + "[kaguya_home]" + " api" + "=>" + """辉夜-首页"""
        )
        response = KaguyaHomeResp()
        self._do_twirp_rpc("/activity.v3.Activity/KaguyaHome", request, response)
        logging.getLogger(__name__).info("call " + "[kaguya_home]" + " api success!")
        return response

    @allure.step("""五一活动-首页""")
    def labor_day_home(self, request: EmptyRequest) -> LaborDayHomeResp:
        """五一活动-首页"""
        logging.getLogger(__name__).info(
            "start call " + "[labor_day_home]" + " api" + "=>" + """五一活动-首页"""
        )
        response = LaborDayHomeResp()
        self._do_twirp_rpc("/activity.v3.Activity/LaborDayHome", request, response)
        logging.getLogger(__name__).info("call " + "[labor_day_home]" + " api success!")
        return response

    @allure.step("""五一活动-用户排行榜""")
    def labor_day_rank(self, request: EmptyRequest) -> LaborDayRankResp:
        """五一活动-用户排行榜"""
        logging.getLogger(__name__).info(
            "start call " + "[labor_day_rank]" + " api" + "=>" + """五一活动-用户排行榜"""
        )
        response = LaborDayRankResp()
        self._do_twirp_rpc("/activity.v3.Activity/LaborDayRank", request, response)
        logging.getLogger(__name__).info("call " + "[labor_day_rank]" + " api success!")
        return response

    @allure.step("""五一活动-抽奖""")
    def labor_day_draw(self, request: LaborDayDrawReq) -> LaborDayDrawResp:
        """五一活动-抽奖"""
        logging.getLogger(__name__).info(
            "start call " + "[labor_day_draw]" + " api" + "=>" + """五一活动-抽奖"""
        )
        response = LaborDayDrawResp()
        self._do_twirp_rpc("/activity.v3.Activity/LaborDayDraw", request, response)
        logging.getLogger(__name__).info("call " + "[labor_day_draw]" + " api success!")
        return response

    @allure.step("""五一抽奖-填写地址""")
    def labor_day_edit(self, request: OnePieceAddrReq) -> DefaultResponse:
        """五一抽奖-填写地址"""
        logging.getLogger(__name__).info(
            "start call " + "[labor_day_edit]" + " api" + "=>" + """五一抽奖-填写地址"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v3.Activity/LaborDayEdit", request, response)
        logging.getLogger(__name__).info("call " + "[labor_day_edit]" + " api success!")
        return response

    @allure.step("""五一活动-中奖记录""")
    def labor_day_prize(self, request: EmptyRequest) -> LaborDayPrizeResp:
        """五一活动-中奖记录"""
        logging.getLogger(__name__).info(
            "start call " + "[labor_day_prize]" + " api" + "=>" + """五一活动-中奖记录"""
        )
        response = LaborDayPrizeResp()
        self._do_twirp_rpc("/activity.v3.Activity/LaborDayPrize", request, response)
        logging.getLogger(__name__).info(
            "call " + "[labor_day_prize]" + " api success!"
        )
        return response

    @allure.step("""五一活动-快捷投票""")
    def labor_day_pick(self, request: EmptyRequest) -> LaborDayPickResp:
        """五一活动-快捷投票"""
        logging.getLogger(__name__).info(
            "start call " + "[labor_day_pick]" + " api" + "=>" + """五一活动-快捷投票"""
        )
        response = LaborDayPickResp()
        self._do_twirp_rpc("/activity.v3.Activity/LaborDayPick", request, response)
        logging.getLogger(__name__).info("call " + "[labor_day_pick]" + " api success!")
        return response

    @allure.step("""五一活动-月票榜""")
    def labor_day_comic_rank(
        self, request: LaborDayComicRankReq
    ) -> LaborDayComicRankResp:
        """五一活动-月票榜"""
        logging.getLogger(__name__).info(
            "start call " + "[labor_day_comic_rank]" + " api" + "=>" + """五一活动-月票榜"""
        )
        response = LaborDayComicRankResp()
        self._do_twirp_rpc("/activity.v3.Activity/LaborDayComicRank", request, response)
        logging.getLogger(__name__).info(
            "call " + "[labor_day_comic_rank]" + " api success!"
        )
        return response

    @allure.step("""五一活动-集字页""")
    def labor_day_words(self, request: EmptyRequest) -> LaborDayWordsResp:
        """五一活动-集字页"""
        logging.getLogger(__name__).info(
            "start call " + "[labor_day_words]" + " api" + "=>" + """五一活动-集字页"""
        )
        response = LaborDayWordsResp()
        self._do_twirp_rpc("/activity.v3.Activity/LaborDayWords", request, response)
        logging.getLogger(__name__).info(
            "call " + "[labor_day_words]" + " api success!"
        )
        return response

    @allure.step("""五一活动-集字抽奖""")
    def labor_day_words_draw(
        self, request: LaborDayWordsDrawReq
    ) -> LaborDayWordsDrawResp:
        """五一活动-集字抽奖"""
        logging.getLogger(__name__).info(
            "start call " + "[labor_day_words_draw]" + " api" + "=>" + """五一活动-集字抽奖"""
        )
        response = LaborDayWordsDrawResp()
        self._do_twirp_rpc("/activity.v3.Activity/LaborDayWordsDraw", request, response)
        logging.getLogger(__name__).info(
            "call " + "[labor_day_words_draw]" + " api success!"
        )
        return response

    @allure.step("""五一活动-集字兑换""")
    def labor_day_words_exchange(
        self, request: LaborDayWordsExchangeReq
    ) -> DefaultResponse:
        """五一活动-集字兑换"""
        logging.getLogger(__name__).info(
            "start call "
            + "[labor_day_words_exchange]"
            + " api"
            + "=>"
            + """五一活动-集字兑换"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc(
            "/activity.v3.Activity/LaborDayWordsExchange", request, response
        )
        logging.getLogger(__name__).info(
            "call " + "[labor_day_words_exchange]" + " api success!"
        )
        return response

    @allure.step("""中国移动""")
    def yidong(self, request: YidongReq) -> DefaultResponse:
        """中国移动"""
        logging.getLogger(__name__).info(
            "start call " + "[yidong]" + " api" + "=>" + """中国移动"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v3.Activity/Yidong", request, response)
        logging.getLogger(__name__).info("call " + "[yidong]" + " api success!")
        return response

    @allure.step("""修仙-购买""")
    def xiuxian_buy(self, request: XiuxianBuyReq) -> DefaultResponse:
        """修仙-购买"""
        logging.getLogger(__name__).info(
            "start call " + "[xiuxian_buy]" + " api" + "=>" + """修仙-购买"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v3.Activity/XiuxianBuy", request, response)
        logging.getLogger(__name__).info("call " + "[xiuxian_buy]" + " api success!")
        return response

    @allure.step("""修仙-弹幕""")
    def xiuxian_danmaku(self, request: EmptyRequest) -> XiuxianDanmakuResp:
        """修仙-弹幕"""
        logging.getLogger(__name__).info(
            "start call " + "[xiuxian_danmaku]" + " api" + "=>" + """修仙-弹幕"""
        )
        response = XiuxianDanmakuResp()
        self._do_twirp_rpc("/activity.v3.Activity/XiuxianDanmaku", request, response)
        logging.getLogger(__name__).info(
            "call " + "[xiuxian_danmaku]" + " api success!"
        )
        return response

    @allure.step("""修仙-追漫""")
    def xiuxian_fav(self, request: EmptyRequest) -> DefaultResponse:
        """修仙-追漫"""
        logging.getLogger(__name__).info(
            "start call " + "[xiuxian_fav]" + " api" + "=>" + """修仙-追漫"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v3.Activity/XiuxianFav", request, response)
        logging.getLogger(__name__).info("call " + "[xiuxian_fav]" + " api success!")
        return response

    @allure.step("""点评-人气长评""")
    def long_comment(self, request: EmptyRequest) -> LongCommentResp:
        """点评-人气长评"""
        logging.getLogger(__name__).info(
            "start call " + "[long_comment]" + " api" + "=>" + """点评-人气长评"""
        )
        response = LongCommentResp()
        self._do_twirp_rpc("/activity.v3.Activity/LongComment", request, response)
        logging.getLogger(__name__).info("call " + "[long_comment]" + " api success!")
        return response

    @allure.step("""点评-随机评论""")
    def rand_comment(self, request: EmptyRequest) -> RandCommentResp:
        """点评-随机评论"""
        logging.getLogger(__name__).info(
            "start call " + "[rand_comment]" + " api" + "=>" + """点评-随机评论"""
        )
        response = RandCommentResp()
        self._do_twirp_rpc("/activity.v3.Activity/RandComment", request, response)
        logging.getLogger(__name__).info("call " + "[rand_comment]" + " api success!")
        return response

    @allure.step("""点评-人气奖""")
    def prize_comment(self, request: EmptyRequest) -> PrizeCommentResp:
        """点评-人气奖"""
        logging.getLogger(__name__).info(
            "start call " + "[prize_comment]" + " api" + "=>" + """点评-人气奖"""
        )
        response = PrizeCommentResp()
        self._do_twirp_rpc("/activity.v3.Activity/PrizeComment", request, response)
        logging.getLogger(__name__).info("call " + "[prize_comment]" + " api success!")
        return response

    @allure.step("""乙女-创建队伍""")
    def yinv_organize(self, request: BailianOrganizeReq) -> BailianOrganizeResp:
        """乙女-创建队伍"""
        logging.getLogger(__name__).info(
            "start call " + "[yinv_organize]" + " api" + "=>" + """乙女-创建队伍"""
        )
        response = BailianOrganizeResp()
        self._do_twirp_rpc("/activity.v3.Activity/YinvOrganize", request, response)
        logging.getLogger(__name__).info("call " + "[yinv_organize]" + " api success!")
        return response

    @allure.step("""乙女-加入队伍""")
    def yinv_join(self, request: BailianJoinReq) -> BailianJoinResp:
        """乙女-加入队伍"""
        logging.getLogger(__name__).info(
            "start call " + "[yinv_join]" + " api" + "=>" + """乙女-加入队伍"""
        )
        response = BailianJoinResp()
        self._do_twirp_rpc("/activity.v3.Activity/YinvJoin", request, response)
        logging.getLogger(__name__).info("call " + "[yinv_join]" + " api success!")
        return response

    @allure.step("""乙女-离开队伍""")
    def yinv_leave(self, request: BailianLeaveReq) -> BailianLeaveResp:
        """乙女-离开队伍"""
        logging.getLogger(__name__).info(
            "start call " + "[yinv_leave]" + " api" + "=>" + """乙女-离开队伍"""
        )
        response = BailianLeaveResp()
        self._do_twirp_rpc("/activity.v3.Activity/YinvLeave", request, response)
        logging.getLogger(__name__).info("call " + "[yinv_leave]" + " api success!")
        return response

    @allure.step("""乙女-解散队伍""")
    def yinv_dismiss(self, request: BailianDismissReq) -> BailianDismissResp:
        """乙女-解散队伍"""
        logging.getLogger(__name__).info(
            "start call " + "[yinv_dismiss]" + " api" + "=>" + """乙女-解散队伍"""
        )
        response = BailianDismissResp()
        self._do_twirp_rpc("/activity.v3.Activity/YinvDismiss", request, response)
        logging.getLogger(__name__).info("call " + "[yinv_dismiss]" + " api success!")
        return response

    @allure.step("""乙女-结算""")
    def yinv_settle(self, request: BailianSettleReq) -> BailianSettleResp:
        """乙女-结算"""
        logging.getLogger(__name__).info(
            "start call " + "[yinv_settle]" + " api" + "=>" + """乙女-结算"""
        )
        response = BailianSettleResp()
        self._do_twirp_rpc("/activity.v3.Activity/YinvSettle", request, response)
        logging.getLogger(__name__).info("call " + "[yinv_settle]" + " api success!")
        return response

    @allure.step("""乙女-队伍信息""")
    def yinv_info(self, request: BailianInfoReq) -> BailianInfoResp:
        """乙女-队伍信息"""
        logging.getLogger(__name__).info(
            "start call " + "[yinv_info]" + " api" + "=>" + """乙女-队伍信息"""
        )
        response = BailianInfoResp()
        self._do_twirp_rpc("/activity.v3.Activity/YinvInfo", request, response)
        logging.getLogger(__name__).info("call " + "[yinv_info]" + " api success!")
        return response

    @allure.step("""乙女-抽奖首页""")
    def yinv_home(self, request: EmptyRequest) -> YinvHomeResp:
        """乙女-抽奖首页"""
        logging.getLogger(__name__).info(
            "start call " + "[yinv_home]" + " api" + "=>" + """乙女-抽奖首页"""
        )
        response = YinvHomeResp()
        self._do_twirp_rpc("/activity.v3.Activity/YinvHome", request, response)
        logging.getLogger(__name__).info("call " + "[yinv_home]" + " api success!")
        return response

    @allure.step("""乙女-抽奖""")
    def yinv_draw(self, request: YinvDrawReq) -> YinvDrawResp:
        """乙女-抽奖"""
        logging.getLogger(__name__).info(
            "start call " + "[yinv_draw]" + " api" + "=>" + """乙女-抽奖"""
        )
        response = YinvDrawResp()
        self._do_twirp_rpc("/activity.v3.Activity/YinvDraw", request, response)
        logging.getLogger(__name__).info("call " + "[yinv_draw]" + " api success!")
        return response

    @allure.step("""乙女-我的奖品""")
    def yinv_list(self, request: EmptyRequest) -> YinvListResp:
        """乙女-我的奖品"""
        logging.getLogger(__name__).info(
            "start call " + "[yinv_list]" + " api" + "=>" + """乙女-我的奖品"""
        )
        response = YinvListResp()
        self._do_twirp_rpc("/activity.v3.Activity/YinvList", request, response)
        logging.getLogger(__name__).info("call " + "[yinv_list]" + " api success!")
        return response

    @allure.step("""乙女-填写地址""")
    def yinv_address(self, request: YinvAddressReq) -> DefaultResponse:
        """乙女-填写地址"""
        logging.getLogger(__name__).info(
            "start call " + "[yinv_address]" + " api" + "=>" + """乙女-填写地址"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v3.Activity/YinvAddress", request, response)
        logging.getLogger(__name__).info("call " + "[yinv_address]" + " api success!")
        return response

    @allure.step("""租借女友-首页""")
    def mizuhara_home(self, request: EmptyRequest) -> MizuharaHomeResp:
        """租借女友-首页"""
        logging.getLogger(__name__).info(
            "start call " + "[mizuhara_home]" + " api" + "=>" + """租借女友-首页"""
        )
        response = MizuharaHomeResp()
        self._do_twirp_rpc("/activity.v3.Activity/MizuharaHome", request, response)
        logging.getLogger(__name__).info("call " + "[mizuhara_home]" + " api success!")
        return response

    @allure.step("""租借女友-分享""")
    def mizuhara_share(self, request: EmptyRequest) -> DefaultResponse:
        """租借女友-分享"""
        logging.getLogger(__name__).info(
            "start call " + "[mizuhara_share]" + " api" + "=>" + """租借女友-分享"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/activity.v3.Activity/MizuharaShare", request, response)
        logging.getLogger(__name__).info("call " + "[mizuhara_share]" + " api success!")
        return response
