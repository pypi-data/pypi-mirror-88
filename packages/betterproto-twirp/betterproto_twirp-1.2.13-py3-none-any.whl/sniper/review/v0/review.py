# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: review/v0/review.proto
# plugin: python-betterproto
import logging
from typing import List

import allure
from dataclasses import dataclass

import betterproto


@dataclass
class DefaultResponse(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "EmptyData" = betterproto.message_field(3)


@dataclass
class EmptyData(betterproto.Message):
    pass


@dataclass
class ListReviewsReq(betterproto.Message):
    # 0-短评 1-长评 2-短评热评 3-长评热评 4-纯打分点评
    type: int = betterproto.int32_field(1)
    # 漫画 id
    comic_id: int = betterproto.int32_field(2)
    page_size: int = betterproto.int32_field(3)
    page_num: int = betterproto.int32_field(4)
    # 漫画标题
    title: str = betterproto.string_field(5)
    # 用户 ID
    uid: int = betterproto.int64_field(6)
    # 点评 ID
    id: int = betterproto.int64_field(7)
    # 屏蔽状态 1-屏蔽 2-未屏蔽 0-全部
    shield_status: int = betterproto.int32_field(8)
    # 评分 0-全部评分 1-1星 2-2星
    score: int = betterproto.int32_field(9)


@dataclass
class ListReviewsResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ListReviews" = betterproto.message_field(3)


@dataclass
class ListReviews(betterproto.Message):
    # 点评总数
    total: int = betterproto.int32_field(1)
    reviews: List["ReviewInfo"] = betterproto.message_field(2)


@dataclass
class ReviewInfo(betterproto.Message):
    # 点评 id
    id: int = betterproto.int64_field(1)
    # 用户 uid
    uid: int = betterproto.int64_field(2)
    # 账户昵称
    nick_name: str = betterproto.string_field(3)
    # 漫画 id
    comic_id: int = betterproto.int32_field(4)
    # 0-短评 1-长评
    type: int = betterproto.int32_field(5)
    # 点评标题
    title: str = betterproto.string_field(6)
    # 点评内容
    content: str = betterproto.string_field(7)
    # 0-通过 -1-待审 -2-驳回 -4-锁定 -10086-删除
    verify: int = betterproto.int32_field(8)
    # 理由 id
    reason_id: int = betterproto.int64_field(9)
    # 打回原因
    reject_reason: str = betterproto.string_field(10)
    # 点评分数
    score: int = betterproto.int32_field(11)
    # 是否置顶 1-置顶 2-取消置顶
    set_top: int = betterproto.int32_field(12)
    # 屏蔽 1-屏蔽 2-未屏蔽
    shield: int = betterproto.int32_field(13)
    # 发布时间(2006-01-02 15:04:05)
    publish_time: str = betterproto.string_field(14)
    # 创建时间(2006-01-02 15:04:05)
    ctime: str = betterproto.string_field(15)
    # 更新时间(2006-01-02 15:04:05)
    mtime: str = betterproto.string_field(16)
    # 举报屏蔽状态 1-屏蔽 2-未屏蔽
    report_shield: int = betterproto.int32_field(17)
    # 是否置底 1-置底 2-取消置底
    set_bottom: int = betterproto.int32_field(18)
    # 漫画标题
    comic_title: str = betterproto.string_field(19)


@dataclass
class GetReviewByIDReq(betterproto.Message):
    id: int = betterproto.int64_field(1)


@dataclass
class GetReviewByIDResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "GetReviewByID" = betterproto.message_field(3)


@dataclass
class GetReviewByID(betterproto.Message):
    # 点评标题
    title: str = betterproto.string_field(1)
    # 点评内容
    content: str = betterproto.string_field(2)


@dataclass
class ListReportReviewsReq(betterproto.Message):
    # 举报状态 0-未处理 1-屏蔽 2-忽略
    status: int = betterproto.int32_field(1)
    # 举报筛选开始时间 (2006-01-02)
    start_time: str = betterproto.string_field(2)
    # 举报筛选结束时间 (2006-01-02)
    end_time: str = betterproto.string_field(3)
    page_size: int = betterproto.int32_field(4)
    page_num: int = betterproto.int32_field(5)
    # 审核方式 0运营侧 1审核侧
    review_type: int = betterproto.int32_field(6)
    uid: int = betterproto.int64_field(7)


@dataclass
class ListReportReviewsResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ListReportReviews" = betterproto.message_field(3)


@dataclass
class ListReportReviews(betterproto.Message):
    # 总数
    total: int = betterproto.int32_field(1)
    reports: List["Report"] = betterproto.message_field(2)


@dataclass
class Report(betterproto.Message):
    # 举报状态 0-未处理 1-屏蔽 2-忽略
    status: int = betterproto.int32_field(1)
    # 举报人 uid
    uid: int = betterproto.int64_field(4)
    # 举报理由
    reason: str = betterproto.string_field(5)
    # 举报最后发布时间
    mtime: str = betterproto.string_field(6)
    # 点评相关内容
    review: "ReviewInfo" = betterproto.message_field(7)


@dataclass
class ProcessReportReq(betterproto.Message):
    # 1-屏蔽 2-忽略
    status: int = betterproto.int32_field(1)
    # 对应的评论id
    content_id: int = betterproto.int64_field(2)


@dataclass
class ProcessReviewReq(betterproto.Message):
    # 1-置顶 2-取消置顶 如果置顶不做处理，传 0
    set_top: int = betterproto.int32_field(1)
    # 1-屏蔽 2-取消屏蔽 如果屏蔽不做处理，传 0
    shield: int = betterproto.int32_field(2)
    # 点评 id
    id: int = betterproto.int64_field(3)
    # 漫画 id
    comic_id: int = betterproto.int32_field(4)
    # 0-短评 1-长评
    type: int = betterproto.int32_field(5)
    # 置底 1-置底 2-取消置底
    set_bottom: int = betterproto.int32_field(6)


@dataclass
class ListUserBlackListReq(betterproto.Message):
    # 传 0，则默认全部查询
    uid: int = betterproto.int64_field(1)
    page_size: int = betterproto.int32_field(2)
    page_num: int = betterproto.int32_field(3)


@dataclass
class ListUserBlackListResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "ListUserBlackList" = betterproto.message_field(3)


@dataclass
class ListUserBlackList(betterproto.Message):
    # 总数量
    total: int = betterproto.int32_field(1)
    users: List["BlackUsers"] = betterproto.message_field(2)


@dataclass
class BlackUsers(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    nick_name: str = betterproto.string_field(2)
    reason: str = betterproto.string_field(3)
    ctime: str = betterproto.string_field(4)


@dataclass
class AddBlackUsersReq(betterproto.Message):
    # 单个或者多个 uid
    uids: List[int] = betterproto.int64_field(1)
    # 添加理由
    reason: str = betterproto.string_field(2)
    # csv 文件地址
    csv: str = betterproto.string_field(3)


@dataclass
class DeleteUserReq(betterproto.Message):
    uid: int = betterproto.int64_field(1)


class ReviewStub(betterproto.ServiceStub):
    """Review 点评服务对内"""

    @allure.step("""搜索获取漫画点评""")
    def list_reviews(self, request: ListReviewsReq) -> ListReviewsResp:
        """搜索获取漫画点评"""
        logging.getLogger(__name__).info(
            "start call " + "[list_reviews]" + " api" + "=>" + """搜索获取漫画点评"""
        )
        response = ListReviewsResp()
        self._do_twirp_rpc("/review.v0.Review/ListReviews", request, response)
        logging.getLogger(__name__).info("call " + "[list_reviews]" + " api success!")
        return response

    @allure.step("""处理点评""")
    def process_review(self, request: ProcessReviewReq) -> DefaultResponse:
        """处理点评"""
        logging.getLogger(__name__).info(
            "start call " + "[process_review]" + " api" + "=>" + """处理点评"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/review.v0.Review/ProcessReview", request, response)
        logging.getLogger(__name__).info("call " + "[process_review]" + " api success!")
        return response

    @allure.step("""根据点评 id 获取点评内容""")
    def get_review_by_i_d(self, request: GetReviewByIDReq) -> GetReviewByIDResp:
        """根据点评 id 获取点评内容"""
        logging.getLogger(__name__).info(
            "start call " + "[get_review_by_i_d]" + " api" + "=>" + """根据点评 id 获取点评内容"""
        )
        response = GetReviewByIDResp()
        self._do_twirp_rpc("/review.v0.Review/GetReviewByID", request, response)
        logging.getLogger(__name__).info(
            "call " + "[get_review_by_i_d]" + " api success!"
        )
        return response

    @allure.step("""举报查询""")
    def list_report_reviews(
        self, request: ListReportReviewsReq
    ) -> ListReportReviewsResp:
        """举报查询"""
        logging.getLogger(__name__).info(
            "start call " + "[list_report_reviews]" + " api" + "=>" + """举报查询"""
        )
        response = ListReportReviewsResp()
        self._do_twirp_rpc("/review.v0.Review/ListReportReviews", request, response)
        logging.getLogger(__name__).info(
            "call " + "[list_report_reviews]" + " api success!"
        )
        return response

    @allure.step("""处理举报""")
    def process_report(self, request: ProcessReportReq) -> DefaultResponse:
        """处理举报"""
        logging.getLogger(__name__).info(
            "start call " + "[process_report]" + " api" + "=>" + """处理举报"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/review.v0.Review/ProcessReport", request, response)
        logging.getLogger(__name__).info("call " + "[process_report]" + " api success!")
        return response

    @allure.step("""查询点评黑名单""")
    def list_user_black_list(
        self, request: ListUserBlackListReq
    ) -> ListUserBlackListResp:
        """查询点评黑名单"""
        logging.getLogger(__name__).info(
            "start call " + "[list_user_black_list]" + " api" + "=>" + """查询点评黑名单"""
        )
        response = ListUserBlackListResp()
        self._do_twirp_rpc("/review.v0.Review/ListUserBlackList", request, response)
        logging.getLogger(__name__).info(
            "call " + "[list_user_black_list]" + " api success!"
        )
        return response

    @allure.step("""新增点评黑名单""")
    def add_black_users(self, request: AddBlackUsersReq) -> DefaultResponse:
        """新增点评黑名单"""
        logging.getLogger(__name__).info(
            "start call " + "[add_black_users]" + " api" + "=>" + """新增点评黑名单"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/review.v0.Review/AddBlackUsers", request, response)
        logging.getLogger(__name__).info(
            "call " + "[add_black_users]" + " api success!"
        )
        return response

    @allure.step("""移除点评黑名单""")
    def delete_user(self, request: DeleteUserReq) -> DefaultResponse:
        """移除点评黑名单"""
        logging.getLogger(__name__).info(
            "start call " + "[delete_user]" + " api" + "=>" + """移除点评黑名单"""
        )
        response = DefaultResponse()
        self._do_twirp_rpc("/review.v0.Review/DeleteUser", request, response)
        logging.getLogger(__name__).info("call " + "[delete_user]" + " api success!")
        return response
