# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: wechatwork/v1/wechatwork.proto
# plugin: python-betterproto
import logging


import allure
from dataclasses import dataclass

import betterproto


@dataclass
class EmptyReq(betterproto.Message):
    pass


@dataclass
class OnMessageResp(betterproto.Message):
    # text/plain
    content_type: str = betterproto.string_field(1)
    # 文本内容
    data: bytes = betterproto.bytes_field(2)


class WechatworkStub(betterproto.ServiceStub):
    """企业微信服务"""

    @allure.step(
        """
        企业微信回调接口 get参数msg_signature，timestamp，nonce，echostr 用与加解密 post参数xml数据包
        参数通过request内部解析
        """
    )
    def on_message(self, request: EmptyReq) -> OnMessageResp:
        """
        企业微信回调接口 get参数msg_signature，timestamp，nonce，echostr 用与加解密 post参数xml数据包
        参数通过request内部解析
        """
        logging.getLogger(__name__).info(
            "start call "
            + "[on_message]"
            + " api"
            + "=>"
            + """
        企业微信回调接口 get参数msg_signature，timestamp，nonce，echostr 用与加解密 post参数xml数据包
        参数通过request内部解析
        """
        )
        response = OnMessageResp()
        self._do_twirp_rpc("/wechatwork.v1.Wechatwork/OnMessage", request, response)
        logging.getLogger(__name__).info("call " + "[on_message]" + " api success!")
        return response
