# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: manage/v0/gift.proto
# plugin: python-betterproto
import logging
from typing import List

import allure
from dataclasses import dataclass

import betterproto


@dataclass
class GiftDefaultResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: str = betterproto.string_field(3)


@dataclass
class GetGiftsReq(betterproto.Message):
    # 1 畅读卡每月限定礼
    type: int = betterproto.int32_field(1)
    page_size: int = betterproto.int32_field(2)
    page_num: int = betterproto.int32_field(3)


@dataclass
class GetGiftsResp(betterproto.Message):
    code: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    data: "GetGiftsData" = betterproto.message_field(3)


@dataclass
class GetGiftsData(betterproto.Message):
    gifts: List["AddGiftReq"] = betterproto.message_field(1)
    total_page: int = betterproto.int32_field(2)


@dataclass
class DelGiftReq(betterproto.Message):
    id: int = betterproto.int64_field(1)


@dataclass
class AddGiftReq(betterproto.Message):
    # 名称
    title: str = betterproto.string_field(1)
    # icon
    icon: str = betterproto.string_field(2)
    # 1、畅读卡每月限定礼
    type: int = betterproto.int32_field(3)
    # 礼包的领取类型 1 领取 2 跳转
    get_typ: int = betterproto.int32_field(4)
    # 礼包内容 {    "gift": [{        "type": 0,   // 1 卡券 2 挂件 3 积分        "id": 0,
    # // 卡券 id        "amount": 0, // 发放数量    }],     "title": "",     // 限定礼标题
    # "desc": "",      // 限定礼描述    "button_txt": "", // 按钮文案    "url": "",
    # // 跳转 url }
    content: str = betterproto.string_field(5)
    # 开始日期 2006-01-02 15:04:05
    begin_date: str = betterproto.string_field(6)
    # 结束日期 2006-01-02 15:04:05
    end_date: str = betterproto.string_field(7)
    # 主键 id
    id: int = betterproto.int64_field(8)
    # 操作人
    muser: str = betterproto.string_field(9)


class GiftStub(betterproto.ServiceStub):
    """FIXME 服务必须写注释"""

    @allure.step("""添加礼包""")
    def add_gift(self, request: AddGiftReq) -> GiftDefaultResp:
        """添加礼包"""
        logging.getLogger(__name__).info(
            "start call " + "[add_gift]" + " api" + "=>" + """添加礼包"""
        )
        response = GiftDefaultResp()
        self._do_twirp_rpc("/manage.v0.Gift/AddGift", request, response)
        logging.getLogger(__name__).info("call " + "[add_gift]" + " api success!")
        return response

    @allure.step()
    def update_gift(self, request: AddGiftReq) -> GiftDefaultResp:
        logging.getLogger(__name__).info("start call " + "[update_gift]" + " api")
        response = GiftDefaultResp()
        self._do_twirp_rpc("/manage.v0.Gift/UpdateGift", request, response)
        logging.getLogger(__name__).info("call " + "[update_gift]" + " api success!")
        return response

    @allure.step()
    def del_gift(self, request: DelGiftReq) -> GiftDefaultResp:
        logging.getLogger(__name__).info("start call " + "[del_gift]" + " api")
        response = GiftDefaultResp()
        self._do_twirp_rpc("/manage.v0.Gift/DelGift", request, response)
        logging.getLogger(__name__).info("call " + "[del_gift]" + " api success!")
        return response

    @allure.step()
    def get_gifts(self, request: GetGiftsReq) -> GetGiftsResp:
        logging.getLogger(__name__).info("start call " + "[get_gifts]" + " api")
        response = GetGiftsResp()
        self._do_twirp_rpc("/manage.v0.Gift/GetGifts", request, response)
        logging.getLogger(__name__).info("call " + "[get_gifts]" + " api success!")
        return response
