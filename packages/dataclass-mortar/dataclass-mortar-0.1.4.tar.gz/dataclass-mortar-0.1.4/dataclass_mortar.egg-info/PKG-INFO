Metadata-Version: 2.1
Name: dataclass-mortar
Version: 0.1.4
Summary: Use dataclasses with SQLAlchemy naturally
Home-page: https://gitlab.com/the203/mortar
Author: Adam Haskell
Author-email: adam@the203.info
License: MIT
Description: 
        # mortar
        
        naturally use dataclasses with Alchemy 
        
        Experimental concept for easying the use of Dataclasses with Alchemy. Simple models and relationships work, anything more complicated probly won't. 
        
        ## Usage
        Decorate a dataclass with `@persist` 
        Column definitions are automatically generated based off the field data, relationships are created for any field that had a type of another dataclass. Column definitions can be passed to mortar via the metadata attribute of the field() method (provided by dataclass). Partial Column data can also be passed any other required fields of the column will be generated based off the field definition. 
        
        
        ## Primary Keys
        mortar will try to find the proper primary key for a defined class. It will evaluate the columns in this order to find a primary key: 
        1. Checks for predefined key via A partial column definition  `Column(primary_key=True)` 
        1. Check for a column named <class_name.lower()>_id 
        1. check for an id column name 
        1. create and auto increment column designated as primary key
Platform: UNKNOWN
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: Implementation :: PyPy
Requires-Python: >=3.6.0
Description-Content-Type: text/markdown
