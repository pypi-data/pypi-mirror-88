Metadata-Version: 2.1
Name: pdfnup3
Version: 1.0.0
Summary: Layout multiple pages per sheet of a PDF document.
Home-page: http://www.dinu-gherman.net/
Author: Dinu Gherman
Author-email: gherman@darwin.in-berlin.de
Maintainer: Dinu Gherman
Maintainer-email: gherman@darwin.in-berlin.de
License: GPL 3
Download-URL: http://www.dinu-gherman.net/tmp/pdfnup-1.0.0.tar.gz
Keywords: PDF,minimizig pages
Platform: Posix
Platform: Windows
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: Intended Audience :: End Users/Desktop
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU General Public License (GPL)
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: POSIX
Classifier: Operating System :: Microsoft :: Windows
Classifier: Programming Language :: Python
Classifier: Topic :: Utilities
Classifier: Topic :: Printing
Requires-Dist: PyPDF2

`Pdfnup` is a Python module and command-line tool for layouting multiple 
pages per sheet of a PDF document. Using it you can take a PDF document 
and create a new PDF document from it where each page contains a number
of minimized pages from the original PDF file. 

Right now `pdfnup` should be used on documents with all pages the same 
size, and half square page numbers per sheet work best on paper sizes
of the ISO A series.

Basically, `pdfnup` wrapps `pyPdf <http://pypi.python.org/pypi/pyPdf>`_, 
a package written by Mathieu Fenniak, which does not provide tools like 
this for using the core functionality easily from the command-line or 
from a Python module. `Pdfnup` itself was much inspired from some code 
written by Henning von Bargen - thanks, Henning!

This release provides full support for file objects and StringIO objects
for input as well as output documents and fixes a nasty buglet in the 
command-line invocation script.


Features
++++++++

- save minimized pages of a given PDF document in a new PDF document
- place n pages per sheet, with n being square or half square
- customize layout order, both horizontally and vertically
- turn rotated pages to make them all have the same format 
- allow patterns for output files
- supports file-like objects for input and output documents
- install a Python module named ``pdfnup.py``
- install a Python command-line script named ``pdfnup``
- provide a Unittest test suite


Examples
++++++++

You can use `pdfnup` as a Python module e.g. like in the following
interactive Python session::

    >>> from pdfnup import generateNup
    >>>
    >>> generateNup("file.pdf", 8, verbose=True)
    written: file-8up.pdf
    >>>
    >>> generateNup("file.pdf", 8, dirs="LD", verbose=True)
    written: file-8up.pdf
    >>>
    >>> f = open("file.pdf")
    >>> generateNup(f, 8, outPathPatternOrFile="out-%(n)dup.pdf", verbose=True)
    written: out-8up.pdf

In addition there is a script named ``pdfnup``, which can be used 
more easily from the system command-line like this (you can see many 
more examples when typing ``pdfnup -h`` on the command-line)::

    $ pdfnup -V file.pdf
    written: file-4up.pdf
    $ pdfnup -V -n 8 file.pdf
    written: file-8up.pdf
    $ pdfnup -V -n 8 -l LD file.pdf
    written: file-8up.pdf
    $ pdfnup -V -n 9 /path/file[12].pdf  
    written: /path/file1-9up.pdf
    written: /path/file2-9up.pdf
    $ pdfnup -V -n 8 -o "%(dirname)s/foo.pdf" /path/file.pdf
    written: /path/foo.pdf


