# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['pytaintx',
 'pytaintx.analysis',
 'pytaintx.cfg',
 'pytaintx.core',
 'pytaintx.formatters',
 'pytaintx.helper_visitors',
 'pytaintx.vulnerabilities',
 'pytaintx.web_frameworks']

package_data = \
{'': ['*'], 'pytaintx': ['vulnerability_definitions/*']}

entry_points = \
{'console_scripts': ['pytaintx = pytaintx.__main__:main']}

setup_kwargs = {
    'name': 'pytaintx',
    'version': '0.5.1',
    'description': 'Find security vulnerabilities in Python web applications',
    'long_description': '[![GitHub top language](https://img.shields.io/github/languages/top/FHPythonUtils/PyTaintX.svg?style=for-the-badge)](../../)\n[![Codacy grade](https://img.shields.io/codacy/grade/[codacy-proj-id].svg?style=for-the-badge)](https://www.codacy.com/manual|gh/FHPythonUtils/PyTaintX)\n[![Repository size](https://img.shields.io/github/repo-size/FHPythonUtils/PyTaintX.svg?style=for-the-badge)](../../)\n[![Issues](https://img.shields.io/github/issues/FHPythonUtils/PyTaintX.svg?style=for-the-badge)](../../issues)\n[![License](https://img.shields.io/github/license/FHPythonUtils/PyTaintX.svg?style=for-the-badge)](/LICENSE.md)\n[![Commit activity](https://img.shields.io/github/commit-activity/m/FHPythonUtils/PyTaintX.svg?style=for-the-badge)](../../commits/master)\n[![Last commit](https://img.shields.io/github/last-commit/FHPythonUtils/PyTaintX.svg?style=for-the-badge)](../../commits/master)\n[![PyPI Downloads](https://img.shields.io/pypi/dm/pytaintx.svg?style=for-the-badge)](https://pypi.org/project/pytaintx/)\n[![PyPI Version](https://img.shields.io/pypi/v/pytaintx.svg?style=for-the-badge)](https://pypi.org/project/pytaintx/)\n\n**Now Maintained**\n\n# PyTaintX\n\n<img src="readme-assets/icons/name.png" alt="Project Icon" width="750">\n\n\nMaintained branch of Python Taint for python 3.9\n\nStatic analysis of Python web applications based on theoretical\nfoundations (Control flow graphs, fixed point, dataflow analysis)\n\n## Features\n\n-   Detect command injection, SSRF, SQL injection, XSS, directory\n    traveral etc.\n-   A lot of customisation possible\n\nFor a look at recent changes, please see the\n[changelog](https://github.com/python-security/pytaintx/blob/master/CHANGELOG.md).\n\nExample usage and output:\n\n```\n21 vulnerabilities found (plus 3 sanitised):\nVulnerability 1:\nFile: .\\XSS.py\n > User input at line 6, source "request.args.get(":\n         ~call_1 = ret_request.args.get(\'param\', \'not set\')\nReassigned in:\n        File: .\\XSS.py\n         > Line 6: param = ~call_1\nFile: .\\XSS.py\n > reaches line 9, sink "replace(":\n        ~call_5 = ret_html.replace(\'{{ param }}\', param)\n\n[...]\n```\n\n## Install With PIP\n\n```python\npip install pytaintx\n```\n\nHead to https://pypi.org/project/pytaintx/ for more info\n\n\n## How it Works\n\nSoon you will find a\n[README.rst](https://github.com/python-security/pytaintx/tree/master/pytaintx) in\nevery directory in the `pytaintx/` folder, [start\nhere](https://github.com/python-security/pytaintx/tree/master/pytaintx).\n\n## How to Use\n\n1.  Choose a web framework\n\n[The -a option determines which functions will have their arguments\ntainted](https://github.com/python-security/pytaintx/tree/master/pytaintx/web_frameworks#web-frameworks),\nby default it is Flask.\n\n1.  (optional) Customize source and sink information\n\nUse the `-t` option to specify sources and sinks, by default [this file\nis\nused](https://github.com/python-security/pytaintx/blob/master/pytaintx/vulnerability_definitions/all_trigger_words.pyt).\n\n1.  (optional) Customize which library functions propagate taint\n\nFor functions from builtins or libraries, e.g. `url_for` or\n`os.path.join`, use the `-m` option to specify whether or not they\nreturn tainted values given tainted inputs, by [default this file is\nused](https://github.com/python-security/pytaintx/blob/master/pytaintx/vulnerability_definitions/blackbox_mapping.json).\n\nUsage\n=====\n\n```\nusage: python -m pytaintx [-h] [-a ADAPTOR] [-pr PROJECT_ROOT]\n                     [-b BASELINE_JSON_FILE] [-j] [-t TRIGGER_WORD_FILE]\n                     [-m BLACKBOX_MAPPING_FILE] [-i] [-o OUTPUT_FILE]\n                     [--ignore-nosec] [-r] [-x EXCLUDED_PATHS]\n                     [--dont-prepend-root] [--no-local-imports]\n                     targets [targets ...]\n\nrequired arguments:\n  targets               source file(s) or directory(s) to be scanned\n\nimportant optional arguments:\n  -a ADAPTOR, --adaptor ADAPTOR\n                        Choose a web framework adaptor: Flask(Default),\n                        Django, Every or Pylons\n\n  -t TRIGGER_WORD_FILE, --trigger-word-file TRIGGER_WORD_FILE\n                        Input file with a list of sources and sinks\n\n  -m BLACKBOX_MAPPING_FILE, --blackbox-mapping-file BLACKBOX_MAPPING_FILE\n                            Input blackbox mapping file\n\noptional arguments:\n  -pr PROJECT_ROOT, --project-root PROJECT_ROOT\n                        Add project root, only important when the entry file\n                        is not at the root of the project.\n\n  -b BASELINE_JSON_FILE, --baseline BASELINE_JSON_FILE\n                        Path of a baseline report to compare against (only\n                        JSON-formatted files are accepted)\n\n  -j, --json            Prints JSON instead of report.\n\n  -i, --interactive     Will ask you about each blackbox function call in\n                        vulnerability chains.\n\n  -o OUTPUT_FILE, --output OUTPUT_FILE\n                        Write report to filename\n\n  --ignore-nosec        Do not skip lines with # nosec comments\n\n  -r, --recursive       Find and process files in subdirectories\n\n  -x EXCLUDED_PATHS, --exclude EXCLUDED_PATHS\n                        Separate files with commas\n\n  --dont-prepend-root   In project root e.g. /app, imports are not prepended\n                        with app.*\n\n  --no-local-imports    If set, absolute imports must be relative to the\n                        project root. If not set, modules in the same\n                        directory can be imported just by their names.\n```\n\n## Usage from Source\n\nUsing it like a user\n`python3 -m pytaintx examples/vulnerable_code/XSS_call.py`\n\nRunning the tests `python3 -m tests`\n\nRunning an individual test file `python3 -m unittest tests.import_test`\n\nRunning an individual test\n`python3 -m unittest tests.import_test.ImportTest.test_import`\n\n\n\n## Virtual env setup guide\n\nCreate a directory to hold the virtual env and project\n\n`mkdir ~/a_folder`\n\n`cd ~/a_folder`\n\nClone the project into the directory\n\n`git clone https://github.com/python-security/pytaintx.git`\n\nCreate the virtual environment\n\n`python3 -m venv ~/a_folder/`\n\nCheck that you have the right versions\n\n`python3 --version` sample output `Python 3.6.0`\n\n`pip --version` sample output\n`pip 9.0.1 from /Users/kevinhock/a_folder/lib/python3.6/site-packages (python 3.6)`\n\nChange to project directory\n\n`cd pytaintx`\n\nIn the future, just type `source ~/a_folder/bin/activate` to start\ndeveloping.\n\n\n## Community Files\n### Licence\n(See the [LICENSE](/LICENSE) for more information.)\n\n### Changelog\nSee the [Changelog](/CHANGELOG.md) for more information.\n\n### Code of Conduct\nOnline communities include people from many backgrounds. The *Project*\ncontributors are committed to providing a friendly, safe and welcoming\nenvironment for all. Please see the\n[Code of Conduct](https://github.com/FHPythonUtils/.github/blob/master/CODE_OF_CONDUCT.md)\n for more information.\n\n### Contributing\nContributions are welcome, please see the\n[Contributing Guidelines](https://github.com/FHPythonUtils/.github/blob/master/CONTRIBUTING.md)\nfor more information.\n\n### Security\nThank you for improving the security of the project, please see the\n[Security Policy](https://github.com/FHPythonUtils/.github/blob/master/SECURITY.md)\nfor more information.\n\n### Support\nThank you for using this project, I hope it is of use to you. Please be aware that\nthose involved with the project often do so for fun along with other commitments\n(such as work, family, etc). Please see the\n[Support Policy](https://github.com/FHPythonUtils/.github/blob/master/SUPPORT.md)\nfor more information.\n\n### Rationale\nThe rationale acts as a guide to various processes regarding projects such as\nthe versioning scheme and the programming styles used. Please see the\n[Rationale](https://github.com/FHPythonUtils/.github/blob/master/RATIONALE.md)\nfor more information.\n',
    'author': None,
    'author_email': None,
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/FHPythonUtils/pytaintx',
    'packages': packages,
    'package_data': package_data,
    'entry_points': entry_points,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
