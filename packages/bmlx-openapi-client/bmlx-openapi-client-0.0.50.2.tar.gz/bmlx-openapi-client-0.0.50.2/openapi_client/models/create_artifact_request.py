# coding: utf-8

"""
    bmlx api-server.

    Documentation of bmlx api-server apis. To find more info about generating spec from source, please refer to https://goswagger.io/use/spec.html  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class CreateArtifactRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'experiment_run_id': 'int',
        'producer_component': 'str',
        'status': 'str',
        'type': 'str',
        'uri': 'str'
    }

    attribute_map = {
        'experiment_run_id': 'experiment_run_id',
        'producer_component': 'producer_component',
        'status': 'status',
        'type': 'type',
        'uri': 'uri'
    }

    def __init__(self, experiment_run_id=None, producer_component=None, status=None, type=None, uri=None, local_vars_configuration=None):  # noqa: E501
        """CreateArtifactRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._experiment_run_id = None
        self._producer_component = None
        self._status = None
        self._type = None
        self._uri = None
        self.discriminator = None

        if experiment_run_id is not None:
            self.experiment_run_id = experiment_run_id
        if producer_component is not None:
            self.producer_component = producer_component
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if uri is not None:
            self.uri = uri

    @property
    def experiment_run_id(self):
        """Gets the experiment_run_id of this CreateArtifactRequest.  # noqa: E501

        如果 artifact不是由 experiment 产生的，则 ExperimentRunID 设置为 -1  # noqa: E501

        :return: The experiment_run_id of this CreateArtifactRequest.  # noqa: E501
        :rtype: int
        """
        return self._experiment_run_id

    @experiment_run_id.setter
    def experiment_run_id(self, experiment_run_id):
        """Sets the experiment_run_id of this CreateArtifactRequest.

        如果 artifact不是由 experiment 产生的，则 ExperimentRunID 设置为 -1  # noqa: E501

        :param experiment_run_id: The experiment_run_id of this CreateArtifactRequest.  # noqa: E501
        :type experiment_run_id: int
        """

        self._experiment_run_id = experiment_run_id

    @property
    def producer_component(self):
        """Gets the producer_component of this CreateArtifactRequest.  # noqa: E501


        :return: The producer_component of this CreateArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._producer_component

    @producer_component.setter
    def producer_component(self, producer_component):
        """Sets the producer_component of this CreateArtifactRequest.


        :param producer_component: The producer_component of this CreateArtifactRequest.  # noqa: E501
        :type producer_component: str
        """

        self._producer_component = producer_component

    @property
    def status(self):
        """Gets the status of this CreateArtifactRequest.  # noqa: E501


        :return: The status of this CreateArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateArtifactRequest.


        :param status: The status of this CreateArtifactRequest.  # noqa: E501
        :type status: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this CreateArtifactRequest.  # noqa: E501


        :return: The type of this CreateArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateArtifactRequest.


        :param type: The type of this CreateArtifactRequest.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this CreateArtifactRequest.  # noqa: E501

        artifact 实际存储路径  # noqa: E501

        :return: The uri of this CreateArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this CreateArtifactRequest.

        artifact 实际存储路径  # noqa: E501

        :param uri: The uri of this CreateArtifactRequest.  # noqa: E501
        :type uri: str
        """

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateArtifactRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateArtifactRequest):
            return True

        return self.to_dict() != other.to_dict()
