# coding: utf-8

"""
    bmlx api-server.

    Documentation of bmlx api-server apis. To find more info about generating spec from source, please refer to https://goswagger.io/use/spec.html  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class WorkflowSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'checksum': 'str',
        'content': 'str',
        'create_time': 'int',
        'id': 'int',
        'name': 'str',
        'uri': 'str'
    }

    attribute_map = {
        'checksum': 'checksum',
        'content': 'content',
        'create_time': 'create_time',
        'id': 'id',
        'name': 'name',
        'uri': 'uri'
    }

    def __init__(self, checksum=None, content=None, create_time=None, id=None, name=None, uri=None, local_vars_configuration=None):  # noqa: E501
        """WorkflowSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._checksum = None
        self._content = None
        self._create_time = None
        self._id = None
        self._name = None
        self._uri = None
        self.discriminator = None

        if checksum is not None:
            self.checksum = checksum
        if content is not None:
            self.content = content
        if create_time is not None:
            self.create_time = create_time
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if uri is not None:
            self.uri = uri

    @property
    def checksum(self):
        """Gets the checksum of this WorkflowSpec.  # noqa: E501


        :return: The checksum of this WorkflowSpec.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this WorkflowSpec.


        :param checksum: The checksum of this WorkflowSpec.  # noqa: E501
        :type checksum: str
        """

        self._checksum = checksum

    @property
    def content(self):
        """Gets the content of this WorkflowSpec.  # noqa: E501


        :return: The content of this WorkflowSpec.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this WorkflowSpec.


        :param content: The content of this WorkflowSpec.  # noqa: E501
        :type content: str
        """

        self._content = content

    @property
    def create_time(self):
        """Gets the create_time of this WorkflowSpec.  # noqa: E501


        :return: The create_time of this WorkflowSpec.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this WorkflowSpec.


        :param create_time: The create_time of this WorkflowSpec.  # noqa: E501
        :type create_time: int
        """

        self._create_time = create_time

    @property
    def id(self):
        """Gets the id of this WorkflowSpec.  # noqa: E501


        :return: The id of this WorkflowSpec.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkflowSpec.


        :param id: The id of this WorkflowSpec.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this WorkflowSpec.  # noqa: E501


        :return: The name of this WorkflowSpec.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowSpec.


        :param name: The name of this WorkflowSpec.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def uri(self):
        """Gets the uri of this WorkflowSpec.  # noqa: E501


        :return: The uri of this WorkflowSpec.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this WorkflowSpec.


        :param uri: The uri of this WorkflowSpec.  # noqa: E501
        :type uri: str
        """

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowSpec):
            return True

        return self.to_dict() != other.to_dict()
