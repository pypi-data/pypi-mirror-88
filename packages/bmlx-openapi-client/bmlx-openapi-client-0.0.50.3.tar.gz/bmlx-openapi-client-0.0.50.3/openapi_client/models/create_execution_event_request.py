# coding: utf-8

"""
    bmlx api-server.

    Documentation of bmlx api-server apis. To find more info about generating spec from source, please refer to https://goswagger.io/use/spec.html  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class CreateExecutionEventRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'artifact_id': 'int',
        'component_run_id': 'int',
        'event_type': 'str'
    }

    attribute_map = {
        'artifact_id': 'artifact_id',
        'component_run_id': 'component_run_id',
        'event_type': 'event_type'
    }

    def __init__(self, artifact_id=None, component_run_id=None, event_type=None, local_vars_configuration=None):  # noqa: E501
        """CreateExecutionEventRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._artifact_id = None
        self._component_run_id = None
        self._event_type = None
        self.discriminator = None

        if artifact_id is not None:
            self.artifact_id = artifact_id
        if component_run_id is not None:
            self.component_run_id = component_run_id
        if event_type is not None:
            self.event_type = event_type

    @property
    def artifact_id(self):
        """Gets the artifact_id of this CreateExecutionEventRequest.  # noqa: E501


        :return: The artifact_id of this CreateExecutionEventRequest.  # noqa: E501
        :rtype: int
        """
        return self._artifact_id

    @artifact_id.setter
    def artifact_id(self, artifact_id):
        """Sets the artifact_id of this CreateExecutionEventRequest.


        :param artifact_id: The artifact_id of this CreateExecutionEventRequest.  # noqa: E501
        :type artifact_id: int
        """

        self._artifact_id = artifact_id

    @property
    def component_run_id(self):
        """Gets the component_run_id of this CreateExecutionEventRequest.  # noqa: E501


        :return: The component_run_id of this CreateExecutionEventRequest.  # noqa: E501
        :rtype: int
        """
        return self._component_run_id

    @component_run_id.setter
    def component_run_id(self, component_run_id):
        """Sets the component_run_id of this CreateExecutionEventRequest.


        :param component_run_id: The component_run_id of this CreateExecutionEventRequest.  # noqa: E501
        :type component_run_id: int
        """

        self._component_run_id = component_run_id

    @property
    def event_type(self):
        """Gets the event_type of this CreateExecutionEventRequest.  # noqa: E501

        execution type, \"produce\" or \"consume\"  # noqa: E501

        :return: The event_type of this CreateExecutionEventRequest.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this CreateExecutionEventRequest.

        execution type, \"produce\" or \"consume\"  # noqa: E501

        :param event_type: The event_type of this CreateExecutionEventRequest.  # noqa: E501
        :type event_type: str
        """

        self._event_type = event_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateExecutionEventRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateExecutionEventRequest):
            return True

        return self.to_dict() != other.to_dict()
