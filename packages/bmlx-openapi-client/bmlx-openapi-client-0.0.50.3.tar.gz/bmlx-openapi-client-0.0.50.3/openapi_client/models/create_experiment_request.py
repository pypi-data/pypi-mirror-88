# coding: utf-8

"""
    bmlx api-server.

    Documentation of bmlx api-server apis. To find more info about generating spec from source, please refer to https://goswagger.io/use/spec.html  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class CreateExperimentRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'execute_detail': 'str',
        'trigger_type': 'str',
        'name': 'str',
        'parameters': 'str',
        'pipeline_version_id': 'int',
        'settings': 'str',
        'tags': 'list[str]'
    }

    attribute_map = {
        'description': 'description',
        'execute_detail': 'execute_detail',
        'trigger_type': 'trigger_type',
        'name': 'name',
        'parameters': 'parameters',
        'pipeline_version_id': 'pipeline_version_id',
        'settings': 'settings',
        'tags': 'tags'
    }

    def __init__(self, description=None, execute_detail=None, trigger_type=None, name=None, parameters=None, pipeline_version_id=None, settings=None, tags=None, local_vars_configuration=None):  # noqa: E501
        """CreateExperimentRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._execute_detail = None
        self._trigger_type = None
        self._name = None
        self._parameters = None
        self._pipeline_version_id = None
        self._settings = None
        self._tags = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if execute_detail is not None:
            self.execute_detail = execute_detail
        if trigger_type is not None:
            self.trigger_type = trigger_type
        if name is not None:
            self.name = name
        if parameters is not None:
            self.parameters = parameters
        if pipeline_version_id is not None:
            self.pipeline_version_id = pipeline_version_id
        if settings is not None:
            self.settings = settings
        if tags is not None:
            self.tags = tags

    @property
    def description(self):
        """Gets the description of this CreateExperimentRequest.  # noqa: E501


        :return: The description of this CreateExperimentRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateExperimentRequest.


        :param description: The description of this CreateExperimentRequest.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def execute_detail(self):
        """Gets the execute_detail of this CreateExperimentRequest.  # noqa: E501


        :return: The execute_detail of this CreateExperimentRequest.  # noqa: E501
        :rtype: str
        """
        return self._execute_detail

    @execute_detail.setter
    def execute_detail(self, execute_detail):
        """Sets the execute_detail of this CreateExperimentRequest.


        :param execute_detail: The execute_detail of this CreateExperimentRequest.  # noqa: E501
        :type execute_detail: str
        """

        self._execute_detail = execute_detail

    @property
    def trigger_type(self):
        """Gets the trigger_type of this CreateExperimentRequest.  # noqa: E501


        :return: The trigger_type of this CreateExperimentRequest.  # noqa: E501
        :rtype: str
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this CreateExperimentRequest.


        :param trigger_type: The trigger_type of this CreateExperimentRequest.  # noqa: E501
        :type trigger_type: str
        """

        self._trigger_type = trigger_type

    @property
    def name(self):
        """Gets the name of this CreateExperimentRequest.  # noqa: E501


        :return: The name of this CreateExperimentRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateExperimentRequest.


        :param name: The name of this CreateExperimentRequest.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this CreateExperimentRequest.  # noqa: E501


        :return: The parameters of this CreateExperimentRequest.  # noqa: E501
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this CreateExperimentRequest.


        :param parameters: The parameters of this CreateExperimentRequest.  # noqa: E501
        :type parameters: str
        """

        self._parameters = parameters

    @property
    def pipeline_version_id(self):
        """Gets the pipeline_version_id of this CreateExperimentRequest.  # noqa: E501


        :return: The pipeline_version_id of this CreateExperimentRequest.  # noqa: E501
        :rtype: int
        """
        return self._pipeline_version_id

    @pipeline_version_id.setter
    def pipeline_version_id(self, pipeline_version_id):
        """Sets the pipeline_version_id of this CreateExperimentRequest.


        :param pipeline_version_id: The pipeline_version_id of this CreateExperimentRequest.  # noqa: E501
        :type pipeline_version_id: int
        """

        self._pipeline_version_id = pipeline_version_id

    @property
    def settings(self):
        """Gets the settings of this CreateExperimentRequest.  # noqa: E501


        :return: The settings of this CreateExperimentRequest.  # noqa: E501
        :rtype: str
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this CreateExperimentRequest.


        :param settings: The settings of this CreateExperimentRequest.  # noqa: E501
        :type settings: str
        """

        self._settings = settings

    @property
    def tags(self):
        """Gets the tags of this CreateExperimentRequest.  # noqa: E501


        :return: The tags of this CreateExperimentRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateExperimentRequest.


        :param tags: The tags of this CreateExperimentRequest.  # noqa: E501
        :type tags: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateExperimentRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateExperimentRequest):
            return True

        return self.to_dict() != other.to_dict()
