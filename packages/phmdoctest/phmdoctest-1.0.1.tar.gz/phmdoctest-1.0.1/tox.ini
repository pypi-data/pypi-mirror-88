# Tox (http://tox.testrun.org/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

# configuration values consumed by other tools.
[flake8]
exclude = tests, build, .tox, test_setup.py, test_setup_doctest.py

[coverage:run]
branch = True
source = src

[tox]
envlist = cover, inspect, docs, demo

[testenv:cover]
usedevelop = True
passenv = CI TRAVIS TRAVIS_*
deps =
    coverage
    pytest
    codecov
commands =
    coverage run -m pytest -vv tests
    coverage run --append -m phmdoctest --help
    codecov -X gcov

[testenv:inspect]
# mypy reports 1 missing type annotation error - don't know why.
#     main.py:24  error: Function is missing a type annotation
deps =
    flake8
    pep8-naming
    mypy
    typing
    check-manifest
    twine
# "any command with a leading - will ignore the exit code."
commands =
    flake8 --exit-zero --max-complexity=10
    - mypy src/phmdoctest --strict
    - mypy tests/test_type_packaging.py --strict
    check-manifest
    twine check {toxworkdir}/dist/*

[testenv:docs]
deps = -rdoc/requirements.txt
commands=
    # builds from project root to include README.md and index.rst.
    sphinx-build -b html -d {envtmpdir}/doctrees . {envtmpdir}/html

[testenv:demo]
deps =
    pytest
commands =
    # Show setup, teardown, and doctests pytest run time order using
    # pytest Live Logs.
    # The terminal output should show the order:
    #     setup_module
    #     test_1
    #     test_2
    #     test_3
    #     teardown_module
    python -m pytest doc/livelog.py --log-cli-level=debug --color=yes

    # This is the same command plus the --doctest-modules option.
    # Note that the PASSED indication for session_00000 is printed
    # after setup_module log message.
    # The terminal output should show the order:
    #     setup_module
    #     session_00000
    #     session_00001
    #     session_00002
    #     teardown_module
    #     setup_module
    #     test_1
    #     test_2
    #     test_3
    #     teardown_module
    python -m pytest --log-cli-level=debug --color=yes --doctest-modules doc/livelog.py

    # demo test case assertion with early teardown with pytest -x
    - python -m pytest -vv -x --log-cli-level=DEBUG --doctest-modules --color=yes doc/livelog_test_assertion.py

    # demo test case assertion with early teardown with pytest -x
    - python -m pytest -vv -x --log-cli-level=DEBUG --doctest-modules --color=yes doc/livelog_bad_session.py
