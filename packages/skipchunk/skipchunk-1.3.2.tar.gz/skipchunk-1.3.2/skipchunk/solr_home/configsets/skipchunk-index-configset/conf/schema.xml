<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--  SKIPCHUNK-INDEX SCHEMA.XML 

  Used as a configset to create skipchunk suggesters and language graphs

-->

<!--}}}}}}}}}}}fffffffff}}jawhPEZj}fffff}}}}}}}}}}}}}}}ff}}}}}}}}}}}}}}}}}}}}}}}
}}}}}}}fffffffff}yE6qXhPh%%UEnz{oPUKKaff}fffffffffff}}}}}}ff}}}}}}}}}}}}}}}}}}}}
}}}}}}}ffffffaKKUwfT*+=+<LJJjSaJii==ijZkwfffffff}fff}}}}}}}}}}}}}}}}}}}}}}}}}}}}
}}}fffffffyqqS\===============<Titz|i===zfyZZaX6}}ff}}}}}}}}}}}}}}}}}}}}}}}}}}}}
}}}fffffyDqz====================?7x!~==<|7zz}X%yffff}}}}}}}}}}}}}}}}}}}}}}}}}}}}
}}}ffffAD7===================|xi^'```````'_;}y%Xfff}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
}}}ffj%P>=====+=======LL=+<{n?,`````````````,^fR5fff}}}}}}}}}}}}}}}}}}}}}}}}}}}}
}}}ffWa+====<fj=^++?jPy*7aY;.`````````````````,zK}ff}}}}}}}}}}}}}}}}}}}}}}}}}}}}
}}}fKb+=======|7>|zjtJIYicf'```````````````,\<.=Dfff}}}}}}}}}}}}}}}}}}}}}}}}}}}}
}}}}Q7==========i7~`.```'w'.```````````````|'!r*Kfff}}}}}}}}}}}}}}}}}}}}}}}}}}}}
}}}yQ<============7v'.``.;``'ji+^'````````,r  <JSf}f}}}}}}}}}}}}}}}}}}}}}}}}}}}}
}}}yQ|=============*u:``````,L  '^;.``````!^  +y}f}f}}}}}}}}}}}}}}}}}}}}}}}}}}}}
}}}}Qt==============<j;.`````*`   .+,`````!g|.ik}fff}}}}}}}}}}}}}}}}}}}}}}}}}}}}
ffffKd===============>y~`````_L`'  `='``','NN*|wfffffffff}fffffff}ffffffffff}}}f
fff}f85===============<I.````.~A@Qv`~<``.+~>y~,Thyffff}ff}fjawwmoj}}ffffffff}fff
fffffyWS==============={!`````.'x@@a,L```;7~'~`._SUfURbXhUDX6UXXURNWaffjffffffff
jjjjfjjbdi=============iL``````,;;;~;~'.'~```````.mUKk5wREESEEEwq%XPU6AEjjjfjjjj
jjjjjjjjSDXi==*z+^=*?Liz~`````````````````````````^WjdUjKmxxxtJtnwKwmwDRjjjjjjjj
jjjjjjjjjjZbXjS|`.~<z<*;'```````````;^'.````.,..``Y6jjDK8atxtxxIUmxtjqKyjjjjjjjj
jjjjjjjjyjyjjwbU,.,7^.:;~.```'.``..,~;;;;;;!!,`.'J6jyjqDKDUEwww%DaShXyjjjjjjjjjj
yyyyyyyyyyyyyyyy6j^.',``..;~,DUSx>'``.`'~~'...!YdDyyya#dXUb%DqUUDRyyyyyyyyyyyyyy
yyyyyyyyyyyyyyyyy5UkJ|r;_;|+`uE5okqj='`...,r7mUay8wE6XoRhhqUDRRgBZyyyyyyyyyyyyyy
555555555555555555555ahAqq5!!ok55o55kkc=ToDEkXZyo8RmIxaqtYXtjogRdE55555555555555
oooooooooooooooooooooooooU* ,Ro55oqDRDQq5o&KEZaADSxxxjKfxnA}txnj}q6ooooooooooooo
aaaaaaaaaaaaaaaaaaaaaaaawNj7ZUyy55mXSEBXXNQwoE%kxxxxttxxxtP6xtxxstk6}SSaaaaaaaaa
aaaaZZZZZZZZZZZZZZZZZaZR@@@@g5555y5adQ6*;g@@BDftt.....txxtIYZyfo}s5t+76mZZaZZZZa
SSSSSSSSSSSSSSSSSSZSSSD@@@@@6555oU8@@@?  x@@Ut...........xxJnZkJ6ftZx!7DSSSSSSSS
mmmmmmmmmmmmmmmmmmmmmSQ@@@@@QRgQ@@@@@@^  ^@mt...ENRICHY...jj+^!!r7at{m:zUmSmmmmm
mmmmmmmmmmmmwwmmwwwmwX@@@@@@@@@@@@@@@@Qi'daxxx....RICH....Z=S!yIiUEJxjyUDwwmwwmm
wwwwwwEEwwwwEEwEwwwwwb@@@@@@@@@@@@@@@@@@QKtxtxxx.........tExc!ix=XsxxxxtE%wwwwww
EEEEEEEEEEEEEEEEEEEEEN@@@@@@@@@@@@@@@@@@@@QPyoxxtt.....xttxnaf=T==JSIxxxxk%PE-->

<schema name="skipchunk-index" version="1.6">

   <!-- If you remove this field, you must _also_ disable the update log in solrconfig.xml
      or Solr won't start. _version_ and update log are required for SolrCloud
   --> 
   <field name="_version_" type="plong" indexed="true" stored="true"/>
   
   <!-- points to the root document of a block of nested documents. Required for nested
      document support, may be removed otherwise
   -->
   <field name="_root_" type="string" indexed="true" stored="false"/>

   <!-- ===================== HELLO-NLP-INDEX FIELDS ===================== 

    This schema defines the convention driven index backing for Hello-NLP enriched fields

   -->

   <field name="id"         type="string"    indexed="true"  stored="true" required="true" multiValued="false" /> 
   
   <!-- ========================================================================= -->
   <!-- THESE ARE THE ONLY HARDCODED FIELDS - Everything else is a dynamic field. -->
   <field name="createtime"  type="pdate"    indexed="true"  stored="true" multiValued="false" />
   <field name="title"       type="text_en"  indexed="true"  stored="true" />
   <field name="content"     type="text_en"  indexed="true"  stored="true" multiValued="true"/>
   <!-- ========================================================================= -->

   <!-- Payload-enriched content -->
   <dynamicField name="*_payloads" type="text_en_payloads"   indexed="true" stored="true" multiValued="true" />

   <!-- Dynamic convention-over-configuration fields -->
   <dynamicField name="*_t"     type="text_en"  indexed="true"   stored="true"   />
   <dynamicField name="*_txt"   type="text_en"  indexed="true"   stored="true" multiValued="true"/>
   <dynamicField name="*_en"    type="text_en"  indexed="true"   stored="true" multiValued="true"/>


   <!-- Dynamic primitive type fields -->
   <dynamicField name="*_i"     type="pint"     indexed="true"   stored="true"   />
   <dynamicField name="*_is"    type="pint"     indexed="true"   stored="true"  multiValued="true"/>
   <dynamicField name="*_s"     type="string"   indexed="true"   stored="true"   />
   <dynamicField name="*_s_ns"  type="string"   indexed="true"   stored="false"  />
   <dynamicField name="*_ss"    type="string"   indexed="true"   stored="true" multiValued="true"/>
   <dynamicField name="*_l"     type="plong"    indexed="true"   stored="true"   />
   <dynamicField name="*_l_ns"  type="plong"    indexed="true"   stored="false"  />
   <dynamicField name="*_ls"    type="plong"    indexed="true"   stored="true"  multiValued="true"/>
   <dynamicField name="*_b"     type="boolean"  indexed="true"   stored="true"   />
   <dynamicField name="*_bs"    type="boolean"  indexed="true"   stored="true"  multiValued="true"/>
   <dynamicField name="*_f"     type="pfloat"   indexed="true"   stored="true"   />
   <dynamicField name="*_fs"    type="pfloat"   indexed="true"   stored="true"  multiValued="true"/>
   <dynamicField name="*_d"     type="pdouble"  indexed="true"   stored="true"   />
   <dynamicField name="*_ds"    type="pdouble"  indexed="true"   stored="true"  multiValued="true"/>
   <dynamicField name="*_dt"    type="pdate"    indexed="true"  stored="true"/>
   <dynamicField name="*_dts"   type="pdate"    indexed="true"  stored="true" multiValued="true"/>
   <dynamicField name="*_c"     type="currency" indexed="true"  stored="true"/>
   <dynamicField name="*_p"     type="location" indexed="true"  stored="true"/>
   <dynamicField name="*_coordinate"  type="pdouble" indexed="true"  stored="false" />
   <dynamicField name="random_*" type="random" />



 <!-- Field to use to determine and enforce document uniqueness. 
      Unless this field is marked with required="false", it will be a required field
   -->
 <uniqueKey>id</uniqueKey>

  <!-- copyField commands copy one field to another at the time a document
        is added to the index.  It's used either to index the same field differently,
        or to add multiple fields to the same field for easier/faster searching.  -->

   <!-- Above, multiple source fields are copied to the [text] field.
    Another way to map multiple source fields to the same
    destination field is to use the dynamic field syntax.
    copyField also supports a maxChars to copy setting.  -->

   <!-- <copyField source="*_t" dest="text" maxChars="3000"/> -->

   <!-- copy name to alphaNameSort, a field designed for sorting by name -->
   <!-- <copyField source="name" dest="alphaNameSort"/> -->

  
    <!-- field type definitions. The "name" attribute is
       just a label to be used by field definitions.  The "class"
       attribute and any other attributes determine the real
       behavior of the fieldType.
         Class names starting with "solr" refer to java classes in a
       standard package such as org.apache.solr.analysis
    -->

    <!-- The StrField type is not analyzed, but indexed/stored verbatim. -->
    <fieldType name="string" class="solr.StrField" sortMissingLast="true" />

    <!-- boolean type: "true" or "false" -->
    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>

    <!-- sortMissingLast and sortMissingFirst attributes are optional attributes are
         currently supported on types that are sorted internally as strings
         and on numeric types.
	     This includes "string", "boolean", "pint", "pfloat", "plong", "pdate", "pdouble".
       - If sortMissingLast="true", then a sort on this field will cause documents
         without the field to come after documents with the field,
         regardless of the requested sort order (asc or desc).
       - If sortMissingFirst="true", then a sort on this field will cause documents
         without the field to come before documents with the field,
         regardless of the requested sort order.
       - If sortMissingLast="false" and sortMissingFirst="false" (the default),
         then default lucene sorting will be used which places docs without the
         field first in an ascending sort and last in a descending sort.
    -->

    <!--
      Numeric field types that index values using KD-trees.
      Point fields don't support FieldCache, so they must have docValues="true" if needed for sorting, faceting, functions, etc.
    -->
    <fieldType name="pint" class="solr.IntPointField" docValues="true"/>
    <fieldType name="pfloat" class="solr.FloatPointField" docValues="true"/>
    <fieldType name="plong" class="solr.LongPointField" docValues="true"/>
    <fieldType name="pdouble" class="solr.DoublePointField" docValues="true"/>
    
    <fieldType name="pints" class="solr.IntPointField" docValues="true" multiValued="true"/>
    <fieldType name="pfloats" class="solr.FloatPointField" docValues="true" multiValued="true"/>
    <fieldType name="plongs" class="solr.LongPointField" docValues="true" multiValued="true"/>
    <fieldType name="pdoubles" class="solr.DoublePointField" docValues="true" multiValued="true"/>

    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
         is a more restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime    
         The trailing "Z" designates UTC time and is mandatory.
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
         All other components are mandatory.

         Expressions can also be used to denote calculations that should be
         performed relative to "NOW" to determine the value, ie...

               NOW/HOUR
                  ... Round to the start of the current hour
               NOW-1DAY
                  ... Exactly 1 day prior to now
               NOW/DAY+6MONTHS+3DAYS
                  ... 6 months and 3 days in the future from the start of
                      the current day
                      
         Consult the DatePointField javadocs for more information.
      -->
    <!-- KD-tree versions of date fields -->
    <fieldType name="pdate" class="solr.DatePointField" docValues="true"/>
    <fieldType name="pdates" class="solr.DatePointField" docValues="true" multiValued="true"/>
    
    <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
    <fieldType name="binary" class="solr.BinaryField"/>

    <!-- The "RandomSortField" is not used to store or search any
         data.  You can declare fields of this type it in your schema
         to generate pseudo-random orderings of your docs for sorting 
         or function purposes.  The ordering is generated based on the field
         name and the version of the index. As long as the index version
         remains unchanged, and the same field name is reused,
         the ordering of the docs will be consistent.  
         If you want different psuedo-random orderings of documents,
         for the same version of the index, use a dynamicField and
         change the field name in the request.
     -->
    <fieldType name="random" class="solr.RandomSortField" indexed="true" />

    <!-- solr.TextField allows the specification of custom text analyzers
         specified as a tokenizer and a list of token filters. Different
         analyzers may be specified for indexing and querying.

         The optional positionIncrementGap puts space between multiple fields of
         this type on the same document, with the purpose of preventing false phrase
         matching across fields.

         For more info on customizing your analyzer chain, please see
         http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
     -->

    <!-- One can also specify an existing Analyzer class that has a
         default constructor via the class attribute on the analyzer element.
         Example:
    <fieldType name="text_greek" class="solr.TextField">
      <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
    </fieldType>
    -->

<!-- *************************************************************** -->

    <!-- A High-Recall stemmed fieldtype -->
    <fieldType name="text_en" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" />
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" />
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- A High-Precision lemmatized and payloaded fieldtype -->
    <fieldType name="text_en_payloads" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.DelimitedPayloadTokenFilterFactory" encoder="float" />
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true" />
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- Only lowercases the field value, keeping it as a single token.  
         Useful for keywords, categories, and other multivalued string matches.-->
    <fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory" />
      </analyzer>
    </fieldType>

    <!-- 
      Example of using PathHierarchyTokenizerFactory at index time, so
      queries for paths match documents at that path, or in descendent paths
    -->
    <fieldType name="descendent_path" class="solr.TextField">
      <analyzer type="index">
        <tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/" />
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.KeywordTokenizerFactory" />
      </analyzer>
    </fieldType>
    <!-- 
      Example of using PathHierarchyTokenizerFactory at query time, so
      queries for paths match documents at that path, or in ancestor paths
    -->
    <fieldType name="ancestor_path" class="solr.TextField">
      <analyzer type="index">
        <tokenizer class="solr.KeywordTokenizerFactory" />
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/" />
      </analyzer>
    </fieldType>

    <!-- This point type indexes the coordinates as separate fields (subFields)
      If subFieldType is defined, it references a type, and a dynamic field
      definition is created matching *___<typename>.  Alternately, if 
      subFieldSuffix is defined, that is used to create the subFields.
      Example: if subFieldType="double", then the coordinates would be
        indexed in fields myloc_0___double,myloc_1___double.
      Example: if subFieldSuffix="_d" then the coordinates would be indexed
        in fields myloc_0_d,myloc_1_d
      The subFields are an implementation detail of the fieldType, and end
      users normally should not need to know about them.
     -->
    <fieldType name="point" class="solr.PointType" dimension="2" subFieldSuffix="_d"/>

    <!-- A specialized field for geospatial search. If indexed, this fieldType must not be multivalued. -->
    <fieldType name="location" class="solr.LatLonType" subFieldSuffix="_coordinate"/>

    <!-- An alternative geospatial field type new to Solr 4.  It supports multiValued and polygon shapes.
      For more information about this and other Spatial fields new to Solr 4, see:
      http://wiki.apache.org/solr/SolrAdaptersForLuceneSpatial4
    -->
    <fieldType name="location_rpt" class="solr.SpatialRecursivePrefixTreeFieldType"
        geo="true" distErrPct="0.025" maxDistErr="0.001" distanceUnits="kilometers" />

   <!-- Money/currency field type. See http://wiki.apache.org/solr/MoneyFieldType
        Parameters:
          amountLongSuffix: Required. Refers to a dynamic field for the raw amount sub-field. 
                              The dynamic field must have a field type that extends LongValueFieldType.
                              Note: If you expect to use Atomic Updates, this dynamic field may not be stored.
          codeStrSuffix:    Required. Refers to a dynamic field for the currency code sub-field.
                              The dynamic field must have a field type that extends StrField.
                              Note: If you expect to use Atomic Updates, this dynamic field may not be stored.
          defaultCurrency:  Specifies the default currency if none specified. Defaults to "USD"
          providerClass:    Lets you plug in other exchange provider backend:
                            solr.FileExchangeRateProvider is the default and takes one parameter:
                              currencyConfig: name of an xml file holding exchange rates
                            solr.OpenExchangeRatesOrgProvider uses rates from openexchangerates.org:
                              ratesFileLocation: URL or path to rates JSON file (default latest.json on the web)
                              refreshInterval: Number of minutes between each rates fetch (default: 1440, min: 60)
   -->
    <fieldType name="currency" class="solr.CurrencyFieldType" amountLongSuffix="_l_ns" codeStrSuffix="_s_ns"
               defaultCurrency="USD" currencyConfig="currency.xml" />
    
  <!-- Similarity is the scoring routine for each document vs. a query.
       A custom Similarity or SimilarityFactory may be specified here, but 
       the default is fine for most applications.  
       For more info: http://wiki.apache.org/solr/SchemaXml#Similarity
  -->
  <!--
     <similarity class="com.example.solr.CustomSimilarityFactory">
       <str name="paramkey">param value</str>
     </similarity>
  -->

</schema>
