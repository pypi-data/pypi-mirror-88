# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from kikimr.public.api.protos import ydb_s3_internal_pb2 as kikimr_dot_public_dot_api_dot_protos_dot_ydb__s3__internal__pb2


class S3InternalServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.S3Listing = channel.unary_unary(
        '/Ydb.S3Internal.V1.S3InternalService/S3Listing',
        request_serializer=kikimr_dot_public_dot_api_dot_protos_dot_ydb__s3__internal__pb2.S3ListingRequest.SerializeToString,
        response_deserializer=kikimr_dot_public_dot_api_dot_protos_dot_ydb__s3__internal__pb2.S3ListingResponse.FromString,
        )


class S3InternalServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def S3Listing(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_S3InternalServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'S3Listing': grpc.unary_unary_rpc_method_handler(
          servicer.S3Listing,
          request_deserializer=kikimr_dot_public_dot_api_dot_protos_dot_ydb__s3__internal__pb2.S3ListingRequest.FromString,
          response_serializer=kikimr_dot_public_dot_api_dot_protos_dot_ydb__s3__internal__pb2.S3ListingResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Ydb.S3Internal.V1.S3InternalService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
