import sys
import argparse
from textwrap import dedent
from .meta import load
try:
    from . import __about__
except ImportError:
    __about__ = None


def _main(args):
    regarding_name, regarding_homepage = None, None
    try:
        from . import __about__ as about_regarding
        try:
            regarding_name = about_regarding.project_name.lower()
            regarding_homepage = about_regarding.homepage
        except AttributeError:
            # During bootstrap
            pass

    except ImportError:
        about_regarding = argparse.Namespace()
        about_regarding.project_name = "TDB"
        about_regarding.homepage = "TDB"

    project = args.project_meta
    about_py = dedent(f"""
    \"\"\"
    ~~~~~~~~~~ DO NOT EDIT THIS FILE! Autogenerated by `{regarding_name}` ~~~~~~~~~~
    {regarding_homepage}
    \"\"\"
    import dataclasses\n
    __all__ = ["Version", "project_name", "version", "version_info", "release_name",
               "author", "author_email", "years", "description", "homepage"]\n\n
    @dataclasses.dataclass
    class Version:
        major: int
        minor: int
        maint: int
        release: str
        release_name: str\n\n
    project_name = "{project.name}"
    version = "{project.version}"
    release_name = "{project.release_name}"
    author = "{project.author}"
    author_email = "{project.author_email}"
    years = "{project.years}"
    version_info = Version(
        {project.version_info.major}, {project.version_info.minor}, {project.version_info.maint},
        "{project.version_info.release}", "{project.release_name}"
    )
    description = "{project.description}"
    homepage = "{project.homepage}"
    """).strip()

    args.out_file.write(f"{about_py}\n")
    args.out_file.close()


def main():
    des = __about__.description if __about__ and hasattr(__about__, "description") else None
    ver = __about__.version if __about__ and hasattr(__about__, "version") else None

    cli = argparse.ArgumentParser(description=des)
    cli.add_argument("--version", action="version", version=f"%(prog)s {ver}")
    cli.add_argument("-o", "--out-file",
                     type=argparse.FileType("w", encoding='UTF-8'), default="-",
                     help="The output file, by default is file is printed to standard out.")
    args = cli.parse_args()

    try:
        project_meta = load()
    except FileNotFoundError as not_found:
        print(str(not_found), file=sys.stderr)
        status = 2
    else:
        args.project_meta = project_meta
        status = _main(args) or 0

    sys.exit(status)


if __name__ == "__main__":
    main()
