###############################################################################
# GitLab CI YAML Documentation: https://docs.gitlab.com/ee/ci/yaml/
#
# Using badge colors from https://shields.io
# - Green:  #44cc11
# - Yellow: #dfb317
# - Red:    #e05d44
###############################################################################

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache"

default:
  tags:
    - docker
  image: python:3.6
  interruptible: true

cache:
  paths:
    - .cache/pip
    - venv/

stages:
  - lint
  - build
  - test
  - deploy

###############################################################################
# STYLE & LINT
###############################################################################

lint_python:
  stage: lint
  dependencies: []
  before_script:
    - python3 -m pip install --user virtualenv
    - python3 -m virtualenv venv/
    - source venv/bin/activate
    - pip install -U tox anybadge
  script:
    - anybadge -l pylint -v 'fail' -c '#e05d44' -o -f badge.svg
    - tox -e lint
    - PYLINT_SCORE=$(cat ./pylint_out.txt | grep -oP 'Your code has been rated at \K(\d+\.*\d+)')
    - anybadge -v $PYLINT_SCORE -o -f badge.svg pylint
    - echo "pylint_rating $PYLINT_SCORE" > metrics.txt
  artifacts:
    when: always
    paths:
      - badge.svg
      - pylint_out.txt
    reports:
      metrics: metrics.txt

format_black:
  stage: lint
  dependencies: []
  before_script:
    - python3 -m pip install --user virtualenv
    - python3 -m virtualenv venv/
    - source venv/bin/activate
    - pip install -U black anybadge
    - python3 --version
    - black --version
    - python3 -c "import anybadge; print(\"anybadge\", anybadge.__version__)"
  script:
    - anybadge -l format -v 'fail' -c '#e05d44' -o -f badge.svg
    - black --check ./src
    - anybadge -l format -v ' ok ' -c '#44cc11' -o -f badge.svg
  allow_failure: true
  artifacts:
    when: always
    paths:
      - badge.svg

###############################################################################
# BUILD
###############################################################################

sdist:
  stage: build
  dependencies: []
  needs: []
  before_script:
    - python3 -m pip install --user virtualenv
    - python3 -m virtualenv venv/
    - source venv/bin/activate
    - pip install --upgrade setuptools wheel
  script:
    - python3 setup.py sdist --formats=zip
  artifacts:
    paths:
      - dist/*


###############################################################################
# TEST
###############################################################################

pytest:
  stage: test
  image: python:3.6
  before_script:
    - python3 -m pip install --user virtualenv
    - python3 -m virtualenv venv/
    - source venv/bin/activate
    - pip install -U tox
  script:
    - tox 
  artifacts:
    when: always
    paths:
      - pytest_out*
      - coverage.xml
    reports:
      junit: pytest_out.xml.junit

gitlab_artifact_report:
  stage: test
  before_script:
    - python3 -m pip install --user virtualenv
    - python3 -m virtualenv venv/
    - source venv/bin/activate
    - pip install ./dist/cppcheck_*.zip
  script:
    - cppcheck-codequality -i ./tests/cppcheck_simple.xml -o codequality.json
  artifacts:
    when: always
    paths:
      - codequality.json
    reports:
      codequality: codequality.json

###############################################################################
# DEPLOY
###############################################################################

pypi_publish:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  dependencies: []
  before_script:
    - python3 -m pip install --user virtualenv
    - python3 -m virtualenv venv/
    - source venv/bin/activate
    - python3 -m pip install --upgrade setuptools wheel twine
  script:
    - python3 setup.py sdist bdist_wheel
    - python3 -m twine upload dist/* -u __token__ -p $PYPI_API_TOKEN
  artifacts:
    paths:
      - dist/*