name: Build
on:
    push:
        branches-ignore:
            - gh-pages
    pull_request:
    release:
        types:
            - created

jobs:
    build:
        name: 'Build (Desktop) @ ${{ matrix.os }}'
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-16.04, windows-latest, macOS-latest]

        steps:
        - name: Set build type
          shell: bash
          run: |
              if [ ${{ github.event_name == 'release' }} ]; then
                echo BUILD_TYPE=Release >> $GITHUB_ENV
              else
                echo BUILD_TYPE=Debug >> $GITHUB_ENV
              fi

        - uses: actions/checkout@v1
          with:
              submodules: true

        - name: Cache Qt
          id: cache-qt
          uses: actions/cache@v2
          with:
              path: ../Qt
              key: ${{ runner.os }}-QtCache-5.15.1

        - name: Install Qt
          uses: jurplel/install-qt-action@v2
          with:
            version: '5.15.1'
            target: 'desktop'
            arch: 'win64_mingw81'
            cached: ${{ steps.cache-qt.outputs.cache-hit }}

        - uses: actions/setup-python@v1
          with:
              python-version: '3.8'

        - name: Cache MinGW
          if: runner.os == 'Windows'
          id: cache-mingw
          uses: actions/cache@v2
          with:
              path: MinGW
              key: mingw-17.1

        - name: Install MinGW
          if: (runner.os == 'Windows') && (steps.cache-mingw.outputs.cache-hit != 'true')
          shell: bash
          run: |
              choco install wget -y --no-progress
              wget https://nuwen.net/files/mingw/mingw-17.1-without-git.exe
              7z x mingw-17.1-without-git.exe
              MinGW/set_distro_paths.bat

        - name: Configure MinGW
          if: runner.os == 'Windows'
          shell: bash
          run: |
              echo $GITHUB_WORKSPACE/MinGW/bin >> $GITHUB_PATH
              echo CMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/MinGW:$CMAKE_PREFIX_PATH >> $GITHUB_ENV
              echo CMAKE_GENERATOR="MSYS Makefiles" >> $GITHUB_ENV

        - name: Configure Linux
          if: runner.os == 'Linux'
          shell: bash
          run: |
              # install and enable GCC9
              sudo add-apt-repository ppa:ubuntu-toolchain-r/test
              sudo apt-get update
              sudo apt-get install g++-9
              echo CC=gcc-9 >> $GITHUB_ENV
              echo CXX=g++-9 >> $GITHUB_ENV
              # install qt dependencies
              sudo apt-get install libgl1-mesa-dev libxkbcommon-x11-0 libxcb-icccm4 libxcb-xinerama0 libxcb-xkb1 libxcb-render-util0 libxcb-keysyms1 libxcb-image0
              # enable coverage on debug-build
              if [ $BUILD_TYPE == "Debug" ];then
                echo CMAKE_CXX_FLAGS="-g -O0 -fprofile-arcs -ftest-coverage" >> $GITHUB_ENV
              fi

        - name: Configure
          shell: bash
          run: |
              mkdir -p build
              cd build
              cmake -DCMAKE_TUNE_FLAGS=' ' -DVIPSTER_DESKTOP=ON -DPython3_ROOT_DIR=${pythonLocation} -DVIPSTER_PYWIDGET=ON -DVIPSTER_LAMMPS=ON -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=$BUILD_TYPE ..

        - name: Build
          run: |
              cd build
              cmake --build .

        - name: Test
          shell: bash
          run: |
              cd build
              ctest --output-on-failure

        - name: Collect coverage
          if: (github.event_name != 'release') && (runner.os  == 'Linux')
          shell: bash
          run: |
              echo "Collecting coverage"
              cd build
              bash <(curl -s https://codecov.io/bash) -x gcov-9

        - name: Bundle artifact
          if: github.event_name == 'release'
          shell: bash
          run: |
              echo "Deploying"
              cd build
              pip install numpy moltemplate
              if [ "$RUNNER_OS" == "Linux" ]; then
                . ../util/make-appimage.sh
                echo "ARTIFACT_PATH=$GITHUB_WORKSPACE/build/Vipster-Linux-x86_64.AppImage" >> $GITHUB_ENV
                echo "ARTIFACT_NAME=Vipster-Linux-x86_64.AppImage" >> $GITHUB_ENV
              elif [ "$RUNNER_OS" == "macOS" ]; then
                . ../util/make-osxapp.sh
                echo "ARTIFACT_PATH=$GITHUB_WORKSPACE/build/Vipster-OSX-x86_64.dmg" >> $GITHUB_ENV
                echo "ARTIFACT_NAME=Vipster-OSX-x86_64.dmg" >> $GITHUB_ENV
              else
                . ../util/make-winarchive.sh
                echo "ARTIFACT_PATH=$GITHUB_WORKSPACE/build/Vipster-Win-x86_64.zip" >> $GITHUB_ENV
                echo "ARTIFACT_NAME=Vipster-Win-x86_64.zip" >> $GITHUB_ENV
              fi
              ls Vipster*

        - name: Upload artifact
          if: github.event_name == 'release'
          uses: actions/upload-release-asset@v1.0.1
          env:
              GITHUB_TOKEN: ${{ secrets.GH_ACTIONS_PAT }}
          with:
              upload_url: ${{ github.event.release.upload_url }}
              asset_path: ${{ env.ARTIFACT_PATH }}
              asset_name: ${{ env.ARTIFACT_NAME }}
              asset_content_type: application/octet-stream

    trigger:
        name: 'Trigger continuous deployment'
        needs: build
        runs-on: ubuntu-16.04
        if: (github.event_name == 'push') && (github.ref == 'refs/heads/testing')
        steps:
            - uses: sgsaenger/create-release@dor_tc
              env:
                  GITHUB_TOKEN: ${{ secrets.GH_ACTIONS_PAT }}
              with:
                  tag_name: continuous
                  release_name: Continuous build
                  body: |
                      Contains latest features, but may not be stable.
                  target_commitish: ${{ github.sha }}
                  replace_old_tag: true
                  draft: false
                  prerelease: true
