# vim: set et ai ts=4 sw=4:
# -------------------------------------------------------------------------
# Copyright (c) 2011, Peter Sommerlad and IFS Institute for Software
# at HSR Rapperswil, Switzerland
# All rights reserved.
#
# This library/application is free software; you can redistribute and/or
# modify it under the terms of the license that is included with this
# library/application in the file license.txt.
# -------------------------------------------------------------------------

import pkg_resources

pkg_resources.require(["SConsider"])
import os
from stat import *

from SomeUtils import listFiles

Import('*')

_sconsider_dist = pkg_resources.get_distribution("SConsider").parsed_version
if _sconsider_dist < pkg_resources.parse_version("0.3.10"):
    from SConsider.PackageRegistry import createFulltargetname
else:
    from SConsider.PackageRegistry import PackageRegistry
    createFulltargetname = PackageRegistry.createFulltargetname

if _sconsider_dist < pkg_resources.parse_version("0.5"):
    from ConfigureHelper import Configure

    from SConsider import cloneBaseEnv, createTargets
    from SConsider.PackageRegistry import PackageRegistry
    env = cloneBaseEnv()
    conf = Configure(env)
    if conf.CheckCHeader('sybdb.h') and conf.CheckMultipleLibs(
        ['sybunic', 'sybcs', 'sybct', 'sybintl', 'sybtcl', 'sybcomn']):
        conf.env.Append(CPPDEFINES='HAS_SYBASE')
    isqlbin = conf.CheckExecutable('isql')
    env = conf.Finish()

    buildSettings = {}
    if 'HAS_SYBASE' in env['CPPDEFINES']:
        buildSettings[packagename] = {
            'linkDependencies': [
                createFulltargetname(packagename, 'sybunic'),
                createFulltargetname(packagename, 'sybcs'),
                createFulltargetname(packagename, 'sybct'),
                createFulltargetname(packagename, 'sybintl'),
                createFulltargetname(packagename, 'sybtcl'),
                createFulltargetname(packagename, 'sybcomn'),
            ],
            'requires': [createFulltargetname(packagename, 'config')],
            'targetType': 'IncludeOnly',
        }
        buildSettings['config'] = {
            'targetType': 'CopyFiles',
            'copyFiles': [
                (listFiles(['config/*', 'charsets/*', 'locales/*'],
                           recursive=True), S_IRUSR | S_IRGRP | S_IROTH),
            ],
            'appendUnique': {
                'RELTARGETDIR': os.path.join('globals', packagename)
            },
            'public': {
                'execEnv': {
                    'SYBASE': lambda env: env.getTargetBaseInstallDir().abspath,
                    'LANG': 'C',
                },
            },
        }
        buildSettings['sybunic'] = {
            'public': {
                'appendUnique': {
                    'LIBS': ['sybunic'],
                },
            },
        }
        buildSettings['sybcs'] = {
            'public': {
                'appendUnique': {
                    'LIBS': ['sybcs'],
                },
            },
        }
        buildSettings['sybct'] = {
            'public': {
                'appendUnique': {
                    'LIBS': ['sybct'],
                },
            },
        }
        buildSettings['sybintl'] = {
            'public': {
                'appendUnique': {
                    'LIBS': ['sybintl'],
                },
            },
        }
        buildSettings['sybtcl'] = {
            'public': {
                'appendUnique': {
                    'LIBS': ['sybtcl'],
                },
            },
        }
        buildSettings['sybcomn'] = {
            'public': {
                'appendUnique': {
                    'LIBS': ['sybcomn'],
                },
            },
        }
        if isqlbin:
            buildSettings['bin_isql'] = {
                'sourceFiles': [isqlbin],
                'requires': [
                    PackageRegistry.createFulltargetname(packagename, 'config'),
                ],
                'targetType': 'InstallBinary',
            }
            buildSettings['script_isql'] = {
                'targetType': 'ProgramApp',
                'runConfig': {},
                'usedTarget': createFulltargetname(packagename, 'bin_isql'),
            }

    createTargets(packagename, buildSettings)
elif _sconsider_dist >= pkg_resources.parse_version("0.5"):
    import os

    from TargetHelpers import createPackageProgramScript, createPackageRunTarget
    from TargetMaker import EnvBuilder
    from ThirdParty import (
        add_3rdparty_system_binary_target,
        add_3rdparty_system_header_target,
        add_3rdparty_system_lib_target,
    )
    includeTarget = add_3rdparty_system_header_target(EnvBuilder().build(), packagename,
                                                      lambda conf: conf.CheckCHeader('sybdb.h'))

    libnames = [('sybunic', 'lib_sybunic'), ('sybcs', 'lib_sybcs'), ('sybct', 'lib_sybct'),
                ('sybintl', 'lib_sybintl'), ('sybtcl', 'lib_sybtcl'), ('sybcomn', 'lib_sybcomn')]
    libs = add_3rdparty_system_lib_target(EnvBuilder().depend(includeTarget).build(), packagename,
                                          lambda conf: conf.CheckMultipleLibs([lib for lib, _ in libnames]),
                                          libnames)

    libs = EnvBuilder().depend(libs).build().RegisterPackageTarget(packagename=packagename, targetname='libs')

    reltargetdir = os.path.join('globals', packagename)

    def setRelTargetDir(env):
        env.setRelativeTargetDirectory(reltargetdir)

    bin_env = EnvBuilder().depend(libs).build()
    setRelTargetDir(bin_env)
    bin_name = 'isql'
    bin_target = add_3rdparty_system_binary_target(bin_env, packagename,
                                                   lambda conf: conf.CheckExecutable(bin_name), bin_name,
                                                   'bin_' + bin_name)
    bins = EnvBuilder().depend(bin_target).build().RegisterPackageTarget(packagename=packagename,
                                                                         targetname='bins')

    from stat import *
    copyFiles = [
        (listFiles(['config/*', 'charsets/*', 'locales/*'], recursive=True), S_IRUSR | S_IRGRP | S_IROTH),
    ]
    copyTarget = createCopyFilesTarget(packagename,
                                       'config',
                                       lambda env: env.getTargetBaseInstallDir(),
                                       copyFiles,
                                       pkg_local=[setRelTargetDir])

    def addGenerateScriptVars(env):
        env.AppendENVPath('SYBASE', os.path.join(env.getBaseOutDir().get_abspath(), reltargetdir))
        env.AppendENVPath('LANG', 'C')
        env.Append(GENERATESCRIPTVARS=[('SYBASE', '${SYBASE:-' +
                                        os.path.join(env.getBaseOutDir().get_abspath(), reltargetdir) +
                                        '}'), ('LANG', 'C')])

    generateScriptEnv = EnvBuilder().export(addGenerateScriptVars).build()
    generateScriptTarget = generateScriptEnv.RegisterPackageTarget(packagename, 'generatescriptvars')

    scriptTarget = createPackageProgramScript(packagename,
                                              bin_name,
                                              bin_target,
                                              depend=[generateScriptTarget, copyTarget])
    scripts = EnvBuilder().depend(scriptTarget).build().RegisterPackageTarget(packagename=packagename,
                                                                              targetname='scripts')

    runTarget = createPackageRunTarget(packagename, bin_name, scriptTarget, settings={'runParams': '-- help'})

    EnvBuilder().depend(includeTarget, libs, bins,
                        scripts).build().RegisterPackageTarget(packagename=packagename,
                                                               targetname=packagename)
