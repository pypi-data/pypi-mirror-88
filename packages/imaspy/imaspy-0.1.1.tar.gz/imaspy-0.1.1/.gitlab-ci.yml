image:
   name: "python:3.6"

stages:
  - build
  - test
  - doc

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    PYTHONTOOLS_VENV_PATH: "$CI_PROJECT_DIR/venv/imaspy"
    PYTHONTOOLS_DIR: "$CI_PROJECT_DIR"
    PYTEST_MARK: ""
    PACKAGE: "imaspy"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
.cache_python: &cache_python
  paths:
    - $PIP_CACHE_DIR


########################################
# General Docker environment templates #
########################################

# In standalone Docker run also
# export PYTHONTOOLS_VENV_PATH=/builds/klimex/imaspy/venv/imaspy
.prepare_venv_python: &prepare_venv_python |
  # Create a python venv with access to the globally installed packages. This links to setuptools, pip and python, pkg_resources, easy_install directly.
  python -m venv --system-site-packages $PYTHONTOOLS_VENV_PATH
  source $PYTHONTOOLS_VENV_PATH/bin/activate
  # Simulate Python3.9 --upgrade-deps flag
  #   --upgrade-deps        Upgrade core dependencies: pip setuptools to the
  #                         latest version in PyPI
  python -m pip install --force-reinstall --upgrade pip setuptools wheel
  # Give venv PYTONPATH and PATH precedence over pre-defined env ones
  export PATH=$VIRTUAL_ENV/bin:$PATH
  export PYTHONPATH=$VIRTUAL_ENV/lib/python`python --version | cut -d' ' -f2 | cut -d'.' -f1-2`/site-packages/:$PYTHONPATH
  export PYTHONPATH=$PYTHONPATH:/usr/lib/python3/dist-packages/ # Add system packages
  export LANG=en # Set language for GUIs


##############################
# Global tests and templates #
##############################
before_script:
  - *prepare_venv_python

.collect_deps_manually: &collect_deps_manually |
  export BUILD_DEPS=$(cat pyproject.toml | grep requires | cut -d'=' -f2- | tr -d ,\"\' | sed "s/^ \[//" | sed "s/\]$//")
  export RUN_DEP_FILES=$(find requirements_* -maxdepth 1 -and -not -name "*test*" -and -not -name "*backends_al*" -and -not -name "*examples*")
  export TEST_DEPS=$(find requirements_* -maxdepth 1 -and -name "*test*")

.print_debugging: &print_debugging |
  python --version # Print out python version for debugging
  pip --version # Show pip version for debugging
  echo $PYTHONPATH
  echo $PATH
  echo BUILD_DEPS=$BUILD_DEPS
  echo RUN_DEP_FILES=$RUN_DEP_FILES
  echo TEST_DEPS=$TEST_DEPS

# venv editable install
.install_venv_editable_template:
  script:
    - *collect_deps_manually
    - *print_debugging
      # Now we install dependencies manually
    - pip install --use-feature=2020-resolver --upgrade $BUILD_DEPS # Install build deps manually
    - python setup.py --version # Print setuptools found version
    - python -m pip freeze > $PYTHONTOOLS_DIR/pre_install_packages.txt
    - for file in $RUN_DEP_FILES; do echo Installing $file; pip install -r $file; done; # Install run deps manually
    - pip install --use-feature=2020-resolver --no-build-isolation --force-reinstall -r $TEST_DEPS  # Install test dependencies manually
      # Install from wheel
      # Should install almost nothing, as we installed most of it ourselves
      # Install without extras here. We installed these manually.
    - pip install --use-feature=2020-resolver --no-build-isolation --upgrade --editable . # Install local folder in editable mode
    - pip freeze > $PYTHONTOOLS_DIR/post_install_packages.txt
      # Do basic sanity checking
    - mkdir tmp && cd tmp
    - cat $PYTHONTOOLS_DIR/$PACKAGE/version.py # Check if version file was generated
    - python -c "import $PACKAGE; print($PACKAGE.__version__); print($PACKAGE.__path__)" # Try regular import
      # Run the real test, pytest
    - which pytest
    - pytest --version
  #  - pytest --cov=$PACKAGE --cov-report=term --cov-report=xml:$PYTHONTOOLS_DIR/coverage.xml --junit-xml=$PYTHONTOOLS_DIR/junit.xml -m "$PYTEST_MARK" "$PYTHONTOOLS_DIR"
  # One pipeline has one artifact. We need both the test report _and_ the installed packages to pass on
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - $PYTHONTOOLS_VENV_PATH
    reports:
      junit: [$PYTHONTOOLS_DIR/junit.xml]
      cobertura: [$PYTHONTOOLS_DIR/coverage.xml]
    when: always
    expire_in: 1 day # These are only used in quick interactive CI debugging, and in next jobs
  stage: test
  cache:
    <<: *cache_python
    policy: push
  needs: [] # Only needs a sane python env

# editable venv-like install
install_venv_editable:
  extends: .install_venv_editable_template

flake8:
  stage: test
  before_script:
    - pip install flake8 pyflakes anybadge
  script:
    - mkdir -p ./flake8
    - flake8 --exit-zero --doctests --statistics --count $(find $PACKAGE -name '*.py') | tee flake8.txt
    - PEP8_VIOLATIONS=$(tail flake8.txt -n1)
    - echo "Flake8 finds $PEP8_VIOLATIONS PEP8 violations"
    - anybadge -ou --label=flake8 --value=$PEP8_VIOLATIONS --file=flake8/flake8.svg -c silver
  artifacts:
    paths:
      - ./flake8/

pylint:
  stage: test
  before_script:
    - pip install pylint pylint-exit anybadge
  script:
    - mkdir -p ./pylint
    - pylint --rcfile=.pylintrc --output-format=text $PACKAGE | tee ./pylint/pylint.log || pylint-exit $?
    - PYLINT_SCORE=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' ./pylint/pylint.log)
    - echo "Pylint score is $PYLINT_SCORE"
    - anybadge -ou --label=pylint --value=$PYLINT_SCORE --file=pylint/pylint.svg 2=red 4=orange 8=yellow 10=green
  artifacts:
    paths:
      - ./pylint/

black:
  stage: test
  script:
    - pip install black
    - black --diff --color $PACKAGE

pages:
  image: python:3.6
  stage: doc
  script:
    - apt-get update && apt-get install -y python3-sphinx python3-ipython python3-recommonmark
    - pip install --upgrade --editable .[docs]
    - make docs
    - mv docs/_build/html/ public/
  artifacts:
    paths:
      - public/
      - docs/_build/
      - docs/source/generated/
  only:
      - main
      - documentation
  cache:
    <<: *cache_python
    policy: pull
  needs: ["install_venv_editable"]
