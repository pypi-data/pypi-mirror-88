Metadata-Version: 2.1
Name: tube-dl
Version: 4.0.1
Summary: Another Youtube Video Downloader for Python.
Home-page: https://github.com/shekharchander/tube_dl
Author: Shekhar Chander
Author-email: shekhar1000.sc@gmail.com
License: UNKNOWN
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: requests
Requires-Dist: js2py

# tube_dl youtube video Downloader for python
## What is this ?
Tube_dl is a Simple Youtube video downloader for Python.
A Modular approach to bypass and download Youtube Videos and Playlist from Youtube using python.

  ```python 
  >>> pip install tube_dl
  ```

# Features:
## New Feature (v3.0.1) :
    when you convert youtube video to mp3, the module automatically adds metadata about audio from Spotify. Like album art, singer name, album artists, track_number, etc.
## Existing Features
1. Convert videos[coming soon] and audios to any format. For ex: 'webm' -> 'mp3'. (Requires Moviepy - pip install moviepy)


# Usage:

```python
>>>from tube_dl import Youtube
>>>yt = Youtube("https://youtube.com/watch?v=R2j46bHm6zw&list=RDAMVMd4HYhxlsj5k")
>>>yt.formats.first().download()
```
# what is formats?

formats is a class containing all the Youtube streams.

You can also see all the streams by : 

```python
>>> Youtube("https://youtube.com/watch?v=R2j46bHm6zw&list=RDAMVMd4HYhxlsj5k").Formats()
```
** Note that Formats() and formats are different.
When you use Formats(), a list of all streams of format class is returned.
When you use formats, a list of all streams of list_formats class is returned.

# Other Details
## Printing Information about the Video:

You can print the info or use them anywhere in your code. Here are the list of Information available:

   ```python

  >>> yt.title : Returns the title of the video
  >>> yt.views : Return total views
  >>> yt.channel_name : Returns the name of the channel
  >>> yt.channel_url : Returns url of the channel
  >>> yt.length : Returns the total length of the Youtube Video (in seconds)
  >>> yt.upload_date : Returns the upload date of the video
  >>> yt.description : Return long description
  ```
   * More options coming soon........


## using filter_by option:
  Returns : list(list_formats)
  You can filter the formats according to the itag, adaptive, progressive, fps, quality, only_audio, no_audio.
  Example:
  ```python
  >>>Youtube("https://youtube.com/watch?v=R2j46bHm6zw&list=RDAMVMd4HYhxlsj5k").streams.filter_by(only_audio=True)
  ```

 Other options:
  ```python
  >>> yt.first()
  ```
    Returns the first index of list_formats
  ```python
  >>> yt.last()
  ```
    Returns the last index of list_formats

   Example:
  ```python
  >>> Youtube("https://youtube.com/watch?v=R2j46bHm6zw&list=RDAMVMd4HYhxlsj5k").streams.filter_by(only_audio=True).first()
  ```


Downloading a format:

To download a format, .download() function is used. 
Params :
  Download takes following parameters. All are optional
  .download(convert,onprogress,path,file_name)
  1. convert takes a string as an argument. It converts the video into the extension you want. Ex: 'webm' -> 'mp3'. [mp4 coming soon]   
  2. onprogress takes function name as an argument. The function should have three arguments: Ex: def show_progress(Chunk=None,bytes_done=None,total_bytes=None)
  3. path takes full path where you want to save file
  4. file_name takes name of the file. by default, it is .title of the video. It is then processed to safe_filename to strip any invalid character.

 * You can print final filename by using formats.safe_filename() 
 Ex: 
 ```python
 >>> filename = Youtube("https://youtube.com/watch?v=R2j46bHm6zw&list=RDAMVMd4HYhxlsj5k").formats.safe_filename()
  ```

## Working with Playlist 
Working with Playlists in Youtube:


This Class is responsible for:
  1. Get list of all the Videos
  2. Create Continuation URL if len(videos)>100
  3. Get Continuation data and append all the video IDs to IDS variable

  Parameters : 
      url: str - URL of the PlayList
      start- Define start index of Videos
      end - Defines end index of videos.

  Returns :
      Tuple : All the Video IDs within the Range variable( if Defined)
```python
  >>> from tube_dl import Playlist, Youtube
  >>> pl = Playlist('https://music.youtube.com/playlist?list=PLTy__vzNAW6C6sqmp6ddhsuaLsodKDEt_').videos
  >>> for i in pl:
  >>>   yt = Youtube(f'https://youtube.com/watch?v={i}')
  >>>   yt.formats.first().download(convert='mp3')
  ```

## Downloading Captions

Now you can download captions from youtube.
Here's the Sample code.

```python
>>> from tube_dl captions import Captions
>>> caption = Captions('url',language='en') # Use Captions('url').caption_details to get list of languages
>>> caption.fetch_captions() #raw xml output of captions
>>> caption.convert_to_srt(path='c://xample_path//',file_name='captions.srt') # Default filename is youtube id and default path is os.getcwd()
```

## Working with Comments

Yes! It's possible. You can also download comments for a youtube video. It's still in beta but works absolutely file. Here's a simple use case of that.
```python
>>> from tube_dl.comments import Comments
>>> comment = Comments('Your Youtube URL').process_comments(count=45) # Don't define count variable to get all the comments.

```
* Fetching Replies for comments are not available yet. But will be there soon. Feel free to raise issues tickets.

 For more information about all the functions and classes, please see the files. All the descriptions are provided there. 





