openapi: 3.0.1
info:
  description: "Get predicted targets for a given entity: the **potential drugs treating a given disease**, or the **potential diseases a given drug could treat**.
    \n\n* Use the `/predict` operation to easily retrieve predictions for a given entity (operation annotated for the [BioThings Explorer](https://x-bte-extension.readthedocs.io/en/latest/x-bte-kgs-operations.html)).
    \n\n* Predictions are currently produced using the [PREDICT method](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3159979/) from the [fair-workflows/openpredict](https://github.com/fair-workflows/openpredict) project. 
    \n\n* You can also install the [OpenPredict Python package](https://pypi.org/project/openpredict/) to train and serve a new model yourself.
    \n\n* More documentation available at [github.com/MaastrichtU-IDS/translator-openpredict](https://github.com/MaastrichtU-IDS/translator-openpredict)
    \n\n[![Version](https://img.shields.io/pypi/v/openpredict)](https://pypi.org/project/openpredict) [![Run tests](https://github.com/MaastrichtU-IDS/translator-openpredict/workflows/Run%20tests/badge.svg)](https://github.com/MaastrichtU-IDS/translator-openpredict/actions?query=workflow%3A%22Run+tests%22)
    \n\nService supported by the [NCATS Translator project](https://ncats.nih.gov/translator/about)"
  version: 0.9.2
  title: OpenPredict API üîÆüêç 
  contact:
    email: vincent.emonet@maastrichtuniversity.nl
    name: Institute of Data Science at Maastricht University
    url: https://maastrichtuniversity.nl/ids
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  termsOfService: "{{url}}"
externalDocs:
  description: Documentation for the NCATS Biomedical Translator ReasonerAPI
  url: 'https://github.com/NCATSTranslator/ReasonerAPI'
servers:
  - url: /
    description: Local OpenPredict API
  - url: https://openpredict.semanticscience.org
    description: Production OpenPredict API
tags:
  # - name: predicates
  #   description: Get relationships supported by this API
  #   externalDocs:
  #     description: Documentation for the reasoner predicates function
  #     url: 'http://reasonerhost.ncats.io/overview.html#predicates'
  # - name: query
  #   description: Query the models
    # description: Query the models using the Reasoner API
    # externalDocs:
    #   description: Documentation for the reasoner query function
    #   url: 'http://reasonerhost.ncats.io/overview.html#query'
  - name: translator
    description: Get relationships supported by this API
  - name: reasoner
    description: Query the models using the Reasoner API
paths:
  /features:
    get:
      operationId: openpredict.openpredict_api.get_features
      summary: Return the features trained in the models
      description: "Return the features trained in the model, for Drugs, Diseases or Both "
      tags:
      - openpredict
      parameters:
        - name: type
          in: query
          description: Type of the entities in the features
          required: true
          schema:
            type: string
            enum: ["All", "Drugs", "Diseases", "Both"]
            default: "All" 
      responses:
        '200':
          description: OK
          content:
              application/json: {}

  /models:
    get:
      operationId: openpredict.openpredict_api.get_models
      summary: Return the models with their training features and scores
      description: "Return the models with their training features and scores"
      tags:
      - openpredict
      # parameters:
      #   - name: type
      #     in: query
      #     description: Type of the entities in the features
      #     required: true
      #     schema:
      #       type: string
      #       enum: ["All", "Drugs", "Diseases", "Both"]
      #       default: "All" 
      responses:
        '200':
          description: OK
          content:
              application/json: {}
  
  /embedding:
    post:
      operationId: openpredict.openpredict_api.post_embedding
      summary: Upload your embedding for drugs or diseases
      description: |-
        Upload your embedding file:  select which types do you have in the embeddings, Drugs, Diseases or Both. 
        1. provided embeddings will be added to the model
        2. the model will be retrained
        3. the model evaluation will be stored in a triplestore
      tags:
      - openpredict
      responses:
        '200':
          description: OK
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                embedding_file:
                  description: The embedding file to be uploaded
                  type: string
                  format: binary
      parameters:
        - name: types
          in: query
          description: Types of the entities in the embedding
          required: true
          schema:
            type: string
            enum: ["Drugs", "Diseases", "Both"]
            default: "Both" 
        - name: emb_name
          in: query
          description: Name of embedding (eg. TransE_DrugBank_Drug)
          required: true
          schema:
            type: string
        - name: description
          in: query
          description: Describe how the embeddings was obtained (eg. rdf2vec on drugbank/omim data)
          required: true
          schema:
            type: string
        - name: model_id
          in: query
          description: Provide the ID of the run output you want to use as base model to add the embeddings
          required: true
          example: openpredict-baseline-omim-drugbank
          schema:
            type: string
        # - name: apikey
        #   in: query
        #   description: APIKEY required to upload embeddings
        #   required: true
        #   schema:
        #     type: string

  /predict:
    get:
      operationId: openpredict.openpredict_api.get_predict
      summary: Get predicted targets for a given entity
      description: "Return the predicted targets for a given entity: drug (DrugBank ID) or disease (OMIM ID), with confidence scores.
        This operation is annotated with x-bte-kgs-operations, and follow the BioThings API recommendations."
      tags:
      - openpredict
      parameters:
      - name: model_id
        in: query
        description: Provide the ID of the run output you want to use as model to use to predict associations
        required: false
        example: openpredict-baseline-omim-drugbank
        schema:
          type: string
          # default: "Predict OMIM-DrugBank"
          # enum: ["Predict OMIM-DrugBank"]
      - name: drug_id
        in: query
        description: CURIE of the drug to get prediction of diseases it could treat (e.g. DRUGBANK:DB00394)
        example: DRUGBANK:DB00394
        required: false
        schema:
          type: string
      - name: disease_id
        in: query
        description: CURIE of the disease to get prediction of drugs it could be treated with (e.g. OMIM:246300)
        # example: OMIM:246300
        required: false
        schema:
          type: string
      - name: min_score
        in: query
        description: Minimum score of predictions to return (0 to 1)
        required: false
        schema:
          type: number
          format: double
          minimum: 0
          maximum: 1
      - name: max_score
        in: query
        description: Maximum score of predictions to return (0 to 1)
        required: false
        schema:
          type: number
          format: double
          minimum: 0
          maximum: 1
      - name: n_results
        in: query
        description: Maximum number of results to return, ordered from best score (e.g. 42)
        required: false
        schema:
          type: integer
          format: int32
          minimum: 0
      responses:
        '200':
          description: Successful Operation
          content:
            application/json: {}
            # application/xml: {}
            # application/ld+json: {}
            # text/csv: {}
            # text/tab-separated-values: {}
      x-bte-kgs-operations:
      - inputs:
        - id: biolink:DRUGBANK
          semantic: biolink:ChemicalSubstance
        outputs:
        - id: biolink:OMIM
          semantic: biolink:Disease
        parameters:
          drug_id: "{inputs[0]}"
        predicate: biolink:treats
        supportBatch: False
        responseMapping:
          OMIM: hits.id
          # NCBIGene: matchedTerms.interactions.geneEntrezId
          # publication: matchedTerms.interactions.pmids
      - inputs:
        - id: biolink:OMIM
          semantic: biolink:Disease
        outputs:
        - id: biolink:DRUGBANK
          semantic: biolink:ChemicalSubstance
        parameters:
          disease_id: "{inputs[0]}"
        predicate: biolink:treated_by
        supportBatch: False
        responseMapping:
          DRUGBANK: hits.id
          # CHEMBL.COMPOUND: matchedTerms.interactions.drugChemblId
          # publication: results.source.id


  /predicates:
    get:
      operationId: openpredict.openpredict_api.get_predicates
      tags:
        - translator
      summary: Get supported relationships by source and target
      responses:
        '200':
          description: Predicates by source and target
          content:
            application/json:
              schema:
                description: Source map
                type: object
                additionalProperties:
                  description: Target map
                  type: object
                  additionalProperties:
                    description: Array of predicates
                    type: array
                    items:
                      type: string
                example:
                  chemical_substance:
                    gene:
                      - directly_interacts_with
                      - decreases_activity_of
  /query:
    post:
      tags:
        - reasoner
      summary: Query reasoner via one of several inputs
      description: "Send a [ReasonerAPI](https://github.com/NCATSTranslator/ReasonerAPI) query 
        to request the predicted targets given: a source node, and the relation to predict. 
        Use classes and relations from the [BioLink model](https://biolink.github.io/biolink-model)"
      operationId: openpredict.openpredict_api.post_reasoner_predict
      # operationId: query
      requestBody:
        description: Query information to be submitted
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Invalid status value
      # x-swagger-router-controller: swagger_server.controllers.query_controller
components:
  schemas:
    Query:
      x-body-name: request_body
      type: object
      properties:
        message:
          $ref: '#/components/schemas/Message'
      additionalProperties: true
      required:
        - message
    Message:
      type: object
      properties:
        results:
          description: List of all returned potential answers for the query posed
          type: array
          items:
            $ref: '#/components/schemas/Result'
        query_graph:
          type: object
          description: >-
            QueryGraph object that contains a serialization of a query in the form
            of a graph
          $ref: '#/components/schemas/QueryGraph'
        knowledge_graph:
          type: object
          description: >-
            KnowledgeGraph object that contains all the nodes and edges referenced
            in any of the possible answers to the query OR connection information
            for a remote knowledge graph
          oneOf:
            - $ref: '#/components/schemas/KnowledgeGraph'
            - $ref: '#/components/schemas/RemoteKnowledgeGraph'
      additionalProperties: true
      example:
        n_results: 42
        query_options:
          min_score: 0.5
          max_score: 0.9
        query_graph:
          nodes:
          - id: n00
            curie: DRUGBANK:DB00394
            type: "drug"
          - id: n01
            type: "disease"
          edges:
          - id: e00
            source_id: n00
            target_id: n01
            type: "treated_by"
    Result:
      type: object
      description: One of potentially several results or answers for a query
      properties:
        node_bindings:
          type: array
          description: List of QNode-KNode bindings.
          items:
            $ref: '#/components/schemas/NodeBinding'
        edge_bindings:
          type: array
          description: List of QEdge-KEdge bindings.
          items:
            $ref: '#/components/schemas/EdgeBinding'
      required:
        - node_bindings
        - edge_bindings
    NodeBinding:
      type: object
      properties:
        qg_id:
          type: string
          description: Query-graph node id, i.e. the `node_id` of a QNode
        kg_id:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          description: One or more knowledge-graph node ids, i.e. the `id` of a KNode
      required:
        - qg_id
        - kg_id
    EdgeBinding:
      type: object
      properties:
        qg_id:
          type: string
          description: Query-graph edge id, i.e. the `edge_id` of a QEdge
        kg_id:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          description: One or more knowledge-graph edge ids, i.e. the `id` of a KEdge
      required:
        - qg_id
        - kg_id
    KnowledgeGraph:
      type: object
      description: >-
        A thought graph associated with this result. This will commonly be a
        linear path subgraph from one concept to another, but related items aside
        of the path may be included.
      properties:
        nodes:
          type: array
          description: List of nodes in the KnowledgeGraph
          items:
            $ref: '#/components/schemas/Node'
        edges:
          type: array
          description: List of edges in the KnowledgeGraph
          items:
            $ref: '#/components/schemas/Edge'
      additionalProperties: true
      required:
        - nodes
        - edges
    RemoteKnowledgeGraph:
      type: object
      description: >-
        A thought graph associated with this result that is not repeated here, but
        stored elsewhere in a way that can be remotely accessed by the reader of
        this Message
      properties:
        url:
          type: string
          example: 'http://robokop.renci.org/api/kg'
          description: URL that provides programmatic access to the remote knowledge graph
        credentials:
          type: object
          description: >-
            Credentials needed for programmatic access to the remote knowledge
            graph
          items:
            $ref: '#/components/schemas/Credentials'
        protocol:
          type: string
          default: neo4j
      required:
        - url
    Credentials:
      description: Credentials needed for programmatic access to the remote knowledge graph
      type: object
      required:
        - username
        - password
      properties:
        username:
          description: Username needed for programmatic access to the remote knowledge graph
          type: string
        password:
          type: string
          description: Password needed for programmatic access to the remote knowledge graph
      additionalProperties: true
    QueryGraph:
      type: object
      description: >-
        A graph intended to be the thought path to be followed by a reasoner to
        answer the question. This graph is a representation of a question.
      properties:
        nodes:
          type: array
          description: List of nodes in the QueryGraph
          items:
            $ref: '#/components/schemas/QNode'
        edges:
          type: array
          description: List of edges in the QueryGraph
          items:
            $ref: '#/components/schemas/QEdge'
      additionalProperties: true
      required:
        - nodes
        - edges
    QNode:
      type: object
      description: A node in the QueryGraph
      properties:
        id:
          type: string
          example: n00
          description: >-
            QueryGraph internal identifier for this QNode. Recommended form: n00,
            n01, n02, etc.
        curie:
          type: string
          example: 'OMIM:603903'
          description: CURIE identifier for this node
        type:
          $ref: '#/components/schemas/BiolinkEntity'
      additionalProperties: true
      required:
        - id
    QEdge:
      type: object
      description: An edge in the QueryGraph
      properties:
        id:
          type: string
          example: e00
          description: >-
            QueryGraph internal identifier for this QEdge. Recommended form: e00,
            e01, e02, etc.
        type:
          $ref: '#/components/schemas/BiolinkRelation'
        source_id:
          type: string
          example: 'https://omim.org/entry/603903'
          description: Corresponds to the @id of source node of this edge
        target_id:
          type: string
          example: 'https://www.uniprot.org/uniprot/P00738'
          description: Corresponds to the @id of target node of this edge
      additionalProperties: true
      required:
        - id
        - source_id
        - target_id
    Node:
      type: object
      description: A node in the thought subgraph
      properties:
        id:
          type: string
          example: 'OMIM:603903'
          description: CURIE identifier for this node
        name:
          type: string
          example: Haptoglobin
          description: Formal name of the entity
        type:
          type: array
          items:
            $ref: '#/components/schemas/BiolinkEntity'
      additionalProperties: true
      required:
        - id
    Edge:
      type: object
      description: An edge in the thought subgraph linking two nodes
      properties:
        id:
          type: string
          example: '553903'
          description: >-
            Local identifier for this node which is unique within this
            KnowledgeGraph, and perhaps within the source reasoner's knowledge
            graph
        type:
          $ref: '#/components/schemas/BiolinkRelation'
        source_id:
          type: string
          example: 'https://omim.org/entry/603903'
          description: Corresponds to the @id of source node of this edge
        target_id:
          type: string
          example: 'https://www.uniprot.org/uniprot/P00738'
          description: Corresponds to the @id of target node of this edge
      additionalProperties: true
      required:
        - id
        - source_id
        - target_id
    BiolinkEntity:
      description: A subclass of named_thing (snake_case)
      type: string
      externalDocs:
        description: Biolink model entities
        url: https://biolink.github.io/biolink-model/docs/NamedThing.html
      example: disease
    BiolinkRelation:
      description: A relation, i.e. child of related_to (snake_case)
      type: string
      externalDocs:
        description: Biolink model relations
        url: https://biolink.github.io/biolink-model/docs/related_to.html
      example: affects
