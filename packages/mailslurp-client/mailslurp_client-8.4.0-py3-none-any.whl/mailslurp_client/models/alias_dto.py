# coding: utf-8

"""
    MailSlurp API

    MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository   # noqa: E501

    The version of the OpenAPI document: 6.5.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mailslurp_client.configuration import Configuration


class AliasDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'inbox_id': 'str',
        'name': 'str',
        'pending_email_address': 'str',
        'use_threads': 'bool',
        'user_id': 'str',
        'verified_email_address': 'str'
    }

    attribute_map = {
        'id': 'id',
        'inbox_id': 'inboxId',
        'name': 'name',
        'pending_email_address': 'pendingEmailAddress',
        'use_threads': 'useThreads',
        'user_id': 'userId',
        'verified_email_address': 'verifiedEmailAddress'
    }

    def __init__(self, id=None, inbox_id=None, name=None, pending_email_address=None, use_threads=None, user_id=None, verified_email_address=None, local_vars_configuration=None):  # noqa: E501
        """AliasDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._inbox_id = None
        self._name = None
        self._pending_email_address = None
        self._use_threads = None
        self._user_id = None
        self._verified_email_address = None
        self.discriminator = None

        self.id = id
        self.inbox_id = inbox_id
        if name is not None:
            self.name = name
        if pending_email_address is not None:
            self.pending_email_address = pending_email_address
        if use_threads is not None:
            self.use_threads = use_threads
        self.user_id = user_id
        if verified_email_address is not None:
            self.verified_email_address = verified_email_address

    @property
    def id(self):
        """Gets the id of this AliasDto.  # noqa: E501


        :return: The id of this AliasDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AliasDto.


        :param id: The id of this AliasDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def inbox_id(self):
        """Gets the inbox_id of this AliasDto.  # noqa: E501


        :return: The inbox_id of this AliasDto.  # noqa: E501
        :rtype: str
        """
        return self._inbox_id

    @inbox_id.setter
    def inbox_id(self, inbox_id):
        """Sets the inbox_id of this AliasDto.


        :param inbox_id: The inbox_id of this AliasDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and inbox_id is None:  # noqa: E501
            raise ValueError("Invalid value for `inbox_id`, must not be `None`")  # noqa: E501

        self._inbox_id = inbox_id

    @property
    def name(self):
        """Gets the name of this AliasDto.  # noqa: E501


        :return: The name of this AliasDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AliasDto.


        :param name: The name of this AliasDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pending_email_address(self):
        """Gets the pending_email_address of this AliasDto.  # noqa: E501


        :return: The pending_email_address of this AliasDto.  # noqa: E501
        :rtype: str
        """
        return self._pending_email_address

    @pending_email_address.setter
    def pending_email_address(self, pending_email_address):
        """Sets the pending_email_address of this AliasDto.


        :param pending_email_address: The pending_email_address of this AliasDto.  # noqa: E501
        :type: str
        """

        self._pending_email_address = pending_email_address

    @property
    def use_threads(self):
        """Gets the use_threads of this AliasDto.  # noqa: E501


        :return: The use_threads of this AliasDto.  # noqa: E501
        :rtype: bool
        """
        return self._use_threads

    @use_threads.setter
    def use_threads(self, use_threads):
        """Sets the use_threads of this AliasDto.


        :param use_threads: The use_threads of this AliasDto.  # noqa: E501
        :type: bool
        """

        self._use_threads = use_threads

    @property
    def user_id(self):
        """Gets the user_id of this AliasDto.  # noqa: E501


        :return: The user_id of this AliasDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AliasDto.


        :param user_id: The user_id of this AliasDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def verified_email_address(self):
        """Gets the verified_email_address of this AliasDto.  # noqa: E501


        :return: The verified_email_address of this AliasDto.  # noqa: E501
        :rtype: str
        """
        return self._verified_email_address

    @verified_email_address.setter
    def verified_email_address(self, verified_email_address):
        """Sets the verified_email_address of this AliasDto.


        :param verified_email_address: The verified_email_address of this AliasDto.  # noqa: E501
        :type: str
        """

        self._verified_email_address = verified_email_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AliasDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AliasDto):
            return True

        return self.to_dict() != other.to_dict()
