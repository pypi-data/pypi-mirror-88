{"version":3,"sources":["plugins/playAccessValidation/plugin.js"],"names":["define","connectionManager","globalize","showErrorMessage","getRequirePromise","deps","Promise","resolve","reject","require","then","alert","translate","PlayAccessValidation","this","name","type","id","order","prototype","intercept","options","item","serverId","ServerId","getApiClient","getCurrentUser","user","Policy","EnableMediaPlayback","fullscreen"],"mappings":"AAAA,aAAAA,OAAO,CAAC,oBAAqB,cAAc,SAAUC,kBAAmBC,WASpE,SAASC,mBACL,OAPJ,SAASC,kBAAkBC,MACvB,OAAO,IAAIC,SAAQ,SAAUC,QAASC,QAClCC,QAAQJ,KAAME,YAKXH,CAAkB,CAAC,UAAUM,MAAK,SAAUC,OAC/C,OAAOA,MAAMT,UAAUU,UAAU,gCAAgCF,MAAK,WAClE,OAAOJ,QAAQE,eAK3B,SAASK,uBACLC,KAAKC,KAAO,sBACZD,KAAKE,KAAO,mBACZF,KAAKG,GAAK,uBACVH,KAAKI,OAAS,EA2BlB,OAxBAL,qBAAqBM,UAAUC,UAAY,SAAUC,SACjD,IAAIC,KAAOD,QAAQC,KACnB,IAAKA,KACD,OAAOhB,QAAQC,UAEnB,IAAIgB,SAAWD,KAAKE,SACpB,OAAKD,SAIEtB,kBAAkBwB,aAAaF,UAAUG,iBAAiBhB,MAAK,SAAUiB,MAC5E,OAAIA,KAAKC,OAAOC,oBACLvB,QAAQC,UAIdc,QAAQS,WAIN3B,mBAHIG,QAAQE,YAVZF,QAAQC,WAiBhBM","file":"plugin.js","sourcesContent":["define(['connectionManager', 'globalize'], function (connectionManager, globalize) {\n    'use strict';\n\n    function getRequirePromise(deps) {\n        return new Promise(function (resolve, reject) {\n            require(deps, resolve);\n        });\n    }\n\n    function showErrorMessage() {\n        return getRequirePromise(['alert']).then(function (alert) {\n            return alert(globalize.translate('MessagePlayAccessRestricted')).then(function () {\n                return Promise.reject();\n            });\n        });\n    }\n\n    function PlayAccessValidation() {\n        this.name = 'Playback validation';\n        this.type = 'preplayintercept';\n        this.id = 'playaccessvalidation';\n        this.order = -2;\n    }\n\n    PlayAccessValidation.prototype.intercept = function (options) {\n        var item = options.item;\n        if (!item) {\n            return Promise.resolve();\n        }\n        var serverId = item.ServerId;\n        if (!serverId) {\n            return Promise.resolve();\n        }\n\n        return connectionManager.getApiClient(serverId).getCurrentUser().then(function (user) {\n            if (user.Policy.EnableMediaPlayback) {\n                return Promise.resolve();\n            }\n\n            // reject but don't show an error message\n            if (!options.fullscreen) {\n                return Promise.reject();\n            }\n\n            return showErrorMessage();\n        });\n    };\n\n    return PlayAccessValidation;\n});\n"]}