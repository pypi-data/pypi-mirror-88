{"version":3,"sources":["plugins/youtubePlayer/plugin.js"],"names":["define","require","events","browser","appRouter","loading","onVideoResize","player","this","currentYoutubePlayer","dlg","videoDialog","setSize","offsetWidth","offsetHeight","clearTimeUpdateInterval","instance","timeUpdateInterval","clearInterval","onEndedInternal","resizeListener","window","removeEventListener","stopInfo","src","_currentSrc","trigger","destroy","onPlayerReady","event","target","playVideo","onTimeUpdate","e","onPlaying","playOptions","resolve","started","setInterval","bind","fullscreen","showVideoOsd","then","classList","remove","setTransparency","hide","YoutubePlayer","name","type","id","priority","prototype","play","options","createMediaElement","Promise","reject","document","querySelector","show","createElement","add","innerHTML","videoElement","body","insertBefore","firstChild","animate","slow","zoomIn","elem","iterations","timing","duration","transform","opacity","offset","onfinish","setCurrentSrc","queryString","url","params","parse","split","onYouTubeIframeAPIReady","YT","Player","height","width","videoId","v","onReady","onStateChange","data","PlayerState","PLAYING","ENDED","PAUSED","playerVars","controls","enablejsapi","modestbranding","rel","showinfo","fs","playsinline","addEventListener","tag","firstScriptTag","getElementsByTagName","parentNode","stop","destroyPlayer","stopVideo","removeChild","canPlayMediaType","mediaType","toLowerCase","canPlayItem","item","canPlayUrl","indexOf","getDeviceProfile","currentSrc","setSubtitleStreamIndex","index","canSetAudioStreamIndex","setAudioStreamIndex","currentTime","val","seekTo","getCurrentTime","getDuration","pause","pauseVideo","setTimeout","unpause","paused","getPlayerState","volume","setVolume","getVolume","setMute","mute","unMute","isMuted"],"mappings":"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","file":"plugin.js","sourcesContent":["define(['require', 'events', 'browser', 'appRouter', 'loading'], function (require, events, browser, appRouter, loading) {\n    'use strict';\n    /* globals YT */\n\n    function zoomIn(elem, iterations) {\n        var keyframes = [\n            { transform: 'scale3d(.2, .2, .2)  ', opacity: '.6', offset: 0 },\n            { transform: 'none', opacity: '1', offset: 1 }\n        ];\n\n        var timing = { duration: 240, iterations: iterations };\n        return elem.animate(keyframes, timing);\n    }\n\n    function createMediaElement(instance, options) {\n\n        return new Promise(function (resolve, reject) {\n\n            var dlg = document.querySelector('.youtubePlayerContainer');\n\n            if (!dlg) {\n\n                require(['css!./style'], function () {\n\n                    loading.show();\n\n                    var dlg = document.createElement('div');\n\n                    dlg.classList.add('youtubePlayerContainer');\n\n                    if (options.fullscreen) {\n                        dlg.classList.add('onTop');\n                    }\n\n                    dlg.innerHTML = '<div id=\"player\"></div>';\n                    var videoElement = dlg.querySelector('#player');\n\n                    document.body.insertBefore(dlg, document.body.firstChild);\n                    instance.videoDialog = dlg;\n\n                    if (options.fullscreen && dlg.animate && !browser.slow) {\n                        zoomIn(dlg, 1).onfinish = function () {\n                            resolve(videoElement);\n                        };\n                    } else {\n                        resolve(videoElement);\n                    }\n\n                });\n\n            } else {\n                resolve(dlg.querySelector('#player'));\n            }\n        });\n    }\n\n    function onVideoResize() {\n        var instance = this;\n        var player = instance.currentYoutubePlayer;\n        var dlg = instance.videoDialog;\n        if (player && dlg) {\n            player.setSize(dlg.offsetWidth, dlg.offsetHeight);\n        }\n    }\n\n    function clearTimeUpdateInterval(instance) {\n        if (instance.timeUpdateInterval) {\n            clearInterval(instance.timeUpdateInterval);\n        }\n        instance.timeUpdateInterval = null;\n    }\n\n    function onEndedInternal(instance) {\n\n        clearTimeUpdateInterval(instance);\n        var resizeListener = instance.resizeListener;\n        if (resizeListener) {\n            window.removeEventListener('resize', resizeListener);\n            window.removeEventListener('orientationChange', resizeListener);\n            instance.resizeListener = null;\n        }\n\n        var stopInfo = {\n            src: instance._currentSrc\n        };\n\n        events.trigger(instance, 'stopped', [stopInfo]);\n\n        instance._currentSrc = null;\n        if (instance.currentYoutubePlayer) {\n            instance.currentYoutubePlayer.destroy();\n        }\n        instance.currentYoutubePlayer = null;\n    }\n\n    // 4. The API will call this function when the video player is ready.\n    function onPlayerReady(event) {\n        event.target.playVideo();\n    }\n\n    function onTimeUpdate(e) {\n\n        events.trigger(this, 'timeupdate');\n    }\n\n    function onPlaying(instance, playOptions, resolve) {\n\n        if (!instance.started) {\n\n            instance.started = true;\n            resolve();\n            clearTimeUpdateInterval(instance);\n            instance.timeUpdateInterval = setInterval(onTimeUpdate.bind(instance), 500);\n\n            if (playOptions.fullscreen) {\n\n                appRouter.showVideoOsd().then(function () {\n                    instance.videoDialog.classList.remove('onTop');\n                });\n\n            } else {\n                appRouter.setTransparency('backdrop');\n                instance.videoDialog.classList.remove('onTop');\n            }\n\n            require(['loading'], function (loading) {\n\n                loading.hide();\n            });\n        }\n    }\n\n    function setCurrentSrc(instance, elem, options) {\n\n        return new Promise(function (resolve, reject) {\n\n            require(['queryString'], function (queryString) {\n\n                instance._currentSrc = options.url;\n                var params = queryString.parse(options.url.split('?')[1]);\n                // 3. This function creates an <iframe> (and YouTube player)\n                //    after the API code downloads.\n                window.onYouTubeIframeAPIReady = function () {\n                    instance.currentYoutubePlayer = new YT.Player('player', {\n                        height: instance.videoDialog.offsetHeight,\n                        width: instance.videoDialog.offsetWidth,\n                        videoId: params.v,\n                        events: {\n                            'onReady': onPlayerReady,\n                            'onStateChange': function (event) {\n                                if (event.data === YT.PlayerState.PLAYING) {\n                                    onPlaying(instance, options, resolve);\n                                } else if (event.data === YT.PlayerState.ENDED) {\n                                    onEndedInternal(instance);\n                                } else if (event.data === YT.PlayerState.PAUSED) {\n                                    events.trigger(instance, 'pause');\n                                }\n                            }\n                        },\n                        playerVars: {\n                            controls: 0,\n                            enablejsapi: 1,\n                            modestbranding: 1,\n                            rel: 0,\n                            showinfo: 0,\n                            fs: 0,\n                            playsinline: 1\n                        }\n                    });\n\n                    var resizeListener = instance.resizeListener;\n                    if (resizeListener) {\n                        window.removeEventListener('resize', resizeListener);\n                        window.addEventListener('resize', resizeListener);\n                    } else {\n                        resizeListener = instance.resizeListener = onVideoResize.bind(instance);\n                        window.addEventListener('resize', resizeListener);\n                    }\n                    window.removeEventListener('orientationChange', resizeListener);\n                    window.addEventListener('orientationChange', resizeListener);\n                };\n\n                if (!window.YT) {\n                    var tag = document.createElement('script');\n                    tag.src = 'https://www.youtube.com/iframe_api';\n                    var firstScriptTag = document.getElementsByTagName('script')[0];\n                    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n                } else {\n                    window.onYouTubeIframeAPIReady();\n                }\n            });\n\n        });\n    }\n\n    function YoutubePlayer() {\n\n        this.name = 'Youtube Player';\n        this.type = 'mediaplayer';\n        this.id = 'youtubeplayer';\n\n        // Let any players created by plugins take priority\n        this.priority = 1;\n    }\n\n    YoutubePlayer.prototype.play = function (options) {\n\n        this.started = false;\n        var instance = this;\n\n        return createMediaElement(this, options).then(function (elem) {\n\n            return setCurrentSrc(instance, elem, options);\n        });\n    };\n\n    YoutubePlayer.prototype.stop = function (destroyPlayer) {\n\n        var src = this._currentSrc;\n\n        if (src) {\n\n            if (this.currentYoutubePlayer) {\n                this.currentYoutubePlayer.stopVideo();\n            }\n            onEndedInternal(this);\n\n            if (destroyPlayer) {\n                this.destroy();\n            }\n        }\n\n        return Promise.resolve();\n    };\n\n    YoutubePlayer.prototype.destroy = function () {\n\n        appRouter.setTransparency('none');\n\n        var dlg = this.videoDialog;\n        if (dlg) {\n\n            this.videoDialog = null;\n\n            dlg.parentNode.removeChild(dlg);\n        }\n    };\n\n    YoutubePlayer.prototype.canPlayMediaType = function (mediaType) {\n\n        mediaType = (mediaType || '').toLowerCase();\n\n        return mediaType === 'audio' || mediaType === 'video';\n    };\n\n    YoutubePlayer.prototype.canPlayItem = function (item) {\n\n        // Does not play server items\n        return false;\n    };\n\n    YoutubePlayer.prototype.canPlayUrl = function (url) {\n\n        return url.toLowerCase().indexOf('youtube.com') !== -1;\n    };\n\n    YoutubePlayer.prototype.getDeviceProfile = function () {\n\n        return Promise.resolve({});\n    };\n\n    YoutubePlayer.prototype.currentSrc = function () {\n        return this._currentSrc;\n    };\n\n    YoutubePlayer.prototype.setSubtitleStreamIndex = function (index) {\n    };\n\n    YoutubePlayer.prototype.canSetAudioStreamIndex = function () {\n        return false;\n    };\n\n    YoutubePlayer.prototype.setAudioStreamIndex = function (index) {\n\n    };\n\n    // Save this for when playback stops, because querying the time at that point might return 0\n    YoutubePlayer.prototype.currentTime = function (val) {\n\n        var currentYoutubePlayer = this.currentYoutubePlayer;\n\n        if (currentYoutubePlayer) {\n            if (val != null) {\n                currentYoutubePlayer.seekTo(val / 1000, true);\n                return;\n            }\n\n            return currentYoutubePlayer.getCurrentTime() * 1000;\n        }\n    };\n\n    YoutubePlayer.prototype.duration = function (val) {\n\n        var currentYoutubePlayer = this.currentYoutubePlayer;\n\n        if (currentYoutubePlayer) {\n            return currentYoutubePlayer.getDuration() * 1000;\n        }\n        return null;\n    };\n\n    YoutubePlayer.prototype.pause = function () {\n\n        var currentYoutubePlayer = this.currentYoutubePlayer;\n\n        if (currentYoutubePlayer) {\n            currentYoutubePlayer.pauseVideo();\n\n            var instance = this;\n\n            // This needs a delay before the youtube player will report the correct player state\n            setTimeout(function () {\n                events.trigger(instance, 'pause');\n            }, 200);\n        }\n    };\n\n    YoutubePlayer.prototype.unpause = function () {\n\n        var currentYoutubePlayer = this.currentYoutubePlayer;\n\n        if (currentYoutubePlayer) {\n            currentYoutubePlayer.playVideo();\n\n            var instance = this;\n\n            // This needs a delay before the youtube player will report the correct player state\n            setTimeout(function () {\n                events.trigger(instance, 'unpause');\n            }, 200);\n        }\n    };\n\n    YoutubePlayer.prototype.paused = function () {\n\n        var currentYoutubePlayer = this.currentYoutubePlayer;\n\n        if (currentYoutubePlayer) {\n            return currentYoutubePlayer.getPlayerState() === 2;\n        }\n\n        return false;\n    };\n\n    YoutubePlayer.prototype.volume = function (val) {\n        if (val != null) {\n            return this.setVolume(val);\n        }\n\n        return this.getVolume();\n    };\n\n    YoutubePlayer.prototype.setVolume = function (val) {\n\n        var currentYoutubePlayer = this.currentYoutubePlayer;\n\n        if (currentYoutubePlayer) {\n            if (val != null) {\n                currentYoutubePlayer.setVolume(val);\n            }\n        }\n    };\n\n    YoutubePlayer.prototype.getVolume = function () {\n\n        var currentYoutubePlayer = this.currentYoutubePlayer;\n\n        if (currentYoutubePlayer) {\n            return currentYoutubePlayer.getVolume();\n        }\n    };\n\n    YoutubePlayer.prototype.setMute = function (mute) {\n\n        var currentYoutubePlayer = this.currentYoutubePlayer;\n\n        if (mute) {\n            if (currentYoutubePlayer) {\n                currentYoutubePlayer.mute();\n            }\n        } else {\n\n            if (currentYoutubePlayer) {\n                currentYoutubePlayer.unMute();\n            }\n        }\n    };\n\n    YoutubePlayer.prototype.isMuted = function () {\n\n        var currentYoutubePlayer = this.currentYoutubePlayer;\n\n        if (currentYoutubePlayer) {\n            return currentYoutubePlayer.isMuted();\n        }\n    };\n\n    return YoutubePlayer;\n});\n"]}