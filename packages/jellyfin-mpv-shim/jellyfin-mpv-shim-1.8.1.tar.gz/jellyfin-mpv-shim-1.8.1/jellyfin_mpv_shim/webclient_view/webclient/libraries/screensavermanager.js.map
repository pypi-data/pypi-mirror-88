{"version":3,"sources":["libraries/screensavermanager.js"],"names":["define","events","playbackManager","pluginManager","inputManager","connectionManager","userSettings","lastFunctionalEvent","getFunctionalEventIdleTime","Date","getTime","on","e","stopInfo","state","NowPlayingItem","MediaType","ScreenSaverManager","activeScreenSaver","self","this","hide","console","debug","window","removeEventListener","isShowing","show","isLoggedIn","apiClient","currentApiClient","screensaver","getScreensaverPlugin","option","get","err","plugins","ofType","i","length","plugin","id","showScreenSaver","Error","name","hideOnClick","addEventListener","hideOnMouse","hideOnKey","setInterval","onInterval","idleTime","isPlayingVideo"],"mappings":"AAAA,aAAAA,OAAO,CAAC,SAAU,kBAAmB,gBAAiB,eAAgB,oBAAqB,iBAAiB,SAAUC,OAAQC,gBAAiBC,cAAeC,aAAcC,kBAAmBC,cAS3L,IAAIC,oBAAsB,EAE1B,SAASC,6BACL,OAAO,IAAIC,MAAOC,UAAYH,oBAsHlC,OAnHAN,OAAOU,GAAGT,gBAAiB,gBAAgB,SAAUU,EAAGC,UACpD,IAAIC,MAAQD,SAASC,MACjBA,MAAMC,gBAAoD,SAAlCD,MAAMC,eAAeC,YAC7CT,qBAAsB,IAAIE,MAAOC,cAgHlC,IAtFP,SAASO,qBAEL,IACIC,kBADAC,KAAOC,KAyBX,SAASC,OACDH,oBACAI,QAAQC,MAAM,sBACdL,kBAAkBG,OAClBH,kBAAoB,MAGxBM,OAAOC,oBAAoB,QAASJ,MAAM,GAC1CG,OAAOC,oBAAoB,YAAaJ,MAAM,GAC9CG,OAAOC,oBAAoB,UAAWJ,MAAM,GAGhDF,KAAKO,UAAY,WACb,OAA4B,MAArBR,mBAGXC,KAAKQ,KAAO,WACR,IAAIC,WACAC,UAAYxB,kBAAkByB,mBAE9BD,WAAaA,UAAUD,eACvBA,YAAa,GAGjB,IAAIG,YAzEZ,SAASC,qBAAqBJ,YAE1B,IAAIK,OACJ,IACIA,OAAS3B,aAAa4B,IAAI,eAAe,GAC3C,MAAOC,KACLF,OAASL,WAAa,sBAAwB,kBAKlD,IAFA,IAAIQ,QAAUjC,cAAckC,OAAO,eAE1BC,EAAI,EAAGC,OAASH,QAAQG,OAAQD,EAAIC,OAAQD,IAAK,CACtD,IAAIE,OAASJ,QAAQE,GAErB,GAAIE,OAAOC,KAAOR,OACd,OAAOO,OAIf,OAAO,KAsDeR,CAAqBJ,YAEnCG,aAhDR,SAASW,gBAAgBX,aAErB,GAAIb,kBACA,MAAM,IAAIyB,MAAM,8CAGpBrB,QAAQC,MAAM,uBAAyBQ,YAAYa,MAEnDb,YAAYJ,OACZT,kBAAoBa,aAEY,IAA5BA,YAAYc,aACZrB,OAAOsB,iBAAiB,QAASzB,MAAM,IAEX,IAA5BU,YAAYgB,aACZvB,OAAOsB,iBAAiB,YAAazB,MAAM,IAEjB,IAA1BU,YAAYiB,WACZxB,OAAOsB,iBAAiB,UAAWzB,MAAM,GA+BzCqB,CAAgBX,cAIxBZ,KAAKE,KAAO,WACRA,QAwBJ4B,aArBA,SAASC,aAED/B,KAAKO,aAILtB,aAAa+C,WA1Gd,MA8GC3C,2BA9GD,MAkHCN,gBAAgBkD,kBAIpBjC,KAAKQ,SAGe","file":"screensavermanager.js","sourcesContent":["define([\"events\", \"playbackManager\", \"pluginManager\", \"inputManager\", \"connectionManager\", \"userSettings\"], function (events, playbackManager, pluginManager, inputManager, connectionManager, userSettings) {\n    \"use strict\";\n\n    function getMinIdleTime() {\n        // Returns the minimum amount of idle time required before the screen saver can be displayed\n        //time units used Millisecond\n        return 180000;\n    }\n\n    var lastFunctionalEvent = 0;\n\n    function getFunctionalEventIdleTime() {\n        return new Date().getTime() - lastFunctionalEvent;\n    }\n\n    events.on(playbackManager, \"playbackstop\", function (e, stopInfo) {\n        var state = stopInfo.state;\n        if (state.NowPlayingItem && state.NowPlayingItem.MediaType == \"Video\") {\n            lastFunctionalEvent = new Date().getTime();\n        }\n    });\n\n    function getScreensaverPlugin(isLoggedIn) {\n\n        var option;\n        try {\n            option = userSettings.get(\"screensaver\", false);\n        } catch (err) {\n            option = isLoggedIn ? \"backdropscreensaver\" : \"logoscreensaver\";\n        }\n\n        var plugins = pluginManager.ofType(\"screensaver\");\n\n        for (var i = 0, length = plugins.length; i < length; i++) {\n            var plugin = plugins[i];\n\n            if (plugin.id === option) {\n                return plugin;\n            }\n        }\n\n        return null;\n    }\n\n    function ScreenSaverManager() {\n\n        var self = this;\n        var activeScreenSaver;\n\n        function showScreenSaver(screensaver) {\n\n            if (activeScreenSaver) {\n                throw new Error(\"An existing screensaver is already active.\");\n            }\n\n            console.debug(\"Showing screensaver \" + screensaver.name);\n\n            screensaver.show();\n            activeScreenSaver = screensaver;\n\n            if (screensaver.hideOnClick !== false) {\n                window.addEventListener(\"click\", hide, true);\n            }\n            if (screensaver.hideOnMouse !== false) {\n                window.addEventListener(\"mousemove\", hide, true);\n            }\n            if (screensaver.hideOnKey !== false) {\n                window.addEventListener(\"keydown\", hide, true);\n            }\n        }\n\n        function hide() {\n            if (activeScreenSaver) {\n                console.debug(\"Hiding screensaver\");\n                activeScreenSaver.hide();\n                activeScreenSaver = null;\n            }\n\n            window.removeEventListener(\"click\", hide, true);\n            window.removeEventListener(\"mousemove\", hide, true);\n            window.removeEventListener(\"keydown\", hide, true);\n        }\n\n        self.isShowing = function () {\n            return activeScreenSaver != null;\n        };\n\n        self.show = function () {\n            var isLoggedIn;\n            var apiClient = connectionManager.currentApiClient();\n\n            if (apiClient && apiClient.isLoggedIn()) {\n                isLoggedIn = true;\n            }\n\n            var screensaver = getScreensaverPlugin(isLoggedIn);\n\n            if (screensaver) {\n                showScreenSaver(screensaver);\n            }\n        };\n\n        self.hide = function () {\n            hide();\n        };\n\n        function onInterval() {\n\n            if (self.isShowing()) {\n                return;\n            }\n\n            if (inputManager.idleTime() < getMinIdleTime()) {\n                return;\n            }\n\n            if (getFunctionalEventIdleTime < getMinIdleTime()) {\n                return;\n            }\n\n            if (playbackManager.isPlayingVideo()) {\n                return;\n            }\n\n            self.show();\n        }\n\n        setInterval(onInterval, 10000);\n    }\n\n    return new ScreenSaverManager();\n});\n"]}