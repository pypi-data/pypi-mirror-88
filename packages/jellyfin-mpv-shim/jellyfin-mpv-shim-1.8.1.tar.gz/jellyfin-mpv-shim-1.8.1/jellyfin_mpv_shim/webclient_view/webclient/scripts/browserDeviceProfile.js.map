{"version":3,"sources":["scripts/browserDeviceProfile.js"],"names":["define","browser","canPlayH265","videoTestElement","options","tizen","xboxOne","web0s","supportsHevc","ps4","canPlayType","replace","_supportsTextTracks","_canPlayHls","canPlayHls","canPlayNativeHls","canPlayHlsWithMSE","window","MediaSource","media","document","createElement","canPlayAudioFormat","format","typeString","edgeUwp","iOS","osx","supportsMpeg2Video","supportsVc1","getDirectPlayProfileForVideoContainer","container","videoAudioCodecs","supported","profileContainer","videoCodecs","tizenVersion","push","chrome","edgeChromium","testCanPlayTs","Container","Type","VideoCodec","join","AudioCodec","physicalAudioChannels","audioChannels","tv","canPlayVp8","canPlayVp9","webmAudioCodecs","canPlayMkv","testCanPlayMkv","windows","profile","MusicStreamingTranscodingBitrate","Math","min","DirectPlayProfiles","hlsVideoAudioCodecs","supportsMp3VideoAudio","supportsMp2VideoAudio","maxVideoWidth","self","screen","width","canPlayAacVideoAudio","supportsAc3","eAc3","supportsEac3","supportsAc3InHls","indexOf","supportsDts","supportsTrueHd","filter","c","disableVideoAudioCodecs","disableHlsVideoAudioCodecs","mp4VideoCodecs","webmVideoCodecs","hlsVideoCodecs","canPlayH264","testCanPlayAv1","web0sVersion","outerHeight","length","map","i","forEach","audioFormat","TranscodingProfiles","hlsBreakOnNonKeyFrames","edge","enableHlsAudio","android","Context","Protocol","MaxAudioChannels","toString","MinSegments","BreakOnNonKeyFrames","enableMkvProgressive","CopyTimestamps","enableHls","ContainerProfiles","CodecProfiles","supportsSecondaryAudio","audioTracks","aacCodecProfileConditions","Condition","Property","Value","IsRequired","Codec","Conditions","maxH264Level","h264Profiles","NativeShell","safari","mobile","h264CodecProfileConditions","globalMaxVideoBitrate","getGlobalMaxVideoBitrate","isTizenFhd","webapis","productinfo","isUdPanelSupported","console","debug","error","code","h264MaxVideoBitrate","iOSVersion","codecProfile","condition","globalVideoConditions","SubtitleProfiles","supportsTextTracks","textTracks","Format","Method","enableSsaRender","ResponseProfiles","MimeType"],"mappings":"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","file":"browserDeviceProfile.js","sourcesContent":["define(['browser'], function (browser) {\n    'use strict';\n\n    function canPlayH264(videoTestElement) {\n        return !!(videoTestElement.canPlayType && videoTestElement.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"').replace(/no/, ''));\n    }\n\n    function canPlayH265(videoTestElement, options) {\n        if (browser.tizen || browser.xboxOne || browser.web0s || options.supportsHevc) {\n            return true;\n        }\n\n        if (browser.ps4) {\n            return false;\n        }\n\n        return !!videoTestElement.canPlayType &&\n        (videoTestElement.canPlayType('video/mp4; codecs=\"hvc1.1.L120\"').replace(/no/, '') ||\n        videoTestElement.canPlayType('video/mp4; codecs=\"hev1.1.L120\"').replace(/no/, '') ||\n        videoTestElement.canPlayType('video/mp4; codecs=\"hvc1.1.0.L120\"').replace(/no/, '') ||\n        videoTestElement.canPlayType('video/mp4; codecs=\"hev1.1.0.L120\"').replace(/no/, ''));\n    }\n\n    var _supportsTextTracks;\n    function supportsTextTracks() {\n        if (browser.tizen) {\n            return true;\n        }\n\n        if (_supportsTextTracks == null) {\n            _supportsTextTracks = document.createElement('video').textTracks != null;\n        }\n\n        // For now, until ready\n        return _supportsTextTracks;\n    }\n\n    var _canPlayHls;\n    function canPlayHls() {\n        if (_canPlayHls == null) {\n            _canPlayHls = canPlayNativeHls() || canPlayHlsWithMSE();\n        }\n\n        return _canPlayHls;\n    }\n\n    function canPlayNativeHls() {\n        if (browser.tizen) {\n            return true;\n        }\n\n        var media = document.createElement('video');\n        if (media.canPlayType('application/x-mpegURL').replace(/no/, '') ||\n            media.canPlayType('application/vnd.apple.mpegURL').replace(/no/, '')) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function canPlayHlsWithMSE() {\n        // text tracks don’t work with this in firefox\n        return window.MediaSource != null; /* eslint-disable-line compat/compat */\n    }\n\n    function supportsAc3(videoTestElement) {\n        if (browser.edgeUwp || browser.tizen || browser.web0s) {\n            return true;\n        }\n\n        return videoTestElement.canPlayType('audio/mp4; codecs=\"ac-3\"').replace(/no/, '');\n    }\n\n    function supportsEac3(videoTestElement) {\n        if (browser.tizen || browser.web0s) {\n            return true;\n        }\n\n        return videoTestElement.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/no/, '');\n    }\n\n    function supportsAc3InHls(videoTestElement) {\n        if (browser.tizen || browser.web0s) {\n            return true;\n        }\n\n        if (videoTestElement.canPlayType) {\n            return videoTestElement.canPlayType('application/x-mpegurl; codecs=\"avc1.42E01E, ac-3\"').replace(/no/, '') ||\n                videoTestElement.canPlayType('application/vnd.apple.mpegURL; codecs=\"avc1.42E01E, ac-3\"').replace(/no/, '');\n        }\n\n        return false;\n    }\n\n    function canPlayAudioFormat(format) {\n        var typeString;\n\n        if (format === 'flac') {\n            if (browser.tizen || browser.web0s || browser.edgeUwp) {\n                return true;\n            }\n        } else if (format === 'wma') {\n            if (browser.tizen || browser.edgeUwp) {\n                return true;\n            }\n        } else if (format === 'asf') {\n            if (browser.tizen || browser.web0s || browser.edgeUwp) {\n                return true;\n            }\n        } else if (format === 'opus') {\n            if (!browser.web0s) {\n                typeString = 'audio/ogg; codecs=\"opus\"';\n                return !!document.createElement('audio').canPlayType(typeString).replace(/no/, '');\n            }\n\n            return false;\n        } else if (format === 'alac') {\n            if (browser.iOS || browser.osx) {\n                return true;\n            }\n        } else if (format === 'mp2') {\n            // For now\n            return false;\n        }\n\n        if (format === 'webma') {\n            typeString = 'audio/webm';\n        } else if (format === 'mp2') {\n            typeString = 'audio/mpeg';\n        } else {\n            typeString = 'audio/' + format;\n        }\n\n        return !!document.createElement('audio').canPlayType(typeString).replace(/no/, '');\n    }\n\n    function testCanPlayMkv(videoTestElement) {\n        if (browser.tizen || browser.web0s) {\n            return true;\n        }\n\n        if (videoTestElement.canPlayType('video/x-matroska').replace(/no/, '') ||\n            videoTestElement.canPlayType('video/mkv').replace(/no/, '')) {\n            return true;\n        }\n\n        if (browser.edgeChromium && browser.windows) {\n            return true;\n        }\n\n        if (browser.edgeUwp) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function testCanPlayAv1(videoTestElement) {\n        if (browser.tizenVersion >= 5.5) {\n            return true;\n        } else if (browser.web0sVersion >= 5 && window.outerHeight >= 2160) {\n            return true;\n        }\n\n        return videoTestElement.canPlayType('video/webm; codecs=\"av01.0.15M.10\"').replace(/no/, '');\n    }\n\n    function testCanPlayTs() {\n        return browser.tizen || browser.web0s || browser.edgeUwp;\n    }\n\n    function supportsMpeg2Video() {\n        return browser.tizen || browser.web0s || browser.edgeUwp;\n    }\n\n    function supportsVc1(videoTestElement) {\n        return browser.tizen || browser.web0s || browser.edgeUwp || videoTestElement.canPlayType('video/mp4; codecs=\"vc-1\"').replace(/no/, '');\n    }\n\n    function getDirectPlayProfileForVideoContainer(container, videoAudioCodecs, videoTestElement, options) {\n        var supported = false;\n        var profileContainer = container;\n        var videoCodecs = [];\n\n        switch (container) {\n            case 'asf':\n                supported = browser.tizen || browser.web0s || browser.edgeUwp;\n                videoAudioCodecs = [];\n                break;\n            case 'avi':\n                supported = browser.tizen || browser.web0s || browser.edgeUwp;\n                // New Samsung TV don't support XviD/DivX\n                // Explicitly add supported codecs to make other codecs be transcoded\n                if (browser.tizenVersion >= 4) {\n                    videoCodecs.push('h264');\n                    if (canPlayH265(videoTestElement, options)) {\n                        videoCodecs.push('h265');\n                        videoCodecs.push('hevc');\n                    }\n                }\n                break;\n            case 'mpg':\n            case 'mpeg':\n                supported = browser.tizen || browser.web0s || browser.edgeUwp;\n                break;\n            case 'flv':\n                supported = browser.tizen;\n                break;\n            case '3gp':\n            case 'mts':\n            case 'trp':\n            case 'vob':\n            case 'vro':\n                supported = browser.tizen;\n                break;\n            case 'mov':\n                supported = browser.tizen || browser.web0s || browser.chrome || browser.edgeChromium || browser.edgeUwp;\n                videoCodecs.push('h264');\n                break;\n            case 'm2ts':\n                supported = browser.tizen || browser.web0s || browser.edgeUwp;\n                videoCodecs.push('h264');\n                if (supportsVc1(videoTestElement)) {\n                    videoCodecs.push('vc1');\n                }\n                if (supportsMpeg2Video()) {\n                    videoCodecs.push('mpeg2video');\n                }\n                break;\n            case 'wmv':\n                supported = browser.tizen || browser.web0s || browser.edgeUwp;\n                videoAudioCodecs = [];\n                break;\n            case 'ts':\n                supported = testCanPlayTs();\n                videoCodecs.push('h264');\n                if (canPlayH265(videoTestElement, options)) {\n                    videoCodecs.push('h265');\n                    videoCodecs.push('hevc');\n                }\n                if (supportsVc1(videoTestElement)) {\n                    videoCodecs.push('vc1');\n                }\n                if (supportsMpeg2Video()) {\n                    videoCodecs.push('mpeg2video');\n                }\n                profileContainer = 'ts,mpegts';\n                break;\n            default:\n                break;\n        }\n\n        return supported ? {\n            Container: profileContainer,\n            Type: 'Video',\n            VideoCodec: videoCodecs.join(','),\n            AudioCodec: videoAudioCodecs.join(',')\n        } : null;\n    }\n\n    function getMaxBitrate() {\n        return 120000000;\n    }\n\n    function getGlobalMaxVideoBitrate() {\n        var isTizenFhd = false;\n        if (browser.tizen) {\n            try {\n                var isTizenUhd = webapis.productinfo.isUdPanelSupported();\n                isTizenFhd = !isTizenUhd;\n                console.debug('isTizenFhd = ' + isTizenFhd);\n            } catch (error) {\n                console.error('isUdPanelSupported() error code = ' + error.code);\n            }\n        }\n\n        return browser.ps4 ? 8000000 :\n            (browser.xboxOne ? 12000000 :\n                (browser.edgeUwp ? null :\n                    (browser.tizen && isTizenFhd ? 20000000 : null)));\n    }\n\n    return function (options) {\n        options = options || {};\n\n        var physicalAudioChannels = options.audioChannels || (browser.tv || browser.ps4 || browser.xboxOne ? 6 : 2);\n\n        var bitrateSetting = getMaxBitrate();\n\n        var videoTestElement = document.createElement('video');\n\n        var canPlayVp8 = videoTestElement.canPlayType('video/webm; codecs=\"vp8\"').replace(/no/, '');\n        var canPlayVp9 = videoTestElement.canPlayType('video/webm; codecs=\"vp9\"').replace(/no/, '');\n        var webmAudioCodecs = ['vorbis'];\n\n        var canPlayMkv = testCanPlayMkv(videoTestElement);\n\n        var profile = {};\n\n        profile.MaxStreamingBitrate = bitrateSetting;\n        profile.MaxStaticBitrate = 100000000;\n        profile.MusicStreamingTranscodingBitrate = Math.min(bitrateSetting, 192000);\n\n        profile.DirectPlayProfiles = [];\n\n        var videoAudioCodecs = [];\n        var hlsVideoAudioCodecs = [];\n\n        var supportsMp3VideoAudio = videoTestElement.canPlayType('video/mp4; codecs=\"avc1.640029, mp4a.69\"').replace(/no/, '')\n                                    || videoTestElement.canPlayType('video/mp4; codecs=\"avc1.640029, mp4a.6B\"').replace(/no/, '')\n                                    || videoTestElement.canPlayType('video/mp4; codecs=\"avc1.640029, mp3\"').replace(/no/, '');\n\n        // Not sure how to test for this\n        var supportsMp2VideoAudio = browser.edgeUwp || browser.tizen || browser.web0s;\n\n        var maxVideoWidth = browser.xboxOne ?\n            (self.screen ? self.screen.width : null) :\n            null;\n\n        if (options.maxVideoWidth) {\n            maxVideoWidth = options.maxVideoWidth;\n        }\n\n        var canPlayAacVideoAudio = videoTestElement.canPlayType('video/mp4; codecs=\"avc1.640029, mp4a.40.2\"').replace(/no/, '');\n\n        // Only put mp3 first if mkv support is there\n        // Otherwise with HLS and mp3 audio we're seeing some browsers\n        // safari is lying\n        if (supportsAc3(videoTestElement)) {\n\n            videoAudioCodecs.push('ac3');\n\n            var eAc3 = supportsEac3(videoTestElement);\n            if (eAc3) {\n                videoAudioCodecs.push('eac3');\n            }\n\n            // This works in edge desktop, but not mobile\n            // TODO: Retest this on mobile\n            if (supportsAc3InHls(videoTestElement)) {\n                hlsVideoAudioCodecs.push('ac3');\n                if (eAc3) {\n                    hlsVideoAudioCodecs.push('eac3');\n                }\n            }\n        }\n\n        if (supportsMp3VideoAudio) {\n            videoAudioCodecs.push('mp3');\n\n            // PS4 fails to load HLS with mp3 audio\n            if (!browser.ps4) {\n                // mp3 encoder only supports 2 channels, so only make that preferred if we're only requesting 2 channels\n                // Also apply it for chromecast because it no longer supports AAC 5.1\n                if (physicalAudioChannels <= 2) {\n                    hlsVideoAudioCodecs.push('mp3');\n                }\n            }\n        }\n\n        if (canPlayAacVideoAudio) {\n            if (videoAudioCodecs.indexOf('aac') === -1) {\n                videoAudioCodecs.push('aac');\n            }\n\n            hlsVideoAudioCodecs.push('aac');\n        }\n\n        if (supportsMp3VideoAudio) {\n            // PS4 fails to load HLS with mp3 audio\n            if (!browser.ps4) {\n                if (hlsVideoAudioCodecs.indexOf('mp3') === -1) {\n                    hlsVideoAudioCodecs.push('mp3');\n                }\n            }\n        }\n\n        if (supportsMp2VideoAudio) {\n            videoAudioCodecs.push('mp2');\n        }\n\n        var supportsDts = browser.tizen || browser.web0s || options.supportsDts || videoTestElement.canPlayType('video/mp4; codecs=\"dts-\"').replace(/no/, '') || videoTestElement.canPlayType('video/mp4; codecs=\"dts+\"').replace(/no/, '');\n\n        // DTS audio not supported in 2018 models (Tizen 4.0)\n        if (browser.tizenVersion >= 4) {\n            supportsDts = false;\n        }\n\n        if (supportsDts) {\n            videoAudioCodecs.push('dca');\n            videoAudioCodecs.push('dts');\n        }\n\n        if (browser.tizen || browser.web0s) {\n            videoAudioCodecs.push('pcm_s16le');\n            videoAudioCodecs.push('pcm_s24le');\n        }\n\n        if (options.supportsTrueHd) {\n            videoAudioCodecs.push('truehd');\n        }\n\n        if (browser.tizen) {\n            videoAudioCodecs.push('aac_latm');\n        }\n\n        if (canPlayAudioFormat('opus')) {\n            videoAudioCodecs.push('opus');\n            hlsVideoAudioCodecs.push('opus');\n            webmAudioCodecs.push('opus');\n        }\n\n        if (canPlayAudioFormat('flac')) {\n            videoAudioCodecs.push('flac');\n        }\n\n        videoAudioCodecs = videoAudioCodecs.filter(function (c) {\n            return (options.disableVideoAudioCodecs || []).indexOf(c) === -1;\n        });\n\n        hlsVideoAudioCodecs = hlsVideoAudioCodecs.filter(function (c) {\n            return (options.disableHlsVideoAudioCodecs || []).indexOf(c) === -1;\n        });\n\n        var mp4VideoCodecs = [];\n        var webmVideoCodecs = [];\n        var hlsVideoCodecs = [];\n\n        if (canPlayH264(videoTestElement)) {\n            mp4VideoCodecs.push('h264');\n            hlsVideoCodecs.push('h264');\n        }\n\n        if (canPlayH265(videoTestElement, options)) {\n            mp4VideoCodecs.push('h265');\n            mp4VideoCodecs.push('hevc');\n\n            if (browser.tizen || browser.web0s) {\n                hlsVideoCodecs.push('h265');\n                hlsVideoCodecs.push('hevc');\n            }\n        }\n\n        if (supportsMpeg2Video()) {\n            mp4VideoCodecs.push('mpeg2video');\n        }\n\n        if (supportsVc1(videoTestElement)) {\n            mp4VideoCodecs.push('vc1');\n        }\n\n        if (browser.tizen) {\n            mp4VideoCodecs.push('msmpeg4v2');\n        }\n\n        if (canPlayVp8) {\n            mp4VideoCodecs.push('vp8');\n            webmVideoCodecs.push('vp8');\n        }\n\n        if (canPlayVp9) {\n            mp4VideoCodecs.push('vp9');\n            webmVideoCodecs.push('vp9');\n        }\n\n        if (testCanPlayAv1(videoTestElement)) {\n            mp4VideoCodecs.push('av1');\n            webmVideoCodecs.push('av1');\n        }\n\n        if (canPlayVp8 || browser.tizen) {\n            videoAudioCodecs.push('vorbis');\n        }\n\n        if (webmVideoCodecs.length) {\n            profile.DirectPlayProfiles.push({\n                Container: 'webm',\n                Type: 'Video',\n                VideoCodec: webmVideoCodecs.join(','),\n                AudioCodec: webmAudioCodecs.join(',')\n            });\n        }\n\n        if (mp4VideoCodecs.length) {\n            profile.DirectPlayProfiles.push({\n                Container: 'mp4,m4v',\n                Type: 'Video',\n                VideoCodec: mp4VideoCodecs.join(','),\n                AudioCodec: videoAudioCodecs.join(',')\n            });\n        }\n\n        if (canPlayMkv && mp4VideoCodecs.length) {\n            profile.DirectPlayProfiles.push({\n                Container: 'mkv',\n                Type: 'Video',\n                VideoCodec: mp4VideoCodecs.join(','),\n                AudioCodec: videoAudioCodecs.join(',')\n            });\n        }\n\n        // These are formats we can't test for but some devices will support\n        ['m2ts', 'wmv', 'ts', 'asf', 'avi', 'mpg', 'mpeg', 'flv', '3gp', 'mts', 'trp', 'vob', 'vro', 'mov'].map(function (container) {\n            return getDirectPlayProfileForVideoContainer(container, videoAudioCodecs, videoTestElement, options);\n        }).filter(function (i) {\n            return i != null;\n        }).forEach(function (i) {\n            profile.DirectPlayProfiles.push(i);\n        });\n\n        ['opus', 'mp3', 'mp2', 'aac', 'flac', 'alac', 'webma', 'wma', 'wav', 'ogg', 'oga'].filter(canPlayAudioFormat).forEach(function (audioFormat) {\n\n            if (audioFormat === 'mp2') {\n                profile.DirectPlayProfiles.push({\n                    Container: 'mp2,mp3',\n                    Type: 'Audio',\n                    AudioCodec: audioFormat\n                });\n            } else if (audioFormat === 'mp3') {\n                profile.DirectPlayProfiles.push({\n                    Container: audioFormat,\n                    Type: 'Audio',\n                    AudioCodec: audioFormat\n                });\n            } else {\n                profile.DirectPlayProfiles.push({\n                    Container: audioFormat === 'webma' ? 'webma,webm' : audioFormat,\n                    Type: 'Audio'\n                });\n            }\n\n            // aac also appears in the m4a and m4b container\n            if (audioFormat === 'aac' || audioFormat === 'alac') {\n                profile.DirectPlayProfiles.push({\n                    Container: 'm4a,m4b',\n                    AudioCodec: audioFormat,\n                    Type: 'Audio'\n                });\n            }\n        });\n\n        profile.TranscodingProfiles = [];\n\n        var hlsBreakOnNonKeyFrames = browser.iOS || browser.osx || browser.edge || !canPlayNativeHls() ? true : false;\n\n        if (canPlayHls() && browser.enableHlsAudio !== false) {\n            profile.TranscodingProfiles.push({\n                // hlsjs, edge, and android all seem to require ts container\n                Container: !canPlayNativeHls() || browser.edge || browser.android ? 'ts' : 'aac',\n                Type: 'Audio',\n                AudioCodec: 'aac',\n                Context: 'Streaming',\n                Protocol: 'hls',\n                MaxAudioChannels: physicalAudioChannels.toString(),\n                MinSegments: browser.iOS || browser.osx ? '2' : '1',\n                BreakOnNonKeyFrames: hlsBreakOnNonKeyFrames\n            });\n        }\n\n        // For streaming, prioritize opus transcoding after mp3/aac. It is too problematic with random failures\n        // But for static (offline sync), it will be just fine.\n        // Prioritize aac higher because the encoder can accept more channels than mp3\n        ['aac', 'mp3', 'opus', 'wav'].filter(canPlayAudioFormat).forEach(function (audioFormat) {\n            profile.TranscodingProfiles.push({\n                Container: audioFormat,\n                Type: 'Audio',\n                AudioCodec: audioFormat,\n                Context: 'Streaming',\n                Protocol: 'http',\n                MaxAudioChannels: physicalAudioChannels.toString()\n            });\n        });\n\n        ['opus', 'mp3', 'aac', 'wav'].filter(canPlayAudioFormat).forEach(function (audioFormat) {\n            profile.TranscodingProfiles.push({\n                Container: audioFormat,\n                Type: 'Audio',\n                AudioCodec: audioFormat,\n                Context: 'Static',\n                Protocol: 'http',\n                MaxAudioChannels: physicalAudioChannels.toString()\n            });\n        });\n\n        if (canPlayMkv && !browser.tizen && options.enableMkvProgressive !== false) {\n            profile.TranscodingProfiles.push({\n                Container: 'mkv',\n                Type: 'Video',\n                AudioCodec: videoAudioCodecs.join(','),\n                VideoCodec: mp4VideoCodecs.join(','),\n                Context: 'Streaming',\n                MaxAudioChannels: physicalAudioChannels.toString(),\n                CopyTimestamps: true\n            });\n        }\n\n        if (canPlayMkv) {\n            profile.TranscodingProfiles.push({\n                Container: 'mkv',\n                Type: 'Video',\n                AudioCodec: videoAudioCodecs.join(','),\n                VideoCodec: mp4VideoCodecs.join(','),\n                Context: 'Static',\n                MaxAudioChannels: physicalAudioChannels.toString(),\n                CopyTimestamps: true\n            });\n        }\n\n        if (canPlayHls() && hlsVideoAudioCodecs.length && options.enableHls !== false) {\n            profile.TranscodingProfiles.push({\n                Container: 'ts',\n                Type: 'Video',\n                AudioCodec: hlsVideoAudioCodecs.join(','),\n                VideoCodec: hlsVideoCodecs.join(','),\n                Context: 'Streaming',\n                Protocol: 'hls',\n                MaxAudioChannels: physicalAudioChannels.toString(),\n                MinSegments: browser.iOS || browser.osx ? '2' : '1',\n                BreakOnNonKeyFrames: hlsBreakOnNonKeyFrames\n            });\n        }\n\n        if (canPlayVp8) {\n            profile.TranscodingProfiles.push({\n                Container: 'webm',\n                Type: 'Video',\n                AudioCodec: 'vorbis',\n                VideoCodec: 'vpx',\n                Context: 'Streaming',\n                Protocol: 'http',\n                // If audio transcoding is needed, limit channels to number of physical audio channels\n                // Trying to transcode to 5 channels when there are only 2 speakers generally does not sound good\n                MaxAudioChannels: physicalAudioChannels.toString()\n            });\n        }\n\n        profile.TranscodingProfiles.push({\n            Container: 'mp4',\n            Type: 'Video',\n            AudioCodec: videoAudioCodecs.join(','),\n            VideoCodec: 'h264',\n            Context: 'Static',\n            Protocol: 'http'\n        });\n\n        profile.ContainerProfiles = [];\n\n        profile.CodecProfiles = [];\n\n        var supportsSecondaryAudio = browser.tizen || videoTestElement.audioTracks;\n\n        var aacCodecProfileConditions = [];\n\n        // Handle he-aac not supported\n        if (!videoTestElement.canPlayType('video/mp4; codecs=\"avc1.640029, mp4a.40.5\"').replace(/no/, '')) {\n            // TODO: This needs to become part of the stream url in order to prevent stream copy\n            aacCodecProfileConditions.push({\n                Condition: 'NotEquals',\n                Property: 'AudioProfile',\n                Value: 'HE-AAC'\n            });\n        }\n\n        if (!supportsSecondaryAudio) {\n            aacCodecProfileConditions.push({\n                Condition: 'Equals',\n                Property: 'IsSecondaryAudio',\n                Value: 'false',\n                IsRequired: false\n            });\n        }\n\n        if (aacCodecProfileConditions.length) {\n            profile.CodecProfiles.push({\n                Type: 'VideoAudio',\n                Codec: 'aac',\n                Conditions: aacCodecProfileConditions\n            });\n        }\n\n        if (!supportsSecondaryAudio) {\n            profile.CodecProfiles.push({\n                Type: 'VideoAudio',\n                Conditions: [\n                    {\n                        Condition: 'Equals',\n                        Property: 'IsSecondaryAudio',\n                        Value: 'false',\n                        IsRequired: false\n                    }\n                ]\n            });\n        }\n\n        var maxH264Level = 42;\n        var h264Profiles = 'high|main|baseline|constrained baseline';\n\n        if (browser.tizen || browser.web0s ||\n            videoTestElement.canPlayType('video/mp4; codecs=\"avc1.640833\"').replace(/no/, '')) {\n            maxH264Level = 51;\n        }\n\n        // Support H264 Level 52 (Tizen 5.0) - app only\n        if (browser.tizenVersion >= 5 && window.NativeShell) {\n            maxH264Level = 52;\n        }\n\n        if (browser.tizen ||\n            videoTestElement.canPlayType('video/mp4; codecs=\"avc1.6e0033\"').replace(/no/, '')) {\n\n            // These tests are passing in safari, but playback is failing\n            if (!browser.safari && !browser.iOS && !browser.web0s && !browser.edge && !browser.mobile) {\n                h264Profiles += '|high 10';\n            }\n        }\n\n        const h264CodecProfileConditions = [\n            {\n                Condition: 'NotEquals',\n                Property: 'IsAnamorphic',\n                Value: 'true',\n                IsRequired: false\n            },\n            {\n                Condition: 'EqualsAny',\n                Property: 'VideoProfile',\n                Value: h264Profiles,\n                IsRequired: false\n            },\n            {\n                Condition: 'LessThanEqual',\n                Property: 'VideoLevel',\n                Value: maxH264Level.toString(),\n                IsRequired: false\n            }\n        ];\n\n        if (!browser.edgeUwp && !browser.tizen && !browser.web0s) {\n            h264CodecProfileConditions.push({\n                Condition: 'NotEquals',\n                Property: 'IsInterlaced',\n                Value: 'true',\n                IsRequired: false\n            });\n        }\n\n        if (maxVideoWidth) {\n            h264CodecProfileConditions.push({\n                Condition: 'LessThanEqual',\n                Property: 'Width',\n                Value: maxVideoWidth.toString(),\n                IsRequired: false\n            });\n        }\n\n        var globalMaxVideoBitrate = (getGlobalMaxVideoBitrate() || '').toString();\n\n        var h264MaxVideoBitrate = globalMaxVideoBitrate;\n\n        if (h264MaxVideoBitrate) {\n            h264CodecProfileConditions.push({\n                Condition: 'LessThanEqual',\n                Property: 'VideoBitrate',\n                Value: h264MaxVideoBitrate,\n                IsRequired: true\n            });\n        }\n\n        // On iOS 12.x, for TS container max h264 level is 4.2\n        if (browser.iOS && browser.iOSVersion < 13) {\n            const codecProfile = {\n                Type: 'Video',\n                Codec: 'h264',\n                Container: 'ts',\n                Conditions: h264CodecProfileConditions.filter((condition) => {\n                    return condition.Property !== 'VideoLevel';\n                })\n            };\n\n            codecProfile.Conditions.push({\n                Condition: 'LessThanEqual',\n                Property: 'VideoLevel',\n                Value: '42',\n                IsRequired: false\n            });\n\n            profile.CodecProfiles.push(codecProfile);\n        }\n\n        profile.CodecProfiles.push({\n            Type: 'Video',\n            Codec: 'h264',\n            Conditions: h264CodecProfileConditions\n        });\n\n        var globalVideoConditions = [];\n\n        if (globalMaxVideoBitrate) {\n            globalVideoConditions.push({\n                Condition: 'LessThanEqual',\n                Property: 'VideoBitrate',\n                Value: globalMaxVideoBitrate\n            });\n        }\n\n        if (maxVideoWidth) {\n            globalVideoConditions.push({\n                Condition: 'LessThanEqual',\n                Property: 'Width',\n                Value: maxVideoWidth.toString(),\n                IsRequired: false\n            });\n        }\n\n        if (globalVideoConditions.length) {\n            profile.CodecProfiles.push({\n                Type: 'Video',\n                Conditions: globalVideoConditions\n            });\n        }\n\n        // Subtitle profiles\n        // External vtt or burn in\n        profile.SubtitleProfiles = [];\n        if (supportsTextTracks()) {\n            profile.SubtitleProfiles.push({\n                Format: 'vtt',\n                Method: 'External'\n            });\n        }\n        if (options.enableSsaRender) {\n            profile.SubtitleProfiles.push({\n                Format: 'ass',\n                Method: 'External'\n            });\n            profile.SubtitleProfiles.push({\n                Format: 'ssa',\n                Method: 'External'\n            });\n        }\n\n        profile.ResponseProfiles = [];\n        profile.ResponseProfiles.push({\n            Type: 'Video',\n            Container: 'm4v',\n            MimeType: 'video/mp4'\n        });\n\n        return profile;\n    };\n});\n"]}