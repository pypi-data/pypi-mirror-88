{"version":3,"sources":["scripts/mouseManager.js"],"names":["define","inputManager","focusManager","browser","layoutManager","events","dom","isMouseIdle","lastPointerMoveData","mouseInterval","self","lastMouseInputTime","Date","getTime","removeIdleClasses","classList","document","body","remove","onPointerMove","e","eventX","screenX","eventY","screenY","obj","Math","abs","x","y","notifyApp","notifyMouseMove","trigger","onPointerEnter","pointerType","mobile","parent","focusableParent","target","focus","onMouseInterval","mouseIdleTime","addIdleClasses","add","tv","initMouse","stopMouseInterval","clearInterval","removeEventListener","window","PointerEvent","passive","startMouseInterval","setInterval","addEventListener","capture","enableFocusWithMouse","web0s","on"],"mappings":"AAAA,aAAAA,OAAO,CAAC,eAAgB,eAAgB,UAAW,gBAAiB,SAAU,QAAQ,SAAUC,aAAcC,aAAcC,QAASC,cAAeC,OAAQC,KAGxJ,IAGIC,YA8BAC,oBA8EAC,cA/GAC,KAAO,GAEPC,oBAAqB,IAAIC,MAAOC,UAYpC,SAASC,oBAEL,IAAIC,UAAYC,SAASC,KAAKF,UAE9BA,UAAUG,OAAO,aACjBH,UAAUG,OAAO,gBAerB,SAASC,cAAcC,GAEnB,IAAIC,OAASD,EAAEE,QACXC,OAASH,EAAEI,QAGf,QAAsB,IAAXH,aAA4C,IAAXE,OAA5C,CAIA,IAAIE,IAAMjB,oBACLiB,IASDC,KAAKC,IAAIN,OAASI,IAAIG,GAAK,IAAMF,KAAKC,IAAIJ,OAASE,IAAII,GAAK,KAIhEJ,IAAIG,EAAIP,OACRI,IAAII,EAAIN,OAERZ,oBAAqB,IAAIC,MAAOC,UApDpC,SAASiB,YAEL7B,aAAa8B,kBAmDbD,GAEIvB,cACAA,aAAc,EACdO,oBACAT,OAAO2B,QAAQtB,KAAM,iBArBrBF,oBAAsB,CAClBoB,EAAGP,OACHQ,EAAGN,SAuBf,SAASU,eAAeb,GAIpB,GAAoB,WAFFA,EAAEc,cAAgB9B,cAAc+B,OAAS,QAAU,YAG5D5B,YAAa,CACd,IAAI6B,OAASlC,aAAamC,gBAAgBjB,EAAEkB,QACxCF,QACAlC,aAAaqC,MAAMH,SAuBnC,SAASI,mBAEAjC,aAnGT,SAASkC,gBACL,OAAO,IAAI7B,MAAOC,UAAYF,mBAkGV8B,IAAmB,MACnClC,aAAc,EAnFtB,SAASmC,iBAEL,IAAI3B,UAAYC,SAASC,KAAKF,UAE9BA,UAAU4B,IAAI,aAEVvC,cAAcwC,IACd7B,UAAU4B,IAAI,gBA6EdD,GACArC,OAAO2B,QAAQtB,KAAM,cAwB7B,SAASmC,aAZT,SAASC,oBAEUrC,gBAGXsC,cAHWtC,eAIXA,cAAgB,MAGpBK,oBAKAgC,GAGAxC,IAAI0C,oBAAoBhC,SAAWiC,OAAOC,aAAe,cAAgB,YAAc/B,cAAe,CAClGgC,SAAS,IAGR/C,cAAc+B,UA5BvB,SAASiB,qBAEA3C,gBACDA,cAAgB4C,YAAYb,gBAAiB,MA0B7CY,GAEA9C,IAAIgD,iBAAiBtC,SAAWiC,OAAOC,aAAe,cAAgB,YAAc/B,cAAe,CAC/FgC,SAAS,KAKjB7C,IAAI0C,oBAAoBhC,SAAWiC,OAAOC,aAAe,eAAiB,aAAejB,eAAgB,CACrGsB,SAAS,EACTJ,SAAS,IAlEjB,SAASK,uBAEL,QAAKpD,cAAcwC,MAIfzC,QAAQsD,SAIRtD,QAAQyC,IA2DRY,IACAlD,IAAIgD,iBAAiBtC,SAAWiC,OAAOC,aAAe,eAAiB,aAAejB,eAAgB,CAClGsB,SAAS,EACTJ,SAAS,IASrB,OAJAN,YAEAxC,OAAOqD,GAAGtD,cAAe,aAAcyC,WAEhCnC","file":"mouseManager.js","sourcesContent":["define(['inputManager', 'focusManager', 'browser', 'layoutManager', 'events', 'dom'], function (inputManager, focusManager, browser, layoutManager, events, dom) {\n    'use strict';\n\n    var self = {};\n\n    var lastMouseInputTime = new Date().getTime();\n    var isMouseIdle;\n\n    function mouseIdleTime() {\n        return new Date().getTime() - lastMouseInputTime;\n    }\n\n    function notifyApp() {\n\n        inputManager.notifyMouseMove();\n    }\n\n    function removeIdleClasses() {\n\n        var classList = document.body.classList;\n\n        classList.remove('mouseIdle');\n        classList.remove('mouseIdle-tv');\n    }\n\n    function addIdleClasses() {\n\n        var classList = document.body.classList;\n\n        classList.add('mouseIdle');\n\n        if (layoutManager.tv) {\n            classList.add('mouseIdle-tv');\n        }\n    }\n\n    var lastPointerMoveData;\n    function onPointerMove(e) {\n\n        var eventX = e.screenX;\n        var eventY = e.screenY;\n\n        // if coord don't exist how could it move\n        if (typeof eventX === 'undefined' && typeof eventY === 'undefined') {\n            return;\n        }\n\n        var obj = lastPointerMoveData;\n        if (!obj) {\n            lastPointerMoveData = {\n                x: eventX,\n                y: eventY\n            };\n            return;\n        }\n\n        // if coord are same, it didn't move\n        if (Math.abs(eventX - obj.x) < 10 && Math.abs(eventY - obj.y) < 10) {\n            return;\n        }\n\n        obj.x = eventX;\n        obj.y = eventY;\n\n        lastMouseInputTime = new Date().getTime();\n        notifyApp();\n\n        if (isMouseIdle) {\n            isMouseIdle = false;\n            removeIdleClasses();\n            events.trigger(self, 'mouseactive');\n        }\n    }\n\n    function onPointerEnter(e) {\n\n        var pointerType = e.pointerType || (layoutManager.mobile ? 'touch' : 'mouse');\n\n        if (pointerType === 'mouse') {\n            if (!isMouseIdle) {\n                var parent = focusManager.focusableParent(e.target);\n                if (parent) {\n                    focusManager.focus(parent);\n                }\n            }\n        }\n    }\n\n    function enableFocusWithMouse() {\n\n        if (!layoutManager.tv) {\n            return false;\n        }\n\n        if (browser.web0s) {\n            return false;\n        }\n\n        if (browser.tv) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function onMouseInterval() {\n\n        if (!isMouseIdle && mouseIdleTime() >= 5000) {\n            isMouseIdle = true;\n            addIdleClasses();\n            events.trigger(self, 'mouseidle');\n        }\n    }\n\n    var mouseInterval;\n    function startMouseInterval() {\n\n        if (!mouseInterval) {\n            mouseInterval = setInterval(onMouseInterval, 5000);\n        }\n    }\n\n    function stopMouseInterval() {\n\n        var interval = mouseInterval;\n\n        if (interval) {\n            clearInterval(interval);\n            mouseInterval = null;\n        }\n\n        removeIdleClasses();\n    }\n\n    function initMouse() {\n\n        stopMouseInterval();\n\n        /* eslint-disable-next-line compat/compat */\n        dom.removeEventListener(document, (window.PointerEvent ? 'pointermove' : 'mousemove'), onPointerMove, {\n            passive: true\n        });\n\n        if (!layoutManager.mobile) {\n            startMouseInterval();\n\n            dom.addEventListener(document, (window.PointerEvent ? 'pointermove' : 'mousemove'), onPointerMove, {\n                passive: true\n            });\n        }\n\n        /* eslint-disable-next-line compat/compat */\n        dom.removeEventListener(document, (window.PointerEvent ? 'pointerenter' : 'mouseenter'), onPointerEnter, {\n            capture: true,\n            passive: true\n        });\n\n        if (enableFocusWithMouse()) {\n            dom.addEventListener(document, (window.PointerEvent ? 'pointerenter' : 'mouseenter'), onPointerEnter, {\n                capture: true,\n                passive: true\n            });\n        }\n    }\n\n    initMouse();\n\n    events.on(layoutManager, 'modechange', initMouse);\n\n    return self;\n});\n"]}