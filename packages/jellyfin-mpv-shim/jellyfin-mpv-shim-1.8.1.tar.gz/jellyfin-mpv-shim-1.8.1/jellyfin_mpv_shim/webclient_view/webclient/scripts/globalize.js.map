{"version":3,"sources":["scripts/globalize.js"],"names":["define","userSettings","events","currentCulture","currentDateTimeCulture","allTranslations","getCurrentLocale","updateCurrentCulture","culture","dateTimeCulture","language","err","console","error","getDefaultLanguage","document","documentElement","getAttribute","navigator","userLanguage","languages","length","normalizeLocaleName","dateTimeLocale","ensureTranslations","i","ensureTranslation","translationInfo","dictionaries","Promise","resolve","loadTranslation","translations","lang","filtered","filter","t","reject","url","path","indexOf","cacheParam","xhr","XMLHttpRequest","open","onload","e","this","status","JSON","parse","response","onerror","send","then","dictionary","parts","replace","split","toLowerCase","lower","getDictionary","module","locale","defaultModule","register","options","name","strings","_defaultModule","Date","getTime","translateKey","key","translateKeyFromModule","replaceAll","str","find","join","translate","val","arguments","translateHtml","html","Error","startIndex","endIndex","substring","on","getString","translateDocument","loadStrings","optionsName","promises","push","all","getCurrentDateTimeLocale"],"mappings":"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","file":"globalize.js","sourcesContent":["define(['userSettings', 'events'], function (userSettings, events) {\n    'use strict';\n    var fallbackCulture = 'en-us';\n\n    var allTranslations = {};\n    var currentCulture;\n    var currentDateTimeCulture;\n\n    function getCurrentLocale() {\n        return currentCulture;\n    }\n\n    function getCurrentDateTimeLocale() {\n        return currentDateTimeCulture;\n    }\n\n    function getDefaultLanguage() {\n        var culture = document.documentElement.getAttribute('data-culture');\n        if (culture) {\n            return culture;\n        }\n\n        if (navigator.language) {\n            return navigator.language;\n        }\n        if (navigator.userLanguage) {\n            return navigator.userLanguage;\n        }\n        if (navigator.languages && navigator.languages.length) {\n            return navigator.languages[0];\n        }\n\n        return fallbackCulture;\n    }\n\n    function updateCurrentCulture() {\n        var culture;\n        try {\n            culture = userSettings.language();\n        } catch (err) {\n            console.error('no language set in user settings');\n        }\n        culture = culture || getDefaultLanguage();\n\n        currentCulture = normalizeLocaleName(culture);\n\n        var dateTimeCulture;\n        try {\n            dateTimeCulture = userSettings.dateTimeLocale();\n        } catch (err) {\n            console.error('no date format set in user settings');\n        }\n\n        if (dateTimeCulture) {\n            currentDateTimeCulture = normalizeLocaleName(dateTimeCulture);\n        } else {\n            currentDateTimeCulture = currentCulture;\n        }\n        ensureTranslations(currentCulture);\n    }\n\n    function ensureTranslations(culture) {\n        for (var i in allTranslations) {\n            ensureTranslation(allTranslations[i], culture);\n        }\n        if (culture !== fallbackCulture) {\n            for (var i in allTranslations) {\n                ensureTranslation(allTranslations[i], fallbackCulture);\n            }\n        }\n    }\n\n    function ensureTranslation(translationInfo, culture) {\n        if (translationInfo.dictionaries[culture]) {\n            return Promise.resolve();\n        }\n\n        return loadTranslation(translationInfo.translations, culture).then(function (dictionary) {\n            translationInfo.dictionaries[culture] = dictionary;\n        });\n    }\n\n    function normalizeLocaleName(culture) {\n        // TODO remove normalizations\n        culture = culture.replace('_', '-');\n\n        // convert de-DE to de\n        var parts = culture.split('-');\n        if (parts.length === 2) {\n            if (parts[0].toLowerCase() === parts[1].toLowerCase()) {\n                culture = parts[0].toLowerCase();\n            }\n        }\n\n        var lower = culture.toLowerCase();\n        if (lower === 'ca-es') {\n            return 'ca';\n        }\n\n        // normalize Swedish\n        if (lower === 'sv-se') {\n            return 'sv';\n        }\n\n        return lower;\n    }\n\n    function getDictionary(module, locale) {\n        if (!module) {\n            module = defaultModule();\n        }\n\n        var translations = allTranslations[module];\n        if (!translations) {\n            return {};\n        }\n\n        return translations.dictionaries[locale];\n    }\n\n    function register(options) {\n        allTranslations[options.name] = {\n            translations: options.strings || options.translations,\n            dictionaries: {}\n        };\n    }\n\n    function loadStrings(options) {\n        var locale = getCurrentLocale();\n        var promises = [];\n        var optionsName;\n        if (typeof options === 'string') {\n            optionsName = options;\n        } else {\n            optionsName = options.name;\n            register(options);\n        }\n        promises.push(ensureTranslation(allTranslations[optionsName], locale));\n        promises.push(ensureTranslation(allTranslations[optionsName], fallbackCulture));\n        return Promise.all(promises);\n    }\n\n    var cacheParam = new Date().getTime();\n    function loadTranslation(translations, lang) {\n        lang = normalizeLocaleName(lang);\n        var filtered = translations.filter(function (t) {\n            return normalizeLocaleName(t.lang) === lang;\n        });\n\n        if (!filtered.length) {\n            filtered = translations.filter(function (t) {\n                return normalizeLocaleName(t.lang) === fallbackCulture;\n            });\n        }\n\n        return new Promise(function (resolve, reject) {\n            if (!filtered.length) {\n                resolve();\n                return;\n            }\n\n            var url = filtered[0].path;\n\n            url += url.indexOf('?') === -1 ? '?' : '&';\n            url += 'v=' + cacheParam;\n\n            var xhr = new XMLHttpRequest();\n            xhr.open('GET', url, true);\n\n            xhr.onload = function (e) {\n                if (this.status < 400) {\n                    resolve(JSON.parse(this.response));\n                } else {\n                    resolve({});\n                }\n            };\n\n            xhr.onerror = function () {\n                resolve({});\n            };\n            xhr.send();\n        });\n    }\n\n    function translateKey(key) {\n        var parts = key.split('#');\n        var module;\n\n        if (parts.length > 1) {\n            module = parts[0];\n            key = parts[1];\n        }\n\n        return translateKeyFromModule(key, module);\n    }\n\n    function translateKeyFromModule(key, module) {\n        var dictionary = getDictionary(module, getCurrentLocale());\n        if (!dictionary || !dictionary[key]) {\n            dictionary = getDictionary(module, fallbackCulture);\n        }\n        if (!dictionary) {\n            return key;\n        }\n        return dictionary[key] || key;\n    }\n\n    function replaceAll(str, find, replace) {\n        return str.split(find).join(replace);\n    }\n\n    function translate(key) {\n        var val = translateKey(key);\n        for (var i = 1; i < arguments.length; i++) {\n            val = replaceAll(val, '{' + (i - 1) + '}', arguments[i]);\n        }\n        return val;\n    }\n\n    function translateHtml(html, module) {\n        if (!module) {\n            module = defaultModule();\n        }\n        if (!module) {\n            throw new Error('module cannot be null or empty');\n        }\n\n        var startIndex = html.indexOf('${');\n        if (startIndex === -1) {\n            return html;\n        }\n\n        startIndex += 2;\n        var endIndex = html.indexOf('}', startIndex);\n        if (endIndex === -1) {\n            return html;\n        }\n\n        var key = html.substring(startIndex, endIndex);\n        var val = translateKeyFromModule(key, module);\n\n        html = html.replace('${' + key + '}', val);\n        return translateHtml(html, module);\n    }\n\n    var _defaultModule;\n    function defaultModule(val) {\n        if (val) {\n            _defaultModule = val;\n        }\n        return _defaultModule;\n    }\n\n    updateCurrentCulture();\n\n    events.on(userSettings, 'change', function (e, name) {\n        if (name === 'language' || name === 'datetimelocale') {\n            updateCurrentCulture();\n        }\n    });\n\n    return {\n        getString: translate,\n        translate: translate,\n        translateDocument: translateHtml,\n        translateHtml: translateHtml,\n        loadStrings: loadStrings,\n        defaultModule: defaultModule,\n        getCurrentLocale: getCurrentLocale,\n        getCurrentDateTimeLocale: getCurrentDateTimeLocale,\n        register: register,\n        updateCurrentCulture: updateCurrentCulture\n    };\n});\n"]}