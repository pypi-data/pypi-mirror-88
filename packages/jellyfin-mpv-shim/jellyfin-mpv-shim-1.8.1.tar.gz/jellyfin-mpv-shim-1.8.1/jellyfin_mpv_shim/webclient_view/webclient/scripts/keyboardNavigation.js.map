{"version":3,"sources":["scripts/keyboardNavigation.js"],"names":["define","_exports","_inputManager","_layoutManager","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","getKeyName","isNavigationKey","enable","KeyNames","13","19","27","32","37","38","39","40","412","413","415","417","461","10009","10232","10233","10252","NavigationKeys","hasFieldKey","KeyboardEvent","e","console","error","i","String","fromCharCode","toLowerCase","event","keyCode","key","indexOf","window","addEventListener","layoutManager","tv","capture","inputManager","handle","debug","preventDefault","navigator","getGamepads","attachGamepadScript","log","removeEventListener","require","_default"],"mappings":"AAAAA,OAAO,CAAC,UAAW,eAAgB,kBAAkB,SAAUC,SAAUC,cAAeC,gBACtF,aAYA,SAASC,uBAAuBC,KAAO,OAAOA,KAAOA,IAAIC,WAAaD,IAAM,CAAEE,QAASF,KAVvFG,OAAOC,eAAeR,SAAU,aAAc,CAC5CS,OAAO,IAETT,SAASU,WAAaA,WACtBV,SAASW,gBAAkBA,gBAC3BX,SAASY,OAASA,OAClBZ,SAASM,aAAU,EAJrBL,cAAAE,uBAAAF,eACAC,eAAAC,uBAAAD,gBAKA,IAAMW,SAAW,CACbC,GAAI,QACJC,GAAI,QACJC,GAAI,SACJC,GAAI,QACJC,GAAI,YACJC,GAAI,UACJC,GAAI,aACJC,GAAI,YAEJC,IAAK,cAELC,IAAK,YAELC,IAAK,YAELC,IAAK,mBAELC,IAAK,OAELC,MAAO,OAEPC,MAAO,qBAEPC,MAAO,iBAEPC,MAAO,kBAMLC,eAAiB,CAAC,YAAa,aAAc,UAAW,aAE1DC,aAAc,EAClB,IACIA,YAAc,QAAS,IAAIC,cAAc,WAC3C,MAAOC,GACLC,QAAQC,MAAM,8BAGlB,IAAKJ,YAED,IAAK,IAAIK,EAAI,GAAIA,GAAK,GAAIA,IACtBxB,SAASwB,GAAKC,OAAOC,aAAaF,GAAGG,cAUtC,SAAS9B,WAAW+B,OACvB,OAAO5B,SAAS4B,MAAMC,UAAYD,MAAME,IASrC,SAAShC,gBAAgBgC,KAC5B,OAAuC,GAAhCZ,eAAea,QAAQD,KAG3B,SAAS/B,SACZiC,OAAOC,iBAAiB,WAAW,SAAUZ,GACzC,IAAMS,IAAMjC,WAAWwB,GAGvB,GAAKa,eAAAA,QAAcC,KAAMrC,gBAAgBgC,KAAzC,CAIA,IAAIM,SAAU,EAEd,OAAQN,KACJ,IAAK,YACDO,cAAAA,QAAaC,OAAO,QACpB,MACJ,IAAK,UACDD,cAAAA,QAAaC,OAAO,MACpB,MACJ,IAAK,aACDD,cAAAA,QAAaC,OAAO,SACpB,MACJ,IAAK,YACDD,cAAAA,QAAaC,OAAO,QACpB,MAEJ,IAAK,OACDD,cAAAA,QAAaC,OAAO,QACpB,MAEJ,IAAK,SACGJ,eAAAA,QAAcC,GACdE,cAAAA,QAAaC,OAAO,QAEpBF,SAAU,EAEd,MAEJ,IAAK,YACDC,cAAAA,QAAaC,OAAO,QACpB,MACJ,IAAK,QACDD,cAAAA,QAAaC,OAAO,SACpB,MACJ,IAAK,iBACDD,cAAAA,QAAaC,OAAO,aACpB,MACJ,IAAK,cACDD,cAAAA,QAAaC,OAAO,UACpB,MACJ,IAAK,mBACDD,cAAAA,QAAaC,OAAO,eACpB,MACJ,IAAK,YACDD,cAAAA,QAAaC,OAAO,QACpB,MACJ,IAAK,qBACDD,cAAAA,QAAaC,OAAO,iBACpB,MACJ,IAAK,iBACDD,cAAAA,QAAaC,OAAO,aACpB,MAEJ,QACIF,SAAU,EAGdA,UACAd,QAAQiB,MAAM,oCACdlB,EAAEmB,sBAcVC,UAAUC,aACVV,OAAOC,iBAAiB,oBAR5B,SAASU,oBAAoBtB,GACzBC,QAAQsB,IAAI,uDACZZ,OAAOa,oBAAoB,mBAAoBF,qBAC/CG,QAAQ,CAAC,4BA+CX,IAAIC,SAvCS,CACXhD,OAAQA,OACRF,WAAYA,WACZC,gBAAiBA,iBAyCnBX,SAASM,QAAUsD","file":"keyboardNavigation.js","sourcesContent":["/**\n * Module for performing keyboard navigation.\n * @module components/input/keyboardnavigation\n */\n\nimport inputManager from 'inputManager';\nimport layoutManager from 'layoutManager';\n\n/**\n * Key name mapping.\n */\nconst KeyNames = {\n    13: 'Enter',\n    19: 'Pause',\n    27: 'Escape',\n    32: 'Space',\n    37: 'ArrowLeft',\n    38: 'ArrowUp',\n    39: 'ArrowRight',\n    40: 'ArrowDown',\n    // MediaRewind (Tizen/WebOS)\n    412: 'MediaRewind',\n    // MediaStop (Tizen/WebOS)\n    413: 'MediaStop',\n    // MediaPlay (Tizen/WebOS)\n    415: 'MediaPlay',\n    // MediaFastForward (Tizen/WebOS)\n    417: 'MediaFastForward',\n    // Back (WebOS)\n    461: 'Back',\n    // Back (Tizen)\n    10009: 'Back',\n    // MediaTrackPrevious (Tizen)\n    10232: 'MediaTrackPrevious',\n    // MediaTrackNext (Tizen)\n    10233: 'MediaTrackNext',\n    // MediaPlayPause (Tizen)\n    10252: 'MediaPlayPause'\n};\n\n/**\n * Keys used for keyboard navigation.\n */\nconst NavigationKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'];\n\nlet hasFieldKey = false;\ntry {\n    hasFieldKey = 'key' in new KeyboardEvent('keydown');\n} catch (e) {\n    console.error(\"error checking 'key' field\");\n}\n\nif (!hasFieldKey) {\n    // Add [a..z]\n    for (let i = 65; i <= 90; i++) {\n        KeyNames[i] = String.fromCharCode(i).toLowerCase();\n    }\n}\n\n/**\n * Returns key name from event.\n *\n * @param {KeyboardEvent} event - Keyboard event.\n * @return {string} Key name.\n */\nexport function getKeyName(event) {\n    return KeyNames[event.keyCode] || event.key;\n}\n\n/**\n * Returns _true_ if key is used for navigation.\n *\n * @param {string} key - Key name.\n * @return {boolean} _true_ if key is used for navigation.\n */\nexport function isNavigationKey(key) {\n    return NavigationKeys.indexOf(key) != -1;\n}\n\nexport function enable() {\n    window.addEventListener('keydown', function (e) {\n        const key = getKeyName(e);\n\n        // Ignore navigation keys for non-TV\n        if (!layoutManager.tv && isNavigationKey(key)) {\n            return;\n        }\n\n        let capture = true;\n\n        switch (key) {\n            case 'ArrowLeft':\n                inputManager.handle('left');\n                break;\n            case 'ArrowUp':\n                inputManager.handle('up');\n                break;\n            case 'ArrowRight':\n                inputManager.handle('right');\n                break;\n            case 'ArrowDown':\n                inputManager.handle('down');\n                break;\n\n            case 'Back':\n                inputManager.handle('back');\n                break;\n\n            case 'Escape':\n                if (layoutManager.tv) {\n                    inputManager.handle('back');\n                } else {\n                    capture = false;\n                }\n                break;\n\n            case 'MediaPlay':\n                inputManager.handle('play');\n                break;\n            case 'Pause':\n                inputManager.handle('pause');\n                break;\n            case 'MediaPlayPause':\n                inputManager.handle('playpause');\n                break;\n            case 'MediaRewind':\n                inputManager.handle('rewind');\n                break;\n            case 'MediaFastForward':\n                inputManager.handle('fastforward');\n                break;\n            case 'MediaStop':\n                inputManager.handle('stop');\n                break;\n            case 'MediaTrackPrevious':\n                inputManager.handle('previoustrack');\n                break;\n            case 'MediaTrackNext':\n                inputManager.handle('nexttrack');\n                break;\n\n            default:\n                capture = false;\n        }\n\n        if (capture) {\n            console.debug('disabling default event handling');\n            e.preventDefault();\n        }\n    });\n}\n\n// Gamepad initialisation. No script is required if no gamepads are present at init time, saving a bit of resources.\n// Whenever the gamepad is connected, we hand all the control of the gamepad to gamepadtokey.js by removing the event handler\nfunction attachGamepadScript(e) {\n    console.log('Gamepad connected! Attaching gamepadtokey.js script');\n    window.removeEventListener('gamepadconnected', attachGamepadScript);\n    require(['scripts/gamepadtokey']);\n}\n\n// No need to check for gamepads manually at load time, the eventhandler will be fired for that\nif (navigator.getGamepads) { /* eslint-disable-line compat/compat */\n    window.addEventListener('gamepadconnected', attachGamepadScript);\n}\n\nexport default {\n    enable: enable,\n    getKeyName: getKeyName,\n    isNavigationKey: isNavigationKey\n};\n"]}