{"version":3,"sources":["scripts/taskbutton.js"],"names":["define","events","userSettings","serverNotifications","connectionManager","globalize","options","pollTasks","getApiClient","serverId","getScheduledTasks","IsEnabled","then","updateTasks","tasks","task","filter","t","Key","taskKey","panel","classList","remove","add","State","button","removeAttribute","setAttribute","Id","progress","CurrentProgressPercentage","toFixed","progressElem","value","lastResultElem","lastResult","LastExecutionResult","Status","html","translate","onButtonClick","onScheduledTaskMessageConfirmed","id","startScheduledTask","this","getAttribute","onScheduledTasksUpdate","e","apiClient","info","pollInterval","ApiClient","onPollIntervalFired","isMessageChannelOpen","mode","removeEventListener","off","stopInterval","sendMessage","clearInterval","addEventListener","startInterval","setInterval","on"],"mappings":"AAAA,aAAAA,OAAO,CAAC,SAAU,eAAgB,sBAAuB,oBAAqB,YAAa,gBAAgB,SAAUC,OAAQC,aAAcC,oBAAqBC,kBAAmBC,WAG/K,OAAO,SAAUC,SACb,SAASC,YACLH,kBAAkBI,aAAaC,UAAUC,kBAAkB,CACvDC,WAAW,IACZC,KAAKC,aAGZ,SAASA,YAAYC,OACjB,IAAIC,KAAOD,MAAME,QAAO,SAAUC,GAC9B,OAAOA,EAAEC,KAAOZ,QAAQa,WACzB,GAUH,GARIb,QAAQc,QACJL,KACAT,QAAQc,MAAMC,UAAUC,OAAO,QAE/BhB,QAAQc,MAAMC,UAAUE,IAAI,SAI/BR,KAAL,CAIkB,QAAdA,KAAKS,MACLC,OAAOC,gBAAgB,YAEvBD,OAAOE,aAAa,WAAY,YAGpCF,OAAOE,aAAa,cAAeZ,KAAKa,IACxC,IAAIC,UAAYd,KAAKe,2BAA6B,GAAGC,QAAQ,GAY7D,GAVIzB,QAAQ0B,eACR1B,QAAQ0B,aAAaC,MAAQJ,SAEX,WAAdd,KAAKS,MACLlB,QAAQ0B,aAAaX,UAAUC,OAAO,QAEtChB,QAAQ0B,aAAaX,UAAUE,IAAI,SAIvCjB,QAAQ4B,eAAgB,CACxB,IAAIC,WAAapB,KAAKqB,oBAAsBrB,KAAKqB,oBAAoBC,OAAS,GAE5D,UAAdF,WACA7B,QAAQ4B,eAAeI,KAAK,iCAAmCjC,UAAUkC,UAAU,eAAiB,YAC/E,aAAdJ,WACP7B,QAAQ4B,eAAeI,KAAK,iCAAmCjC,UAAUkC,UAAU,kBAAoB,YAClF,WAAdJ,WACP7B,QAAQ4B,eAAeI,KAAK,gCAAkCjC,UAAUkC,UAAU,gCAAkC,WAEpHjC,QAAQ4B,eAAeI,KAAKH,cASxC,SAASK,iBAJT,SAASC,gCAAgCC,IACrCtC,kBAAkBI,aAAaC,UAAUkC,mBAAmBD,IAAI9B,KAAKL,WAIrEkC,CAAgCG,KAAKC,aAAa,gBAGtD,SAASC,uBAAuBC,EAAGC,UAAWC,MACtCD,UAAUvC,aAAeA,UACzBI,YAAYoC,MAIpB,IAAIC,aACAzB,OAASnB,QAAQmB,OACjBhB,SAAW0C,UAAU1C,WAEzB,SAAS2C,sBACAhD,kBAAkBI,aAAaC,UAAU4C,wBAC1C9C,YAsBJD,QAAQc,OACRd,QAAQc,MAAMC,UAAUE,IAAI,QAGZ,OAAhBjB,QAAQgD,MACR7B,OAAO8B,oBAAoB,QAASf,eACpCvC,OAAOuD,IAAIrD,oBAAqB,qBAAsB2C,wBAd1D,SAASW,eACLrD,kBAAkBI,aAAaC,UAAUiD,YAAY,0BAEjDR,cACAS,cAAcT,cAWlBO,KAEAhC,OAAOmC,iBAAiB,QAASpB,eACjCjC,YA5BJ,SAASsD,gBACL,IAAIb,UAAY5C,kBAAkBI,aAAaC,UAE3CyC,cACAS,cAAcT,cAElBF,UAAUU,YAAY,0BAA2B,aACjDR,aAAeY,YAAYV,oBAAqB,KAsBhDS,GACA5D,OAAO8D,GAAG5D,oBAAqB,qBAAsB2C","file":"taskbutton.js","sourcesContent":["define(['events', 'userSettings', 'serverNotifications', 'connectionManager', 'globalize', 'emby-button'], function (events, userSettings, serverNotifications, connectionManager, globalize) {\n    'use strict';\n\n    return function (options) {\n        function pollTasks() {\n            connectionManager.getApiClient(serverId).getScheduledTasks({\n                IsEnabled: true\n            }).then(updateTasks);\n        }\n\n        function updateTasks(tasks) {\n            var task = tasks.filter(function (t) {\n                return t.Key == options.taskKey;\n            })[0];\n\n            if (options.panel) {\n                if (task) {\n                    options.panel.classList.remove('hide');\n                } else {\n                    options.panel.classList.add('hide');\n                }\n            }\n\n            if (!task) {\n                return;\n            }\n\n            if (task.State == 'Idle') {\n                button.removeAttribute('disabled');\n            } else {\n                button.setAttribute('disabled', 'disabled');\n            }\n\n            button.setAttribute('data-taskid', task.Id);\n            var progress = (task.CurrentProgressPercentage || 0).toFixed(1);\n\n            if (options.progressElem) {\n                options.progressElem.value = progress;\n\n                if (task.State == 'Running') {\n                    options.progressElem.classList.remove('hide');\n                } else {\n                    options.progressElem.classList.add('hide');\n                }\n            }\n\n            if (options.lastResultElem) {\n                var lastResult = task.LastExecutionResult ? task.LastExecutionResult.Status : '';\n\n                if (lastResult == 'Failed') {\n                    options.lastResultElem.html('<span style=\"color:#FF0000;\">(' + globalize.translate('LabelFailed') + ')</span>');\n                } else if (lastResult == 'Cancelled') {\n                    options.lastResultElem.html('<span style=\"color:#0026FF;\">(' + globalize.translate('LabelCancelled') + ')</span>');\n                } else if (lastResult == 'Aborted') {\n                    options.lastResultElem.html('<span style=\"color:#FF0000;\">' + globalize.translate('LabelAbortedByServerShutdown') + '</span>');\n                } else {\n                    options.lastResultElem.html(lastResult);\n                }\n            }\n        }\n\n        function onScheduledTaskMessageConfirmed(id) {\n            connectionManager.getApiClient(serverId).startScheduledTask(id).then(pollTasks);\n        }\n\n        function onButtonClick() {\n            onScheduledTaskMessageConfirmed(this.getAttribute('data-taskid'));\n        }\n\n        function onScheduledTasksUpdate(e, apiClient, info) {\n            if (apiClient.serverId() === serverId) {\n                updateTasks(info);\n            }\n        }\n\n        var pollInterval;\n        var button = options.button;\n        var serverId = ApiClient.serverId();\n\n        function onPollIntervalFired() {\n            if (!connectionManager.getApiClient(serverId).isMessageChannelOpen()) {\n                pollTasks();\n            }\n        }\n\n        function startInterval() {\n            var apiClient = connectionManager.getApiClient(serverId);\n\n            if (pollInterval) {\n                clearInterval(pollInterval);\n            }\n            apiClient.sendMessage('ScheduledTasksInfoStart', '1000,1000');\n            pollInterval = setInterval(onPollIntervalFired, 5000);\n        }\n\n        function stopInterval() {\n            connectionManager.getApiClient(serverId).sendMessage('ScheduledTasksInfoStop');\n\n            if (pollInterval) {\n                clearInterval(pollInterval);\n            }\n        }\n\n        if (options.panel) {\n            options.panel.classList.add('hide');\n        }\n\n        if (options.mode == 'off') {\n            button.removeEventListener('click', onButtonClick);\n            events.off(serverNotifications, 'ScheduledTasksInfo', onScheduledTasksUpdate);\n            stopInterval();\n        } else {\n            button.addEventListener('click', onButtonClick);\n            pollTasks();\n            startInterval();\n            events.on(serverNotifications, 'ScheduledTasksInfo', onScheduledTasksUpdate);\n        }\n    };\n});\n"]}