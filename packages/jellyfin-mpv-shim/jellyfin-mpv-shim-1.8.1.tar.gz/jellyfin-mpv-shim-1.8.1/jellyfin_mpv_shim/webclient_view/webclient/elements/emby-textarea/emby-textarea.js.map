{"version":3,"sources":["elements/emby-textarea/emby-textarea.js"],"names":["define","layoutManager","browser","autoGrow","textarea","maxLines","offset","self","this","autogrowFn","lineHeight","reset","rows","getOffset","scrollHeight","maxAllowedHeight","style","overflowY","height","newHeight","$","css","undefined","window","getComputedStyle","props","i","length","parseInt","addEventListener","EmbyTextAreaPrototype","Object","create","HTMLTextAreaElement","prototype","elementId","getOwnPropertyDescriptor","defineProperty","descriptor","configurable","baseSetMethod","set","value","call","dispatchEvent","CustomEvent","bubbles","cancelable","createdCallback","id","attachedCallback","classList","contains","add","parentNode","label","ownerDocument","createElement","innerHTML","getAttribute","htmlFor","insertBefore","remove","text","document","registerElement","extends"],"mappings":"AAAA,aAAAA,OAAO,CAAC,gBAAiB,UAAW,sBAAuB,gBAAiB,eAAe,SAAUC,cAAeC,SAGhH,SAASC,SAASC,SAAUC,UACxB,IAsBIC,OAtBAC,KAAOC,KA+BX,SAASC,aAIL,KAHKF,KAAKG,YAAcH,KAAKG,YAAc,IAT/C,SAASC,QACLP,SAASQ,KAAO,EAChBN,OAASC,KAAKM,UAAUT,UACxBG,KAAKK,KAAOR,SAASQ,MAAQ,EAC7BL,KAAKG,WAAcN,SAASU,aAAeP,KAAKK,KAASN,OAASC,KAAKK,KACvEL,KAAKQ,iBAAoBR,KAAKG,WAAaL,SAAYC,OAKnDK,GAEAJ,KAAKG,YAAc,EAInB,OAHAN,SAASY,MAAMC,UAAY,SAC3Bb,SAASY,MAAME,OAAS,YACxBd,SAASQ,KAAO,GAGpB,IAAIO,UAAY,EAGXf,SAASU,aAAeR,OAAUC,KAAKQ,kBACxCX,SAASY,MAAMC,UAAY,SAC3BE,UAAYZ,KAAKQ,mBAEjBX,SAASY,MAAMC,UAAY,SAC3Bb,SAASY,MAAME,OAAS,OACxBC,UAAYf,SAASU,cAGzBM,EAAE,uBAAuBC,IAAI,SAAUF,UAAY,MACnDf,SAASY,MAAME,OAASC,UAAY,UApDvBG,IAAbjB,WACAA,SAAW,KAQfE,KAAKM,UAAY,SAAUT,UAKvB,IAJA,IAAIY,MAAQO,OAAOC,iBAAiBpB,SAAU,MAC1CqB,MAAQ,CAAC,aAAc,iBACvBnB,OAAS,EAEJoB,EAAI,EAAGA,EAAID,MAAME,OAAQD,IAC9BpB,QAAUsB,SAASZ,MAAMS,MAAMC,KAEnC,OAAOpB,QAuCXF,SAASyB,iBAAiB,QAASpB,YACnCL,SAASyB,iBAAiB,QAASpB,YACnCL,SAASyB,iBAAiB,WAAYpB,YAEtCA,aAGJ,IAAIqB,sBAAwBC,OAAOC,OAAOC,oBAAoBC,WAE1DC,UAAY,EAEhB,GAAIJ,OAAOK,0BAA4BL,OAAOM,eAAgB,CAE1D,IAAIC,WAAaP,OAAOK,yBAAyBH,oBAAoBC,UAAW,SAGhF,GAAII,YAAcA,WAAWC,aAAc,CACvC,IAAIC,cAAgBF,WAAWG,IAC/BH,WAAWG,IAAM,SAAUC,OACvBF,cAAcG,KAAKnC,KAAMkC,OAEzBlC,KAAKoC,cAAc,IAAIC,YAAY,WAAY,CAC3CC,SAAS,EACTC,YAAY,MAIpBhB,OAAOM,eAAeJ,oBAAoBC,UAAW,QAASI,aAItER,sBAAsBkB,gBAAkB,WAE/BxC,KAAKyC,KACNzC,KAAKyC,GAAK,eAAiBd,UAC3BA,cAIRL,sBAAsBoB,iBAAmB,WAErC,IAAI1C,KAAK2C,UAAUC,SAAS,iBAA5B,CAIA5C,KAAKI,KAAO,EACZJ,KAAK2C,UAAUE,IAAI,iBAEnB,IAAIC,WAAa9C,KAAK8C,WAClBC,MAAQ/C,KAAKgD,cAAcC,cAAc,SAC7CF,MAAMG,UAAYlD,KAAKmD,aAAa,UAAY,GAChDJ,MAAMJ,UAAUE,IAAI,iBAEpBE,MAAMK,QAAUpD,KAAKyC,GACrBK,WAAWO,aAAaN,MAAO/C,MAE/BA,KAAKqB,iBAAiB,SAAS,WAC3B0B,MAAMJ,UAAUE,IAAI,wBACpBE,MAAMJ,UAAUW,OAAO,6BAE3BtD,KAAKqB,iBAAiB,QAAQ,WAC1B0B,MAAMJ,UAAUW,OAAO,wBACvBP,MAAMJ,UAAUE,IAAI,6BAGxB7C,KAAK+C,MAAQ,SAAUQ,MACnBR,MAAMG,UAAYK,MAGtB,IAAI5D,SAASK,QAGjBwD,SAASC,gBAAgB,gBAAiB,CACtC/B,UAAWJ,sBACXoC,QAAS","file":"emby-textarea.js","sourcesContent":["define(['layoutManager', 'browser', 'css!./emby-textarea', 'webcomponents', 'emby-input'], function (layoutManager, browser) {\n    'use strict';\n\n    function autoGrow(textarea, maxLines) {\n        var self = this;\n\n        if (maxLines === undefined) {\n            maxLines = 999;\n        }\n\n        /**\n         * Calculates the vertical padding of the element\n         * @param textarea\n         * @returns {number}\n         */\n        self.getOffset = function (textarea) {\n            var style = window.getComputedStyle(textarea, null);\n            var props = ['paddingTop', 'paddingBottom'];\n            var offset = 0;\n\n            for (var i = 0; i < props.length; i++) {\n                offset += parseInt(style[props[i]]);\n            }\n            return offset;\n        };\n\n        var offset;\n        function reset() {\n            textarea.rows = 1;\n            offset = self.getOffset(textarea);\n            self.rows = textarea.rows || 1;\n            self.lineHeight = (textarea.scrollHeight / self.rows) - (offset / self.rows);\n            self.maxAllowedHeight = (self.lineHeight * maxLines) - offset;\n        }\n\n        function autogrowFn() {\n            if (!self.lineHeight || self.lineHeight <= 0) {\n                reset();\n            }\n            if (self.lineHeight <= 0) {\n                textarea.style.overflowY = 'scroll';\n                textarea.style.height = 'auto';\n                textarea.rows = 3;\n                return;\n            }\n            var newHeight = 0;\n            var hasGrown = false;\n\n            if ((textarea.scrollHeight - offset) > self.maxAllowedHeight) {\n                textarea.style.overflowY = 'scroll';\n                newHeight = self.maxAllowedHeight;\n            } else {\n                textarea.style.overflowY = 'hidden';\n                textarea.style.height = 'auto';\n                newHeight = textarea.scrollHeight/* - offset*/;\n                hasGrown = true;\n            }\n            $('.customCssContainer').css('height', newHeight + 'px');\n            textarea.style.height = newHeight + 'px';\n        }\n\n        // Call autogrowFn() when textarea's value is changed\n        textarea.addEventListener('input', autogrowFn);\n        textarea.addEventListener('focus', autogrowFn);\n        textarea.addEventListener('valueset', autogrowFn);\n\n        autogrowFn();\n    }\n\n    var EmbyTextAreaPrototype = Object.create(HTMLTextAreaElement.prototype);\n\n    var elementId = 0;\n\n    if (Object.getOwnPropertyDescriptor && Object.defineProperty) {\n\n        var descriptor = Object.getOwnPropertyDescriptor(HTMLTextAreaElement.prototype, 'value');\n\n        // descriptor returning null in webos\n        if (descriptor && descriptor.configurable) {\n            var baseSetMethod = descriptor.set;\n            descriptor.set = function (value) {\n                baseSetMethod.call(this, value);\n\n                this.dispatchEvent(new CustomEvent('valueset', {\n                    bubbles: false,\n                    cancelable: false\n                }));\n            };\n\n            Object.defineProperty(HTMLTextAreaElement.prototype, 'value', descriptor);\n        }\n    }\n\n    EmbyTextAreaPrototype.createdCallback = function () {\n\n        if (!this.id) {\n            this.id = 'embytextarea' + elementId;\n            elementId++;\n        }\n    };\n\n    EmbyTextAreaPrototype.attachedCallback = function () {\n\n        if (this.classList.contains('emby-textarea')) {\n            return;\n        }\n\n        this.rows = 1;\n        this.classList.add('emby-textarea');\n\n        var parentNode = this.parentNode;\n        var label = this.ownerDocument.createElement('label');\n        label.innerHTML = this.getAttribute('label') || '';\n        label.classList.add('textareaLabel');\n\n        label.htmlFor = this.id;\n        parentNode.insertBefore(label, this);\n\n        this.addEventListener('focus', function () {\n            label.classList.add('textareaLabelFocused');\n            label.classList.remove('textareaLabelUnfocused');\n        });\n        this.addEventListener('blur', function () {\n            label.classList.remove('textareaLabelFocused');\n            label.classList.add('textareaLabelUnfocused');\n        });\n\n        this.label = function (text) {\n            label.innerHTML = text;\n        };\n\n        new autoGrow(this);\n    };\n\n    document.registerElement('emby-textarea', {\n        prototype: EmbyTextAreaPrototype,\n        extends: 'textarea'\n    });\n});\n"]}