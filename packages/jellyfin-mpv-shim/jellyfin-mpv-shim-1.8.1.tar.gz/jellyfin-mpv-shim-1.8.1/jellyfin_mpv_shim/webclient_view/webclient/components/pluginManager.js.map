{"version":3,"sources":["components/pluginManager.js"],"names":["define","events","globalize","cacheParam","Date","getTime","PluginManager","this","pluginsList","prototype","loadPlugin","pluginSpec","instance","registerPlugin","plugin","register","getRoutes","forEach","route","definePluginRoute","pluginManager","contentPath","mapPath","path","mapRoute","Emby","App","defineRoute","id","type","Promise","resolve","reject","loadStrings","strings","getTranslations","name","packageName","then","catch","console","debug","require","pluginFactory","default","filter","p","installUrl","separatorIndex","Math","max","lastIndexOf","baseUrl","substring","paths","requirejs","config","waitSeconds","pluginBuilder","concat","err","Error","error","obj","push","trigger","ofType","o","plugins","toLowerCase","indexOf","addCacheParam","url"],"mappings":"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","file":"pluginManager.js","sourcesContent":["define(['events', 'globalize'], function (events, globalize) {\n    'use strict';\n\n    // TODO: replace with each plugin version\n    var cacheParam = new Date().getTime();\n\n    function loadStrings(plugin) {\n        var strings = plugin.getTranslations ? plugin.getTranslations() : [];\n        return globalize.loadStrings({\n            name: plugin.id || plugin.packageName,\n            strings: strings\n        });\n    }\n\n    function definePluginRoute(pluginManager, route, plugin) {\n\n        route.contentPath = pluginManager.mapPath(plugin, route.path);\n        route.path = pluginManager.mapRoute(plugin, route);\n\n        Emby.App.defineRoute(route, plugin.id);\n    }\n\n    function PluginManager() {\n\n        this.pluginsList = [];\n    }\n\n    PluginManager.prototype.loadPlugin = function(pluginSpec) {\n\n        var instance = this;\n\n        function registerPlugin(plugin) {\n            instance.register(plugin);\n\n            if (plugin.getRoutes) {\n                plugin.getRoutes().forEach(function (route) {\n                    definePluginRoute(instance, route, plugin);\n                });\n            }\n\n            if (plugin.type === 'skin') {\n\n                // translations won't be loaded for skins until needed\n                return Promise.resolve(plugin);\n            } else {\n                return new Promise((resolve, reject) => {\n                    loadStrings(plugin)\n                        .then(function () {\n                            resolve(plugin);\n                        })\n                        .catch(reject);\n                });\n            }\n        }\n\n        if (typeof pluginSpec === 'string') {\n            console.debug('Loading plugin (via deprecated requirejs method): ' + pluginSpec);\n\n            return new Promise(function (resolve, reject) {\n                require([pluginSpec], (pluginFactory) => {\n                    var plugin = pluginFactory.default ? new pluginFactory.default() : new pluginFactory();\n\n                    // See if it's already installed\n                    var existing = instance.pluginsList.filter(function (p) {\n                        return p.id === plugin.id;\n                    })[0];\n\n                    if (existing) {\n                        resolve(pluginSpec);\n                    }\n\n                    plugin.installUrl = pluginSpec;\n\n                    var separatorIndex = Math.max(pluginSpec.lastIndexOf('/'), pluginSpec.lastIndexOf('\\\\'));\n                    plugin.baseUrl = pluginSpec.substring(0, separatorIndex);\n\n                    var paths = {};\n                    paths[plugin.id] = plugin.baseUrl;\n\n                    requirejs.config({\n                        waitSeconds: 0,\n                        paths: paths\n                    });\n\n                    registerPlugin(plugin).then(resolve).catch(reject);\n                });\n            });\n        } else if (pluginSpec.then) {\n            return pluginSpec.then(pluginBuilder => {\n                return pluginBuilder();\n            }).then(plugin => {\n                console.debug(`Plugin loaded: ${plugin.id}`);\n                return registerPlugin(plugin);\n            });\n        } else {\n            const err = new Error('Plugins have to be a Promise that resolves to a plugin builder function or a requirejs urls (deprecated)');\n            console.error(err);\n            return Promise.reject(err);\n        }\n    };\n\n    // In lieu of automatic discovery, plugins will register dynamic objects\n    // Each object will have the following properties:\n    // name\n    // type (skin, screensaver, etc)\n    PluginManager.prototype.register = function (obj) {\n\n        this.pluginsList.push(obj);\n        events.trigger(this, 'registered', [obj]);\n    };\n\n    PluginManager.prototype.ofType = function (type) {\n\n        return this.pluginsList.filter(function (o) {\n            return o.type === type;\n        });\n    };\n\n    PluginManager.prototype.plugins = function () {\n        return this.pluginsList;\n    };\n\n    PluginManager.prototype.mapRoute = function (plugin, route) {\n\n        if (typeof plugin === 'string') {\n            plugin = this.pluginsList.filter(function (p) {\n                return (p.id || p.packageName) === plugin;\n            })[0];\n        }\n\n        route = route.path || route;\n\n        if (route.toLowerCase().indexOf('http') === 0) {\n            return route;\n        }\n\n        return '/plugins/' + plugin.id + '/' + route;\n    };\n\n    PluginManager.prototype.mapPath = function (plugin, path, addCacheParam) {\n\n        if (typeof plugin === 'string') {\n            plugin = this.pluginsList.filter(function (p) {\n                return (p.id || p.packageName) === plugin;\n            })[0];\n        }\n\n        var url = plugin.baseUrl + '/' + path;\n\n        if (addCacheParam) {\n            url += url.indexOf('?') === -1 ? '?' : '&';\n            url += 'v=' + cacheParam;\n        }\n\n        return url;\n    };\n\n    return new PluginManager();\n});\n"]}