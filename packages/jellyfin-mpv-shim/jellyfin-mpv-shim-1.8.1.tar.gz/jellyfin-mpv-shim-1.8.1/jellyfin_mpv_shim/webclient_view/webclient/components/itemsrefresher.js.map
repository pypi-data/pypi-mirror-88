{"version":3,"sources":["components/itemsrefresher.js"],"names":["define","playbackManager","serverNotifications","events","onUserDataChanged","e","apiClient","userData","eventsToMonitor","getEventsToMonitor","this","indexOf","notifyRefreshNeeded","instance","options","monitor","monitorEvents","split","onTimerCreated","data","onSeriesTimerCreated","onTimerCancelled","onSeriesTimerCancelled","onLibraryChanged","itemsAdded","ItemsAdded","itemsRemoved","ItemsRemoved","length","parentId","foldersAddedTo","FoldersAddedTo","foldersRemovedFrom","FoldersRemovedFrom","collectionFolders","CollectionFolders","onPlaybackStopped","stopInfo","state","NowPlayingItem","MediaType","addNotificationEvent","name","handler","owner","localHandler","bind","on","removeNotificationEvent","off","ItemsRefresher","clearRefreshInterval","isPausing","refreshInterval","clearInterval","refreshIntervalEndTime","resetRefreshInterval","intervalMs","refreshIntervalMs","setInterval","Date","getTime","onDataFetched","result","afterRefresh","prototype","pause","paused","resume","remainingMs","needsRefresh","refresh","refreshItems","Promise","resolve","fetchData","then","isInForeground","timeout","refreshTimeout","clearTimeout","setTimeout","destroy"],"mappings":"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","file":"itemsrefresher.js","sourcesContent":["define(['playbackManager', 'serverNotifications', 'events'], function (playbackManager, serverNotifications, events) {\n    'use strict';\n\n    function onUserDataChanged(e, apiClient, userData) {\n\n        var instance = this;\n\n        var eventsToMonitor = getEventsToMonitor(instance);\n\n        // TODO: Check user data change reason?\n        if (eventsToMonitor.indexOf('markfavorite') !== -1) {\n\n            instance.notifyRefreshNeeded();\n        } else if (eventsToMonitor.indexOf('markplayed') !== -1) {\n\n            instance.notifyRefreshNeeded();\n        }\n    }\n\n    function getEventsToMonitor(instance) {\n\n        var options = instance.options;\n        var monitor = options ? options.monitorEvents : null;\n        if (monitor) {\n            return monitor.split(',');\n        }\n\n        return [];\n    }\n\n    function onTimerCreated(e, apiClient, data) {\n\n        var instance = this;\n\n        if (getEventsToMonitor(instance).indexOf('timers') !== -1) {\n\n            instance.notifyRefreshNeeded();\n            return;\n        }\n    }\n\n    function onSeriesTimerCreated(e, apiClient, data) {\n\n        var instance = this;\n        if (getEventsToMonitor(instance).indexOf('seriestimers') !== -1) {\n\n            instance.notifyRefreshNeeded();\n            return;\n        }\n    }\n\n    function onTimerCancelled(e, apiClient, data) {\n        var instance = this;\n\n        if (getEventsToMonitor(instance).indexOf('timers') !== -1) {\n\n            instance.notifyRefreshNeeded();\n            return;\n        }\n    }\n\n    function onSeriesTimerCancelled(e, apiClient, data) {\n\n        var instance = this;\n        if (getEventsToMonitor(instance).indexOf('seriestimers') !== -1) {\n\n            instance.notifyRefreshNeeded();\n            return;\n        }\n    }\n\n    function onLibraryChanged(e, apiClient, data) {\n\n        var instance = this;\n        var eventsToMonitor = getEventsToMonitor(instance);\n        if (eventsToMonitor.indexOf('seriestimers') !== -1 || eventsToMonitor.indexOf('timers') !== -1) {\n\n            // yes this is an assumption\n            return;\n        }\n\n        var itemsAdded = data.ItemsAdded || [];\n        var itemsRemoved = data.ItemsRemoved || [];\n        if (!itemsAdded.length && !itemsRemoved.length) {\n            return;\n        }\n\n        var options = instance.options || {};\n        var parentId = options.parentId;\n        if (parentId) {\n            var foldersAddedTo = data.FoldersAddedTo || [];\n            var foldersRemovedFrom = data.FoldersRemovedFrom || [];\n            var collectionFolders = data.CollectionFolders || [];\n\n            if (foldersAddedTo.indexOf(parentId) === -1 && foldersRemovedFrom.indexOf(parentId) === -1 && collectionFolders.indexOf(parentId) === -1) {\n                return;\n            }\n        }\n\n        instance.notifyRefreshNeeded();\n    }\n\n    function onPlaybackStopped(e, stopInfo) {\n\n        var instance = this;\n\n        var state = stopInfo.state;\n\n        var eventsToMonitor = getEventsToMonitor(instance);\n        if (state.NowPlayingItem && state.NowPlayingItem.MediaType === 'Video') {\n\n            if (eventsToMonitor.indexOf('videoplayback') !== -1) {\n\n                instance.notifyRefreshNeeded(true);\n                return;\n            }\n        } else if (state.NowPlayingItem && state.NowPlayingItem.MediaType === 'Audio') {\n\n            if (eventsToMonitor.indexOf('audioplayback') !== -1) {\n\n                instance.notifyRefreshNeeded(true);\n                return;\n            }\n        }\n    }\n\n    function addNotificationEvent(instance, name, handler, owner) {\n\n        var localHandler = handler.bind(instance);\n        owner = owner || serverNotifications;\n        events.on(owner, name, localHandler);\n        instance['event_' + name] = localHandler;\n    }\n\n    function removeNotificationEvent(instance, name, owner) {\n\n        var handler = instance['event_' + name];\n        if (handler) {\n            owner = owner || serverNotifications;\n            events.off(owner, name, handler);\n            instance['event_' + name] = null;\n        }\n    }\n\n    function ItemsRefresher(options) {\n\n        this.options = options || {};\n\n        addNotificationEvent(this, 'UserDataChanged', onUserDataChanged);\n        addNotificationEvent(this, 'TimerCreated', onTimerCreated);\n        addNotificationEvent(this, 'SeriesTimerCreated', onSeriesTimerCreated);\n        addNotificationEvent(this, 'TimerCancelled', onTimerCancelled);\n        addNotificationEvent(this, 'SeriesTimerCancelled', onSeriesTimerCancelled);\n        addNotificationEvent(this, 'LibraryChanged', onLibraryChanged);\n        addNotificationEvent(this, 'playbackstop', onPlaybackStopped, playbackManager);\n    }\n\n    ItemsRefresher.prototype.pause = function () {\n\n        clearRefreshInterval(this, true);\n\n        this.paused = true;\n    };\n\n    ItemsRefresher.prototype.resume = function (options) {\n\n        this.paused = false;\n\n        var refreshIntervalEndTime = this.refreshIntervalEndTime;\n        if (refreshIntervalEndTime) {\n\n            var remainingMs = refreshIntervalEndTime - new Date().getTime();\n            if (remainingMs > 0 && !this.needsRefresh) {\n\n                resetRefreshInterval(this, remainingMs);\n\n            } else {\n                this.needsRefresh = true;\n                this.refreshIntervalEndTime = null;\n            }\n        }\n\n        if (this.needsRefresh || (options && options.refresh)) {\n            return this.refreshItems();\n        }\n\n        return Promise.resolve();\n    };\n\n    ItemsRefresher.prototype.refreshItems = function () {\n\n        if (!this.fetchData) {\n            return Promise.resolve();\n        }\n\n        if (this.paused) {\n            this.needsRefresh = true;\n            return Promise.resolve();\n        }\n\n        this.needsRefresh = false;\n\n        return this.fetchData().then(onDataFetched.bind(this));\n    };\n\n    ItemsRefresher.prototype.notifyRefreshNeeded = function (isInForeground) {\n\n        if (this.paused) {\n            this.needsRefresh = true;\n            return;\n        }\n\n        var timeout = this.refreshTimeout;\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n\n        if (isInForeground === true) {\n            this.refreshItems();\n        } else {\n            this.refreshTimeout = setTimeout(this.refreshItems.bind(this), 10000);\n        }\n    };\n\n    function clearRefreshInterval(instance, isPausing) {\n\n        if (instance.refreshInterval) {\n\n            clearInterval(instance.refreshInterval);\n            instance.refreshInterval = null;\n\n            if (!isPausing) {\n                instance.refreshIntervalEndTime = null;\n            }\n        }\n    }\n\n    function resetRefreshInterval(instance, intervalMs) {\n\n        clearRefreshInterval(instance);\n\n        if (!intervalMs) {\n            var options = instance.options;\n            if (options) {\n                intervalMs = options.refreshIntervalMs;\n            }\n        }\n\n        if (intervalMs) {\n            instance.refreshInterval = setInterval(instance.notifyRefreshNeeded.bind(instance), intervalMs);\n            instance.refreshIntervalEndTime = new Date().getTime() + intervalMs;\n        }\n    }\n\n    function onDataFetched(result) {\n\n        resetRefreshInterval(this);\n\n        if (this.afterRefresh) {\n            this.afterRefresh(result);\n        }\n    }\n\n    ItemsRefresher.prototype.destroy = function () {\n\n        clearRefreshInterval(this);\n\n        removeNotificationEvent(this, 'UserDataChanged');\n        removeNotificationEvent(this, 'TimerCreated');\n        removeNotificationEvent(this, 'SeriesTimerCreated');\n        removeNotificationEvent(this, 'TimerCancelled');\n        removeNotificationEvent(this, 'SeriesTimerCancelled');\n        removeNotificationEvent(this, 'LibraryChanged');\n        removeNotificationEvent(this, 'playbackstop', playbackManager);\n\n        this.fetchData = null;\n        this.options = null;\n    };\n\n    return ItemsRefresher;\n});\n"]}