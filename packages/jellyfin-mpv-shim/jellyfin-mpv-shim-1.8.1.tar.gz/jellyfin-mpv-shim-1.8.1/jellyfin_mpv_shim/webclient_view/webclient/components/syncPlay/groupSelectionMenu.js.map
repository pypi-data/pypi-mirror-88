{"version":3,"sources":["components/syncPlay/groupSelectionMenu.js"],"names":["define","_exports","_events","_connectionManager","_playbackManager","_syncPlayManager","_loading","_toast","_actionsheet","_globalize","_playbackPermissionManager","_interopRequireDefault","obj","__esModule","default","getActivePlayerId","info","playbackManager","getPlayerInfo","id","showNewJoinGroupSelection","button","user","apiClient","playingItemId","inSession","policy","localUser","Policy","playState","getPlayerState","NowPlayingItem","Id","console","debug","error","getSyncPlayGroups","then","response","json","groups","menuItems","map","group","name","PlayingItemName","icon","GroupId","selected","secondaryText","Participants","join","SyncPlayAccess","push","globalize","translate","length","text","loading","hide","menuOptions","title","items","positionTo","resolveOnClick","border","actionsheet","show","createSyncPlayGroup","joinSyncPlayGroup","PlayingItemId","catch","Object","defineProperty","value","playbackPermissionManager","check","connectionManager","currentApiClient","syncPlayEnabled","showLeaveGroupSelection","syncPlayManager","signalError","leaveSyncPlayGroup","events","on","e","enabled"],"mappings":"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","file":"groupSelectionMenu.js","sourcesContent":["import events from 'events';\nimport connectionManager from 'connectionManager';\nimport playbackManager from 'playbackManager';\nimport syncPlayManager from 'syncPlayManager';\nimport loading from 'loading';\nimport toast from 'toast';\nimport actionsheet from 'actionsheet';\nimport globalize from 'globalize';\nimport playbackPermissionManager from 'playbackPermissionManager';\n\n/**\n * Gets active player id.\n * @returns {string} The player's id.\n */\nfunction getActivePlayerId () {\n    var info = playbackManager.getPlayerInfo();\n    return info ? info.id : null;\n}\n\n/**\n * Used when user needs to join a group.\n * @param {HTMLElement} button - Element where to place the menu.\n * @param {Object} user - Current user.\n * @param {Object} apiClient - ApiClient.\n */\nfunction showNewJoinGroupSelection (button, user, apiClient) {\n    const sessionId = getActivePlayerId() || 'none';\n    const inSession = sessionId !== 'none';\n    const policy = user.localUser ? user.localUser.Policy : {};\n    let playingItemId;\n    try {\n        const playState = playbackManager.getPlayerState();\n        playingItemId = playState.NowPlayingItem.Id;\n        console.debug('Item', playingItemId, 'is currently playing.');\n    } catch (error) {\n        playingItemId = '';\n        console.debug('No item is currently playing.');\n    }\n\n    apiClient.getSyncPlayGroups().then(function (response) {\n        response.json().then(function (groups) {\n            var menuItems = groups.map(function (group) {\n                return {\n                    name: group.PlayingItemName,\n                    icon: 'group',\n                    id: group.GroupId,\n                    selected: false,\n                    secondaryText: group.Participants.join(', ')\n                };\n            });\n\n            if (inSession && policy.SyncPlayAccess === 'CreateAndJoinGroups') {\n                menuItems.push({\n                    name: globalize.translate('LabelSyncPlayNewGroup'),\n                    icon: 'add',\n                    id: 'new-group',\n                    selected: true,\n                    secondaryText: globalize.translate('LabelSyncPlayNewGroupDescription')\n                });\n            }\n\n            if (menuItems.length === 0) {\n                if (inSession && policy.SyncPlayAccess === 'JoinGroups') {\n                    toast({\n                        text: globalize.translate('MessageSyncPlayCreateGroupDenied')\n                    });\n                } else {\n                    toast({\n                        text: globalize.translate('MessageSyncPlayNoGroupsAvailable')\n                    });\n                }\n                loading.hide();\n                return;\n            }\n\n            var menuOptions = {\n                title: globalize.translate('HeaderSyncPlaySelectGroup'),\n                items: menuItems,\n                positionTo: button,\n                resolveOnClick: true,\n                border: true\n            };\n\n            actionsheet.show(menuOptions).then(function (id) {\n                if (id == 'new-group') {\n                    apiClient.createSyncPlayGroup();\n                } else if (id) {\n                    apiClient.joinSyncPlayGroup({\n                        GroupId: id,\n                        PlayingItemId: playingItemId\n                    });\n                }\n            }).catch((error) => {\n                console.error('SyncPlay: unexpected error listing groups:', error);\n            });\n\n            loading.hide();\n        });\n    }).catch(function (error) {\n        console.error(error);\n        loading.hide();\n        toast({\n            text: globalize.translate('MessageSyncPlayErrorAccessingGroups')\n        });\n    });\n}\n\n/**\n * Used when user has joined a group.\n * @param {HTMLElement} button - Element where to place the menu.\n * @param {Object} user - Current user.\n * @param {Object} apiClient - ApiClient.\n */\nfunction showLeaveGroupSelection (button, user, apiClient) {\n    const sessionId = getActivePlayerId();\n    if (!sessionId) {\n        syncPlayManager.signalError();\n        toast({\n            text: globalize.translate('MessageSyncPlayErrorNoActivePlayer')\n        });\n        showNewJoinGroupSelection(button, user, apiClient);\n        return;\n    }\n\n    const menuItems = [{\n        name: globalize.translate('LabelSyncPlayLeaveGroup'),\n        icon: 'meeting_room',\n        id: 'leave-group',\n        selected: true,\n        secondaryText: globalize.translate('LabelSyncPlayLeaveGroupDescription')\n    }];\n\n    var menuOptions = {\n        title: globalize.translate('HeaderSyncPlayEnabled'),\n        items: menuItems,\n        positionTo: button,\n        resolveOnClick: true,\n        border: true\n    };\n\n    actionsheet.show(menuOptions).then(function (id) {\n        if (id == 'leave-group') {\n            apiClient.leaveSyncPlayGroup();\n        }\n    }).catch((error) => {\n        console.error('SyncPlay: unexpected error showing group menu:', error);\n    });\n\n    loading.hide();\n}\n\n// Register to SyncPlay events\nlet syncPlayEnabled = false;\nevents.on(syncPlayManager, 'enabled', function (e, enabled) {\n    syncPlayEnabled = enabled;\n});\n\n/**\n * Shows a menu to handle SyncPlay groups.\n * @param {HTMLElement} button - Element where to place the menu.\n */\nexport function show (button) {\n    loading.show();\n\n    // TODO: should feature be disabled if playback permission is missing?\n    playbackPermissionManager.check().then(() => {\n        console.debug('Playback is allowed.');\n    }).catch((error) => {\n        console.error('Playback not allowed!', error);\n        toast({\n            text: globalize.translate('MessageSyncPlayPlaybackPermissionRequired')\n        });\n    });\n\n    const apiClient = connectionManager.currentApiClient();\n    connectionManager.user(apiClient).then((user) => {\n        if (syncPlayEnabled) {\n            showLeaveGroupSelection(button, user, apiClient);\n        } else {\n            showNewJoinGroupSelection(button, user, apiClient);\n        }\n    }).catch((error) => {\n        console.error(error);\n        loading.hide();\n        toast({\n            text: globalize.translate('MessageSyncPlayNoGroupsAvailable')\n        });\n    });\n}\n"]}