{"version":3,"sources":["components/recordingcreator/recordingfields.js"],"names":["define","globalize","connectionManager","serverNotifications","require","loading","appHost","dom","recordingHelper","events","fetchData","instance","options","apiClient","getApiClient","serverId","parent","querySelector","classList","remove","getLiveTvProgram","programId","getCurrentUserId","then","program","TimerId","Status","SeriesTimerId","loadData","IsSeries","add","innerHTML","translate","onTimerChangedExternally","e","data","this","refresh","Id","ProgramId","onSeriesTimerChangedExternally","RecordingEditor","embed","timerChangedHandler","bind","on","seriesTimerChangedHandler","onManageRecordingClick","self","recordingEditor","show","enableCancel","changed","onManageSeriesRecordingClick","seriesRecordingEditor","onRecordChange","isChecked","parentWithTag","target","contains","hasEnabledTimer","createRecording","trigger","hide","cancelTimer","onRecordSeriesChange","cancelLiveTvSeriesTimer","sendToast","msg","toast","changeRecordingToSeries","prototype","Promise","resolve","reject","template","context","translateDocument","addEventListener","hasChanged","destroy","off"],"mappings":"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","file":"recordingfields.js","sourcesContent":["define(['globalize', 'connectionManager', 'serverNotifications', 'require', 'loading', 'apphost', 'dom', 'recordingHelper', 'events', 'paper-icon-button-light', 'emby-button', 'css!./recordingfields', 'flexStyles'], function (globalize, connectionManager, serverNotifications, require, loading, appHost, dom, recordingHelper, events) {\n    'use strict';\n\n    function loadData(parent, program, apiClient) {\n        if (program.IsSeries) {\n            parent.querySelector('.recordSeriesContainer').classList.remove('hide');\n        } else {\n            parent.querySelector('.recordSeriesContainer').classList.add('hide');\n        }\n\n        if (program.SeriesTimerId) {\n            parent.querySelector('.btnManageSeriesRecording').classList.remove('hide');\n            parent.querySelector('.seriesRecordingButton .recordingIcon').classList.add('recordingIcon-active');\n            parent.querySelector('.seriesRecordingButton .buttonText').innerHTML = globalize.translate('CancelSeries');\n        } else {\n            parent.querySelector('.btnManageSeriesRecording').classList.add('hide');\n            parent.querySelector('.seriesRecordingButton .recordingIcon').classList.remove('recordingIcon-active');\n            parent.querySelector('.seriesRecordingButton .buttonText').innerHTML = globalize.translate('RecordSeries');\n        }\n\n        if (program.TimerId && program.Status !== 'Cancelled') {\n            parent.querySelector('.btnManageRecording').classList.remove('hide');\n            parent.querySelector('.singleRecordingButton .recordingIcon').classList.add('recordingIcon-active');\n            if (program.Status === 'InProgress') {\n                parent.querySelector('.singleRecordingButton .buttonText').innerHTML = globalize.translate('StopRecording');\n            } else {\n                parent.querySelector('.singleRecordingButton .buttonText').innerHTML = globalize.translate('DoNotRecord');\n            }\n        } else {\n            parent.querySelector('.btnManageRecording').classList.add('hide');\n            parent.querySelector('.singleRecordingButton .recordingIcon').classList.remove('recordingIcon-active');\n            parent.querySelector('.singleRecordingButton .buttonText').innerHTML = globalize.translate('Record');\n        }\n    }\n\n    function fetchData(instance) {\n\n        var options = instance.options;\n        var apiClient = connectionManager.getApiClient(options.serverId);\n\n        options.parent.querySelector('.recordingFields').classList.remove('hide');\n        return apiClient.getLiveTvProgram(options.programId, apiClient.getCurrentUserId()).then(function (program) {\n            instance.TimerId = program.TimerId;\n            instance.Status = program.Status;\n            instance.SeriesTimerId = program.SeriesTimerId;\n            loadData(options.parent, program, apiClient);\n        });\n    }\n\n    function onTimerChangedExternally(e, apiClient, data) {\n        var options = this.options;\n        var refresh = false;\n\n        if (data.Id) {\n            if (this.TimerId === data.Id) {\n                refresh = true;\n            }\n        }\n        if (data.ProgramId && options) {\n            if (options.programId === data.ProgramId) {\n                refresh = true;\n            }\n        }\n\n        if (refresh) {\n            this.refresh();\n        }\n    }\n\n    function onSeriesTimerChangedExternally(e, apiClient, data) {\n        var options = this.options;\n        var refresh = false;\n\n        if (data.Id) {\n            if (this.SeriesTimerId === data.Id) {\n                refresh = true;\n            }\n        }\n        if (data.ProgramId && options) {\n            if (options.programId === data.ProgramId) {\n                refresh = true;\n            }\n        }\n\n        if (refresh) {\n            this.refresh();\n        }\n    }\n\n    function RecordingEditor(options) {\n        this.options = options;\n        this.embed();\n\n        var timerChangedHandler = onTimerChangedExternally.bind(this);\n        this.timerChangedHandler = timerChangedHandler;\n\n        events.on(serverNotifications, 'TimerCreated', timerChangedHandler);\n        events.on(serverNotifications, 'TimerCancelled', timerChangedHandler);\n\n        var seriesTimerChangedHandler = onSeriesTimerChangedExternally.bind(this);\n        this.seriesTimerChangedHandler = seriesTimerChangedHandler;\n\n        events.on(serverNotifications, 'SeriesTimerCreated', seriesTimerChangedHandler);\n        events.on(serverNotifications, 'SeriesTimerCancelled', seriesTimerChangedHandler);\n    }\n\n    function onManageRecordingClick(e) {\n        var options = this.options;\n        if (!this.TimerId || this.Status === 'Cancelled') {\n            return;\n        }\n\n        var self = this;\n        require(['recordingEditor'], function (recordingEditor) {\n            recordingEditor.show(self.TimerId, options.serverId, {\n                enableCancel: false\n            }).then(function () {\n                self.changed = true;\n            });\n        });\n    }\n\n    function onManageSeriesRecordingClick(e) {\n\n        var options = this.options;\n\n        if (!this.SeriesTimerId) {\n            return;\n        }\n\n        var self = this;\n\n        require(['seriesRecordingEditor'], function (seriesRecordingEditor) {\n\n            seriesRecordingEditor.show(self.SeriesTimerId, options.serverId, {\n\n                enableCancel: false\n\n            }).then(function () {\n                self.changed = true;\n            });\n        });\n    }\n\n    function onRecordChange(e) {\n\n        this.changed = true;\n\n        var self = this;\n        var options = this.options;\n        var apiClient = connectionManager.getApiClient(options.serverId);\n\n        var button = dom.parentWithTag(e.target, 'BUTTON');\n        var isChecked = !button.querySelector('.material-icons').classList.contains('recordingIcon-active');\n\n        var hasEnabledTimer = this.TimerId && this.Status !== 'Cancelled';\n\n        if (isChecked) {\n            if (!hasEnabledTimer) {\n                loading.show();\n                recordingHelper.createRecording(apiClient, options.programId, false).then(function () {\n                    events.trigger(self, 'recordingchanged');\n                    fetchData(self);\n                    loading.hide();\n                });\n            }\n        } else {\n            if (hasEnabledTimer) {\n                loading.show();\n                recordingHelper.cancelTimer(apiClient, this.TimerId, true).then(function () {\n                    events.trigger(self, 'recordingchanged');\n                    fetchData(self);\n                    loading.hide();\n                });\n            }\n        }\n    }\n\n    function sendToast(msg) {\n        require(['toast'], function (toast) {\n            toast(msg);\n        });\n    }\n\n    function onRecordSeriesChange(e) {\n\n        this.changed = true;\n\n        var self = this;\n        var options = this.options;\n        var apiClient = connectionManager.getApiClient(options.serverId);\n\n        var button = dom.parentWithTag(e.target, 'BUTTON');\n        var isChecked = !button.querySelector('.material-icons').classList.contains('recordingIcon-active');\n\n        if (isChecked) {\n            options.parent.querySelector('.recordSeriesContainer').classList.remove('hide');\n            if (!this.SeriesTimerId) {\n                var promise = this.TimerId ?\n                    recordingHelper.changeRecordingToSeries(apiClient, this.TimerId, options.programId) :\n                    recordingHelper.createRecording(apiClient, options.programId, true);\n                promise.then(function () {\n                    fetchData(self);\n                });\n            }\n        } else {\n            if (this.SeriesTimerId) {\n                apiClient.cancelLiveTvSeriesTimer(this.SeriesTimerId).then(function () {\n                    sendToast(globalize.translate('RecordingCancelled'));\n                    fetchData(self);\n                });\n            }\n        }\n    }\n\n    RecordingEditor.prototype.embed = function () {\n        var self = this;\n        return new Promise(function (resolve, reject) {\n            require(['text!./recordingfields.template.html'], function (template) {\n                var options = self.options;\n                var context = options.parent;\n                context.innerHTML = globalize.translateDocument(template, 'core');\n\n                context.querySelector('.singleRecordingButton').addEventListener('click', onRecordChange.bind(self));\n                context.querySelector('.seriesRecordingButton').addEventListener('click', onRecordSeriesChange.bind(self));\n                context.querySelector('.btnManageRecording').addEventListener('click', onManageRecordingClick.bind(self));\n                context.querySelector('.btnManageSeriesRecording').addEventListener('click', onManageSeriesRecordingClick.bind(self));\n\n                fetchData(self).then(resolve);\n            });\n        });\n    };\n\n    RecordingEditor.prototype.hasChanged = function () {\n        return this.changed;\n    };\n\n    RecordingEditor.prototype.refresh = function () {\n        fetchData(this);\n    };\n\n    RecordingEditor.prototype.destroy = function () {\n        var timerChangedHandler = this.timerChangedHandler;\n        this.timerChangedHandler = null;\n\n        events.off(serverNotifications, 'TimerCreated', timerChangedHandler);\n        events.off(serverNotifications, 'TimerCancelled', timerChangedHandler);\n\n        var seriesTimerChangedHandler = this.seriesTimerChangedHandler;\n        this.seriesTimerChangedHandler = null;\n\n        events.off(serverNotifications, 'SeriesTimerCreated', seriesTimerChangedHandler);\n        events.off(serverNotifications, 'SeriesTimerCancelled', seriesTimerChangedHandler);\n    };\n\n    return RecordingEditor;\n});\n"]}