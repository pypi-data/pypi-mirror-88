{"version":3,"sources":["components/playerstats/playerstats.js"],"names":["define","events","globalize","playbackManager","connectionManager","syncPlayManager","playMethodHelper","layoutManager","serverNotifications","onCloseButtonClick","this","enabled","translateReason","reason","translate","getTranscodingStats","session","player","displayPlayMethod","videoCodec","audioCodec","totalBitrate","sessionStats","TranscodingInfo","VideoCodec","AudioCodec","Bitrate","AudioChannels","push","label","value","IsVideoDirect","toUpperCase","IsAudioDirect","getDisplayBitrate","CompletionPercentage","toFixed","Framerate","TranscodeReasons","length","map","join","bitrate","Math","floor","getMediaSourceStats","size","mediaSource","currentMediaSource","mediaFileSize","Size","Container","parseFloat","videoStream","MediaStreams","filter","s","Type","Codec","audioStreamIndex","getAudioStreamIndex","audioStream","audioTracks","Index","audioChannels","Channels","videoInfos","Profile","BitRate","audioInfos","SampleRate","BitDepth","getStats","instance","statsPromise","Promise","resolve","sessionPromise","getSession","Date","getTime","lastSessionTime","lastSession","apiClient","getApiClient","currentItem","ServerId","getSessions","deviceId","then","sessions","all","responses","playerStats","categories","getDisplayPlayMethod","baseCategory","stats","name","unshift","i","category","type","syncStats","isSyncPlayEnabled","isMinServerVersion","TimeOffset","PlaybackDiff","SyncMethod","bindEvents","localOnTimeUpdate","renderPlayerStats","now","lastRender","elem","element","renderStats","querySelector","innerHTML","categoryHtml","subText","stat","onTimeUpdate","on","unbindEvents","off","PlayerStats","options","init","button","parent","document","createElement","classList","add","tv","contentClass","addEventListener","bind","body","appendChild","prototype","_enabled","remove","toggle","destroy","parentNode","removeChild"],"mappings":"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","file":"playerstats.js","sourcesContent":["define(['events', 'globalize', 'playbackManager', 'connectionManager', 'syncPlayManager', 'playMethodHelper', 'layoutManager', 'serverNotifications', 'paper-icon-button-light', 'css!./playerstats'], function (events, globalize, playbackManager, connectionManager, syncPlayManager, playMethodHelper, layoutManager, serverNotifications) {\n    'use strict';\n\n    function init(instance) {\n\n        var parent = document.createElement('div');\n\n        parent.classList.add('playerStats');\n\n        if (layoutManager.tv) {\n            parent.classList.add('playerStats-tv');\n        }\n\n        parent.classList.add('hide');\n\n        var button;\n\n        if (layoutManager.tv) {\n            button = '';\n        } else {\n            button = '<button type=\"button\" is=\"paper-icon-button-light\" class=\"playerStats-closeButton\"><span class=\"material-icons close\"></span></button>';\n        }\n\n        var contentClass = layoutManager.tv ? 'playerStats-content playerStats-content-tv' : 'playerStats-content';\n\n        parent.innerHTML = '<div class=\"' + contentClass + '\">' + button + '<div class=\"playerStats-stats\"></div></div>';\n\n        button = parent.querySelector('.playerStats-closeButton');\n\n        if (button) {\n            button.addEventListener('click', onCloseButtonClick.bind(instance));\n        }\n\n        document.body.appendChild(parent);\n\n        instance.element = parent;\n    }\n\n    function onCloseButtonClick() {\n        this.enabled(false);\n    }\n\n    function renderStats(elem, categories) {\n\n        elem.querySelector('.playerStats-stats').innerHTML = categories.map(function (category) {\n\n            var categoryHtml = '';\n\n            var stats = category.stats;\n\n            if (stats.length && category.name) {\n                categoryHtml += '<div class=\"playerStats-stat playerStats-stat-header\">';\n\n                categoryHtml += '<div class=\"playerStats-stat-label\">';\n                categoryHtml += category.name;\n                categoryHtml += '</div>';\n\n                categoryHtml += '<div class=\"playerStats-stat-value\">';\n                categoryHtml += category.subText || '';\n                categoryHtml += '</div>';\n\n                categoryHtml += '</div>';\n            }\n\n            for (var i = 0, length = stats.length; i < length; i++) {\n\n                categoryHtml += '<div class=\"playerStats-stat\">';\n\n                var stat = stats[i];\n\n                categoryHtml += '<div class=\"playerStats-stat-label\">';\n                categoryHtml += stat.label;\n                categoryHtml += '</div>';\n\n                categoryHtml += '<div class=\"playerStats-stat-value\">';\n                categoryHtml += stat.value;\n                categoryHtml += '</div>';\n\n                categoryHtml += '</div>';\n            }\n\n            return categoryHtml;\n\n        }).join('');\n    }\n\n    function getSession(instance, player) {\n\n        var now = new Date().getTime();\n\n        if ((now - (instance.lastSessionTime || 0)) < 10000) {\n            return Promise.resolve(instance.lastSession);\n        }\n\n        var apiClient = connectionManager.getApiClient(playbackManager.currentItem(player).ServerId);\n\n        return apiClient.getSessions({\n            deviceId: apiClient.deviceId()\n        }).then(function (sessions) {\n\n            instance.lastSession = sessions[0] || {};\n            instance.lastSessionTime = new Date().getTime();\n\n            return Promise.resolve(instance.lastSession);\n\n        }, function () {\n            return Promise.resolve({});\n        });\n    }\n\n    function translateReason(reason) {\n\n        return globalize.translate('' + reason);\n    }\n\n    function getTranscodingStats(session, player, displayPlayMethod) {\n        var sessionStats = [];\n\n        var videoCodec;\n        var audioCodec;\n        var totalBitrate;\n        var audioChannels;\n\n        if (session.TranscodingInfo) {\n\n            videoCodec = session.TranscodingInfo.VideoCodec;\n            audioCodec = session.TranscodingInfo.AudioCodec;\n            totalBitrate = session.TranscodingInfo.Bitrate;\n            audioChannels = session.TranscodingInfo.AudioChannels;\n        }\n\n        if (videoCodec) {\n\n            sessionStats.push({\n                label: globalize.translate('LabelVideoCodec'),\n                value: session.TranscodingInfo.IsVideoDirect ? (videoCodec.toUpperCase() + ' (direct)') : videoCodec.toUpperCase()\n            });\n        }\n\n        if (audioCodec) {\n\n            sessionStats.push({\n                label: globalize.translate('LabelAudioCodec'),\n                value: session.TranscodingInfo.IsAudioDirect ? (audioCodec.toUpperCase() + ' (direct)') : audioCodec.toUpperCase()\n            });\n        }\n\n        //if (audioChannels) {\n\n        //    sessionStats.push({\n        //        label: 'Audio channels:',\n        //        value: audioChannels\n        //    });\n        //}\n\n        if (displayPlayMethod === 'Transcode') {\n            if (totalBitrate) {\n\n                sessionStats.push({\n                    label: globalize.translate('LabelBitrate'),\n                    value: getDisplayBitrate(totalBitrate)\n                });\n            }\n            if (session.TranscodingInfo.CompletionPercentage) {\n\n                sessionStats.push({\n                    label: globalize.translate('LabelTranscodingProgress'),\n                    value: session.TranscodingInfo.CompletionPercentage.toFixed(1) + '%'\n                });\n            }\n            if (session.TranscodingInfo.Framerate) {\n\n                sessionStats.push({\n                    label: globalize.translate('LabelTranscodingFramerate'),\n                    value: session.TranscodingInfo.Framerate + ' fps'\n                });\n            }\n            if (session.TranscodingInfo.TranscodeReasons && session.TranscodingInfo.TranscodeReasons.length) {\n\n                sessionStats.push({\n                    label: globalize.translate('LabelReasonForTranscoding'),\n                    value: session.TranscodingInfo.TranscodeReasons.map(translateReason).join('<br/>')\n                });\n            }\n        }\n\n        return sessionStats;\n    }\n\n    function getDisplayBitrate(bitrate) {\n\n        if (bitrate > 1000000) {\n            return (bitrate / 1000000).toFixed(1) + ' Mbps';\n        } else {\n            return Math.floor(bitrate / 1000) + ' kbps';\n        }\n    }\n\n    function getReadableSize(size) {\n        if (size >= 1073741824) {\n            return parseFloat((size / 1073741824).toFixed(1)) + ' GiB';\n        } else if (size >= 1048576) {\n            return parseFloat((size / 1048576).toFixed(1)) + ' MiB';\n        } else {\n            return Math.floor(size / 1024) + ' KiB';\n        }\n    }\n\n    function getMediaSourceStats(session, player, displayPlayMethod) {\n\n        var sessionStats = [];\n\n        var mediaSource = playbackManager.currentMediaSource(player) || {};\n        var totalBitrate = mediaSource.Bitrate;\n        var mediaFileSize = mediaSource.Size;\n\n        if (mediaSource.Container) {\n            sessionStats.push({\n                label: globalize.translate('LabelProfileContainer'),\n                value: mediaSource.Container\n            });\n        }\n\n        if (mediaFileSize) {\n            sessionStats.push({\n                label: globalize.translate('LabelSize'),\n                value: getReadableSize(mediaFileSize)\n            });\n        }\n\n        if (totalBitrate) {\n\n            sessionStats.push({\n                label: globalize.translate('LabelBitrate'),\n                value: getDisplayBitrate(totalBitrate)\n            });\n        }\n\n        var mediaStreams = mediaSource.MediaStreams || [];\n        var videoStream = mediaStreams.filter(function (s) {\n\n            return s.Type === 'Video';\n\n        })[0] || {};\n\n        var videoCodec = videoStream.Codec;\n\n        var audioStreamIndex = playbackManager.getAudioStreamIndex(player);\n        var audioStream = playbackManager.audioTracks(player).filter(function (s) {\n\n            return s.Type === 'Audio' && s.Index === audioStreamIndex;\n\n        })[0] || {};\n\n        var audioCodec = audioStream.Codec;\n        var audioChannels = audioStream.Channels;\n\n        var videoInfos = [];\n\n        if (videoCodec) {\n            videoInfos.push(videoCodec.toUpperCase());\n        }\n\n        if (videoStream.Profile) {\n            videoInfos.push(videoStream.Profile);\n        }\n\n        if (videoInfos.length) {\n            sessionStats.push({\n                label: globalize.translate('LabelVideoCodec'),\n                value: videoInfos.join(' ')\n            });\n        }\n\n        if (videoStream.BitRate) {\n            sessionStats.push({\n                label: globalize.translate('LabelVideoBitrate'),\n                value: getDisplayBitrate(videoStream.BitRate)\n            });\n        }\n\n        var audioInfos = [];\n\n        if (audioCodec) {\n            audioInfos.push(audioCodec.toUpperCase());\n        }\n\n        if (audioStream.Profile) {\n            audioInfos.push(audioStream.Profile);\n        }\n\n        if (audioInfos.length) {\n            sessionStats.push({\n                label: globalize.translate('LabelAudioCodec'),\n                value: audioInfos.join(' ')\n            });\n        }\n\n        if (audioStream.BitRate) {\n            sessionStats.push({\n                label: globalize.translate('LabelAudioBitrate'),\n                value: getDisplayBitrate(audioStream.BitRate)\n            });\n        }\n\n        if (audioChannels) {\n            sessionStats.push({\n                label: globalize.translate('LabelAudioChannels'),\n                value: audioChannels\n            });\n        }\n\n        if (audioStream.SampleRate) {\n            sessionStats.push({\n                label: globalize.translate('LabelAudioSampleRate'),\n                value: audioStream.SampleRate + ' Hz'\n            });\n        }\n\n        if (audioStream.BitDepth) {\n            sessionStats.push({\n                label: globalize.translate('LabelAudioBitDepth'),\n                value: audioStream.BitDepth\n            });\n        }\n\n        return sessionStats;\n    }\n\n    function getSyncPlayStats() {\n        var syncStats = [];\n        var stats = syncPlayManager.getStats();\n\n        syncStats.push({\n            label: globalize.translate('LabelSyncPlayTimeOffset'),\n            value: stats.TimeOffset + globalize.translate('MillisecondsUnit')\n        });\n\n        syncStats.push({\n            label: globalize.translate('LabelSyncPlayPlaybackDiff'),\n            value: stats.PlaybackDiff + globalize.translate('MillisecondsUnit')\n        });\n\n        syncStats.push({\n            label: globalize.translate('LabelSyncPlaySyncMethod'),\n            value: stats.SyncMethod\n        });\n\n        return syncStats;\n    }\n\n    function getStats(instance, player) {\n\n        var statsPromise = player.getStats ? player.getStats() : Promise.resolve({});\n        var sessionPromise = getSession(instance, player);\n\n        return Promise.all([statsPromise, sessionPromise]).then(function (responses) {\n\n            var playerStatsResult = responses[0];\n            var playerStats = playerStatsResult.categories || [];\n            var session = responses[1];\n\n            var displayPlayMethod = playMethodHelper.getDisplayPlayMethod(session);\n\n            var baseCategory = {\n                stats: [],\n                name: 'Playback Info'\n            };\n\n            baseCategory.stats.unshift({\n                label: globalize.translate('LabelPlayMethod'),\n                value: displayPlayMethod\n            });\n\n            baseCategory.stats.unshift({\n                label: globalize.translate('LabelPlayer'),\n                value: player.name\n            });\n\n            var categories = [];\n\n            categories.push(baseCategory);\n\n            for (var i = 0, length = playerStats.length; i < length; i++) {\n\n                var category = playerStats[i];\n                if (category.type === 'audio') {\n                    category.name = 'Audio Info';\n                } else if (category.type === 'video') {\n                    category.name = 'Video Info';\n                }\n                categories.push(category);\n            }\n\n            if (session.TranscodingInfo) {\n\n                categories.push({\n                    stats: getTranscodingStats(session, player, displayPlayMethod),\n                    name: displayPlayMethod === 'Transcode' ? 'Transcoding Info' : 'Direct Stream Info'\n                });\n            }\n\n            categories.push({\n                stats: getMediaSourceStats(session, player),\n                name: 'Original Media Info'\n            });\n\n            var apiClient = connectionManager.getApiClient(playbackManager.currentItem(player).ServerId);\n            if (syncPlayManager.isSyncPlayEnabled() && apiClient.isMinServerVersion('10.6.0')) {\n                categories.push({\n                    stats: getSyncPlayStats(),\n                    name: 'SyncPlay Info'\n                });\n            }\n\n            return Promise.resolve(categories);\n        });\n    }\n\n    function renderPlayerStats(instance, player) {\n\n        var now = new Date().getTime();\n\n        if ((now - (instance.lastRender || 0)) < 700) {\n            return;\n        }\n\n        instance.lastRender = now;\n\n        getStats(instance, player).then(function (stats) {\n\n            var elem = instance.element;\n            if (!elem) {\n                return;\n            }\n\n            renderStats(elem, stats);\n        });\n    }\n\n    function bindEvents(instance, player) {\n\n        var localOnTimeUpdate = function () {\n            renderPlayerStats(instance, player);\n        };\n\n        instance.onTimeUpdate = localOnTimeUpdate;\n        events.on(player, 'timeupdate', localOnTimeUpdate);\n    }\n\n    function unbindEvents(instance, player) {\n\n        var localOnTimeUpdate = instance.onTimeUpdate;\n\n        if (localOnTimeUpdate) {\n            events.off(player, 'timeupdate', localOnTimeUpdate);\n        }\n    }\n\n    function PlayerStats(options) {\n\n        this.options = options;\n\n        init(this);\n\n        this.enabled(true);\n    }\n\n    PlayerStats.prototype.enabled = function (enabled) {\n\n        if (enabled == null) {\n            return this._enabled;\n        }\n\n        var options = this.options;\n\n        if (!options) {\n            return;\n        }\n\n        this._enabled = enabled;\n        if (enabled) {\n            this.element.classList.remove('hide');\n            bindEvents(this, options.player);\n        } else {\n            this.element.classList.add('hide');\n            unbindEvents(this, options.player);\n        }\n    };\n\n    PlayerStats.prototype.toggle = function () {\n        this.enabled(!this.enabled());\n    };\n\n    PlayerStats.prototype.destroy = function () {\n\n        var options = this.options;\n\n        if (options) {\n\n            this.options = null;\n            unbindEvents(this, options.player);\n        }\n\n        var elem = this.element;\n        if (elem) {\n            elem.parentNode.removeChild(elem);\n            this.element = null;\n        }\n    };\n\n    return PlayerStats;\n});\n"]}