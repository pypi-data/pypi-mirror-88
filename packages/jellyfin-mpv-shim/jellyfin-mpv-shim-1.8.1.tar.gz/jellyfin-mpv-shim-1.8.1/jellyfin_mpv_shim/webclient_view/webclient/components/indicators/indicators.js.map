{"version":3,"sources":["components/indicators/indicators.js"],"names":["define","_exports","_datetime","_itemHelper","_embyProgressbar","_indicators","_materialIcons","_interopRequireDefault","obj","__esModule","default","enableProgressIndicator","item","MediaType","Type","getProgressHtml","pct","options","containerClass","getProgressBarHtml","userData","UserData","PlayedPercentage","StartDate","EndDate","startDate","endDate","datetime","parseISO8601Date","getTime","err","console","error","Date","getAutoTimeProgressHtml","isRecording","start","end","foregroundClass","TimerId","enablePlayedIndicator","itemHelper","canMarkPlayed","getPlayedIndicatorHtml","UnplayedItemCount","Played","getChildCountIndicatorHtml","minCount","ChildCount","getTimerIndicator","status","SeriesTimerId","Status","getSyncIndicator","SyncPercent","getTypeIndicator","icon","Video","Folder","PhotoAlbum","Photo","getMissingIndicator","LocationType","PremiereDate","Object","defineProperty","value","_default"],"mappings":"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","file":"indicators.js","sourcesContent":["import datetime from 'datetime';\nimport itemHelper from 'itemHelper';\nimport 'emby-progressbar';\nimport 'css!./indicators.css';\nimport 'material-icons';\n\nexport function enableProgressIndicator(item) {\n    if (item.MediaType === 'Video' && item.Type !== 'TvChannel') {\n        return true;\n    }\n\n    if (item.Type === 'AudioBook' || item.Type === 'AudioPodcast') {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getProgressHtml(pct, options) {\n    let containerClass = 'itemProgressBar';\n    if (options && options.containerClass) {\n        containerClass += ' ' + options.containerClass;\n    }\n\n    return '<div class=\"' + containerClass + '\"><div class=\"itemProgressBarForeground\" style=\"width:' + pct + '%;\"></div></div>';\n}\n\nfunction getAutoTimeProgressHtml(pct, options, isRecording, start, end) {\n    let containerClass = 'itemProgressBar';\n    if (options && options.containerClass) {\n        containerClass += ' ' + options.containerClass;\n    }\n\n    let foregroundClass = 'itemProgressBarForeground';\n    if (isRecording) {\n        foregroundClass += ' itemProgressBarForeground-recording';\n    }\n\n    return '<div is=\"emby-progressbar\" data-automode=\"time\" data-starttime=\"' + start + '\" data-endtime=\"' + end + '\" class=\"' + containerClass + '\"><div class=\"' + foregroundClass + '\" style=\"width:' + pct + '%;\"></div></div>';\n}\n\nexport function getProgressBarHtml(item, options) {\n    let pct;\n    if (enableProgressIndicator(item) && item.Type !== 'Recording') {\n        const userData = options && options.userData ? options.userData : item.UserData;\n\n        if (userData) {\n            pct = userData.PlayedPercentage;\n            if (pct && pct < 100) {\n                return getProgressHtml(pct, options);\n            }\n        }\n    }\n\n    if ((item.Type === 'Program' || item.Type === 'Timer' || item.Type === 'Recording') && item.StartDate && item.EndDate) {\n        let startDate = 0;\n        let endDate = 1;\n\n        try {\n            startDate = datetime.parseISO8601Date(item.StartDate).getTime();\n            endDate = datetime.parseISO8601Date(item.EndDate).getTime();\n        } catch (err) {\n            console.error(err);\n        }\n\n        const now = new Date().getTime();\n        const total = endDate - startDate;\n        pct = 100 * ((now - startDate) / total);\n\n        if (pct > 0 && pct < 100) {\n            const isRecording = item.Type === 'Timer' || item.Type === 'Recording' || item.TimerId;\n            return getAutoTimeProgressHtml(pct, options, isRecording, startDate, endDate);\n        }\n    }\n\n    return '';\n}\n\nexport function enablePlayedIndicator(item) {\n    return itemHelper.canMarkPlayed(item);\n}\n\nexport function getPlayedIndicatorHtml(item) {\n    if (enablePlayedIndicator(item)) {\n        let userData = item.UserData || {};\n        if (userData.UnplayedItemCount) {\n            return '<div class=\"countIndicator indicator\">' + userData.UnplayedItemCount + '</div>';\n        }\n\n        if (userData.PlayedPercentage && userData.PlayedPercentage >= 100 || (userData.Played)) {\n            return '<div class=\"playedIndicator indicator\"><span class=\"material-icons indicatorIcon check\"></span></div>';\n        }\n    }\n\n    return '';\n}\n\nexport function getChildCountIndicatorHtml(item, options) {\n    const minCount = options && options.minCount ? options.minCount : 0;\n\n    if (item.ChildCount && item.ChildCount > minCount) {\n        return '<div class=\"countIndicator indicator\">' + item.ChildCount + '</div>';\n    }\n\n    return '';\n}\n\nexport function getTimerIndicator(item) {\n    let status;\n\n    if (item.Type === 'SeriesTimer') {\n        return '<span class=\"material-icons timerIndicator indicatorIcon fiber_smart_record\"></span>';\n    } else if (item.TimerId || item.SeriesTimerId) {\n        status = item.Status || 'Cancelled';\n    } else if (item.Type === 'Timer') {\n        status = item.Status;\n    } else {\n        return '';\n    }\n\n    if (item.SeriesTimerId) {\n        if (status !== 'Cancelled') {\n            return '<span class=\"material-icons timerIndicator indicatorIcon fiber_smart_record\"></span>';\n        }\n\n        return '<span class=\"material-icons timerIndicator timerIndicator-inactive indicatorIcon fiber_smart_record\"></span>';\n    }\n\n    return '<span class=\"material-icons timerIndicator indicatorIcon fiber_manual_record\"></span>';\n}\n\nexport function getSyncIndicator(item) {\n    if (item.SyncPercent === 100) {\n        return '<div class=\"syncIndicator indicator fullSyncIndicator\"><span class=\"material-icons indicatorIcon file_download\"></span></div>';\n    } else if (item.SyncPercent != null) {\n        return '<div class=\"syncIndicator indicator emptySyncIndicator\"><span class=\"material-icons indicatorIcon file_download\"></span></div>';\n    }\n\n    return '';\n}\n\nexport function getTypeIndicator(item) {\n    const iconT = {\n        'Video' : 'videocam',\n        'Folder' : 'folder',\n        'PhotoAlbum' : 'photo_album',\n        'Photo' : 'photo'\n    };\n\n    const icon = iconT[item.Type];\n    return icon ? '<div class=\"indicator videoIndicator\"><span class=\"material-icons indicatorIcon ' + icon + '\"></span></div>' : '';\n}\n\nexport function getMissingIndicator(item) {\n    if (item.Type === 'Episode' && item.LocationType === 'Virtual') {\n        if (item.PremiereDate) {\n            try {\n                const premiereDate = datetime.parseISO8601Date(item.PremiereDate).getTime();\n                if (premiereDate > new Date().getTime()) {\n                    return '<div class=\"unairedIndicator\">Unaired</div>';\n                }\n            } catch (err) {\n                console.error(err);\n            }\n        }\n        return '<div class=\"missingIndicator\">Missing</div>';\n    }\n\n    return '';\n}\n\nexport default {\n    getProgressHtml: getProgressHtml,\n    getProgressBarHtml: getProgressBarHtml,\n    getPlayedIndicatorHtml: getPlayedIndicatorHtml,\n    getChildCountIndicatorHtml: getChildCountIndicatorHtml,\n    enableProgressIndicator: enableProgressIndicator,\n    getTimerIndicator: getTimerIndicator,\n    enablePlayedIndicator: enablePlayedIndicator,\n    getSyncIndicator: getSyncIndicator,\n    getTypeIndicator: getTypeIndicator,\n    getMissingIndicator: getMissingIndicator\n};\n"]}