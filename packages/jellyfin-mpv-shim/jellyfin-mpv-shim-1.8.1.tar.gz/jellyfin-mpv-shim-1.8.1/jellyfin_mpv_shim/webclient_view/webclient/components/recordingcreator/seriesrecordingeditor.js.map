{"version":3,"sources":["components/recordingcreator/seriesrecordingeditor.js"],"names":["define","dialogHelper","globalize","layoutManager","mediaInfo","appHost","connectionManager","require","loading","scrollHelper","imageLoader","datetime","currentDialog","currentItemId","currentServerId","recordingUpdated","recordingDeleted","renderTimer","context","item","apiClient","ProgramInfo","querySelector","value","PrePaddingSeconds","PostPaddingSeconds","RecordAnyChannel","RecordAnyTime","RecordNewOnly","checked","SkipEpisodesInLibrary","KeepUpTo","ChannelName","ChannelNumber","innerHTML","translate","getDisplayTime","parseISO8601Date","StartDate","hide","closeDialog","isDeleted","close","onSubmit","e","form","this","getApiClient","getLiveTvSeriesTimer","then","updateLiveTvSeriesTimer","preventDefault","init","fillKeepUpTo","html","i","text","addEventListener","deleteTimer","timerId","Promise","resolve","reject","recordingHelper","cancelSeriesTimerWithConfirmation","serverId","reload","id","show","result","Id","onFieldChange","click","showEditor","itemId","options","template","dialogOptions","removeOnClose","scrollY","tv","size","dlg","createDialog","classList","add","style","translateDocument","enableCancel","updated","deleted","centerFocus","on","open","embed","className","remove","removeEventListener"],"mappings":"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","file":"seriesrecordingeditor.js","sourcesContent":["define(['dialogHelper', 'globalize', 'layoutManager', 'mediaInfo', 'apphost', 'connectionManager', 'require', 'loading', 'scrollHelper', 'imageLoader', 'datetime', 'scrollStyles', 'emby-button', 'emby-checkbox', 'emby-input', 'emby-select', 'paper-icon-button-light', 'css!./../formdialog', 'css!./recordingcreator', 'material-icons', 'flexStyles'], function (dialogHelper, globalize, layoutManager, mediaInfo, appHost, connectionManager, require, loading, scrollHelper, imageLoader, datetime) {\n    'use strict';\n\n    var currentDialog;\n    var recordingUpdated = false;\n    var recordingDeleted = false;\n    var currentItemId;\n    var currentServerId;\n\n    function deleteTimer(apiClient, timerId) {\n\n        return new Promise(function (resolve, reject) {\n\n            require(['recordingHelper'], function (recordingHelper) {\n\n                recordingHelper.cancelSeriesTimerWithConfirmation(timerId, apiClient.serverId()).then(resolve, reject);\n            });\n        });\n    }\n\n    function renderTimer(context, item, apiClient) {\n\n        var program = item.ProgramInfo || {};\n\n        context.querySelector('#txtPrePaddingMinutes').value = item.PrePaddingSeconds / 60;\n        context.querySelector('#txtPostPaddingMinutes').value = item.PostPaddingSeconds / 60;\n\n        context.querySelector('.selectChannels').value = item.RecordAnyChannel ? 'all' : 'one';\n        context.querySelector('.selectAirTime').value = item.RecordAnyTime ? 'any' : 'original';\n\n        context.querySelector('.selectShowType').value = item.RecordNewOnly ? 'new' : 'all';\n        context.querySelector('.chkSkipEpisodesInLibrary').checked = item.SkipEpisodesInLibrary;\n        context.querySelector('.selectKeepUpTo').value = item.KeepUpTo || 0;\n\n        if (item.ChannelName || item.ChannelNumber) {\n            context.querySelector('.optionChannelOnly').innerHTML = globalize.translate('ChannelNameOnly', item.ChannelName || item.ChannelNumber);\n        } else {\n            context.querySelector('.optionChannelOnly').innerHTML = globalize.translate('OneChannel');\n        }\n\n        context.querySelector('.optionAroundTime').innerHTML = globalize.translate('AroundTime', datetime.getDisplayTime(datetime.parseISO8601Date(item.StartDate)));\n\n        loading.hide();\n    }\n\n    function closeDialog(isDeleted) {\n\n        recordingUpdated = true;\n        recordingDeleted = isDeleted;\n\n        dialogHelper.close(currentDialog);\n    }\n\n    function onSubmit(e) {\n\n        var form = this;\n\n        var apiClient = connectionManager.getApiClient(currentServerId);\n\n        apiClient.getLiveTvSeriesTimer(currentItemId).then(function (item) {\n\n            item.PrePaddingSeconds = form.querySelector('#txtPrePaddingMinutes').value * 60;\n            item.PostPaddingSeconds = form.querySelector('#txtPostPaddingMinutes').value * 60;\n            item.RecordAnyChannel = form.querySelector('.selectChannels').value === 'all';\n            item.RecordAnyTime = form.querySelector('.selectAirTime').value === 'any';\n            item.RecordNewOnly = form.querySelector('.selectShowType').value === 'new';\n            item.SkipEpisodesInLibrary = form.querySelector('.chkSkipEpisodesInLibrary').checked;\n            item.KeepUpTo = form.querySelector('.selectKeepUpTo').value;\n\n            apiClient.updateLiveTvSeriesTimer(item);\n        });\n\n        e.preventDefault();\n\n        // Disable default form submission\n        return false;\n    }\n\n    function init(context) {\n\n        fillKeepUpTo(context);\n\n        context.querySelector('.btnCancel').addEventListener('click', function () {\n\n            closeDialog(false);\n        });\n\n        context.querySelector('.btnCancelRecording').addEventListener('click', function () {\n\n            var apiClient = connectionManager.getApiClient(currentServerId);\n            deleteTimer(apiClient, currentItemId).then(function () {\n                closeDialog(true);\n            });\n        });\n\n        context.querySelector('form').addEventListener('submit', onSubmit);\n    }\n\n    function reload(context, id) {\n\n        var apiClient = connectionManager.getApiClient(currentServerId);\n\n        loading.show();\n        if (typeof id === 'string') {\n            currentItemId = id;\n\n            apiClient.getLiveTvSeriesTimer(id).then(function (result) {\n\n                renderTimer(context, result, apiClient);\n                loading.hide();\n            });\n        } else if (id) {\n\n            currentItemId = id.Id;\n\n            renderTimer(context, id, apiClient);\n            loading.hide();\n        }\n    }\n\n    function fillKeepUpTo(context) {\n\n        var html = '';\n\n        for (var i = 0; i <= 50; i++) {\n\n            var text;\n\n            if (i === 0) {\n                text = globalize.translate('AsManyAsPossible');\n            } else if (i === 1) {\n                text = globalize.translate('ValueOneEpisode');\n            } else {\n                text = globalize.translate('ValueEpisodeCount', i);\n            }\n\n            html += '<option value=\"' + i + '\">' + text + '</option>';\n        }\n\n        context.querySelector('.selectKeepUpTo').innerHTML = html;\n    }\n\n    function onFieldChange(e) {\n        this.querySelector('.btnSubmit').click();\n    }\n\n    function embed(itemId, serverId, options) {\n\n        recordingUpdated = false;\n        recordingDeleted = false;\n        currentServerId = serverId;\n        loading.show();\n        options = options || {};\n\n        require(['text!./seriesrecordingeditor.template.html'], function (template) {\n\n            var dialogOptions = {\n                removeOnClose: true,\n                scrollY: false\n            };\n\n            if (layoutManager.tv) {\n                dialogOptions.size = 'fullscreen';\n            } else {\n                dialogOptions.size = 'small';\n            }\n\n            var dlg = options.context;\n\n            dlg.classList.add('hide');\n            dlg.innerHTML = globalize.translateDocument(template, 'core');\n\n            dlg.querySelector('.formDialogHeader').classList.add('hide');\n            dlg.querySelector('.formDialogFooter').classList.add('hide');\n            dlg.querySelector('.formDialogContent').className = '';\n            dlg.querySelector('.dialogContentInner').className = '';\n            dlg.classList.remove('hide');\n\n            dlg.removeEventListener('change', onFieldChange);\n            dlg.addEventListener('change', onFieldChange);\n\n            currentDialog = dlg;\n\n            init(dlg);\n\n            reload(dlg, itemId);\n        });\n    }\n\n    function showEditor(itemId, serverId, options) {\n\n        return new Promise(function (resolve, reject) {\n\n            recordingUpdated = false;\n            recordingDeleted = false;\n            currentServerId = serverId;\n            loading.show();\n            options = options || {};\n\n            require(['text!./seriesrecordingeditor.template.html'], function (template) {\n\n                var dialogOptions = {\n                    removeOnClose: true,\n                    scrollY: false\n                };\n\n                if (layoutManager.tv) {\n                    dialogOptions.size = 'fullscreen';\n                } else {\n                    dialogOptions.size = 'small';\n                }\n\n                var dlg = dialogHelper.createDialog(dialogOptions);\n\n                dlg.classList.add('formDialog');\n                dlg.classList.add('recordingDialog');\n\n                if (!layoutManager.tv) {\n                    dlg.style['min-width'] = '20%';\n                }\n\n                var html = '';\n\n                html += globalize.translateDocument(template, 'core');\n\n                dlg.innerHTML = html;\n\n                if (options.enableCancel === false) {\n                    dlg.querySelector('.formDialogFooter').classList.add('hide');\n                }\n\n                currentDialog = dlg;\n\n                dlg.addEventListener('closing', function () {\n\n                    if (!recordingDeleted) {\n                        this.querySelector('.btnSubmit').click();\n                    }\n                });\n\n                dlg.addEventListener('close', function () {\n\n                    if (recordingUpdated) {\n                        resolve({\n                            updated: true,\n                            deleted: recordingDeleted\n                        });\n                    } else {\n                        reject();\n                    }\n                });\n\n                if (layoutManager.tv) {\n                    scrollHelper.centerFocus.on(dlg.querySelector('.formDialogContent'), false);\n                }\n\n                init(dlg);\n\n                reload(dlg, itemId);\n\n                dialogHelper.open(dlg);\n            });\n        });\n    }\n\n    return {\n        show: showEditor,\n        embed: embed\n    };\n});\n"]}