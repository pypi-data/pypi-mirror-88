{"version":3,"sources":["components/sortmenu/sortmenu.js"],"names":["define","require","dom","focusManager","dialogHelper","loading","layoutManager","connectionManager","globalize","userSettings","onSubmit","e","preventDefault","centerFocus","elem","horiz","on","scrollHelper","fn","SortMenu","prototype","show","options","Promise","resolve","reject","template","dialogOptions","removeOnClose","scrollY","tv","size","dlg","createDialog","classList","add","submitted","html","innerHTML","translateDocument","fillSortBy","context","querySelector","map","o","value","name","join","sortOptions","initEditor","settings","addEventListener","sortOrder","sortBy","close","open","then","saveValues","settingsKey","setFilter"],"mappings":"AAAA,aAAAA,OAAO,CAAC,UAAW,MAAO,eAAgB,eAAgB,UAAW,gBAAiB,oBAAqB,YAAa,eAAgB,cAAe,0BAA2B,iBAAkB,sBAAuB,cAAe,eAAe,SAAUC,QAASC,IAAKC,aAAcC,aAAcC,QAASC,cAAeC,kBAAmBC,UAAWC,cAG/V,SAASC,SAASC,GAGd,OADAA,EAAEC,kBACK,EAWX,SAASC,YAAYC,KAAMC,MAAOC,IAC9Bf,QAAQ,CAAC,iBAAiB,SAAUgB,cAChC,IAAIC,GAAKF,GAAK,KAAO,MACrBC,aAAaJ,YAAYK,IAAIJ,KAAMC,UAoB3C,SAASI,YAkFT,OA9EAA,SAASC,UAAUC,KAAO,SAAUC,SAEhC,OAAO,IAAIC,SAAQ,SAAUC,QAASC,QAElCxB,QAAQ,CAAC,kCAAkC,SAAUyB,UAEjD,IAAIC,cAAgB,CAChBC,eAAe,EACfC,SAAS,GAGTvB,cAAcwB,GACdH,cAAcI,KAAO,aAErBJ,cAAcI,KAAO,QAGzB,IAAIC,IAAM5B,aAAa6B,aAAaN,eAEpCK,IAAIE,UAAUC,IAAI,cAElB,IAwBIC,UAxBAC,KAAO,GAEXA,MAAQ,iCACRA,MAAQ,mJACRA,MAAQ,iDAERA,MAAQ,SAERA,MAAQX,SAERM,IAAIM,UAAY9B,UAAU+B,kBAAkBF,KAAM,QAnD9D,SAASG,WAAWC,QAASnB,SACNmB,QAAQC,cAAc,iBAE5BJ,UAAYhB,QAAQqB,KAAI,SAAUC,GAE3C,MAAO,kBAAoBA,EAAEC,MAAQ,KAAOD,EAAEE,KAAO,eAEtDC,KAAK,IA8CAP,CAAWR,IAAKV,QAAQ0B,aApEpC,SAASC,WAAWR,QAASS,UAEzBT,QAAQC,cAAc,QAAQS,iBAAiB,SAAUzC,UAEzD+B,QAAQC,cAAc,oBAAoBG,MAAQK,SAASE,UAC3DX,QAAQC,cAAc,iBAAiBG,MAAQK,SAASG,OAgEhDJ,CAAWjB,IAAKV,QAAQ4B,UAExBlB,IAAIU,cAAc,cAAcS,iBAAiB,SAAS,WAEtD/C,aAAakD,MAAMtB,QAGnB1B,cAAcwB,IACdjB,YAAYmB,IAAIU,cAAc,uBAAuB,GAAO,GAKhEV,IAAIU,cAAc,QAAQS,iBAAiB,UAAU,WAEjDf,WAAY,KAMb,GAEHhC,aAAamD,KAAKvB,KAAKwB,MAAK,WAMxB,GAJIlD,cAAcwB,IACdjB,YAAYmB,IAAIU,cAAc,uBAAuB,GAAO,GAG5DN,UAMA,OA/EpB,SAASqB,WAAWhB,QAASS,SAAUQ,aAEnCjD,aAAakD,UAAUD,YAAc,aAAcjB,QAAQC,cAAc,oBAAoBG,OAC7FpC,aAAakD,UAAUD,YAAc,UAAWjB,QAAQC,cAAc,iBAAiBG,OAyEvEY,CAAWzB,IAAKV,QAAQ4B,SAAU5B,QAAQoC,kBAC1ClC,UAKJC,mBAMTN","file":"sortmenu.js","sourcesContent":["define(['require', 'dom', 'focusManager', 'dialogHelper', 'loading', 'layoutManager', 'connectionManager', 'globalize', 'userSettings', 'emby-select', 'paper-icon-button-light', 'material-icons', 'css!./../formdialog', 'emby-button', 'flexStyles'], function (require, dom, focusManager, dialogHelper, loading, layoutManager, connectionManager, globalize, userSettings) {\n    'use strict';\n\n    function onSubmit(e) {\n\n        e.preventDefault();\n        return false;\n    }\n\n    function initEditor(context, settings) {\n\n        context.querySelector('form').addEventListener('submit', onSubmit);\n\n        context.querySelector('.selectSortOrder').value = settings.sortOrder;\n        context.querySelector('.selectSortBy').value = settings.sortBy;\n    }\n\n    function centerFocus(elem, horiz, on) {\n        require(['scrollHelper'], function (scrollHelper) {\n            var fn = on ? 'on' : 'off';\n            scrollHelper.centerFocus[fn](elem, horiz);\n        });\n    }\n\n    function fillSortBy(context, options) {\n        var selectSortBy = context.querySelector('.selectSortBy');\n\n        selectSortBy.innerHTML = options.map(function (o) {\n\n            return '<option value=\"' + o.value + '\">' + o.name + '</option>';\n\n        }).join('');\n    }\n\n    function saveValues(context, settings, settingsKey) {\n\n        userSettings.setFilter(settingsKey + '-sortorder', context.querySelector('.selectSortOrder').value);\n        userSettings.setFilter(settingsKey + '-sortby', context.querySelector('.selectSortBy').value);\n    }\n\n    function SortMenu() {\n\n    }\n\n    SortMenu.prototype.show = function (options) {\n\n        return new Promise(function (resolve, reject) {\n\n            require(['text!./sortmenu.template.html'], function (template) {\n\n                var dialogOptions = {\n                    removeOnClose: true,\n                    scrollY: false\n                };\n\n                if (layoutManager.tv) {\n                    dialogOptions.size = 'fullscreen';\n                } else {\n                    dialogOptions.size = 'small';\n                }\n\n                var dlg = dialogHelper.createDialog(dialogOptions);\n\n                dlg.classList.add('formDialog');\n\n                var html = '';\n\n                html += '<div class=\"formDialogHeader\">';\n                html += '<button is=\"paper-icon-button-light\" class=\"btnCancel hide-mouse-idle-tv\" tabindex=\"-1\"><span class=\"material-icons arrow_back\"></span></button>';\n                html += '<h3 class=\"formDialogHeaderTitle\">${Sort}</h3>';\n\n                html += '</div>';\n\n                html += template;\n\n                dlg.innerHTML = globalize.translateDocument(html, 'core');\n\n                fillSortBy(dlg, options.sortOptions);\n                initEditor(dlg, options.settings);\n\n                dlg.querySelector('.btnCancel').addEventListener('click', function () {\n\n                    dialogHelper.close(dlg);\n                });\n\n                if (layoutManager.tv) {\n                    centerFocus(dlg.querySelector('.formDialogContent'), false, true);\n                }\n\n                var submitted;\n\n                dlg.querySelector('form').addEventListener('change', function () {\n\n                    submitted = true;\n                    //if (options.onChange) {\n                    //    saveValues(dlg, options.settings, options.settingsKey);\n                    //    options.onChange();\n                    //}\n\n                }, true);\n\n                dialogHelper.open(dlg).then(function () {\n\n                    if (layoutManager.tv) {\n                        centerFocus(dlg.querySelector('.formDialogContent'), false, false);\n                    }\n\n                    if (submitted) {\n\n                        //if (!options.onChange) {\n                        saveValues(dlg, options.settings, options.settingsKey);\n                        resolve();\n                        //}\n                        return;\n                    }\n\n                    reject();\n                });\n            });\n        });\n    };\n\n    return SortMenu;\n});\n"]}