{"version":3,"sources":["components/displaySettings/displaySettings.js"],"names":["define","require","browser","layoutManager","appSettings","pluginManager","appHost","focusManager","datetime","globalize","loading","connectionManager","skinManager","dom","events","fillThemes","select","isDashboard","innerHTML","getThemes","map","t","value","id","isDefault","isDefaultServerDashboard","name","join","loadForm","context","user","userSettings","apiClient","getCurrentUserId","Id","Policy","IsAdministrator","querySelector","classList","remove","add","supports","supportsLocalization","tizen","web0s","checked","runAtStartup","selectTheme","selectDashboardTheme","loadScreensavers","selectScreensaver","options","ofType","plugin","unshift","translate","o","screensaver","loadSoundEffects","selectSoundEffects","soundEffects","loadSkins","selectSkin","skin","length","Configuration","DisplayMissingEpisodes","enableThemeSongs","enableThemeVideos","enableFastFadein","enableBlurhash","enableBackdrops","detailsBanner","language","dateTimeLocale","libraryPageSize","dashboardTheme","theme","getSavedLayout","showOrHideMissingEpisodesField","hide","save","instance","userId","enableSaveConfirmation","show","getUser","then","saveUser","userSettingsInstance","setTheme","setLayout","updateUserConfiguration","toast","trigger","onSubmit","e","self","this","getApiClient","serverId","setUserInfo","element","preventDefault","DisplaySettings","embed","template","translateDocument","addEventListener","bind","enableSaveButton","loadData","autoFocus","prototype","dataLoaded","submit","call","destroy"],"mappings":"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","file":"displaySettings.js","sourcesContent":["define(['require', 'browser', 'layoutManager', 'appSettings', 'pluginManager', 'apphost', 'focusManager', 'datetime', 'globalize', 'loading', 'connectionManager', 'skinManager', 'dom', 'events', 'emby-select', 'emby-checkbox', 'emby-button'], function (require, browser, layoutManager, appSettings, pluginManager, appHost, focusManager, datetime, globalize, loading, connectionManager, skinManager, dom, events) {\n    'use strict';\n\n    function fillThemes(select, isDashboard) {\n        select.innerHTML = skinManager.getThemes().map(function (t) {\n            var value = t.id;\n            if (t.isDefault && !isDashboard) {\n                value = '';\n            } else if (t.isDefaultServerDashboard && isDashboard) {\n                value = '';\n            }\n\n            return '<option value=\"' + value + '\">' + t.name + '</option>';\n        }).join('');\n    }\n\n    function loadScreensavers(context, userSettings) {\n        var selectScreensaver = context.querySelector('.selectScreensaver');\n        var options = pluginManager.ofType('screensaver').map(function (plugin) {\n            return {\n                name: plugin.name,\n                value: plugin.id\n            };\n        });\n\n        options.unshift({\n            name: globalize.translate('None'),\n            value: 'none'\n        });\n\n        selectScreensaver.innerHTML = options.map(function (o) {\n            return '<option value=\"' + o.value + '\">' + o.name + '</option>';\n        }).join('');\n        selectScreensaver.value = userSettings.screensaver();\n\n        if (!selectScreensaver.value) {\n            // TODO: set the default instead of none\n            selectScreensaver.value = 'none';\n        }\n    }\n\n    function loadSoundEffects(context, userSettings) {\n\n        var selectSoundEffects = context.querySelector('.selectSoundEffects');\n        var options = pluginManager.ofType('soundeffects').map(function (plugin) {\n            return {\n                name: plugin.name,\n                value: plugin.id\n            };\n        });\n\n        options.unshift({\n            name: globalize.translate('None'),\n            value: 'none'\n        });\n\n        selectSoundEffects.innerHTML = options.map(function (o) {\n            return '<option value=\"' + o.value + '\">' + o.name + '</option>';\n        }).join('');\n        selectSoundEffects.value = userSettings.soundEffects();\n\n        if (!selectSoundEffects.value) {\n            // TODO: set the default instead of none\n            selectSoundEffects.value = 'none';\n        }\n    }\n\n    function loadSkins(context, userSettings) {\n\n        var selectSkin = context.querySelector('.selectSkin');\n\n        var options = pluginManager.ofType('skin').map(function (plugin) {\n            return {\n                name: plugin.name,\n                value: plugin.id\n            };\n        });\n\n        selectSkin.innerHTML = options.map(function (o) {\n            return '<option value=\"' + o.value + '\">' + o.name + '</option>';\n        }).join('');\n        selectSkin.value = userSettings.skin();\n\n        if (!selectSkin.value && options.length) {\n            selectSkin.value = options[0].value;\n        }\n\n        if (options.length > 1 && appHost.supports('skins')) {\n            context.querySelector('.selectSkinContainer').classList.remove('hide');\n        } else {\n            context.querySelector('.selectSkinContainer').classList.add('hide');\n        }\n    }\n\n    function showOrHideMissingEpisodesField(context, user, apiClient) {\n\n        if (browser.tizen || browser.web0s) {\n            context.querySelector('.fldDisplayMissingEpisodes').classList.add('hide');\n            return;\n        }\n\n        context.querySelector('.fldDisplayMissingEpisodes').classList.remove('hide');\n    }\n\n    function loadForm(context, user, userSettings, apiClient) {\n\n        var loggedInUserId = apiClient.getCurrentUserId();\n        var userId = user.Id;\n\n        if (user.Policy.IsAdministrator) {\n            context.querySelector('.selectDashboardThemeContainer').classList.remove('hide');\n        } else {\n            context.querySelector('.selectDashboardThemeContainer').classList.add('hide');\n        }\n\n        if (appHost.supports('displaylanguage')) {\n            context.querySelector('.languageSection').classList.remove('hide');\n        } else {\n            context.querySelector('.languageSection').classList.add('hide');\n        }\n\n        if (appHost.supports('displaymode')) {\n            context.querySelector('.fldDisplayMode').classList.remove('hide');\n        } else {\n            context.querySelector('.fldDisplayMode').classList.add('hide');\n        }\n\n        if (appHost.supports('externallinks')) {\n            context.querySelector('.learnHowToContributeContainer').classList.remove('hide');\n        } else {\n            context.querySelector('.learnHowToContributeContainer').classList.add('hide');\n        }\n\n        if (appHost.supports('runatstartup')) {\n            context.querySelector('.fldAutorun').classList.remove('hide');\n        } else {\n            context.querySelector('.fldAutorun').classList.add('hide');\n        }\n\n        if (appHost.supports('soundeffects')) {\n            context.querySelector('.fldSoundEffects').classList.remove('hide');\n        } else {\n            context.querySelector('.fldSoundEffects').classList.add('hide');\n        }\n\n        if (appHost.supports('screensaver')) {\n            context.querySelector('.selectScreensaverContainer').classList.remove('hide');\n        } else {\n            context.querySelector('.selectScreensaverContainer').classList.add('hide');\n        }\n\n        if (datetime.supportsLocalization()) {\n            context.querySelector('.fldDateTimeLocale').classList.remove('hide');\n        } else {\n            context.querySelector('.fldDateTimeLocale').classList.add('hide');\n        }\n\n        if (!browser.tizen && !browser.web0s) {\n            context.querySelector('.fldBackdrops').classList.remove('hide');\n            context.querySelector('.fldThemeSong').classList.remove('hide');\n            context.querySelector('.fldThemeVideo').classList.remove('hide');\n        } else {\n            context.querySelector('.fldBackdrops').classList.add('hide');\n            context.querySelector('.fldThemeSong').classList.add('hide');\n            context.querySelector('.fldThemeVideo').classList.add('hide');\n        }\n\n        context.querySelector('.chkRunAtStartup').checked = appSettings.runAtStartup();\n\n        var selectTheme = context.querySelector('#selectTheme');\n        var selectDashboardTheme = context.querySelector('#selectDashboardTheme');\n\n        fillThemes(selectTheme);\n        fillThemes(selectDashboardTheme, true);\n        loadScreensavers(context, userSettings);\n        loadSoundEffects(context, userSettings);\n        loadSkins(context, userSettings);\n\n        context.querySelector('.chkDisplayMissingEpisodes').checked = user.Configuration.DisplayMissingEpisodes || false;\n\n        context.querySelector('#chkThemeSong').checked = userSettings.enableThemeSongs();\n        context.querySelector('#chkThemeVideo').checked = userSettings.enableThemeVideos();\n        context.querySelector('#chkFadein').checked = userSettings.enableFastFadein();\n        context.querySelector('#chkBlurhash').checked = userSettings.enableBlurhash();\n        context.querySelector('#chkBackdrops').checked = userSettings.enableBackdrops();\n        context.querySelector('#chkDetailsBanner').checked = userSettings.detailsBanner();\n\n        context.querySelector('#selectLanguage').value = userSettings.language() || '';\n        context.querySelector('.selectDateTimeLocale').value = userSettings.dateTimeLocale() || '';\n\n        context.querySelector('#txtLibraryPageSize').value = userSettings.libraryPageSize();\n\n        selectDashboardTheme.value = userSettings.dashboardTheme() || '';\n        selectTheme.value = userSettings.theme() || '';\n\n        context.querySelector('.selectLayout').value = layoutManager.getSavedLayout() || '';\n\n        showOrHideMissingEpisodesField(context, user, apiClient);\n\n        loading.hide();\n    }\n\n    function saveUser(context, user, userSettingsInstance, apiClient) {\n\n        appSettings.runAtStartup(context.querySelector('.chkRunAtStartup').checked);\n\n        user.Configuration.DisplayMissingEpisodes = context.querySelector('.chkDisplayMissingEpisodes').checked;\n\n        if (appHost.supports('displaylanguage')) {\n            userSettingsInstance.language(context.querySelector('#selectLanguage').value);\n        }\n\n        userSettingsInstance.dateTimeLocale(context.querySelector('.selectDateTimeLocale').value);\n\n        userSettingsInstance.enableThemeSongs(context.querySelector('#chkThemeSong').checked);\n        userSettingsInstance.enableThemeVideos(context.querySelector('#chkThemeVideo').checked);\n        userSettingsInstance.dashboardTheme(context.querySelector('#selectDashboardTheme').value);\n        userSettingsInstance.theme(context.querySelector('#selectTheme').value);\n        userSettingsInstance.soundEffects(context.querySelector('.selectSoundEffects').value);\n        userSettingsInstance.screensaver(context.querySelector('.selectScreensaver').value);\n\n        userSettingsInstance.libraryPageSize(context.querySelector('#txtLibraryPageSize').value);\n\n        userSettingsInstance.skin(context.querySelector('.selectSkin').value);\n\n        userSettingsInstance.enableFastFadein(context.querySelector('#chkFadein').checked);\n        userSettingsInstance.enableBlurhash(context.querySelector('#chkBlurhash').checked);\n        userSettingsInstance.enableBackdrops(context.querySelector('#chkBackdrops').checked);\n        userSettingsInstance.detailsBanner(context.querySelector('#chkDetailsBanner').checked);\n\n        if (user.Id === apiClient.getCurrentUserId()) {\n            skinManager.setTheme(userSettingsInstance.theme());\n        }\n\n        layoutManager.setLayout(context.querySelector('.selectLayout').value);\n        return apiClient.updateUserConfiguration(user.Id, user.Configuration);\n    }\n\n    function save(instance, context, userId, userSettings, apiClient, enableSaveConfirmation) {\n        loading.show();\n\n        apiClient.getUser(userId).then(function (user) {\n            saveUser(context, user, userSettings, apiClient).then(function () {\n                loading.hide();\n                if (enableSaveConfirmation) {\n                    require(['toast'], function (toast) {\n                        toast(globalize.translate('SettingsSaved'));\n                    });\n                }\n                events.trigger(instance, 'saved');\n            }, function () {\n                loading.hide();\n            });\n        });\n    }\n\n    function onSubmit(e) {\n        var self = this;\n        var apiClient = connectionManager.getApiClient(self.options.serverId);\n        var userId = self.options.userId;\n        var userSettings = self.options.userSettings;\n\n        userSettings.setUserInfo(userId, apiClient).then(function () {\n            var enableSaveConfirmation = self.options.enableSaveConfirmation;\n            save(self, self.options.element, userId, userSettings, apiClient, enableSaveConfirmation);\n        });\n\n        // Disable default form submission\n        if (e) {\n            e.preventDefault();\n        }\n        return false;\n    }\n\n    function embed(options, self) {\n        require(['text!./displaySettings.template.html'], function (template) {\n            options.element.innerHTML = globalize.translateDocument(template, 'core');\n            options.element.querySelector('form').addEventListener('submit', onSubmit.bind(self));\n            if (options.enableSaveButton) {\n                options.element.querySelector('.btnSave').classList.remove('hide');\n            }\n            self.loadData(options.autoFocus);\n        });\n    }\n\n    function DisplaySettings(options) {\n        this.options = options;\n        embed(options, this);\n    }\n\n    DisplaySettings.prototype.loadData = function (autoFocus) {\n        var self = this;\n        var context = self.options.element;\n\n        loading.show();\n\n        var userId = self.options.userId;\n        var apiClient = connectionManager.getApiClient(self.options.serverId);\n        var userSettings = self.options.userSettings;\n\n        return apiClient.getUser(userId).then(function (user) {\n            return userSettings.setUserInfo(userId, apiClient).then(function () {\n                self.dataLoaded = true;\n                loadForm(context, user, userSettings, apiClient);\n                if (autoFocus) {\n                    focusManager.autoFocus(context);\n                }\n            });\n        });\n    };\n\n    DisplaySettings.prototype.submit = function () {\n        onSubmit.call(this);\n    };\n\n    DisplaySettings.prototype.destroy = function () {\n        this.options = null;\n    };\n\n    return DisplaySettings;\n});\n"]}