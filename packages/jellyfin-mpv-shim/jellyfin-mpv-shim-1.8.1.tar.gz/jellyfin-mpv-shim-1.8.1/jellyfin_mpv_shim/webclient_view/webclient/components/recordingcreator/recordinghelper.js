"use strict";define(["globalize","loading","connectionManager"],(function(globalize,loading,connectionManager){function changeRecordingToSeries(apiClient,timerId,programId,confirmTimerCancellation){return loading.show(),apiClient.getItem(apiClient.getCurrentUserId(),programId).then((function(item){return item.IsSeries?apiClient.getNewLiveTvTimerDefaults({programId:programId}).then((function(timerDefaults){return apiClient.createLiveTvSeriesTimer(timerDefaults).then((function(){loading.hide(),sendToast(globalize.translate("SeriesRecordingScheduled"))}))})):confirmTimerCancellation?cancelTimerWithConfirmation(timerId,apiClient.serverId()):cancelTimer(apiClient.serverId(),timerId,!0)}))}function cancelTimerWithConfirmation(timerId,serverId){return new Promise((function(resolve,reject){require(["confirm"],(function(confirm){confirm({text:globalize.translate("MessageConfirmRecordingCancellation"),primary:"delete",confirmText:globalize.translate("HeaderCancelRecording"),cancelText:globalize.translate("HeaderKeepRecording")}).then((function(){loading.show(),cancelTimer(connectionManager.getApiClient(serverId),timerId,!0).then(resolve,reject)}),reject)}))}))}function cancelTimer(apiClient,timerId,hideLoading){return loading.show(),apiClient.cancelLiveTvTimer(timerId).then((function(){!1!==hideLoading&&(loading.hide(),sendToast(globalize.translate("RecordingCancelled")))}))}function createRecording(apiClient,programId,isSeries){return loading.show(),apiClient.getNewLiveTvTimerDefaults({programId:programId}).then((function(item){return(isSeries?apiClient.createLiveTvSeriesTimer(item):apiClient.createLiveTvTimer(item)).then((function(){loading.hide(),sendToast(globalize.translate("RecordingScheduled"))}))}))}function sendToast(msg){require(["toast"],(function(toast){toast(msg)}))}return{cancelTimer:cancelTimer,createRecording:createRecording,changeRecordingToSeries:changeRecordingToSeries,toggleRecording:function toggleRecording(serverId,programId,timerId,timerStatus,seriesTimerId){var apiClient=connectionManager.getApiClient(serverId),hasTimer=timerId&&"Cancelled"!==timerStatus;return seriesTimerId&&hasTimer?function showMultiCancellationPrompt(serverId,programId,timerId,timerStatus,seriesTimerId){return new Promise((function(resolve,reject){require(["dialog"],(function(dialog){var items=[];items.push({name:globalize.translate("HeaderKeepRecording"),id:"cancel",type:"submit"}),"InProgress"===timerStatus?items.push({name:globalize.translate("HeaderStopRecording"),id:"canceltimer",type:"cancel"}):items.push({name:globalize.translate("HeaderCancelRecording"),id:"canceltimer",type:"cancel"}),items.push({name:globalize.translate("HeaderCancelSeries"),id:"cancelseriestimer",type:"cancel"}),dialog({text:globalize.translate("MessageConfirmRecordingCancellation"),buttons:items}).then((function(result){var apiClient=connectionManager.getApiClient(serverId);"canceltimer"===result?(loading.show(),cancelTimer(apiClient,timerId,!0).then(resolve,reject)):"cancelseriestimer"===result?(loading.show(),apiClient.cancelLiveTvSeriesTimer(seriesTimerId).then((function(){require(["toast"],(function(toast){toast(globalize.translate("SeriesCancelled"))})),loading.hide(),resolve()}),reject)):resolve()}),reject)}))}))}(serverId,0,timerId,timerStatus,seriesTimerId):hasTimer&&programId?changeRecordingToSeries(apiClient,timerId,programId,!0):programId?createRecording(apiClient,programId):Promise.reject()},cancelTimerWithConfirmation:cancelTimerWithConfirmation,cancelSeriesTimerWithConfirmation:function cancelSeriesTimerWithConfirmation(timerId,serverId){return new Promise((function(resolve,reject){require(["confirm"],(function(confirm){confirm({text:globalize.translate("MessageConfirmRecordingCancellation"),primary:"delete",confirmText:globalize.translate("HeaderCancelSeries"),cancelText:globalize.translate("HeaderKeepSeries")}).then((function(){loading.show(),connectionManager.getApiClient(serverId).cancelLiveTvSeriesTimer(timerId).then((function(){require(["toast"],(function(toast){toast(globalize.translate("SeriesCancelled"))})),loading.hide(),resolve()}),reject)}),reject)}))}))}}}));
//# sourceMappingURL=recordinghelper.js.map
