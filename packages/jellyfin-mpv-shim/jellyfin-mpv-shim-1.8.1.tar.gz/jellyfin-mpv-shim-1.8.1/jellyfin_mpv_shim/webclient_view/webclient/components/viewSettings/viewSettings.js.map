{"version":3,"sources":["components/viewSettings/viewSettings.js"],"names":["define","require","dialogHelper","loading","appHost","layoutManager","connectionManager","appRouter","globalize","userSettings","onSubmit","e","preventDefault","centerFocus","elem","horiz","on","scrollHelper","fn","showIfAllowed","context","selector","visible","querySelector","classList","contains","remove","add","ViewSettings","prototype","show","options","Promise","resolve","reject","template","dialogOptions","removeOnClose","scrollY","tv","size","dlg","createDialog","html","innerHTML","translateDocument","submitted","settingElements","querySelectorAll","i","length","visibleSettings","indexOf","getAttribute","initEditor","settings","addEventListener","elems","checked","value","imageType","this","close","dispatchEvent","CustomEvent","open","then","saveValues","settingsKey","set"],"mappings":"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","file":"viewSettings.js","sourcesContent":["define(['require', 'dialogHelper', 'loading', 'apphost', 'layoutManager', 'connectionManager', 'appRouter', 'globalize', 'userSettings', 'emby-checkbox', 'emby-input', 'paper-icon-button-light', 'emby-select', 'material-icons', 'css!./../formdialog', 'emby-button', 'flexStyles'], function (require, dialogHelper, loading, appHost, layoutManager, connectionManager, appRouter, globalize, userSettings) {\n    'use strict';\n\n    function onSubmit(e) {\n\n        e.preventDefault();\n        return false;\n    }\n\n    function initEditor(context, settings) {\n\n        context.querySelector('form').addEventListener('submit', onSubmit);\n\n        var elems = context.querySelectorAll('.viewSetting-checkboxContainer');\n\n        for (var i = 0, length = elems.length; i < length; i++) {\n\n            elems[i].querySelector('input').checked = settings[elems[i].getAttribute('data-settingname')] || false;\n        }\n\n        context.querySelector('.selectImageType').value = settings.imageType || 'primary';\n    }\n\n    function saveValues(context, settings, settingsKey) {\n\n        var elems = context.querySelectorAll('.viewSetting-checkboxContainer');\n        for (var i = 0, length = elems.length; i < length; i++) {\n            userSettings.set(settingsKey + '-' + elems[i].getAttribute('data-settingname'), elems[i].querySelector('input').checked);\n        }\n\n        userSettings.set(settingsKey + '-imageType', context.querySelector('.selectImageType').value);\n    }\n\n    function centerFocus(elem, horiz, on) {\n        require(['scrollHelper'], function (scrollHelper) {\n            var fn = on ? 'on' : 'off';\n            scrollHelper.centerFocus[fn](elem, horiz);\n        });\n    }\n\n    function showIfAllowed(context, selector, visible) {\n\n        var elem = context.querySelector(selector);\n\n        if (visible && !elem.classList.contains('hiddenFromViewSettings')) {\n            elem.classList.remove('hide');\n        } else {\n            elem.classList.add('hide');\n        }\n    }\n\n    function ViewSettings() {\n\n    }\n\n    ViewSettings.prototype.show = function (options) {\n\n        return new Promise(function (resolve, reject) {\n\n            require(['text!./viewSettings.template.html'], function (template) {\n\n                var dialogOptions = {\n                    removeOnClose: true,\n                    scrollY: false\n                };\n\n                if (layoutManager.tv) {\n                    dialogOptions.size = 'fullscreen';\n                } else {\n                    dialogOptions.size = 'small';\n                }\n\n                var dlg = dialogHelper.createDialog(dialogOptions);\n\n                dlg.classList.add('formDialog');\n\n                var html = '';\n\n                html += '<div class=\"formDialogHeader\">';\n                html += '<button is=\"paper-icon-button-light\" class=\"btnCancel hide-mouse-idle-tv\" tabindex=\"-1\"><span class=\"material-icons arrow_back\"></span></button>';\n                html += '<h3 class=\"formDialogHeaderTitle\">${Settings}</h3>';\n\n                html += '</div>';\n\n                html += template;\n\n                dlg.innerHTML = globalize.translateDocument(html, 'core');\n\n                var settingElements = dlg.querySelectorAll('.viewSetting');\n                for (var i = 0, length = settingElements.length; i < length; i++) {\n                    if (options.visibleSettings.indexOf(settingElements[i].getAttribute('data-settingname')) === -1) {\n                        settingElements[i].classList.add('hide');\n                        settingElements[i].classList.add('hiddenFromViewSettings');\n                    } else {\n                        settingElements[i].classList.remove('hide');\n                        settingElements[i].classList.remove('hiddenFromViewSettings');\n                    }\n                }\n\n                initEditor(dlg, options.settings);\n\n                dlg.querySelector('.selectImageType').addEventListener('change', function () {\n\n                    showIfAllowed(dlg, '.chkTitleContainer', this.value !== 'list');\n                    showIfAllowed(dlg, '.chkYearContainer', this.value !== 'list');\n                });\n\n                dlg.querySelector('.btnCancel').addEventListener('click', function () {\n\n                    dialogHelper.close(dlg);\n                });\n\n                if (layoutManager.tv) {\n                    centerFocus(dlg.querySelector('.formDialogContent'), false, true);\n                }\n\n                var submitted;\n\n                dlg.querySelector('.selectImageType').dispatchEvent(new CustomEvent('change', {}));\n\n                dlg.querySelector('form').addEventListener('change', function () {\n\n                    submitted = true;\n\n                }, true);\n\n                dialogHelper.open(dlg).then(function () {\n\n                    if (layoutManager.tv) {\n                        centerFocus(dlg.querySelector('.formDialogContent'), false, false);\n                    }\n\n                    if (submitted) {\n                        saveValues(dlg, options.settings, options.settingsKey);\n                        resolve();\n                        return;\n                    }\n\n                    reject();\n                });\n            });\n        });\n    };\n\n    return ViewSettings;\n});\n"]}