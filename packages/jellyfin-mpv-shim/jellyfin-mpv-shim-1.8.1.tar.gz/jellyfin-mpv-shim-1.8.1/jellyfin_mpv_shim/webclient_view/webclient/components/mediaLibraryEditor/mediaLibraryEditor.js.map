{"version":3,"sources":["components/mediaLibraryEditor/mediaLibraryEditor.js"],"names":["define","jQuery","loading","dialogHelper","dom","libraryoptionseditor","globalize","onEditLibrary","isCreating","show","dlg","parentWithClass","this","libraryOptions","getLibraryOptions","querySelector","Object","assign","currentOptions","library","LibraryOptions","ApiClient","updateVirtualFolderOptions","ItemId","then","hasChanges","hide","close","onListItemClick","e","listItem","target","index","parseInt","getAttribute","pathInfos","PathInfos","pathInfo","originalPath","Path","Locations","btnRemovePath","onRemoveClick","location","button","virtualFolder","require","confirm","title","translate","text","confirmText","primary","refreshAfterChange","refresh","removeMediaPath","Name","refreshLibraryFromServer","toast","showDirectoryBrowser","NetworkPath","getFolderHtml","html","page","getVirtualFolders","result","filter","f","renderLibrary","options","length","map","p","CollectionType","classList","add","remove","innerHTML","join","onAddButtonClick","context","networkPath","directoryBrowser","picker","enableNetworkSharePath","pathReadOnly","path","networkSharePath","callback","updateMediaLocation","updateMediaPath","addMediaLocation","addMediaPath","onToggleAdvancedChange","setAdvancedVisible","checked","onDialogClosed","currentDeferred","resolveWith","editor","deferred","Deferred","xhr","XMLHttpRequest","open","onload","template","response","createDialog","size","modal","removeOnClose","scrollY","translateDocument","initEditor","addEventListener","embed","call","send","promise"],"mappings":"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","file":"mediaLibraryEditor.js","sourcesContent":["define(['jQuery', 'loading', 'dialogHelper', 'dom', 'components/libraryoptionseditor/libraryoptionseditor', 'globalize', 'emby-button', 'listViewStyle', 'paper-icon-button-light', 'formDialogStyle', 'emby-toggle', 'flexStyles'], function (jQuery, loading, dialogHelper, dom, libraryoptionseditor, globalize) {\n    'use strict';\n\n    function onEditLibrary() {\n        if (isCreating) {\n            return false;\n        }\n\n        isCreating = true;\n        loading.show();\n        var dlg = dom.parentWithClass(this, 'dlg-libraryeditor');\n        var libraryOptions = libraryoptionseditor.getLibraryOptions(dlg.querySelector('.libraryOptions'));\n        libraryOptions = Object.assign(currentOptions.library.LibraryOptions || {}, libraryOptions);\n        ApiClient.updateVirtualFolderOptions(currentOptions.library.ItemId, libraryOptions).then(function () {\n            hasChanges = true;\n            isCreating = false;\n            loading.hide();\n            dialogHelper.close(dlg);\n        }, function () {\n            isCreating = false;\n            loading.hide();\n        });\n        return false;\n    }\n\n    function addMediaLocation(page, path, networkSharePath) {\n        var virtualFolder = currentOptions.library;\n        var refreshAfterChange = currentOptions.refresh;\n        ApiClient.addMediaPath(virtualFolder.Name, path, networkSharePath, refreshAfterChange).then(function () {\n            hasChanges = true;\n            refreshLibraryFromServer(page);\n        }, function () {\n            require(['toast'], function (toast) {\n                toast(globalize.translate('ErrorAddingMediaPathToVirtualFolder'));\n            });\n        });\n    }\n\n    function updateMediaLocation(page, path, networkSharePath) {\n        var virtualFolder = currentOptions.library;\n        ApiClient.updateMediaPath(virtualFolder.Name, {\n            Path: path,\n            NetworkPath: networkSharePath\n        }).then(function () {\n            hasChanges = true;\n            refreshLibraryFromServer(page);\n        }, function () {\n            require(['toast'], function (toast) {\n                toast(globalize.translate('ErrorAddingMediaPathToVirtualFolder'));\n            });\n        });\n    }\n\n    function onRemoveClick(btnRemovePath, location) {\n        var button = btnRemovePath;\n        var virtualFolder = currentOptions.library;\n\n        require(['confirm'], function (confirm) {\n            confirm({\n                title: globalize.translate('HeaderRemoveMediaLocation'),\n                text: globalize.translate('MessageConfirmRemoveMediaLocation'),\n                confirmText: globalize.translate('ButtonDelete'),\n                primary: 'delete'\n            }).then(function () {\n                var refreshAfterChange = currentOptions.refresh;\n                ApiClient.removeMediaPath(virtualFolder.Name, location, refreshAfterChange).then(function () {\n                    hasChanges = true;\n                    refreshLibraryFromServer(dom.parentWithClass(button, 'dlg-libraryeditor'));\n                }, function () {\n                    require(['toast'], function (toast) {\n                        toast(globalize.translate('DefaultErrorMessage'));\n                    });\n                });\n            });\n        });\n    }\n\n    function onListItemClick(e) {\n        var listItem = dom.parentWithClass(e.target, 'listItem');\n\n        if (listItem) {\n            var index = parseInt(listItem.getAttribute('data-index'));\n            var pathInfos = (currentOptions.library.LibraryOptions || {}).PathInfos || [];\n            var pathInfo = null == index ? {} : pathInfos[index] || {};\n            var originalPath = pathInfo.Path || (null == index ? null : currentOptions.library.Locations[index]);\n            var btnRemovePath = dom.parentWithClass(e.target, 'btnRemovePath');\n\n            if (btnRemovePath) {\n                onRemoveClick(btnRemovePath, originalPath);\n                return;\n            }\n\n            showDirectoryBrowser(dom.parentWithClass(listItem, 'dlg-libraryeditor'), originalPath, pathInfo.NetworkPath);\n        }\n    }\n\n    function getFolderHtml(pathInfo, index) {\n        var html = '';\n        html += '<div class=\"listItem listItem-border lnkPath\" data-index=\"' + index + '\" style=\"padding-left:.5em;\">';\n        html += '<div class=\"' + (pathInfo.NetworkPath ? 'listItemBody two-line' : 'listItemBody') + '\">';\n        html += '<h3 class=\"listItemBodyText\">';\n        html += pathInfo.Path;\n        html += '</h3>';\n\n        if (pathInfo.NetworkPath) {\n            html += '<div class=\"listItemBodyText secondary\">' + pathInfo.NetworkPath + '</div>';\n        }\n\n        html += '</div>';\n        html += '<button type=\"button\" is=\"paper-icon-button-light\" class=\"listItemButton btnRemovePath\" data-index=\"' + index + '\"><span class=\"material-icons remove_circle\"></span></button>';\n        html += '</div>';\n        return html;\n    }\n\n    function refreshLibraryFromServer(page) {\n        ApiClient.getVirtualFolders().then(function (result) {\n            var library = result.filter(function (f) {\n                return f.Name === currentOptions.library.Name;\n            })[0];\n\n            if (library) {\n                currentOptions.library = library;\n                renderLibrary(page, currentOptions);\n            }\n        });\n    }\n\n    function renderLibrary(page, options) {\n        var pathInfos = (options.library.LibraryOptions || {}).PathInfos || [];\n\n        if (!pathInfos.length) {\n            pathInfos = options.library.Locations.map(function (p) {\n                return {\n                    Path: p\n                };\n            });\n        }\n\n        if (options.library.CollectionType === 'boxsets') {\n            page.querySelector('.folders').classList.add('hide');\n        } else {\n            page.querySelector('.folders').classList.remove('hide');\n        }\n\n        page.querySelector('.folderList').innerHTML = pathInfos.map(getFolderHtml).join('');\n    }\n\n    function onAddButtonClick() {\n        showDirectoryBrowser(dom.parentWithClass(this, 'dlg-libraryeditor'));\n    }\n\n    function showDirectoryBrowser(context, originalPath, networkPath) {\n        require(['directorybrowser'], function (directoryBrowser) {\n            var picker = new directoryBrowser();\n            picker.show({\n                enableNetworkSharePath: true,\n                pathReadOnly: null != originalPath,\n                path: originalPath,\n                networkSharePath: networkPath,\n                callback: function (path, networkSharePath) {\n                    if (path) {\n                        if (originalPath) {\n                            updateMediaLocation(context, originalPath, networkSharePath);\n                        } else {\n                            addMediaLocation(context, path, networkSharePath);\n                        }\n                    }\n\n                    picker.close();\n                }\n            });\n        });\n    }\n\n    function onToggleAdvancedChange() {\n        var dlg = dom.parentWithClass(this, 'dlg-libraryeditor');\n        libraryoptionseditor.setAdvancedVisible(dlg.querySelector('.libraryOptions'), this.checked);\n    }\n\n    function initEditor(dlg, options) {\n        renderLibrary(dlg, options);\n        dlg.querySelector('.btnAddFolder').addEventListener('click', onAddButtonClick);\n        dlg.querySelector('.folderList').addEventListener('click', onListItemClick);\n        dlg.querySelector('.chkAdvanced').addEventListener('change', onToggleAdvancedChange);\n        dlg.querySelector('.btnSubmit').addEventListener('click', onEditLibrary);\n        libraryoptionseditor.embed(dlg.querySelector('.libraryOptions'), options.library.CollectionType, options.library.LibraryOptions).then(function () {\n            onToggleAdvancedChange.call(dlg.querySelector('.chkAdvanced'));\n        });\n    }\n\n    function onDialogClosed() {\n        currentDeferred.resolveWith(null, [hasChanges]);\n    }\n\n    function editor() {\n        this.show = function (options) {\n            var deferred = jQuery.Deferred();\n            currentOptions = options;\n            currentDeferred = deferred;\n            hasChanges = false;\n            var xhr = new XMLHttpRequest();\n            xhr.open('GET', 'components/mediaLibraryEditor/mediaLibraryEditor.template.html', true);\n\n            xhr.onload = function (e) {\n                var template = this.response;\n                var dlg = dialogHelper.createDialog({\n                    size: 'small',\n                    modal: false,\n                    removeOnClose: true,\n                    scrollY: false\n                });\n                dlg.classList.add('dlg-libraryeditor');\n                dlg.classList.add('ui-body-a');\n                dlg.classList.add('background-theme-a');\n                dlg.classList.add('formDialog');\n                dlg.innerHTML = globalize.translateDocument(template);\n                dlg.querySelector('.formDialogHeaderTitle').innerHTML = options.library.Name;\n                initEditor(dlg, options);\n                dlg.addEventListener('close', onDialogClosed);\n                dialogHelper.open(dlg);\n                dlg.querySelector('.btnCancel').addEventListener('click', function () {\n                    dialogHelper.close(dlg);\n                });\n                refreshLibraryFromServer(dlg);\n            };\n\n            xhr.send();\n            return deferred.promise();\n        };\n    }\n\n    var currentDeferred;\n    var currentOptions;\n    var hasChanges = false;\n    var isCreating = false;\n    return editor;\n});\n"]}