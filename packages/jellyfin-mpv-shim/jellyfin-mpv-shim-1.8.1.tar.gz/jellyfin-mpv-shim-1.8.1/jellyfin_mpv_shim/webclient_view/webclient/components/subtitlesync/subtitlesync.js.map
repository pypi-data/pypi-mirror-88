{"version":3,"sources":["components/subtitlesync/subtitlesync.js"],"names":["define","playbackManager","layoutManager","template","css","player","subtitleSyncSlider","subtitleSyncTextField","subtitleSyncCloseButton","subtitleSyncContainer","init","instance","parent","document","createElement","body","appendChild","innerHTML","querySelector","tv","classList","add","setTimeout","enableKeyboardDragging","updateOffset","offset","this","textContent","addEventListener","hasFocus","event","key","inputOffset","exec","parseFloat","setSubtitleOffset","getPercentageFromOffset","value","percentValue","Math","min","max","toFixed","getPlayerSubtitleOffset","preventDefault","match","stopPropagation","blur","prototype","percent","undefined","getOffsetFromPercentage","getBubbleHtml","newOffset","disableShowingSubtitleOffset","SubtitleSync","toggle","element","currentPlayer","destroy","elem","parentNode","removeChild","action","supportSubtitleOffset","isShowingSubtitleOffsetEnabled","canHandleOffsetOnCurrentSubtitle","remove"],"mappings":"AAAA,aAAAA,OAAO,CAAC,kBAAmB,gBAAiB,oCAAqC,uBAAuB,SAAUC,gBAAiBC,cAAeC,SAAUC,KAGxJ,IAAIC,OACAC,mBACAC,sBACAC,wBACAC,sBAEJ,SAASC,KAAKC,UAEV,IAAIC,OAASC,SAASC,cAAc,OACpCD,SAASE,KAAKC,YAAYJ,QAC1BA,OAAOK,UAAYd,SAEnBG,mBAAqBM,OAAOM,cAAc,uBAC1CX,sBAAwBK,OAAOM,cAAc,0BAC7CV,wBAA0BI,OAAOM,cAAc,6BAC/CT,sBAAwBG,OAAOM,cAAc,0BAEzChB,cAAciB,KACdb,mBAAmBc,UAAUC,IAAI,aAEjCC,YAAW,WACPhB,mBAAmBiB,2BACpB,IAGPd,sBAAsBW,UAAUC,IAAI,QAEpCd,sBAAsBiB,aAAe,SAASC,QAC1CC,KAAKC,YAAcF,OAAS,KAGhClB,sBAAsBqB,iBAAiB,SAAS,WAE5CF,KAAKG,UAAW,KAGpBtB,sBAAsBqB,iBAAiB,WAAW,SAASE,OACvD,GAAkB,UAAdA,MAAMC,IAAiB,CAEvB,IAAIC,YAAc,kBAAkBC,KAAKP,KAAKC,aAC1CK,aACAA,YAAcA,YAAY,GAG1BN,KAAKC,YAAcK,YAAc,IAEjCA,YAAcE,WAAWF,aAEzB/B,gBAAgBkC,kBAAkBH,YAAa3B,QAE/CC,mBAAmBkB,aA8DnC,SAASY,wBAAwBC,OAE7B,IAAIC,aAAeD,MAAQ,GAI3B,OAFAC,cAAgB,GAChBA,cAAgB,GACTC,KAAKC,IAAI,IAAKD,KAAKE,IAAI,EAAGH,aAAaI,YAnE9BN,CAAwBJ,eAE5BN,KAAKC,aAAe1B,gBAAgB0C,wBAAwBtC,SAAW,GAAK,IAEhFqB,KAAKG,UAAW,EAChBC,MAAMc,sBAGNlB,KAAKG,UAAW,EACoB,OAAhCC,MAAMC,IAAIc,MAAM,aAChBf,MAAMc,iBAKdd,MAAMgB,qBAGVvC,sBAAsBwC,KAAO,YAEpBrB,KAAKG,UAAYH,KAAKsB,WACvBtB,KAAKsB,UAAUD,QAIvBzC,mBAAmBkB,aAAe,SAASyB,SAEvCvB,KAAKW,WAAoBa,IAAZD,QAAwB,GAAKA,SAG9C3C,mBAAmBsB,iBAAiB,UAAU,WAE1C3B,gBAAgBkC,kBAAkBgB,wBAAwBzB,KAAKW,OAAQhC,QAEvEE,sBAAsBiB,aAClB2B,wBAAwBzB,KAAKW,WAGrC/B,mBAAmB8C,cAAgB,SAAUf,OACzC,IAAIgB,UAAYF,wBAAwBd,OACxC,MAAO,iCACNgB,UAAY,EAAI,IAAM,IAAMnB,WAAWmB,WADjC,UAKX7C,wBAAwBoB,iBAAiB,SAAS,WAC9C3B,gBAAgBqD,6BAA6BjD,QAC7CkD,aAAaP,UAAUQ,OAAO,kBAGlC7C,SAAS8C,QAAU7C,OAGvB,SAASuC,wBAAwBd,OAE7B,IAAIZ,QAAUY,MAAQ,IAAM,GAG5B,OADAZ,QAAU,IACIiB,QAAQ,GAY1B,SAASa,aAAaG,eAClBrD,OAASqD,cACThD,KAAKgB,MAgDT,OA7CA6B,aAAaP,UAAUW,QAAU,WAC7BJ,aAAaP,UAAUQ,OAAO,eAC1BnD,SACAJ,gBAAgBqD,6BAA6BjD,QAC7CJ,gBAAgBkC,kBAAkB,EAAG9B,SAEzC,IAAIuD,KAAOlC,KAAK+B,QACZG,OACAA,KAAKC,WAAWC,YAAYF,MAC5BlC,KAAK+B,QAAU,OAIvBF,aAAaP,UAAUQ,OAAS,SAASO,QAErC,GAAI1D,QAAUJ,gBAAgB+D,sBAAsB3D,QAEhD,OAAQ0D,QACJ,UAAKb,EAED,GAAIjD,gBAAgBgE,+BAA+B5D,SAAWJ,gBAAgBiE,iCAAiC7D,QAAS,CAE9GJ,gBAAgB0C,wBAAwBtC,SAAWE,sBAAsBsB,WAE3EvB,mBAAmB+B,MAAQ,KAC3B9B,sBAAsBoB,YAAc,KACpC1B,gBAAgBkC,kBAAkB,EAAG9B,SAGzCI,sBAAsBW,UAAU+C,OAAO,QACvC,MAER,IAAK,OAED,GAAI5D,sBAAsBsB,SACtB,MAER,IAAK,cACDpB,sBAAsBW,UAAUC,IAAI,UAO7CkC","file":"subtitlesync.js","sourcesContent":["define(['playbackManager', 'layoutManager', 'text!./subtitlesync.template.html', 'css!./subtitlesync'], function (playbackManager, layoutManager, template, css) {\n    'use strict';\n\n    var player;\n    var subtitleSyncSlider;\n    var subtitleSyncTextField;\n    var subtitleSyncCloseButton;\n    var subtitleSyncContainer;\n\n    function init(instance) {\n\n        var parent = document.createElement('div');\n        document.body.appendChild(parent);\n        parent.innerHTML = template;\n\n        subtitleSyncSlider = parent.querySelector('.subtitleSyncSlider');\n        subtitleSyncTextField = parent.querySelector('.subtitleSyncTextField');\n        subtitleSyncCloseButton = parent.querySelector('.subtitleSync-closeButton');\n        subtitleSyncContainer = parent.querySelector('.subtitleSyncContainer');\n\n        if (layoutManager.tv) {\n            subtitleSyncSlider.classList.add('focusable');\n            // HACK: Delay to give time for registered element attach (Firefox)\n            setTimeout(function () {\n                subtitleSyncSlider.enableKeyboardDragging();\n            }, 0);\n        }\n\n        subtitleSyncContainer.classList.add('hide');\n\n        subtitleSyncTextField.updateOffset = function(offset) {\n            this.textContent = offset + 's';\n        };\n\n        subtitleSyncTextField.addEventListener('click', function () {\n            // keep focus to prevent fade with osd\n            this.hasFocus = true;\n        });\n\n        subtitleSyncTextField.addEventListener('keydown', function(event) {\n            if (event.key === 'Enter') {\n                // if input key is enter search for float pattern\n                var inputOffset = /[-+]?\\d+\\.?\\d*/g.exec(this.textContent);\n                if (inputOffset) {\n                    inputOffset = inputOffset[0];\n\n                    // replace current text by considered offset\n                    this.textContent = inputOffset + 's';\n\n                    inputOffset = parseFloat(inputOffset);\n                    // set new offset\n                    playbackManager.setSubtitleOffset(inputOffset, player);\n                    // synchronize with slider value\n                    subtitleSyncSlider.updateOffset(\n                        getPercentageFromOffset(inputOffset));\n                } else {\n                    this.textContent = (playbackManager.getPlayerSubtitleOffset(player) || 0) + 's';\n                }\n                this.hasFocus = false;\n                event.preventDefault();\n            } else {\n                // keep focus to prevent fade with osd\n                this.hasFocus = true;\n                if (event.key.match(/[+-\\d.s]/) === null) {\n                    event.preventDefault();\n                }\n            }\n\n            // FIXME: TV layout will require special handling for navigation keys. But now field is not focusable\n            event.stopPropagation();\n        });\n\n        subtitleSyncTextField.blur = function() {\n            // prevent textfield to blur while element has focus\n            if (!this.hasFocus && this.prototype) {\n                this.prototype.blur();\n            }\n        };\n\n        subtitleSyncSlider.updateOffset = function(percent) {\n            // default value is 0s = 50%\n            this.value = percent === undefined ? 50 : percent;\n        };\n\n        subtitleSyncSlider.addEventListener('change', function () {\n            // set new offset\n            playbackManager.setSubtitleOffset(getOffsetFromPercentage(this.value), player);\n            // synchronize with textField value\n            subtitleSyncTextField.updateOffset(\n                getOffsetFromPercentage(this.value));\n        });\n\n        subtitleSyncSlider.getBubbleHtml = function (value) {\n            var newOffset = getOffsetFromPercentage(value);\n            return '<h1 class=\"sliderBubbleText\">' +\n            (newOffset > 0 ? '+' : '') + parseFloat(newOffset) + 's' +\n            '</h1>';\n        };\n\n        subtitleSyncCloseButton.addEventListener('click', function() {\n            playbackManager.disableShowingSubtitleOffset(player);\n            SubtitleSync.prototype.toggle('forceToHide');\n        });\n\n        instance.element = parent;\n    }\n\n    function getOffsetFromPercentage(value) {\n        // convert percent to fraction\n        var offset = (value - 50) / 50;\n        // multiply by offset min/max range value (-x to +x) :\n        offset *= 30;\n        return offset.toFixed(1);\n    }\n\n    function getPercentageFromOffset(value) {\n        // divide by offset min/max range value (-x to +x) :\n        var percentValue = value / 30;\n        // convert fraction to percent\n        percentValue *= 50;\n        percentValue += 50;\n        return Math.min(100, Math.max(0, percentValue.toFixed()));\n    }\n\n    function SubtitleSync(currentPlayer) {\n        player = currentPlayer;\n        init(this);\n    }\n\n    SubtitleSync.prototype.destroy = function() {\n        SubtitleSync.prototype.toggle('forceToHide');\n        if (player) {\n            playbackManager.disableShowingSubtitleOffset(player);\n            playbackManager.setSubtitleOffset(0, player);\n        }\n        var elem = this.element;\n        if (elem) {\n            elem.parentNode.removeChild(elem);\n            this.element = null;\n        }\n    };\n\n    SubtitleSync.prototype.toggle = function(action) {\n\n        if (player && playbackManager.supportSubtitleOffset(player)) {\n            /* eslint-disable no-fallthrough */\n            switch (action) {\n                case undefined:\n                    // if showing subtitle sync is enabled and if there is an external subtitle stream enabled\n                    if (playbackManager.isShowingSubtitleOffsetEnabled(player) && playbackManager.canHandleOffsetOnCurrentSubtitle(player)) {\n                        // if no subtitle offset is defined or element has focus (offset being defined)\n                        if (!(playbackManager.getPlayerSubtitleOffset(player) || subtitleSyncTextField.hasFocus)) {\n                            // set default offset to '0' = 50%\n                            subtitleSyncSlider.value = '50';\n                            subtitleSyncTextField.textContent = '0s';\n                            playbackManager.setSubtitleOffset(0, player);\n                        }\n                        // show subtitle sync\n                        subtitleSyncContainer.classList.remove('hide');\n                        break; // stop here\n                    } // else continue and hide\n                case 'hide':\n                    // only break if element has focus\n                    if (subtitleSyncTextField.hasFocus) {\n                        break;\n                    }\n                case 'forceToHide':\n                    subtitleSyncContainer.classList.add('hide');\n                    break;\n            }\n            /* eslint-enable no-fallthrough */\n        }\n    };\n\n    return SubtitleSync;\n});\n"]}