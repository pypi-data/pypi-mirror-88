{"version":3,"sources":["components/syncPlay/timeSyncManager.js"],"names":["define","_exports","_events","_connectionManager","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","value","Measurement","requestSent","requestReceived","responseSent","responseReceived","this","getTime","getOffset","getDelay","getPing","_default","TimeSyncManager","pingStop","pollingInterval","poller","pings","measurement","measurements","isReady","getTimeOffset","updateTimeOffset","push","shift","sortedMeasurements","slice","sort","a","b","requestPing","_this","setTimeout","apiClient","connectionManager","currentApiClient","Date","getServerTime","then","response","json","data","RequestReceptionTime","ResponseTransmissionTime","events","trigger","catch","error","console","finally","resetMeasurements","startPing","stopPing","clearTimeout","forceUpdate","serverDateToLocal","server","localDateToServer","local"],"mappings":"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","file":"timeSyncManager.js","sourcesContent":["/**\n * Module that manages time syncing with server.\n * @module components/syncPlay/timeSyncManager\n */\n\nimport events from 'events';\nimport connectionManager from 'connectionManager';\n\n/**\n * Time estimation\n */\nconst NumberOfTrackedMeasurements = 8;\nconst PollingIntervalGreedy = 1000; // milliseconds\nconst PollingIntervalLowProfile = 60000; // milliseconds\nconst GreedyPingCount = 3;\n\n/**\n * Class that stores measurement data.\n */\nclass Measurement {\n    /**\n     * Creates a new measurement.\n     * @param {Date} requestSent Client's timestamp of the request transmission\n     * @param {Date} requestReceived Server's timestamp of the request reception\n     * @param {Date} responseSent Server's timestamp of the response transmission\n     * @param {Date} responseReceived Client's timestamp of the response reception\n     */\n    constructor(requestSent, requestReceived, responseSent, responseReceived) {\n        this.requestSent = requestSent.getTime();\n        this.requestReceived = requestReceived.getTime();\n        this.responseSent = responseSent.getTime();\n        this.responseReceived = responseReceived.getTime();\n    }\n\n    /**\n     * Time offset from server.\n     */\n    getOffset () {\n        return ((this.requestReceived - this.requestSent) + (this.responseSent - this.responseReceived)) / 2;\n    }\n\n    /**\n     * Get round-trip delay.\n     */\n    getDelay () {\n        return (this.responseReceived - this.requestSent) - (this.responseSent - this.requestReceived);\n    }\n\n    /**\n     * Get ping time.\n     */\n    getPing () {\n        return this.getDelay() / 2;\n    }\n}\n\n/**\n * Class that manages time syncing with server.\n */\nclass TimeSyncManager {\n    constructor() {\n        this.pingStop = true;\n        this.pollingInterval = PollingIntervalGreedy;\n        this.poller = null;\n        this.pings = 0; // number of pings\n        this.measurement = null; // current time sync\n        this.measurements = [];\n    }\n\n    /**\n     * Gets status of time sync.\n     * @returns {boolean} _true_ if a measurement has been done, _false_ otherwise.\n     */\n    isReady() {\n        return !!this.measurement;\n    }\n\n    /**\n     * Gets time offset with server.\n     * @returns {number} The time offset.\n     */\n    getTimeOffset () {\n        return this.measurement ? this.measurement.getOffset() : 0;\n    }\n\n    /**\n     * Gets ping time to server.\n     * @returns {number} The ping time.\n     */\n    getPing () {\n        return this.measurement ? this.measurement.getPing() : 0;\n    }\n\n    /**\n     * Updates time offset between server and client.\n     * @param {Measurement} measurement The new measurement.\n     */\n    updateTimeOffset(measurement) {\n        this.measurements.push(measurement);\n        if (this.measurements.length > NumberOfTrackedMeasurements) {\n            this.measurements.shift();\n        }\n\n        // Pick measurement with minimum delay\n        const sortedMeasurements = this.measurements.slice(0);\n        sortedMeasurements.sort((a, b) => a.getDelay() - b.getDelay());\n        this.measurement = sortedMeasurements[0];\n    }\n\n    /**\n     * Schedules a ping request to the server. Triggers time offset update.\n     */\n    requestPing() {\n        if (!this.poller) {\n            this.poller = setTimeout(() => {\n                this.poller = null;\n                const apiClient = connectionManager.currentApiClient();\n                const requestSent = new Date();\n                apiClient.getServerTime().then((response) => {\n                    const responseReceived = new Date();\n                    response.json().then((data) => {\n                        const requestReceived = new Date(data.RequestReceptionTime);\n                        const responseSent = new Date(data.ResponseTransmissionTime);\n\n                        const measurement = new Measurement(requestSent, requestReceived, responseSent, responseReceived);\n                        this.updateTimeOffset(measurement);\n\n                        // Avoid overloading server\n                        if (this.pings >= GreedyPingCount) {\n                            this.pollingInterval = PollingIntervalLowProfile;\n                        } else {\n                            this.pings++;\n                        }\n\n                        events.trigger(this, 'update', [null, this.getTimeOffset(), this.getPing()]);\n                    });\n                }).catch((error) => {\n                    console.error(error);\n                    events.trigger(this, 'update', [error, null, null]);\n                }).finally(() => {\n                    this.requestPing();\n                });\n\n            }, this.pollingInterval);\n        }\n    }\n\n    /**\n     * Drops accumulated measurements.\n     */\n    resetMeasurements () {\n        this.measurement = null;\n        this.measurements = [];\n    }\n\n    /**\n     * Starts the time poller.\n     */\n    startPing() {\n        this.requestPing();\n    }\n\n    /**\n     * Stops the time poller.\n     */\n    stopPing() {\n        if (this.poller) {\n            clearTimeout(this.poller);\n            this.poller = null;\n        }\n    }\n\n    /**\n     * Resets poller into greedy mode.\n     */\n    forceUpdate() {\n        this.stopPing();\n        this.pollingInterval = PollingIntervalGreedy;\n        this.pings = 0;\n        this.startPing();\n    }\n\n    /**\n     * Converts server time to local time.\n     * @param {Date} server The time to convert.\n     * @returns {Date} Local time.\n     */\n    serverDateToLocal(server) {\n        // server - local = offset\n        return new Date(server.getTime() - this.getTimeOffset());\n    }\n\n    /**\n     * Converts local time to server time.\n     * @param {Date} local The time to convert.\n     * @returns {Date} Server time.\n     */\n    localDateToServer(local) {\n        // server - local = offset\n        return new Date(local.getTime() + this.getTimeOffset());\n    }\n}\n\n/** TimeSyncManager singleton. */\nexport default new TimeSyncManager();\n"]}