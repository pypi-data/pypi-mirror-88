{"version":3,"sources":["components/subtitlesettings/subtitlesettings.js"],"names":["define","require","globalize","appSettings","appHost","focusManager","loading","connectionManager","subtitleAppearanceHelper","dom","events","getSubtitleAppearanceObject","context","appearanceSettings","textSize","querySelector","value","dropShadow","font","textBackground","textColor","loadForm","user","userSettings","apiClient","getCultures","then","allCultures","supports","Policy","EnableVideoPlaybackTranscoding","classList","remove","selectSubtitleLanguage","populateLanguages","select","languages","html","translate","i","length","culture","ThreeLetterISOLanguageName","DisplayName","innerHTML","Configuration","SubtitleLanguagePreference","SubtitleMode","dispatchEvent","CustomEvent","get","onAppearanceFieldChange","target","hide","save","instance","userId","enableSaveConfirmation","show","set","getUser","saveUser","userSettingsInstance","appearanceKey","getSubtitleAppearanceSettings","Object","assign","setSubtitleAppearanceSettings","updateUserConfiguration","Id","toast","trigger","onSubmit","e","self","this","getApiClient","options","serverId","setUserInfo","element","preventDefault","onSubtitleModeChange","view","parentWithClass","subtitlesHelp","querySelectorAll","add","elements","window","text","applyStyles","SubtitleSettings","embed","template","translateDocument","addEventListener","bind","enableSaveButton","loadData","autoFocus","prototype","dataLoaded","submit","call","destroy"],"mappings":"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","file":"subtitlesettings.js","sourcesContent":["define(['require', 'globalize', 'appSettings', 'apphost', 'focusManager', 'loading', 'connectionManager', 'subtitleAppearanceHelper', 'dom', 'events', 'listViewStyle', 'emby-select', 'emby-input', 'emby-checkbox', 'flexStyles'], function (require, globalize, appSettings, appHost, focusManager, loading, connectionManager, subtitleAppearanceHelper, dom, events) {\n    'use strict';\n\n    function populateLanguages(select, languages) {\n        var html = '';\n\n        html += \"<option value=''>\" + globalize.translate('AnyLanguage') + '</option>';\n        for (var i = 0, length = languages.length; i < length; i++) {\n            var culture = languages[i];\n            html += \"<option value='\" + culture.ThreeLetterISOLanguageName + \"'>\" + culture.DisplayName + '</option>';\n        }\n\n        select.innerHTML = html;\n    }\n\n    function getSubtitleAppearanceObject(context) {\n        var appearanceSettings = {};\n\n        appearanceSettings.textSize = context.querySelector('#selectTextSize').value;\n        appearanceSettings.dropShadow = context.querySelector('#selectDropShadow').value;\n        appearanceSettings.font = context.querySelector('#selectFont').value;\n        appearanceSettings.textBackground = context.querySelector('#inputTextBackground').value;\n        appearanceSettings.textColor = context.querySelector('#inputTextColor').value;\n\n        return appearanceSettings;\n    }\n\n    function loadForm(context, user, userSettings, appearanceSettings, apiClient) {\n\n        apiClient.getCultures().then(function (allCultures) {\n\n            if (appHost.supports('subtitleburnsettings') && user.Policy.EnableVideoPlaybackTranscoding) {\n                context.querySelector('.fldBurnIn').classList.remove('hide');\n            }\n\n            var selectSubtitleLanguage = context.querySelector('#selectSubtitleLanguage');\n\n            populateLanguages(selectSubtitleLanguage, allCultures);\n\n            selectSubtitleLanguage.value = user.Configuration.SubtitleLanguagePreference || '';\n            context.querySelector('#selectSubtitlePlaybackMode').value = user.Configuration.SubtitleMode || '';\n\n            context.querySelector('#selectSubtitlePlaybackMode').dispatchEvent(new CustomEvent('change', {}));\n\n            context.querySelector('#selectTextSize').value = appearanceSettings.textSize || '';\n            context.querySelector('#selectDropShadow').value = appearanceSettings.dropShadow || '';\n            context.querySelector('#inputTextBackground').value = appearanceSettings.textBackground || 'transparent';\n            context.querySelector('#inputTextColor').value = appearanceSettings.textColor || '#ffffff';\n            context.querySelector('#selectFont').value = appearanceSettings.font || '';\n\n            context.querySelector('#selectSubtitleBurnIn').value = appSettings.get('subtitleburnin') || '';\n\n            onAppearanceFieldChange({\n                target: context.querySelector('#selectTextSize')\n            });\n\n            loading.hide();\n        });\n    }\n\n    function saveUser(context, user, userSettingsInstance, appearanceKey, apiClient) {\n\n        var appearanceSettings = userSettingsInstance.getSubtitleAppearanceSettings(appearanceKey);\n        appearanceSettings = Object.assign(appearanceSettings, getSubtitleAppearanceObject(context));\n\n        userSettingsInstance.setSubtitleAppearanceSettings(appearanceSettings, appearanceKey);\n\n        user.Configuration.SubtitleLanguagePreference = context.querySelector('#selectSubtitleLanguage').value;\n        user.Configuration.SubtitleMode = context.querySelector('#selectSubtitlePlaybackMode').value;\n\n        return apiClient.updateUserConfiguration(user.Id, user.Configuration);\n    }\n\n    function save(instance, context, userId, userSettings, apiClient, enableSaveConfirmation) {\n\n        loading.show();\n\n        appSettings.set('subtitleburnin', context.querySelector('#selectSubtitleBurnIn').value);\n\n        apiClient.getUser(userId).then(function (user) {\n\n            saveUser(context, user, userSettings, instance.appearanceKey, apiClient).then(function () {\n\n                loading.hide();\n                if (enableSaveConfirmation) {\n                    require(['toast'], function (toast) {\n                        toast(globalize.translate('SettingsSaved'));\n                    });\n                }\n\n                events.trigger(instance, 'saved');\n\n            }, function () {\n                loading.hide();\n            });\n        });\n    }\n\n    function onSubmit(e) {\n        var self = this;\n        var apiClient = connectionManager.getApiClient(self.options.serverId);\n        var userId = self.options.userId;\n        var userSettings = self.options.userSettings;\n\n        userSettings.setUserInfo(userId, apiClient).then(function () {\n            var enableSaveConfirmation = self.options.enableSaveConfirmation;\n            save(self, self.options.element, userId, userSettings, apiClient, enableSaveConfirmation);\n        });\n\n        // Disable default form submission\n        if (e) {\n            e.preventDefault();\n        }\n\n        return false;\n    }\n\n    function onSubtitleModeChange(e) {\n\n        var view = dom.parentWithClass(e.target, 'subtitlesettings');\n\n        var subtitlesHelp = view.querySelectorAll('.subtitlesHelp');\n        for (var i = 0, length = subtitlesHelp.length; i < length; i++) {\n            subtitlesHelp[i].classList.add('hide');\n        }\n        view.querySelector('.subtitles' + this.value + 'Help').classList.remove('hide');\n    }\n\n    function onAppearanceFieldChange(e) {\n\n        var view = dom.parentWithClass(e.target, 'subtitlesettings');\n\n        var appearanceSettings = getSubtitleAppearanceObject(view);\n\n        var elements = {\n            window: view.querySelector('.subtitleappearance-preview-window'),\n            text: view.querySelector('.subtitleappearance-preview-text')\n        };\n\n        subtitleAppearanceHelper.applyStyles(elements, appearanceSettings);\n    }\n\n    function embed(options, self) {\n\n        require(['text!./subtitlesettings.template.html'], function (template) {\n\n            options.element.classList.add('subtitlesettings');\n            options.element.innerHTML = globalize.translateDocument(template, 'core');\n\n            options.element.querySelector('form').addEventListener('submit', onSubmit.bind(self));\n\n            options.element.querySelector('#selectSubtitlePlaybackMode').addEventListener('change', onSubtitleModeChange);\n            options.element.querySelector('#selectTextSize').addEventListener('change', onAppearanceFieldChange);\n            options.element.querySelector('#selectDropShadow').addEventListener('change', onAppearanceFieldChange);\n            options.element.querySelector('#selectFont').addEventListener('change', onAppearanceFieldChange);\n            options.element.querySelector('#inputTextColor').addEventListener('change', onAppearanceFieldChange);\n            options.element.querySelector('#inputTextBackground').addEventListener('change', onAppearanceFieldChange);\n\n            if (options.enableSaveButton) {\n                options.element.querySelector('.btnSave').classList.remove('hide');\n            }\n\n            if (appHost.supports('subtitleappearancesettings')) {\n                options.element.querySelector('.subtitleAppearanceSection').classList.remove('hide');\n            }\n\n            self.loadData();\n\n            if (options.autoFocus) {\n                focusManager.autoFocus(options.element);\n            }\n        });\n    }\n\n    function SubtitleSettings(options) {\n\n        this.options = options;\n\n        embed(options, this);\n    }\n\n    SubtitleSettings.prototype.loadData = function () {\n\n        var self = this;\n        var context = self.options.element;\n\n        loading.show();\n\n        var userId = self.options.userId;\n        var apiClient = connectionManager.getApiClient(self.options.serverId);\n        var userSettings = self.options.userSettings;\n\n        apiClient.getUser(userId).then(function (user) {\n            userSettings.setUserInfo(userId, apiClient).then(function () {\n                self.dataLoaded = true;\n\n                var appearanceSettings = userSettings.getSubtitleAppearanceSettings(self.options.appearanceKey);\n\n                loadForm(context, user, userSettings, appearanceSettings, apiClient);\n            });\n        });\n    };\n\n    SubtitleSettings.prototype.submit = function () {\n        onSubmit.call(this);\n    };\n\n    SubtitleSettings.prototype.destroy = function () {\n        this.options = null;\n    };\n\n    return SubtitleSettings;\n});\n"]}