{"version":3,"sources":["components/nowPlayingBar/nowPlayingBar.js"],"names":["define","require","datetime","itemHelper","events","browser","imageLoader","layoutManager","playbackManager","nowPlayingHelper","appHost","dom","connectionManager","itemContextMenu","currentPlayer","currentTimeElement","nowPlayingImageElement","nowPlayingTextElement","nowPlayingUserData","muteButton","volumeSlider","volumeSliderContainer","playPauseButtons","positionSlider","toggleRepeatButton","toggleRepeatButtonIcon","isEnabled","nowPlayingBarElement","currentImgUrl","currentPlayerSupportedCommands","lastUpdateTime","lastPlayerState","currentRuntimeTicks","isVisibilityAllowed","onSlideDownComplete","this","classList","add","slideUp","elem","removeEventListener","whichTransitionEvent","once","remove","offsetWidth","onPlayPauseClick","playPause","bindEvents","querySelector","querySelectorAll","addEventListener","toggleMute","stop","forEach","button","nextTrack","e","NowPlayingItem","MediaType","_currentTime","previousTrack","detail","seekPercent","value","toggleQueueShuffleMode","getRepeatMode","setRepeatMode","toggle","supports","setVolume","target","newPercent","parseFloat","getBubbleText","ticks","getDisplayRunningTime","parentWithTag","showRemoteControl","appRouter","showNowPlaying","getNowPlayingBar","Promise","resolve","reject","appfooter","itemShortcuts","parentContainer","element","insertAdjacentHTML","getNowPlayingBarHtml","html","mobile","hideButton","safari","slow","on","updatePlayPauseState","isPaused","icon","updatePlayerStateInternal","event","state","player","showNowPlayingBar","hideNowPlayingBar","then","playerInfo","getPlayerInfo","playState","PlayState","IsPaused","supportedCommands","indexOf","updateRepeatModeDisplay","onQueueShuffleModeChange","updatePlayerVolumeState","IsMuted","VolumeLevel","dragging","disabled","CanSeek","isProgressClear","MediaSource","RunTimeTicks","setIsClear","nowPlayingItem","updateTimeDisplay","PositionTicks","getBufferedRanges","updateNowPlayingInfo","textLines","getNowPlayingNames","innerHTML","itemText","document","createElement","secondaryText","length","secondary","text","appendChild","url","seriesImageUrl","item","options","Error","Type","type","SeriesPrimaryImageTag","tag","getApiClient","ServerId","getScaledImageUrl","SeriesId","SeriesThumbImageTag","ParentThumbImageTag","ParentThumbItemId","height","imageUrl","ImageTags","PrimaryImageItemId","Id","AlbumId","AlbumPrimaryImageTag","isRefreshing","lazyImage","style","display","marginLeft","backgroundImage","apiClient","getItem","getCurrentUserId","userData","UserData","likes","Likes","contextButton","contextButtonClone","cloneNode","parentNode","replaceChild","play","queue","clearQueue","positionTo","getCurrentUser","user","show","Object","assign","IsFavorite","repeatMode","positionTicks","runtimeTicks","bufferedRanges","pct","setBufferedRanges","timeText","isMuted","volumeLevel","showMuteButton","showVolumeSlider","muteButtonIcon","isLocalPlayer","showButton","onPlaybackStart","console","debug","onStateChanged","call","onRepeatModeChange","shuffleMode","getQueueShuffleMode","toggleShuffleButton","getElementsByClassName","slideDown","onPlaybackStopped","NextMediaType","onPlayPauseStateChanged","paused","tv","onTimeUpdate","now","Date","getTime","duration","currentTime","onVolumeChanged","getVolume","refreshFromPlayer","getPlayerState","bindToPlayer","releaseCurrentPlayer","off","getCurrentPlayer","enableMediaControl"],"mappings":"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","file":"nowPlayingBar.js","sourcesContent":["define(['require', 'datetime', 'itemHelper', 'events', 'browser', 'imageLoader', 'layoutManager', 'playbackManager', 'nowPlayingHelper', 'apphost', 'dom', 'connectionManager', 'itemContextMenu', 'paper-icon-button-light', 'emby-ratingbutton'], function (require, datetime, itemHelper, events, browser, imageLoader, layoutManager, playbackManager, nowPlayingHelper, appHost, dom, connectionManager, itemContextMenu) {\n    'use strict';\n\n    var currentPlayer;\n    var currentPlayerSupportedCommands = [];\n\n    var currentTimeElement;\n    var nowPlayingImageElement;\n    var nowPlayingTextElement;\n    var nowPlayingUserData;\n    var muteButton;\n    var volumeSlider;\n    var volumeSliderContainer;\n    var playPauseButtons;\n    var positionSlider;\n    var toggleRepeatButton;\n    var toggleRepeatButtonIcon;\n\n    var lastUpdateTime = 0;\n    var lastPlayerState = {};\n    var isEnabled;\n    var currentRuntimeTicks = 0;\n\n    var isVisibilityAllowed = true;\n\n    function getNowPlayingBarHtml() {\n\n        var html = '';\n\n        html += '<div class=\"nowPlayingBar hide nowPlayingBar-hidden\">';\n\n        html += '<div class=\"nowPlayingBarTop\">';\n        html += '<div class=\"nowPlayingBarPositionContainer sliderContainer\">';\n        html += '<input type=\"range\" is=\"emby-slider\" pin step=\".01\" min=\"0\" max=\"100\" value=\"0\" class=\"slider-medium-thumb nowPlayingBarPositionSlider\" data-slider-keep-progress=\"true\"/>';\n        html += '</div>';\n\n        html += '<div class=\"nowPlayingBarInfoContainer\">';\n        html += '<div class=\"nowPlayingImage\"></div>';\n        html += '<div class=\"nowPlayingBarText\"></div>';\n        html += '</div>';\n\n        // The onclicks are needed due to the return false above\n        html += '<div class=\"nowPlayingBarCenter\">';\n\n        html += '<button is=\"paper-icon-button-light\" class=\"previousTrackButton mediaButton\"><span class=\"material-icons skip_previous\"></span></button>';\n\n        html += '<button is=\"paper-icon-button-light\" class=\"playPauseButton mediaButton\"><span class=\"material-icons pause\"></span></button>';\n\n        html += '<button is=\"paper-icon-button-light\" class=\"stopButton mediaButton\"><span class=\"material-icons stop\"></span></button>';\n        if (!layoutManager.mobile) {\n            html += '<button is=\"paper-icon-button-light\" class=\"nextTrackButton mediaButton\"><span class=\"material-icons skip_next\"></span></button>';\n        }\n\n        html += '<div class=\"nowPlayingBarCurrentTime\"></div>';\n        html += '</div>';\n\n        html += '<div class=\"nowPlayingBarRight\">';\n\n        html += '<button is=\"paper-icon-button-light\" class=\"muteButton mediaButton\"><span class=\"material-icons volume_up\"></span></button>';\n\n        html += '<div class=\"sliderContainer nowPlayingBarVolumeSliderContainer hide\" style=\"width:9em;vertical-align:middle;display:inline-flex;\">';\n        html += '<input type=\"range\" is=\"emby-slider\" pin step=\"1\" min=\"0\" max=\"100\" value=\"0\" class=\"slider-medium-thumb nowPlayingBarVolumeSlider\"/>';\n        html += '</div>';\n\n        html += '<button is=\"paper-icon-button-light\" class=\"toggleRepeatButton mediaButton\"><span class=\"material-icons repeat\"></span></button>';\n        html += '<button is=\"paper-icon-button-light\" class=\"btnShuffleQueue mediaButton\"><span class=\"material-icons shuffle\"></span></button>';\n\n        html += '<div class=\"nowPlayingBarUserDataButtons\">';\n        html += '</div>';\n\n        html += '<button is=\"paper-icon-button-light\" class=\"playPauseButton mediaButton\"><span class=\"material-icons pause\"></span></button>';\n        if (layoutManager.mobile) {\n            html += '<button is=\"paper-icon-button-light\" class=\"nextTrackButton mediaButton\"><span class=\"material-icons skip_next\"></span></button>';\n        } else {\n            html += '<button is=\"paper-icon-button-light\" class=\"btnToggleContextMenu mediaButton\"><span class=\"material-icons more_vert\"></span></button>';\n        }\n\n        html += '</div>';\n        html += '</div>';\n\n        html += '</div>';\n\n        return html;\n    }\n\n    function onSlideDownComplete() {\n\n        this.classList.add('hide');\n    }\n\n    function slideDown(elem) {\n\n        // trigger reflow\n        void elem.offsetWidth;\n\n        elem.classList.add('nowPlayingBar-hidden');\n\n        dom.addEventListener(elem, dom.whichTransitionEvent(), onSlideDownComplete, {\n            once: true\n        });\n    }\n\n    function slideUp(elem) {\n\n        dom.removeEventListener(elem, dom.whichTransitionEvent(), onSlideDownComplete, {\n            once: true\n        });\n\n        elem.classList.remove('hide');\n\n        // trigger reflow\n        void elem.offsetWidth;\n\n        elem.classList.remove('nowPlayingBar-hidden');\n    }\n\n    function onPlayPauseClick() {\n        playbackManager.playPause(currentPlayer);\n    }\n\n    function bindEvents(elem) {\n\n        currentTimeElement = elem.querySelector('.nowPlayingBarCurrentTime');\n        nowPlayingImageElement = elem.querySelector('.nowPlayingImage');\n        nowPlayingTextElement = elem.querySelector('.nowPlayingBarText');\n        nowPlayingUserData = elem.querySelector('.nowPlayingBarUserDataButtons');\n        positionSlider = elem.querySelector('.nowPlayingBarPositionSlider');\n        muteButton = elem.querySelector('.muteButton');\n        playPauseButtons = elem.querySelectorAll('.playPauseButton');\n        toggleRepeatButton = elem.querySelector('.toggleRepeatButton');\n        volumeSlider = elem.querySelector('.nowPlayingBarVolumeSlider');\n        volumeSliderContainer = elem.querySelector('.nowPlayingBarVolumeSliderContainer');\n\n        muteButton.addEventListener('click', function () {\n\n            if (currentPlayer) {\n                playbackManager.toggleMute(currentPlayer);\n            }\n\n        });\n\n        elem.querySelector('.stopButton').addEventListener('click', function () {\n\n            if (currentPlayer) {\n                playbackManager.stop(currentPlayer);\n            }\n        });\n\n        playPauseButtons.forEach((button) => {\n            button.addEventListener('click', onPlayPauseClick);\n        });\n\n        elem.querySelector('.nextTrackButton').addEventListener('click', function () {\n\n            if (currentPlayer) {\n                playbackManager.nextTrack(currentPlayer);\n            }\n        });\n\n        elem.querySelector('.previousTrackButton').addEventListener('click', function (e) {\n            if (currentPlayer) {\n                if (lastPlayerState.NowPlayingItem.MediaType === 'Audio' && (currentPlayer._currentTime >= 5 || !playbackManager.previousTrack(currentPlayer))) {\n                    // Cancel this event if doubleclick is fired\n                    if (e.detail > 1 && playbackManager.previousTrack(currentPlayer)) {\n                        return;\n                    }\n                    playbackManager.seekPercent(0, currentPlayer);\n                    // This is done automatically by playbackManager, however, setting this here gives instant visual feedback.\n                    // TODO: Check why seekPercentage doesn't reflect the changes inmmediately, so we can remove this workaround.\n                    positionSlider.value = 0;\n                } else {\n                    playbackManager.previousTrack(currentPlayer);\n                }\n            }\n        });\n\n        elem.querySelector('.previousTrackButton').addEventListener('dblclick', function () {\n            if (currentPlayer) {\n                playbackManager.previousTrack(currentPlayer);\n            }\n        });\n\n        elem.querySelector('.btnShuffleQueue').addEventListener('click', function () {\n            if (currentPlayer) {\n                playbackManager.toggleQueueShuffleMode();\n            }\n        });\n\n        toggleRepeatButton = elem.querySelector('.toggleRepeatButton');\n        toggleRepeatButton.addEventListener('click', function () {\n            switch (playbackManager.getRepeatMode()) {\n                case 'RepeatAll':\n                    playbackManager.setRepeatMode('RepeatOne');\n                    break;\n                case 'RepeatOne':\n                    playbackManager.setRepeatMode('RepeatNone');\n                    break;\n                case 'RepeatNone':\n                    playbackManager.setRepeatMode('RepeatAll');\n            }\n        });\n\n        toggleRepeatButtonIcon = toggleRepeatButton.querySelector('.material-icons');\n\n        volumeSliderContainer.classList.toggle('hide', appHost.supports('physicalvolumecontrol'));\n\n        volumeSlider.addEventListener('input', (e) => {\n            if (currentPlayer) {\n                currentPlayer.setVolume(e.target.value);\n            }\n        });\n\n        positionSlider.addEventListener('change', function () {\n\n            if (currentPlayer) {\n\n                var newPercent = parseFloat(this.value);\n\n                playbackManager.seekPercent(newPercent, currentPlayer);\n            }\n\n        });\n\n        positionSlider.getBubbleText = function (value) {\n\n            var state = lastPlayerState;\n\n            if (!state || !state.NowPlayingItem || !currentRuntimeTicks) {\n                return '--:--';\n            }\n\n            var ticks = currentRuntimeTicks;\n            ticks /= 100;\n            ticks *= value;\n\n            return datetime.getDisplayRunningTime(ticks);\n        };\n\n        elem.addEventListener('click', function (e) {\n\n            if (!dom.parentWithTag(e.target, ['BUTTON', 'INPUT'])) {\n                showRemoteControl();\n            }\n        });\n    }\n\n    function showRemoteControl() {\n\n        require(['appRouter'], function (appRouter) {\n            appRouter.showNowPlaying();\n        });\n    }\n\n    var nowPlayingBarElement;\n    function getNowPlayingBar() {\n\n        if (nowPlayingBarElement) {\n            return Promise.resolve(nowPlayingBarElement);\n        }\n\n        return new Promise(function (resolve, reject) {\n\n            require(['appFooter-shared', 'itemShortcuts', 'css!./nowPlayingBar.css', 'emby-slider'], function (appfooter, itemShortcuts) {\n\n                var parentContainer = appfooter.element;\n                nowPlayingBarElement = parentContainer.querySelector('.nowPlayingBar');\n\n                if (nowPlayingBarElement) {\n                    resolve(nowPlayingBarElement);\n                    return;\n                }\n\n                parentContainer.insertAdjacentHTML('afterbegin', getNowPlayingBarHtml());\n                nowPlayingBarElement = parentContainer.querySelector('.nowPlayingBar');\n\n                if (layoutManager.mobile) {\n                    hideButton(nowPlayingBarElement.querySelector('.btnShuffleQueue'));\n                    hideButton(nowPlayingBarElement.querySelector('.nowPlayingBarCenter'));\n                }\n\n                if (browser.safari && browser.slow) {\n                    // Not handled well here. The wrong elements receive events, bar doesn't update quickly enough, etc.\n                    nowPlayingBarElement.classList.add('noMediaProgress');\n                }\n\n                itemShortcuts.on(nowPlayingBarElement);\n\n                bindEvents(nowPlayingBarElement);\n                resolve(nowPlayingBarElement);\n            });\n        });\n    }\n\n    function showButton(button) {\n        button.classList.remove('hide');\n    }\n\n    function hideButton(button) {\n        button.classList.add('hide');\n    }\n\n    function updatePlayPauseState(isPaused) {\n        if (playPauseButtons) {\n            playPauseButtons.forEach((button) => {\n                const icon = button.querySelector('.material-icons');\n                icon.classList.remove('play_arrow', 'pause');\n                icon.classList.add(isPaused ? 'play_arrow' : 'pause');\n            });\n        }\n    }\n\n    function updatePlayerStateInternal(event, state, player) {\n\n        showNowPlayingBar();\n\n        lastPlayerState = state;\n\n        var playerInfo = playbackManager.getPlayerInfo();\n\n        var playState = state.PlayState || {};\n\n        updatePlayPauseState(playState.IsPaused);\n\n        var supportedCommands = playerInfo.supportedCommands;\n        currentPlayerSupportedCommands = supportedCommands;\n\n        if (supportedCommands.indexOf('SetRepeatMode') === -1) {\n            toggleRepeatButton.classList.add('hide');\n        } else {\n            toggleRepeatButton.classList.remove('hide');\n        }\n\n        updateRepeatModeDisplay(playbackManager.getRepeatMode());\n        onQueueShuffleModeChange();\n\n        updatePlayerVolumeState(playState.IsMuted, playState.VolumeLevel);\n\n        if (positionSlider && !positionSlider.dragging) {\n            positionSlider.disabled = !playState.CanSeek;\n\n            // determines if both forward and backward buffer progress will be visible\n            var isProgressClear = state.MediaSource && state.MediaSource.RunTimeTicks == null;\n            positionSlider.setIsClear(isProgressClear);\n        }\n\n        var nowPlayingItem = state.NowPlayingItem || {};\n        updateTimeDisplay(playState.PositionTicks, nowPlayingItem.RunTimeTicks, playbackManager.getBufferedRanges(player));\n\n        updateNowPlayingInfo(state);\n    }\n\n    function updateRepeatModeDisplay(repeatMode) {\n        toggleRepeatButtonIcon.classList.remove('repeat', 'repeat_one');\n        const cssClass = 'buttonActive';\n\n        switch (repeatMode) {\n            case 'RepeatAll':\n                toggleRepeatButtonIcon.classList.add('repeat');\n                toggleRepeatButton.classList.add(cssClass);\n                break;\n            case 'RepeatOne':\n                toggleRepeatButtonIcon.classList.add('repeat_one');\n                toggleRepeatButton.classList.add(cssClass);\n                break;\n            case 'RepeatNone':\n            default:\n                toggleRepeatButtonIcon.classList.add('repeat');\n                toggleRepeatButton.classList.remove(cssClass);\n                break;\n        }\n    }\n\n    function updateTimeDisplay(positionTicks, runtimeTicks, bufferedRanges) {\n        // See bindEvents for why this is necessary\n        if (positionSlider && !positionSlider.dragging) {\n            if (runtimeTicks) {\n                var pct = positionTicks / runtimeTicks;\n                pct *= 100;\n\n                positionSlider.value = pct;\n            } else {\n                positionSlider.value = 0;\n            }\n        }\n\n        if (positionSlider) {\n            positionSlider.setBufferedRanges(bufferedRanges, runtimeTicks, positionTicks);\n        }\n\n        if (currentTimeElement) {\n            var timeText = positionTicks == null ? '--:--' : datetime.getDisplayRunningTime(positionTicks);\n            if (runtimeTicks) {\n                timeText += ' / ' + datetime.getDisplayRunningTime(runtimeTicks);\n            }\n\n            currentTimeElement.innerHTML = timeText;\n        }\n    }\n\n    function updatePlayerVolumeState(isMuted, volumeLevel) {\n\n        var supportedCommands = currentPlayerSupportedCommands;\n\n        var showMuteButton = true;\n        var showVolumeSlider = true;\n\n        if (supportedCommands.indexOf('ToggleMute') === -1) {\n            showMuteButton = false;\n        }\n\n        const muteButtonIcon = muteButton.querySelector('.material-icons');\n        muteButtonIcon.classList.remove('volume_off', 'volume_up');\n        muteButtonIcon.classList.add(isMuted ? 'volume_off' : 'volume_up');\n\n        if (supportedCommands.indexOf('SetVolume') === -1) {\n            showVolumeSlider = false;\n        }\n\n        if (currentPlayer.isLocalPlayer && appHost.supports('physicalvolumecontrol')) {\n            showMuteButton = false;\n            showVolumeSlider = false;\n        }\n\n        if (showMuteButton) {\n            showButton(muteButton);\n        } else {\n            hideButton(muteButton);\n        }\n\n        // See bindEvents for why this is necessary\n        if (volumeSlider) {\n\n            volumeSliderContainer.classList.toggle('hide', !showVolumeSlider);\n\n            if (!volumeSlider.dragging) {\n                volumeSlider.value = volumeLevel || 0;\n            }\n        }\n    }\n\n    function seriesImageUrl(item, options) {\n\n        if (!item) {\n            throw new Error('item cannot be null!');\n        }\n\n        if (item.Type !== 'Episode') {\n            return null;\n        }\n\n        options = options || {};\n        options.type = options.type || 'Primary';\n\n        if (options.type === 'Primary') {\n\n            if (item.SeriesPrimaryImageTag) {\n\n                options.tag = item.SeriesPrimaryImageTag;\n\n                return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.SeriesId, options);\n            }\n        }\n\n        if (options.type === 'Thumb') {\n\n            if (item.SeriesThumbImageTag) {\n\n                options.tag = item.SeriesThumbImageTag;\n\n                return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.SeriesId, options);\n            }\n            if (item.ParentThumbImageTag) {\n\n                options.tag = item.ParentThumbImageTag;\n\n                return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.ParentThumbItemId, options);\n            }\n        }\n\n        return null;\n    }\n\n    function imageUrl(item, options) {\n\n        if (!item) {\n            throw new Error('item cannot be null!');\n        }\n\n        options = options || {};\n        options.type = options.type || 'Primary';\n\n        if (item.ImageTags && item.ImageTags[options.type]) {\n\n            options.tag = item.ImageTags[options.type];\n            return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.PrimaryImageItemId || item.Id, options);\n        }\n\n        if (item.AlbumId && item.AlbumPrimaryImageTag) {\n\n            options.tag = item.AlbumPrimaryImageTag;\n            return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.AlbumId, options);\n        }\n\n        return null;\n    }\n\n    var currentImgUrl;\n    function updateNowPlayingInfo(state) {\n\n        var nowPlayingItem = state.NowPlayingItem;\n\n        var textLines = nowPlayingItem ? nowPlayingHelper.getNowPlayingNames(nowPlayingItem) : [];\n        nowPlayingTextElement.innerHTML = '';\n        if (textLines) {\n            let itemText = document.createElement('div');\n            let secondaryText = document.createElement('div');\n            secondaryText.classList.add('nowPlayingBarSecondaryText');\n            if (textLines.length > 1) {\n                textLines[1].secondary = true;\n                if (textLines[1].text) {\n                    let text = document.createElement('a');\n                    text.innerHTML = textLines[1].text;\n                    secondaryText.appendChild(text);\n                }\n            }\n\n            if (textLines[0].text) {\n                let text = document.createElement('a');\n                text.innerHTML = textLines[0].text;\n                itemText.appendChild(text);\n            }\n            nowPlayingTextElement.appendChild(itemText);\n            nowPlayingTextElement.appendChild(secondaryText);\n        }\n\n        var imgHeight = 70;\n\n        var url = nowPlayingItem ? (seriesImageUrl(nowPlayingItem, {\n            height: imgHeight\n        }) || imageUrl(nowPlayingItem, {\n            height: imgHeight\n        })) : null;\n\n        var isRefreshing = false;\n\n        if (url !== currentImgUrl) {\n            currentImgUrl = url;\n            isRefreshing = true;\n\n            if (url) {\n                imageLoader.lazyImage(nowPlayingImageElement, url);\n                nowPlayingImageElement.style.display = null;\n                nowPlayingTextElement.style.marginLeft = null;\n            } else {\n                nowPlayingImageElement.style.backgroundImage = '';\n                nowPlayingImageElement.style.display = 'none';\n                nowPlayingTextElement.style.marginLeft = '1em';\n            }\n        }\n\n        if (nowPlayingItem.Id) {\n            if (isRefreshing) {\n\n                var apiClient = connectionManager.getApiClient(nowPlayingItem.ServerId);\n                apiClient.getItem(apiClient.getCurrentUserId(), nowPlayingItem.Id).then(function (item) {\n                    var userData = item.UserData || {};\n                    var likes = userData.Likes == null ? '' : userData.Likes;\n                    if (!layoutManager.mobile) {\n                        let contextButton = nowPlayingBarElement.querySelector('.btnToggleContextMenu');\n                        // We remove the previous event listener by replacing the item in each update event\n                        let contextButtonClone = contextButton.cloneNode(true);\n                        contextButton.parentNode.replaceChild(contextButtonClone, contextButton);\n                        contextButton = nowPlayingBarElement.querySelector('.btnToggleContextMenu');\n                        let options = {\n                            play: false,\n                            queue: false,\n                            clearQueue: true,\n                            positionTo: contextButton\n                        };\n                        apiClient.getCurrentUser().then(function (user) {\n                            contextButton.addEventListener('click', function () {\n                                itemContextMenu.show(Object.assign({\n                                    item: item,\n                                    user: user\n                                }, options));\n                            });\n                        });\n                    }\n                    nowPlayingUserData.innerHTML = '<button is=\"emby-ratingbutton\" type=\"button\" class=\"listItemButton mediaButton paper-icon-button-light\" data-id=\"' + item.Id + '\" data-serverid=\"' + item.ServerId + '\" data-itemtype=\"' + item.Type + '\" data-likes=\"' + likes + '\" data-isfavorite=\"' + (userData.IsFavorite) + '\"><span class=\"material-icons favorite\"></span></button>';\n                });\n            }\n        } else {\n            nowPlayingUserData.innerHTML = '';\n        }\n    }\n\n    function onPlaybackStart(e, state) {\n        console.debug('nowplaying event: ' + e.type);\n        var player = this;\n        onStateChanged.call(player, e, state);\n    }\n\n    function onRepeatModeChange() {\n        if (!isEnabled) {\n            return;\n        }\n\n        updateRepeatModeDisplay(playbackManager.getRepeatMode());\n    }\n\n    function onQueueShuffleModeChange() {\n        if (!isEnabled) {\n            return;\n        }\n\n        let shuffleMode = playbackManager.getQueueShuffleMode();\n        let context = nowPlayingBarElement;\n        const cssClass = 'buttonActive';\n        let toggleShuffleButton = context.querySelector('.btnShuffleQueue');\n        switch (shuffleMode) {\n            case 'Shuffle':\n                toggleShuffleButton.classList.add(cssClass);\n                break;\n            case 'Sorted':\n            default:\n                toggleShuffleButton.classList.remove(cssClass);\n                break;\n        }\n    }\n\n    function showNowPlayingBar() {\n        if (!isVisibilityAllowed) {\n            hideNowPlayingBar();\n            return;\n        }\n\n        getNowPlayingBar().then(slideUp);\n    }\n\n    function hideNowPlayingBar() {\n\n        isEnabled = false;\n\n        // Use a timeout to prevent the bar from hiding and showing quickly\n        // in the event of a stop->play command\n\n        // Don't call getNowPlayingBar here because we don't want to end up creating it just to hide it\n        var elem = document.getElementsByClassName('nowPlayingBar')[0];\n        if (elem) {\n\n            slideDown(elem);\n        }\n    }\n\n    function onPlaybackStopped(e, state) {\n\n        console.debug('nowplaying event: ' + e.type);\n        var player = this;\n\n        if (player.isLocalPlayer) {\n            if (state.NextMediaType !== 'Audio') {\n                hideNowPlayingBar();\n            }\n        } else {\n            if (!state.NextMediaType) {\n                hideNowPlayingBar();\n            }\n        }\n    }\n\n    function onPlayPauseStateChanged(e) {\n\n        if (!isEnabled) {\n            return;\n        }\n\n        var player = this;\n        updatePlayPauseState(player.paused());\n    }\n\n    function onStateChanged(event, state) {\n\n        console.debug('nowplaying event: ' + event.type);\n        var player = this;\n\n        if (!state.NowPlayingItem || layoutManager.tv) {\n            hideNowPlayingBar();\n            return;\n        }\n\n        if (player.isLocalPlayer && state.NowPlayingItem && state.NowPlayingItem.MediaType === 'Video') {\n            hideNowPlayingBar();\n            return;\n        }\n\n        isEnabled = true;\n\n        if (nowPlayingBarElement) {\n            updatePlayerStateInternal(event, state, player);\n            return;\n        }\n\n        getNowPlayingBar().then(function () {\n            updatePlayerStateInternal(event, state, player);\n        });\n    }\n\n    function onTimeUpdate(e) {\n\n        if (!isEnabled) {\n            return;\n        }\n\n        // Try to avoid hammering the document with changes\n        var now = new Date().getTime();\n        if ((now - lastUpdateTime) < 700) {\n\n            return;\n        }\n        lastUpdateTime = now;\n\n        var player = this;\n        currentRuntimeTicks = playbackManager.duration(player);\n        updateTimeDisplay(playbackManager.currentTime(player), currentRuntimeTicks, playbackManager.getBufferedRanges(player));\n    }\n\n    function releaseCurrentPlayer() {\n\n        var player = currentPlayer;\n\n        if (player) {\n            events.off(player, 'playbackstart', onPlaybackStart);\n            events.off(player, 'statechange', onPlaybackStart);\n            events.off(player, 'repeatmodechange', onRepeatModeChange);\n            events.off(player, 'shufflequeuemodechange', onQueueShuffleModeChange);\n            events.off(player, 'playbackstop', onPlaybackStopped);\n            events.off(player, 'volumechange', onVolumeChanged);\n            events.off(player, 'pause', onPlayPauseStateChanged);\n            events.off(player, 'unpause', onPlayPauseStateChanged);\n            events.off(player, 'timeupdate', onTimeUpdate);\n\n            currentPlayer = null;\n            hideNowPlayingBar();\n        }\n    }\n\n    function onVolumeChanged(e) {\n\n        if (!isEnabled) {\n            return;\n        }\n\n        var player = this;\n\n        updatePlayerVolumeState(player.isMuted(), player.getVolume());\n    }\n\n    function refreshFromPlayer(player) {\n\n        var state = playbackManager.getPlayerState(player);\n\n        onStateChanged.call(player, { type: 'init' }, state);\n    }\n\n    function bindToPlayer(player) {\n\n        if (player === currentPlayer) {\n            return;\n        }\n\n        releaseCurrentPlayer();\n\n        currentPlayer = player;\n\n        if (!player) {\n            return;\n        }\n\n        refreshFromPlayer(player);\n\n        events.on(player, 'playbackstart', onPlaybackStart);\n        events.on(player, 'statechange', onPlaybackStart);\n        events.on(player, 'repeatmodechange', onRepeatModeChange);\n        events.on(player, 'shufflequeuemodechange', onQueueShuffleModeChange);\n        events.on(player, 'playbackstop', onPlaybackStopped);\n        events.on(player, 'volumechange', onVolumeChanged);\n        events.on(player, 'pause', onPlayPauseStateChanged);\n        events.on(player, 'unpause', onPlayPauseStateChanged);\n        events.on(player, 'timeupdate', onTimeUpdate);\n    }\n\n    events.on(playbackManager, 'playerchange', function () {\n        bindToPlayer(playbackManager.getCurrentPlayer());\n    });\n\n    bindToPlayer(playbackManager.getCurrentPlayer());\n\n    document.addEventListener('viewbeforeshow', function (e) {\n\n        if (!e.detail.options.enableMediaControl) {\n\n            if (isVisibilityAllowed) {\n                isVisibilityAllowed = false;\n                hideNowPlayingBar();\n            }\n\n        } else if (!isVisibilityAllowed) {\n\n            isVisibilityAllowed = true;\n            if (currentPlayer) {\n                refreshFromPlayer(currentPlayer);\n            } else {\n                hideNowPlayingBar();\n            }\n        }\n    });\n});\n"]}