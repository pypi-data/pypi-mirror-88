{"version":3,"sources":["components/guide/guide-settings.js"],"names":["define","dialogHelper","globalize","userSettings","layoutManager","connectionManager","require","loading","scrollHelper","show","showEditor","options","Promise","resolve","reject","settingsChanged","template","dialogOptions","removeOnClose","scrollY","tv","size","dlg","createDialog","classList","add","html","translateDocument","innerHTML","addEventListener","centerFocus","off","querySelector","save","context","i","length","chkIndicators","querySelectorAll","type","getAttribute","set","checked","sortBys","value","saveCategories","categories","chkCategorys","push","close","on","load","get","sortByValue","loadCategories","selectedCategories","indexOf","open"],"mappings":"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","file":"guide-settings.js","sourcesContent":["define(['dialogHelper', 'globalize', 'userSettings', 'layoutManager', 'connectionManager', 'require', 'loading', 'scrollHelper', 'emby-checkbox', 'emby-radio', 'css!./../formdialog', 'material-icons'], function (dialogHelper, globalize, userSettings, layoutManager, connectionManager, require, loading, scrollHelper) {\n    'use strict';\n\n    function saveCategories(context, options) {\n\n        var categories = [];\n\n        var chkCategorys = context.querySelectorAll('.chkCategory');\n        for (var i = 0, length = chkCategorys.length; i < length; i++) {\n\n            var type = chkCategorys[i].getAttribute('data-type');\n\n            if (chkCategorys[i].checked) {\n                categories.push(type);\n            }\n        }\n\n        if (categories.length >= 4) {\n            categories.push('series');\n        }\n\n        // differentiate between none and all\n        categories.push('all');\n        options.categories = categories;\n    }\n\n    function loadCategories(context, options) {\n\n        var selectedCategories = options.categories || [];\n\n        var chkCategorys = context.querySelectorAll('.chkCategory');\n        for (var i = 0, length = chkCategorys.length; i < length; i++) {\n\n            var type = chkCategorys[i].getAttribute('data-type');\n\n            chkCategorys[i].checked = !selectedCategories.length || selectedCategories.indexOf(type) !== -1;\n        }\n    }\n\n    function save(context) {\n\n        var i;\n        var length;\n\n        var chkIndicators = context.querySelectorAll('.chkIndicator');\n        for (i = 0, length = chkIndicators.length; i < length; i++) {\n\n            var type = chkIndicators[i].getAttribute('data-type');\n            userSettings.set('guide-indicator-' + type, chkIndicators[i].checked);\n        }\n\n        userSettings.set('guide-colorcodedbackgrounds', context.querySelector('.chkColorCodedBackgrounds').checked);\n        userSettings.set('livetv-favoritechannelsattop', context.querySelector('.chkFavoriteChannelsAtTop').checked);\n\n        var sortBys = context.querySelectorAll('.chkSortOrder');\n        for (i = 0, length = sortBys.length; i < length; i++) {\n            if (sortBys[i].checked) {\n                userSettings.set('livetv-channelorder', sortBys[i].value);\n                break;\n            }\n        }\n    }\n\n    function load(context) {\n\n        var i;\n        var length;\n\n        var chkIndicators = context.querySelectorAll('.chkIndicator');\n        for (i = 0, length = chkIndicators.length; i < length; i++) {\n\n            var type = chkIndicators[i].getAttribute('data-type');\n\n            if (chkIndicators[i].getAttribute('data-default') === 'true') {\n                chkIndicators[i].checked = userSettings.get('guide-indicator-' + type) !== 'false';\n            } else {\n                chkIndicators[i].checked = userSettings.get('guide-indicator-' + type) === 'true';\n            }\n        }\n\n        context.querySelector('.chkColorCodedBackgrounds').checked = userSettings.get('guide-colorcodedbackgrounds') === 'true';\n        context.querySelector('.chkFavoriteChannelsAtTop').checked = userSettings.get('livetv-favoritechannelsattop') !== 'false';\n\n        var sortByValue = userSettings.get('livetv-channelorder') || 'Number';\n\n        var sortBys = context.querySelectorAll('.chkSortOrder');\n        for (i = 0, length = sortBys.length; i < length; i++) {\n            sortBys[i].checked = sortBys[i].value === sortByValue;\n        }\n    }\n\n    function showEditor(options) {\n\n        return new Promise(function (resolve, reject) {\n\n            var settingsChanged = false;\n\n            require(['text!./guide-settings.template.html'], function (template) {\n\n                var dialogOptions = {\n                    removeOnClose: true,\n                    scrollY: false\n                };\n\n                if (layoutManager.tv) {\n                    dialogOptions.size = 'fullscreen';\n                } else {\n                    dialogOptions.size = 'small';\n                }\n\n                var dlg = dialogHelper.createDialog(dialogOptions);\n\n                dlg.classList.add('formDialog');\n\n                var html = '';\n\n                html += globalize.translateDocument(template, 'core');\n\n                dlg.innerHTML = html;\n\n                dlg.addEventListener('change', function () {\n\n                    settingsChanged = true;\n                });\n\n                dlg.addEventListener('close', function () {\n\n                    if (layoutManager.tv) {\n                        scrollHelper.centerFocus.off(dlg.querySelector('.formDialogContent'), false);\n                    }\n\n                    save(dlg);\n                    saveCategories(dlg, options);\n\n                    if (settingsChanged) {\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                });\n\n                dlg.querySelector('.btnCancel').addEventListener('click', function () {\n                    dialogHelper.close(dlg);\n                });\n\n                if (layoutManager.tv) {\n                    scrollHelper.centerFocus.on(dlg.querySelector('.formDialogContent'), false);\n                }\n\n                load(dlg);\n                loadCategories(dlg, options);\n                dialogHelper.open(dlg);\n            });\n        });\n    }\n\n    return {\n        show: showEditor\n    };\n});\n"]}