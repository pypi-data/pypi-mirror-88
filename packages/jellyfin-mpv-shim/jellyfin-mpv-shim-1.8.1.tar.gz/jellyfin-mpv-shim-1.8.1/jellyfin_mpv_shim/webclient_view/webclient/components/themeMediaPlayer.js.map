{"version":3,"sources":["components/themeMediaPlayer.js"],"names":["define","playbackManager","userSettings","connectionManager","currentOwnerId","playThemeMedia","items","ownerId","currentThemeItems","filter","i","enabled","mediaType","enableThemeVideos","enableThemeSongs","MediaType","length","isPlaying","map","Id","play","fullscreen","enableRemotePlayers","then","stopIfPlaying","stop","excludeTypes","document","addEventListener","e","item","detail","state","ServerId","loadThemeMedia","CollectionType","indexOf","Type","apiClient","getApiClient","getThemeMedia","getCurrentUserId","themeMediaResult","ThemeVideosResult","Items","OwnerId","ThemeSongsResult","options","supportsThemeMedia"],"mappings":"AAAA,aAAAA,OAAO,CAAC,kBAAmB,eAAgB,sBAAsB,SAAUC,gBAAiBC,aAAcC,mBAGtG,IAAIC,eAGJ,SAASC,eAAeC,MAAOC,SAE3B,IAAIC,kBAAoBF,MAAMG,QAAO,SAAUC,GAC3C,OAoCR,SAASC,QAAQC,WAEb,GAAkB,UAAdA,UACA,OAAOV,aAAaW,oBAGxB,OAAOX,aAAaY,mBA1CTH,CAAQD,EAAEK,cAGrB,GAAIP,kBAAkBQ,OAAQ,CAI1B,IAAKZ,gBAAkBH,gBAAgBgB,YACnC,OAGcT,kBAAkBU,KAAI,SAAUR,GAC9C,OAAOA,EAAES,MAGblB,gBAAgBmB,KAAK,CACjBd,MAAOE,kBACPa,YAAY,EACZC,qBAAqB,IACtBC,MAAK,WACJnB,eAAiBG,gBAIrBiB,gBAIR,SAASA,gBACDpB,gBACAH,gBAAgBwB,OAGpBrB,eAAiB,KAYrB,IAAIsB,aAAe,CAAC,mBAAoB,WAAY,UAAW,cAAe,SAAU,YAAa,WA4BrGC,SAASC,iBAAiB,YAAY,SAAUC,GAE5C,IACIC,MADQD,EAAEE,OAAOC,OAAS,IACbF,KAEbA,MAAQA,KAAKG,SA/BrB,SAASC,eAAeJ,MAEpB,GAAIA,KAAKK,eACLX,qBAIJ,IAAyC,IAArCE,aAAaU,QAAQN,KAAKO,MAA9B,CAKA,IAAIC,UAAYnC,kBAAkBoC,aAAaT,KAAKG,UACpDK,UAAUE,cAAcF,UAAUG,mBAAoBX,KAAKX,IAAI,GAAMI,MAAK,SAAUmB,kBAEhF,IAAInC,QAAUmC,iBAAiBC,kBAAkBC,MAAM5B,OAAS0B,iBAAiBC,kBAAkBE,QAAUH,iBAAiBI,iBAAiBD,QAE3ItC,UAAYH,gBAIZC,eAFYqC,iBAAiBC,kBAAkBC,MAAM5B,OAAS0B,iBAAiBC,kBAAkBC,MAAQF,iBAAiBI,iBAAiBF,MAErHrC,iBAb1BiB,gBAwBAU,CAAeJ,OAIDD,EAAEE,OAAOgB,SAAW,IAEtBC,oBAGZ3C,eAAe,GAAI,SAGxB","file":"themeMediaPlayer.js","sourcesContent":["define(['playbackManager', 'userSettings', 'connectionManager'], function (playbackManager, userSettings, connectionManager) {\n    'use strict';\n\n    var currentOwnerId;\n    var currentThemeIds = [];\n\n    function playThemeMedia(items, ownerId) {\n\n        var currentThemeItems = items.filter(function (i) {\n            return enabled(i.MediaType);\n        });\n\n        if (currentThemeItems.length) {\n\n            // Stop if a theme song from another ownerId\n            // Leave it alone if anything else (e.g user playing a movie)\n            if (!currentOwnerId && playbackManager.isPlaying()) {\n                return;\n            }\n\n            currentThemeIds = currentThemeItems.map(function (i) {\n                return i.Id;\n            });\n\n            playbackManager.play({\n                items: currentThemeItems,\n                fullscreen: false,\n                enableRemotePlayers: false\n            }).then(function () {\n                currentOwnerId = ownerId;\n            });\n\n        } else {\n            stopIfPlaying();\n        }\n    }\n\n    function stopIfPlaying() {\n        if (currentOwnerId) {\n            playbackManager.stop();\n        }\n\n        currentOwnerId = null;\n    }\n\n    function enabled(mediaType) {\n\n        if (mediaType === 'Video') {\n            return userSettings.enableThemeVideos();\n        }\n\n        return userSettings.enableThemeSongs();\n    }\n\n    var excludeTypes = ['CollectionFolder', 'UserView', 'Program', 'SeriesTimer', 'Person', 'TvChannel', 'Channel'];\n\n    function loadThemeMedia(item) {\n\n        if (item.CollectionType) {\n            stopIfPlaying();\n            return;\n        }\n\n        if (excludeTypes.indexOf(item.Type) !== -1) {\n            stopIfPlaying();\n            return;\n        }\n\n        var apiClient = connectionManager.getApiClient(item.ServerId);\n        apiClient.getThemeMedia(apiClient.getCurrentUserId(), item.Id, true).then(function (themeMediaResult) {\n\n            var ownerId = themeMediaResult.ThemeVideosResult.Items.length ? themeMediaResult.ThemeVideosResult.OwnerId : themeMediaResult.ThemeSongsResult.OwnerId;\n\n            if (ownerId !== currentOwnerId) {\n\n                var items = themeMediaResult.ThemeVideosResult.Items.length ? themeMediaResult.ThemeVideosResult.Items : themeMediaResult.ThemeSongsResult.Items;\n\n                playThemeMedia(items, ownerId);\n            }\n        });\n    }\n\n    document.addEventListener('viewshow', function (e) {\n\n        var state = e.detail.state || {};\n        var item = state.item;\n\n        if (item && item.ServerId) {\n            loadThemeMedia(item);\n            return;\n        }\n\n        var viewOptions = e.detail.options || {};\n\n        if (viewOptions.supportsThemeMedia) {\n            // Do nothing here, allow it to keep playing\n        } else {\n            playThemeMedia([], null);\n        }\n\n    }, true);\n\n    //Events.on(playbackManager, 'playbackstart', function (e, player) {\n    //    var item = playbackManager.currentItem(player);\n    //    // User played something manually\n    //    if (currentThemeIds.indexOf(item.Id) == -1) {\n    //        currentOwnerId = null;\n    //    }\n    //});\n\n});\n"]}