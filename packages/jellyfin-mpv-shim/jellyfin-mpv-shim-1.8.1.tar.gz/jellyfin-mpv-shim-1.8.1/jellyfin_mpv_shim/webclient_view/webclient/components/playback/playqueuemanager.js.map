{"version":3,"sources":["components/playback/playqueuemanager.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","call","slice","constructor","name","from","test","arr","len","arr2","define","currentId","addUniquePlaylistItemId","item","PlaylistItemId","findPlaylistIndex","playlistItemId","list","PlayQueueManager","this","_sortedPlaylist","_playlist","_repeatMode","_shuffleMode","getPlaylist","setPlaylist","items","_currentPlaylistItemId","queue","push","shufflePlaylist","_step","_iterator","currentPlaylistItem","splice","getCurrentPlaylistIndex","j","Math","floor","random","temp","unshift","sortShuffledPlaylist","_step2","_iterator2","clearPlaylist","clearCurrentItem","arguments","undefined","queueNext","currentIndex","arrayInsertAt","destArray","pos","arrayToInsert","args","concat","apply","getCurrentPlaylistItemId","getCurrentItem","index","setPlaylistState","playlistIndex","setPlaylistIndex","removeFromPlaylist","playlistItemIds","result","currentPlaylistItemId","isCurrentIndex","indexOf","filter","includes","movePlaylistItem","newIndex","oldIndex","playlist","Error","moveInArray","array","to","reset","setRepeatMode","getRepeatMode","setShuffleMode","toggleShuffleMode","getShuffleMode","getNextItemInfo","playlistLength"],"mappings":"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","file":"playqueuemanager.js","sourcesContent":["define([], function () {\n    'use strict';\n\n    var currentId = 0;\n    function addUniquePlaylistItemId(item) {\n\n        if (!item.PlaylistItemId) {\n\n            item.PlaylistItemId = 'playlistItem' + currentId;\n            currentId++;\n        }\n    }\n\n    function findPlaylistIndex(playlistItemId, list) {\n\n        for (var i = 0, length = list.length; i < length; i++) {\n            if (list[i].PlaylistItemId === playlistItemId) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    function PlayQueueManager() {\n\n        this._sortedPlaylist = [];\n        this._playlist = [];\n        this._repeatMode = 'RepeatNone';\n        this._shuffleMode = 'Sorted';\n    }\n\n    PlayQueueManager.prototype.getPlaylist = function () {\n        return this._playlist.slice(0);\n    };\n\n    PlayQueueManager.prototype.setPlaylist = function (items) {\n\n        items = items.slice(0);\n\n        for (var i = 0, length = items.length; i < length; i++) {\n\n            addUniquePlaylistItemId(items[i]);\n        }\n\n        this._currentPlaylistItemId = null;\n        this._playlist = items;\n        this._repeatMode = 'RepeatNone';\n    };\n\n    PlayQueueManager.prototype.queue = function (items) {\n\n        for (var i = 0, length = items.length; i < length; i++) {\n\n            addUniquePlaylistItemId(items[i]);\n\n            this._playlist.push(items[i]);\n        }\n    };\n\n    PlayQueueManager.prototype.shufflePlaylist = function () {\n        this._sortedPlaylist = [];\n        for (const item of this._playlist) {\n            this._sortedPlaylist.push(item);\n        }\n        const currentPlaylistItem = this._playlist.splice(this.getCurrentPlaylistIndex(), 1)[0];\n\n        for (let i = this._playlist.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * i);\n            const temp = this._playlist[i];\n            this._playlist[i] = this._playlist[j];\n            this._playlist[j] = temp;\n        }\n        this._playlist.unshift(currentPlaylistItem);\n        this._shuffleMode = 'Shuffle';\n    };\n\n    PlayQueueManager.prototype.sortShuffledPlaylist = function () {\n        this._playlist = [];\n        for (let item of this._sortedPlaylist) {\n            this._playlist.push(item);\n        }\n        this._sortedPlaylist = [];\n        this._shuffleMode = 'Sorted';\n    };\n\n    PlayQueueManager.prototype.clearPlaylist = function (clearCurrentItem = false) {\n        const currentPlaylistItem = this._playlist.splice(this.getCurrentPlaylistIndex(), 1)[0];\n        this._playlist = [];\n        if (!clearCurrentItem) {\n            this._playlist.push(currentPlaylistItem);\n        }\n    };\n\n    function arrayInsertAt(destArray, pos, arrayToInsert) {\n        var args = [];\n        args.push(pos); // where to insert\n        args.push(0); // nothing to remove\n        args = args.concat(arrayToInsert); // add on array to insert\n        destArray.splice.apply(destArray, args); // splice it in\n    }\n\n    PlayQueueManager.prototype.queueNext = function (items) {\n        var i;\n        var length;\n\n        for (i = 0, length = items.length; i < length; i++) {\n\n            addUniquePlaylistItemId(items[i]);\n        }\n\n        var currentIndex = this.getCurrentPlaylistIndex();\n\n        if (currentIndex === -1) {\n            currentIndex = this._playlist.length;\n        } else {\n            currentIndex++;\n        }\n\n        arrayInsertAt(this._playlist, currentIndex, items);\n    };\n\n    PlayQueueManager.prototype.getCurrentPlaylistIndex = function () {\n\n        return findPlaylistIndex(this.getCurrentPlaylistItemId(), this._playlist);\n    };\n\n    PlayQueueManager.prototype.getCurrentItem = function () {\n\n        var index = findPlaylistIndex(this.getCurrentPlaylistItemId(), this._playlist);\n\n        return index === -1 ? null : this._playlist[index];\n    };\n\n    PlayQueueManager.prototype.getCurrentPlaylistItemId = function () {\n        return this._currentPlaylistItemId;\n    };\n\n    PlayQueueManager.prototype.setPlaylistState = function (playlistItemId, playlistIndex) {\n\n        this._currentPlaylistItemId = playlistItemId;\n    };\n\n    PlayQueueManager.prototype.setPlaylistIndex = function (playlistIndex) {\n\n        if (playlistIndex < 0) {\n            this.setPlaylistState(null);\n        } else {\n            this.setPlaylistState(this._playlist[playlistIndex].PlaylistItemId);\n        }\n    };\n\n    PlayQueueManager.prototype.removeFromPlaylist = function (playlistItemIds) {\n\n        if (this._playlist.length <= playlistItemIds.length) {\n            return {\n                result: 'empty'\n            };\n        }\n\n        var currentPlaylistItemId = this.getCurrentPlaylistItemId();\n        var isCurrentIndex = playlistItemIds.indexOf(currentPlaylistItemId) !== -1;\n\n        this._sortedPlaylist = this._sortedPlaylist.filter(function (item) {\n            return !playlistItemIds.includes(item.PlaylistItemId);\n        });\n\n        this._playlist = this._playlist.filter(function (item) {\n            return !playlistItemIds.includes(item.PlaylistItemId);\n        });\n\n        return {\n            result: 'removed',\n            isCurrentIndex: isCurrentIndex\n        };\n    };\n\n    function moveInArray(array, from, to) {\n        array.splice(to, 0, array.splice(from, 1)[0]);\n    }\n\n    PlayQueueManager.prototype.movePlaylistItem = function (playlistItemId, newIndex) {\n\n        var playlist = this.getPlaylist();\n\n        var oldIndex;\n        for (var i = 0, length = playlist.length; i < length; i++) {\n            if (playlist[i].PlaylistItemId === playlistItemId) {\n                oldIndex = i;\n                break;\n            }\n        }\n\n        if (oldIndex === -1 || oldIndex === newIndex) {\n            return {\n                result: 'noop'\n            };\n        }\n\n        if (newIndex >= playlist.length) {\n            throw new Error('newIndex out of bounds');\n        }\n\n        moveInArray(playlist, oldIndex, newIndex);\n\n        this._playlist = playlist;\n\n        return {\n            result: 'moved',\n            playlistItemId: playlistItemId,\n            newIndex: newIndex\n        };\n    };\n\n    PlayQueueManager.prototype.reset = function () {\n\n        this._sortedPlaylist = [];\n        this._playlist = [];\n        this._currentPlaylistItemId = null;\n        this._repeatMode = 'RepeatNone';\n        this._shuffleMode = 'Sorted';\n    };\n\n    PlayQueueManager.prototype.setRepeatMode = function (value) {\n        const repeatModes = ['RepeatOne', 'RepeatAll', 'RepeatNone'];\n        if (repeatModes.includes(value)) {\n            this._repeatMode = value;\n        } else {\n            throw new TypeError('invalid value provided for setRepeatMode');\n        }\n    };\n\n    PlayQueueManager.prototype.getRepeatMode = function () {\n        return this._repeatMode;\n    };\n\n    PlayQueueManager.prototype.setShuffleMode = function (value) {\n        switch (value) {\n            case 'Shuffle':\n                this.shufflePlaylist();\n                break;\n            case 'Sorted':\n                this.sortShuffledPlaylist();\n                break;\n            default:\n                throw new TypeError('invalid value provided to setShuffleMode');\n        }\n    };\n\n    PlayQueueManager.prototype.toggleShuffleMode = function () {\n        switch (this._shuffleMode) {\n            case 'Shuffle':\n                this.setShuffleMode('Sorted');\n                break;\n            case 'Sorted':\n                this.setShuffleMode('Shuffle');\n                break;\n            default:\n                throw new TypeError('current value for shufflequeue is invalid');\n        }\n    };\n\n    PlayQueueManager.prototype.getShuffleMode = function () {\n        return this._shuffleMode;\n    };\n\n    PlayQueueManager.prototype.getNextItemInfo = function () {\n\n        var newIndex;\n        var playlist = this.getPlaylist();\n        var playlistLength = playlist.length;\n\n        switch (this.getRepeatMode()) {\n\n            case 'RepeatOne':\n                newIndex = this.getCurrentPlaylistIndex();\n                break;\n            case 'RepeatAll':\n                newIndex = this.getCurrentPlaylistIndex() + 1;\n                if (newIndex >= playlistLength) {\n                    newIndex = 0;\n                }\n                break;\n            default:\n                newIndex = this.getCurrentPlaylistIndex() + 1;\n                break;\n        }\n\n        if (newIndex < 0 || newIndex >= playlistLength) {\n            return null;\n        }\n\n        var item = playlist[newIndex];\n\n        if (!item) {\n            return null;\n        }\n\n        return {\n            item: item,\n            index: newIndex\n        };\n    };\n\n    return PlayQueueManager;\n});\n"]}