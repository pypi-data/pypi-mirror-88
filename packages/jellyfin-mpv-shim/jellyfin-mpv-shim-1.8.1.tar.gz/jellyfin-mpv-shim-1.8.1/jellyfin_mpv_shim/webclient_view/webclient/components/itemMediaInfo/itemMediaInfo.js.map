{"version":3,"sources":["components/itemMediaInfo/itemMediaInfo.js"],"names":["define","dialogHelper","require","layoutManager","globalize","userSettings","connectionManager","loading","focusManager","dom","appHost","setMediaInfo","user","page","item","html","MediaSources","map","version","getMediaSourceHtml","Name","Container","createAttribute","translate","Formats","length","join","Path","Policy","IsAdministrator","Size","size","toFixed","i","MediaStreams","stream","Type","displayType","attributes","DisplayTitle","push","Language","Codec","toUpperCase","CodecTag","IsAVC","Profile","Level","Width","Height","AspectRatio","IsAnamorphic","IsInterlaced","AverageFrameRate","RealFrameRate","ChannelLayout","Channels","BitRate","parseInt","SampleRate","BitDepth","PixelFormat","RefFrames","NalLengthSize","IsDefault","IsForced","IsExternal","Timestamp","querySelector","innerHTML","label","value","show","showMediaInfo","itemId","serverId","Promise","resolve","reject","template","showMediaInfoMore","apiClient","getApiClient","getItem","getCurrentUserId","then","dialogOptions","removeOnClose","scrollY","tv","dlg","createDialog","classList","add","translateDocument","open","addEventListener","e","close","getCurrentUser","hide"],"mappings":"AAAA,aAAAA,OAAO,CAAC,eAAgB,UAAW,gBAAiB,YAAa,eAAgB,oBAAqB,UAAW,eAAgB,MAAO,UAAW,cAAe,gBAAiB,0BAA2B,sBAAuB,iBAAkB,cAAe,eAAe,SAAUC,aAAcC,QAASC,cAAeC,UAAWC,aAAcC,kBAAmBC,QAASC,aAAcC,IAAKC,SAGzY,SAASC,aAAaC,KAAMC,KAAMC,MAC9B,IAAIC,KAAOD,KAAKE,aAAaC,KAAI,SAAUC,SACvC,OASR,SAASC,mBAAmBP,KAAME,KAAMI,SACpC,IAAIH,KAAO,GACPG,QAAQE,OACRL,MAAQ,wCAA0CG,QAAQE,KAAO,eAEjEF,QAAQG,YACRN,MAAQO,gBAAgBlB,UAAUmB,UAAU,sBAAuBL,QAAQG,WAAa,SAExFH,QAAQM,SAAWN,QAAQM,QAAQC,SACnCV,MAAQO,gBAAgBlB,UAAUmB,UAAU,mBAAoBL,QAAQM,QAAQE,KAAK,MAAQ,SAE7FR,QAAQS,MAAQf,MAAQA,KAAKgB,OAAOC,kBACpCd,MAAQO,gBAAgBlB,UAAUmB,UAAU,iBAAkBL,QAAQS,MAAQ,SAElF,GAAIT,QAAQY,KAAM,CACd,IAAIC,MAAQb,QAAQY,KAAR,SAA8BE,QAAQ,GAAK,MACvDjB,MAAQO,gBAAgBlB,UAAUmB,UAAU,iBAAkBQ,MAAQ,QAE1E,IAAK,IAAIE,EAAI,EAAGR,OAASP,QAAQgB,aAAaT,OAAQQ,EAAIR,OAAQQ,IAAK,CACnE,IAAIE,OAASjB,QAAQgB,aAAaD,GAClC,GAAoB,SAAhBE,OAAOC,KAAX,CAGArB,MAAQ,gCACR,IAAIsB,YAAcjC,UAAUmB,UAAU,sBAAwBY,OAAOC,MACrErB,MAAQ,mCAAqCsB,YAAc,QAC3D,IAAIC,WAAa,GACbH,OAAOI,cACPD,WAAWE,KAAKlB,gBAAgB,QAASa,OAAOI,eAEhDJ,OAAOM,UAA4B,UAAhBN,OAAOC,MAC1BE,WAAWE,KAAKlB,gBAAgBlB,UAAUmB,UAAU,qBAAsBY,OAAOM,WAEjFN,OAAOO,OACPJ,WAAWE,KAAKlB,gBAAgBlB,UAAUmB,UAAU,kBAAmBY,OAAOO,MAAMC,gBAEpFR,OAAOS,UACPN,WAAWE,KAAKlB,gBAAgBlB,UAAUmB,UAAU,qBAAsBY,OAAOS,WAEjE,MAAhBT,OAAOU,OACPP,WAAWE,KAAKlB,gBAAgB,MAAQa,OAAOU,MAAQ,MAAQ,OAE/DV,OAAOW,SACPR,WAAWE,KAAKlB,gBAAgBlB,UAAUmB,UAAU,oBAAqBY,OAAOW,UAEhFX,OAAOY,OACPT,WAAWE,KAAKlB,gBAAgBlB,UAAUmB,UAAU,kBAAmBY,OAAOY,SAE9EZ,OAAOa,OAASb,OAAOc,SACvBX,WAAWE,KAAKlB,gBAAgBlB,UAAUmB,UAAU,uBAAwBY,OAAOa,MAAQ,IAAMb,OAAOc,SAExGd,OAAOe,aAAgC,UAAjBf,OAAOO,OAC7BJ,WAAWE,KAAKlB,gBAAgBlB,UAAUmB,UAAU,wBAAyBY,OAAOe,cAEpE,UAAhBf,OAAOC,OACoB,MAAvBD,OAAOgB,cACPb,WAAWE,KAAKlB,gBAAgBlB,UAAUmB,UAAU,uBAAyBY,OAAOgB,aAAe,MAAQ,OAE/Gb,WAAWE,KAAKlB,gBAAgBlB,UAAUmB,UAAU,uBAAyBY,OAAOiB,aAAe,MAAQ,SAE3GjB,OAAOkB,kBAAoBlB,OAAOmB,gBAClChB,WAAWE,KAAKlB,gBAAgBlB,UAAUmB,UAAU,sBAAwBY,OAAOkB,kBAAoBlB,OAAOmB,gBAE9GnB,OAAOoB,eACPjB,WAAWE,KAAKlB,gBAAgBlB,UAAUmB,UAAU,mBAAoBY,OAAOoB,gBAE/EpB,OAAOqB,UACPlB,WAAWE,KAAKlB,gBAAgBlB,UAAUmB,UAAU,qBAAsBY,OAAOqB,SAAW,QAE5FrB,OAAOsB,SAA4B,UAAjBtB,OAAOO,OACzBJ,WAAWE,KAAKlB,gBAAgBlB,UAAUmB,UAAU,oBAAsBmC,SAASvB,OAAOsB,QAAU,KAAS,UAE7GtB,OAAOwB,YACPrB,WAAWE,KAAKlB,gBAAgBlB,UAAUmB,UAAU,uBAAwBY,OAAOwB,WAAa,QAEhGxB,OAAOyB,UACPtB,WAAWE,KAAKlB,gBAAgBlB,UAAUmB,UAAU,qBAAsBY,OAAOyB,SAAW,SAE5FzB,OAAO0B,aACPvB,WAAWE,KAAKlB,gBAAgBlB,UAAUmB,UAAU,wBAAyBY,OAAO0B,cAEpF1B,OAAO2B,WACPxB,WAAWE,KAAKlB,gBAAgBlB,UAAUmB,UAAU,sBAAuBY,OAAO2B,YAElF3B,OAAO4B,eACPzB,WAAWE,KAAKlB,gBAAgB,MAAOa,OAAO4B,gBAE9B,UAAhB5B,OAAOC,MACPE,WAAWE,KAAKlB,gBAAgBlB,UAAUmB,UAAU,oBAAsBY,OAAO6B,UAAY,MAAQ,OAErF,aAAhB7B,OAAOC,OACPE,WAAWE,KAAKlB,gBAAgBlB,UAAUmB,UAAU,mBAAqBY,OAAO8B,SAAW,MAAQ,OACnG3B,WAAWE,KAAKlB,gBAAgBlB,UAAUmB,UAAU,qBAAuBY,OAAO+B,WAAa,MAAQ,QAEvF,UAAhB/B,OAAOC,MAAoBlB,QAAQiD,WACnC7B,WAAWE,KAAKlB,gBAAgBlB,UAAUmB,UAAU,sBAAuBL,QAAQiD,YAEvFpD,MAAQuB,WAAWZ,KAAK,SACxBX,MAAQ,UAEZ,OAAOA,KA7GII,CAAmBP,KAAME,EAAMI,YACvCQ,KAAK,gEACJZ,KAAKE,aAAaS,OAAS,IAC3BV,KAAO,QAAUA,MAEEF,KAAKuD,cAAc,qBACzBC,UAAYtD,KA0GjC,SAASO,gBAAgBgD,MAAOC,OAC5B,MAAO,gCAAkCD,MAAQ,2CAA6CC,MAAQ,UA0C1G,MAAO,CACHC,KAVJ,SAASC,cAAcC,OAAQC,UAE3B,OADApE,QAAQiE,OACD,IAAII,SAAQ,SAAUC,QAASC,QAClC5E,QAAQ,CAAC,uCAAuC,SAAU6E,WAjClE,SAASC,kBAAkBN,OAAQC,SAAUI,UACzC,IAAIE,UAAY3E,kBAAkB4E,aAAaP,UAC/C,OAAOM,UAAUE,QAAQF,UAAUG,mBAAoBV,QAAQW,MAAK,SAAUvE,MAC1E,IAAIwE,cAAgB,CAChBvD,KAAM,QACNwD,eAAe,EACfC,SAAS,GAETrF,cAAcsF,KACdH,cAAcvD,KAAO,cAEzB,IAAI2D,IAAMzF,aAAa0F,aAAaL,eACpCI,IAAIE,UAAUC,IAAI,cAClB,IAAI9E,KAAO,GACXA,MAAQX,UAAU0F,kBAAkBf,SAAU,QAC9CW,IAAIrB,UAAYtD,KACZZ,cAAcsF,IACdC,IAAItB,cAAc,sBAEtBnE,aAAa8F,KAAKL,KAClBA,IAAItB,cAAc,cAAc4B,iBAAiB,SAAS,SAAUC,GAChEhG,aAAaiG,MAAMR,QAEvBT,UAAUkB,iBAAiBd,MAAK,SAAUzE,MACtCD,aAAaC,KAAM8E,IAAK5E,SAE5BP,QAAQ6F,WAQJpB,CAAkBN,OAAQC,SAAUI,UAAUM,KAAKR,QAASC","file":"itemMediaInfo.js","sourcesContent":["define(['dialogHelper', 'require', 'layoutManager', 'globalize', 'userSettings', 'connectionManager', 'loading', 'focusManager', 'dom', 'apphost', 'emby-select', 'listViewStyle', 'paper-icon-button-light', 'css!./../formdialog', 'material-icons', 'emby-button', 'flexStyles'], function (dialogHelper, require, layoutManager, globalize, userSettings, connectionManager, loading, focusManager, dom, appHost) {\n    'use strict';\n\n    function setMediaInfo(user, page, item) {\n        var html = item.MediaSources.map(function (version) {\n            return getMediaSourceHtml(user, item, version);\n        }).join('<div style=\"border-top:1px solid #444;margin: 1em 0;\"></div>');\n        if (item.MediaSources.length > 1) {\n            html = '<br/>' + html;\n        }\n        var mediaInfoContent = page.querySelector('#mediaInfoContent');\n        mediaInfoContent.innerHTML = html;\n    }\n\n    function getMediaSourceHtml(user, item, version) {\n        var html = '';\n        if (version.Name) {\n            html += '<div><h2 class=\"mediaInfoStreamType\">' + version.Name + '</h2></div>';\n        }\n        if (version.Container) {\n            html += createAttribute(globalize.translate('MediaInfoContainer'), version.Container) + '<br/>';\n        }\n        if (version.Formats && version.Formats.length) {\n            html += createAttribute(globalize.translate('MediaInfoFormat'), version.Formats.join(',')) + '<br/>';\n        }\n        if (version.Path && user && user.Policy.IsAdministrator) {\n            html += createAttribute(globalize.translate('MediaInfoPath'), version.Path) + '<br/>';\n        }\n        if (version.Size) {\n            var size = (version.Size / (1024 * 1024)).toFixed(0) + ' MB';\n            html += createAttribute(globalize.translate('MediaInfoSize'), size) + '<br/>';\n        }\n        for (var i = 0, length = version.MediaStreams.length; i < length; i++) {\n            var stream = version.MediaStreams[i];\n            if (stream.Type === 'Data') {\n                continue;\n            }\n            html += '<div class=\"mediaInfoStream\">';\n            var displayType = globalize.translate('MediaInfoStreamType' + stream.Type);\n            html += '<h2 class=\"mediaInfoStreamType\">' + displayType + '</h2>';\n            var attributes = [];\n            if (stream.DisplayTitle) {\n                attributes.push(createAttribute('Title', stream.DisplayTitle));\n            }\n            if (stream.Language && stream.Type !== 'Video') {\n                attributes.push(createAttribute(globalize.translate('MediaInfoLanguage'), stream.Language));\n            }\n            if (stream.Codec) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoCodec'), stream.Codec.toUpperCase()));\n            }\n            if (stream.CodecTag) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoCodecTag'), stream.CodecTag));\n            }\n            if (stream.IsAVC != null) {\n                attributes.push(createAttribute('AVC', (stream.IsAVC ? 'Yes' : 'No')));\n            }\n            if (stream.Profile) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoProfile'), stream.Profile));\n            }\n            if (stream.Level) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoLevel'), stream.Level));\n            }\n            if (stream.Width || stream.Height) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoResolution'), stream.Width + 'x' + stream.Height));\n            }\n            if (stream.AspectRatio && stream.Codec !== 'mjpeg') {\n                attributes.push(createAttribute(globalize.translate('MediaInfoAspectRatio'), stream.AspectRatio));\n            }\n            if (stream.Type === 'Video') {\n                if (stream.IsAnamorphic != null) {\n                    attributes.push(createAttribute(globalize.translate('MediaInfoAnamorphic'), (stream.IsAnamorphic ? 'Yes' : 'No')));\n                }\n                attributes.push(createAttribute(globalize.translate('MediaInfoInterlaced'), (stream.IsInterlaced ? 'Yes' : 'No')));\n            }\n            if (stream.AverageFrameRate || stream.RealFrameRate) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoFramerate'), (stream.AverageFrameRate || stream.RealFrameRate)));\n            }\n            if (stream.ChannelLayout) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoLayout'), stream.ChannelLayout));\n            }\n            if (stream.Channels) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoChannels'), stream.Channels + ' ch'));\n            }\n            if (stream.BitRate && stream.Codec !== 'mjpeg') {\n                attributes.push(createAttribute(globalize.translate('MediaInfoBitrate'), (parseInt(stream.BitRate / 1000)) + ' kbps'));\n            }\n            if (stream.SampleRate) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoSampleRate'), stream.SampleRate + ' Hz'));\n            }\n            if (stream.BitDepth) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoBitDepth'), stream.BitDepth + ' bit'));\n            }\n            if (stream.PixelFormat) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoPixelFormat'), stream.PixelFormat));\n            }\n            if (stream.RefFrames) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoRefFrames'), stream.RefFrames));\n            }\n            if (stream.NalLengthSize) {\n                attributes.push(createAttribute('NAL', stream.NalLengthSize));\n            }\n            if (stream.Type !== 'Video') {\n                attributes.push(createAttribute(globalize.translate('MediaInfoDefault'), (stream.IsDefault ? 'Yes' : 'No')));\n            }\n            if (stream.Type === 'Subtitle') {\n                attributes.push(createAttribute(globalize.translate('MediaInfoForced'), (stream.IsForced ? 'Yes' : 'No')));\n                attributes.push(createAttribute(globalize.translate('MediaInfoExternal'), (stream.IsExternal ? 'Yes' : 'No')));\n            }\n            if (stream.Type === 'Video' && version.Timestamp) {\n                attributes.push(createAttribute(globalize.translate('MediaInfoTimestamp'), version.Timestamp));\n            }\n            html += attributes.join('<br/>');\n            html += '</div>';\n        }\n        return html;\n    }\n\n    function createAttribute(label, value) {\n        return '<span class=\"mediaInfoLabel\">' + label + '</span><span class=\"mediaInfoAttribute\">' + value + '</span>';\n    }\n\n    function showMediaInfoMore(itemId, serverId, template) {\n        var apiClient = connectionManager.getApiClient(serverId);\n        return apiClient.getItem(apiClient.getCurrentUserId(), itemId).then(function (item) {\n            var dialogOptions = {\n                size: 'small',\n                removeOnClose: true,\n                scrollY: false\n            };\n            if (layoutManager.tv) {\n                dialogOptions.size = 'fullscreen';\n            }\n            var dlg = dialogHelper.createDialog(dialogOptions);\n            dlg.classList.add('formDialog');\n            var html = '';\n            html += globalize.translateDocument(template, 'core');\n            dlg.innerHTML = html;\n            if (layoutManager.tv) {\n                dlg.querySelector('.formDialogContent');\n            }\n            dialogHelper.open(dlg);\n            dlg.querySelector('.btnCancel').addEventListener('click', function (e) {\n                dialogHelper.close(dlg);\n            });\n            apiClient.getCurrentUser().then(function (user) {\n                setMediaInfo(user, dlg, item);\n            });\n            loading.hide();\n        });\n    }\n\n    function showMediaInfo(itemId, serverId) {\n        loading.show();\n        return new Promise(function (resolve, reject) {\n            require(['text!./itemMediaInfo.template.html'], function (template) {\n                showMediaInfoMore(itemId, serverId, template).then(resolve, reject);\n            });\n        });\n    }\n\n    return {\n        show: showMediaInfo\n    };\n});\n"]}