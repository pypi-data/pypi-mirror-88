{"version":3,"sources":["components/viewManager/viewManager.js"],"names":["define","viewContainer","focusManager","queryString","layoutManager","currentView","dispatchPageEvents","onViewChange","view","options","isRestore","dispatchViewEvent","eventDetail","getViewEventDetail","mobile","activeElement","document","body","contains","isCurrentlyFocusable","focus","autoFocus","dispatchEvent","CustomEvent","getProperties","props","getAttribute","split","eventInfo","eventName","isCancellable","detail","type","properties","bubbles","cancelable","eventResult","replace","url","index","indexOf","params","parse","substring","isRestored","state","ViewManager","setOnBeforeChange","newView","initComplete","controllerFactory","default","addEventListener","resetCachedViews","reset","prototype","loadView","cancel","then","tryRestoreView","onViewChanging","Promise","reject","cancelled","value"],"mappings":"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","file":"viewManager.js","sourcesContent":["define(['viewContainer', 'focusManager', 'queryString', 'layoutManager'], function (viewContainer, focusManager, queryString, layoutManager) {\n    'use strict';\n\n    var currentView;\n    var dispatchPageEvents;\n\n    viewContainer.setOnBeforeChange(function (newView, isRestored, options) {\n\n        var lastView = currentView;\n        if (lastView) {\n\n            var beforeHideResult = dispatchViewEvent(lastView, null, 'viewbeforehide', true);\n\n            if (!beforeHideResult) {\n                // todo: cancel\n            }\n        }\n\n        var eventDetail = getViewEventDetail(newView, options, isRestored);\n\n        if (!newView.initComplete) {\n            newView.initComplete = true;\n\n            var controller;\n            if (typeof options.controllerFactory === 'function') {\n                controller = new options.controllerFactory(newView, eventDetail.detail.params);\n            } else if (options.controllerFactory && typeof options.controllerFactory.default === 'function') {\n                controller = new options.controllerFactory.default(newView, eventDetail.detail.params);\n            }\n\n            if (!options.controllerFactory || dispatchPageEvents) {\n                dispatchViewEvent(newView, eventDetail, 'viewinit');\n            }\n        }\n\n        dispatchViewEvent(newView, eventDetail, 'viewbeforeshow');\n    });\n\n    function onViewChange(view, options, isRestore) {\n\n        var lastView = currentView;\n        if (lastView) {\n            dispatchViewEvent(lastView, null, 'viewhide');\n        }\n\n        currentView = view;\n\n        var eventDetail = getViewEventDetail(view, options, isRestore);\n\n        if (!isRestore) {\n            if (options.autoFocus !== false) {\n                focusManager.autoFocus(view);\n            }\n        } else if (!layoutManager.mobile) {\n            if (view.activeElement && document.body.contains(view.activeElement) && focusManager.isCurrentlyFocusable(view.activeElement)) {\n                focusManager.focus(view.activeElement);\n            } else {\n                focusManager.autoFocus(view);\n            }\n        }\n\n        view.dispatchEvent(new CustomEvent('viewshow', eventDetail));\n\n        if (dispatchPageEvents) {\n            view.dispatchEvent(new CustomEvent('pageshow', eventDetail));\n        }\n    }\n\n    function getProperties(view) {\n        var props = view.getAttribute('data-properties');\n\n        if (props) {\n            return props.split(',');\n        }\n\n        return [];\n    }\n\n    function dispatchViewEvent(view, eventInfo, eventName, isCancellable) {\n\n        if (!eventInfo) {\n            eventInfo = {\n                detail: {\n                    type: view.getAttribute('data-type'),\n                    properties: getProperties(view)\n                },\n                bubbles: true,\n                cancelable: isCancellable\n            };\n        }\n\n        eventInfo.cancelable = isCancellable || false;\n\n        var eventResult = view.dispatchEvent(new CustomEvent(eventName, eventInfo));\n\n        if (dispatchPageEvents) {\n            eventInfo.cancelable = false;\n            view.dispatchEvent(new CustomEvent(eventName.replace('view', 'page'), eventInfo));\n        }\n\n        return eventResult;\n    }\n\n    function getViewEventDetail(view, options, isRestore) {\n\n        var url = options.url;\n        var index = url.indexOf('?');\n        var params = index === -1 ? {} : queryString.parse(url.substring(index + 1));\n\n        return {\n            detail: {\n                type: view.getAttribute('data-type'),\n                properties: getProperties(view),\n                params: params,\n                isRestored: isRestore,\n                state: options.state,\n\n                // The route options\n                options: options.options || {}\n            },\n            bubbles: true,\n            cancelable: false\n        };\n    }\n\n    function resetCachedViews() {\n        // Reset all cached views whenever the skin changes\n        viewContainer.reset();\n    }\n\n    document.addEventListener('skinunload', resetCachedViews);\n\n    function ViewManager() {\n    }\n\n    ViewManager.prototype.loadView = function (options) {\n\n        var lastView = currentView;\n\n        // Record the element that has focus\n        if (lastView) {\n            lastView.activeElement = document.activeElement;\n        }\n\n        if (options.cancel) {\n            return;\n        }\n\n        viewContainer.loadView(options).then(function (view) {\n\n            onViewChange(view, options);\n        });\n    };\n\n    ViewManager.prototype.tryRestoreView = function (options, onViewChanging) {\n\n        if (options.cancel) {\n            return Promise.reject({ cancelled: true });\n        }\n\n        // Record the element that has focus\n        if (currentView) {\n            currentView.activeElement = document.activeElement;\n        }\n\n        return viewContainer.tryRestoreView(options).then(function (view) {\n\n            onViewChanging();\n            onViewChange(view, options, true);\n\n        });\n    };\n\n    ViewManager.prototype.currentView = function () {\n        return currentView;\n    };\n\n    ViewManager.prototype.dispatchPageEvents = function (value) {\n        dispatchPageEvents = value;\n    };\n\n    return new ViewManager();\n});\n"]}