{"version":3,"sources":["components/viewContainer.js"],"names":["define","browser","dom","layoutManager","setControllerClass","view","options","controllerFactory","Promise","resolve","controllerUrl","getAttribute","indexOf","substring","length","getRequirePromise","deps","reject","require","Dashboard","getConfigurationResourceUrl","then","ControllerFactory","replaceAll","str","find","replace","split","join","beforeAnimate","allPages","newPageIndex","oldPageIndex","index","classList","add","afterAnimate","reset","currentUrls","mainAnimatedPages","innerHTML","selectedPageIndex","onBeforeChange","document","querySelector","pageContainerCount","remove","loadView","cancel","selected","previousAnimatable","pageIndex","isPluginpage","url","toLowerCase","newViewInfo","normalizeNewView","viewHtml","hasScript","elem","parseHtml","html","wrapper","createElement","hasjQuery","hasjQuerySelect","hasjQueryChecked","newView","modulesToLoad","push","currentPage","triggerDestroy","dispatchEvent","CustomEvent","window","$","removeChild","appendTo","replaceChild","appendChild","type","setAttribute","properties","fullscreen","mobile","activePage","tryRestoreView","animatable","setOnBeforeChange","fn"],"mappings":"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","file":"viewContainer.js","sourcesContent":["define(['browser', 'dom', 'layoutManager', 'css!components/viewManager/viewContainer'], function (browser, dom, layoutManager) {\n    'use strict';\n\n    function setControllerClass(view, options) {\n        if (options.controllerFactory) {\n            return Promise.resolve();\n        }\n\n        var controllerUrl = view.getAttribute('data-controller');\n\n        if (controllerUrl) {\n            if (0 === controllerUrl.indexOf('__plugin/')) {\n                controllerUrl = controllerUrl.substring('__plugin/'.length);\n            }\n\n            controllerUrl = Dashboard.getConfigurationResourceUrl(controllerUrl);\n            return getRequirePromise([controllerUrl]).then(function (ControllerFactory) {\n                options.controllerFactory = ControllerFactory;\n            });\n        }\n\n        return Promise.resolve();\n    }\n\n    function getRequirePromise(deps) {\n        return new Promise(function (resolve, reject) {\n            require(deps, resolve);\n        });\n    }\n\n    function loadView(options) {\n        if (!options.cancel) {\n            var selected = selectedPageIndex;\n            var previousAnimatable = -1 === selected ? null : allPages[selected];\n            var pageIndex = selected + 1;\n\n            if (pageIndex >= pageContainerCount) {\n                pageIndex = 0;\n            }\n\n            var isPluginpage = -1 !== options.url.toLowerCase().indexOf('/configurationpage');\n            var newViewInfo = normalizeNewView(options, isPluginpage);\n            var newView = newViewInfo.elem;\n            var modulesToLoad = [];\n\n            if (newViewInfo.hasjQuerySelect) {\n                modulesToLoad.push('legacySelectMenu');\n            }\n\n            if (newViewInfo.hasjQueryChecked) {\n                modulesToLoad.push('fnchecked');\n            }\n\n            return new Promise(function (resolve) {\n                require(modulesToLoad, function () {\n                    var currentPage = allPages[pageIndex];\n\n                    if (currentPage) {\n                        triggerDestroy(currentPage);\n                    }\n\n                    var view = newView;\n\n                    if ('string' == typeof view) {\n                        view = document.createElement('div');\n                        view.innerHTML = newView;\n                    }\n\n                    view.classList.add('mainAnimatedPage');\n\n                    if (currentPage) {\n                        if (newViewInfo.hasScript && window.$) {\n                            mainAnimatedPages.removeChild(currentPage);\n                            view = $(view).appendTo(mainAnimatedPages)[0];\n                        } else {\n                            mainAnimatedPages.replaceChild(view, currentPage);\n                        }\n                    } else {\n                        if (newViewInfo.hasScript && window.$) {\n                            view = $(view).appendTo(mainAnimatedPages)[0];\n                        } else {\n                            mainAnimatedPages.appendChild(view);\n                        }\n                    }\n\n                    if (options.type) {\n                        view.setAttribute('data-type', options.type);\n                    }\n\n                    var properties = [];\n\n                    if (options.fullscreen) {\n                        properties.push('fullscreen');\n                    }\n\n                    if (properties.length) {\n                        view.setAttribute('data-properties', properties.join(','));\n                    }\n\n                    allPages[pageIndex] = view;\n                    setControllerClass(view, options).then(function () {\n                        if (onBeforeChange) {\n                            onBeforeChange(view, false, options);\n                        }\n\n                        beforeAnimate(allPages, pageIndex, selected);\n                        selectedPageIndex = pageIndex;\n                        currentUrls[pageIndex] = options.url;\n\n                        if (!options.cancel && previousAnimatable) {\n                            afterAnimate(allPages, pageIndex);\n                        }\n\n                        if (window.$) {\n                            $.mobile = $.mobile || {};\n                            $.mobile.activePage = view;\n                        }\n\n                        resolve(view);\n                    });\n                });\n            });\n        }\n    }\n\n    function replaceAll(str, find, replace) {\n        return str.split(find).join(replace);\n    }\n\n    function parseHtml(html, hasScript) {\n        if (hasScript) {\n            html = replaceAll(html, '\\x3c!--<script', '<script');\n            html = replaceAll(html, '<\\/script>--\\x3e', '<\\/script>');\n        }\n\n        var wrapper = document.createElement('div');\n        wrapper.innerHTML = html;\n        return wrapper.querySelector('div[data-role=\"page\"]');\n    }\n\n    function normalizeNewView(options, isPluginpage) {\n        var viewHtml = options.view;\n\n        if (-1 === viewHtml.indexOf('data-role=\"page\"')) {\n            return viewHtml;\n        }\n\n        var hasScript = -1 !== viewHtml.indexOf('<script');\n        var elem = parseHtml(viewHtml, hasScript);\n\n        if (hasScript) {\n            hasScript = null != elem.querySelector('script');\n        }\n\n        var hasjQuery = false;\n        var hasjQuerySelect = false;\n        var hasjQueryChecked = false;\n\n        if (isPluginpage) {\n            hasjQuery = -1 != viewHtml.indexOf('jQuery') || -1 != viewHtml.indexOf('$(') || -1 != viewHtml.indexOf('$.');\n            hasjQueryChecked = -1 != viewHtml.indexOf('.checked(');\n            hasjQuerySelect = -1 != viewHtml.indexOf('.selectmenu(');\n        }\n\n        return {\n            elem: elem,\n            hasScript: hasScript,\n            hasjQuerySelect: hasjQuerySelect,\n            hasjQueryChecked: hasjQueryChecked,\n            hasjQuery: hasjQuery\n        };\n    }\n\n    function beforeAnimate(allPages, newPageIndex, oldPageIndex) {\n        for (var index = 0, length = allPages.length; index < length; index++) {\n            if (newPageIndex !== index && oldPageIndex !== index) {\n                allPages[index].classList.add('hide');\n            }\n        }\n    }\n\n    function afterAnimate(allPages, newPageIndex) {\n        for (var index = 0, length = allPages.length; index < length; index++) {\n            if (newPageIndex !== index) {\n                allPages[index].classList.add('hide');\n            }\n        }\n    }\n\n    function setOnBeforeChange(fn) {\n        onBeforeChange = fn;\n    }\n\n    function tryRestoreView(options) {\n        var url = options.url;\n        var index = currentUrls.indexOf(url);\n\n        if (-1 !== index) {\n            var animatable = allPages[index];\n            var view = animatable;\n\n            if (view) {\n                if (options.cancel) {\n                    return;\n                }\n\n                var selected = selectedPageIndex;\n                var previousAnimatable = -1 === selected ? null : allPages[selected];\n                return setControllerClass(view, options).then(function () {\n                    if (onBeforeChange) {\n                        onBeforeChange(view, true, options);\n                    }\n\n                    beforeAnimate(allPages, index, selected);\n                    animatable.classList.remove('hide');\n                    selectedPageIndex = index;\n\n                    if (!options.cancel && previousAnimatable) {\n                        afterAnimate(allPages, index);\n                    }\n\n                    if (window.$) {\n                        $.mobile = $.mobile || {};\n                        $.mobile.activePage = view;\n                    }\n\n                    return view;\n                });\n            }\n        }\n\n        return Promise.reject();\n    }\n\n    function triggerDestroy(view) {\n        view.dispatchEvent(new CustomEvent('viewdestroy', {}));\n    }\n\n    function reset() {\n        allPages = [];\n        currentUrls = [];\n        mainAnimatedPages.innerHTML = '';\n        selectedPageIndex = -1;\n    }\n\n    var onBeforeChange;\n    var mainAnimatedPages = document.querySelector('.mainAnimatedPages');\n    var allPages = [];\n    var currentUrls = [];\n    var pageContainerCount = 3;\n    var selectedPageIndex = -1;\n    reset();\n    mainAnimatedPages.classList.remove('hide');\n    return {\n        loadView: loadView,\n        tryRestoreView: tryRestoreView,\n        reset: reset,\n        setOnBeforeChange: setOnBeforeChange\n    };\n});\n"]}