{"version":3,"sources":["components/directorybrowser/directorybrowser.js"],"names":["define","loading","dialogHelper","dom","globalize","onDialogClosed","hide","refreshDirectoryBrowser","page","path","fileOptions","updatePathOnError","Error","show","promises","push","ApiClient","getNetworkDevices","getDirectoryContents","getParentPath","getDrives","Promise","all","then","responses","folders","parentPath","html","querySelector","scrollTop","value","getItem","i","length","folder","Type","Path","Name","translate","innerHTML","cssClass","type","name","alertText","text","alertTextWithOptions","options","require","alert","initEditor","content","addEventListener","e","lnkPath","parentWithClass","target","getAttribute","classList","contains","txtDirectoryPickerPath","parentWithTag","id","callback","networkSharePath","this","validatePath","validateWriteable","apiClient","ajax","url","getUrl","data","ValidateWriteable","catch","response","status","reject","resolve","preventDefault","stopPropagation","getDefaultPath","getJSON","result","systemInfo","directoryBrowser","currentDialog","includeDirectories","includeFiles","getPublicSystemInfo","info","initialPath","dlg","createDialog","size","removeOnClose","scrollY","add","header","getEditorHtml","labelKey","pathReadOnly","instruction","OperatingSystem","toLowerCase","readOnlyAttribute","enableNetworkSharePath","open","close","txtNetworkPath"],"mappings":"AAAA,aAAAA,OAAO,CAAC,UAAW,eAAgB,MAAO,YAAa,gBAAiB,aAAc,0BAA2B,yBAA0B,kBAAmB,gBAAgB,SAASC,QAASC,aAAcC,IAAKC,WAY/M,SAASC,iBACLJ,QAAQK,OAGZ,SAASC,wBAAwBC,KAAMC,KAAMC,YAAaC,mBACtD,GAAIF,MAAwB,iBAATA,KACf,MAAM,IAAIG,MAAM,gBAGpBX,QAAQY,OAER,IAAIC,SAAW,GAEX,YAAcL,KACdK,SAASC,KAAKC,UAAUC,qBAEpBR,MACAK,SAASC,KAAKC,UAAUE,qBAAqBT,KAAMC,cACnDI,SAASC,KAAKC,UAAUG,cAAcV,QAEtCK,SAASC,KAAKC,UAAUI,aAIhCC,QAAQC,IAAIR,UAAUS,MAClB,SAASC,WACL,IAAIC,QAAUD,UAAU,GACpBE,WAAaF,UAAU,IAAM,GAC7BG,KAAO,GAEXnB,KAAKoB,cAAc,YAAYC,UAAY,EAC3CrB,KAAKoB,cAAc,2BAA2BE,MAAQrB,MAAQ,GAE1DA,OACAkB,MAAQI,QAAQ,uBAAwB,GAAIL,WAAY,QAE5D,IAAK,IAAIM,EAAI,EAAGC,OAASR,QAAQQ,OAAQD,EAAIC,OAAQD,IAAK,CACtD,IAAIE,OAAST,QAAQO,GAErBL,MAAQI,QADO,SAAWG,OAAOC,KAAO,kBAAoB,uBAClCD,OAAOC,KAAMD,OAAOE,KAAMF,OAAOG,MAG1D5B,OACDkB,MAAQI,QAAQ,uBAAwB,GAAI,UAAW3B,UAAUkC,UAAU,mBAG/E9B,KAAKoB,cAAc,YAAYW,UAAYZ,KAC3C1B,QAAQK,UACT,WACKK,oBACAH,KAAKoB,cAAc,2BAA2BE,MAAQ,GACtDtB,KAAKoB,cAAc,YAAYW,UAAY,GAC3CtC,QAAQK,WAMxB,SAASyB,QAAQS,SAAUC,KAAMhC,KAAMiC,MACnC,IAAIf,KAAO,GASX,OARAA,MAAQ,wCAA0Ca,SAAW,gBAAkBC,KAAO,gBAAkBhC,KAAO,KAC/GkB,MAAQ,0FACRA,MAAQ,iCACRA,MAAQe,KACRf,MAAQ,SACRA,MAAQ,SACRA,MAAQ,gFACRA,MAAQ,SA+DZ,SAASgB,UAAUC,OAMnB,SAASC,qBAAqBC,SAC1BC,QAAQ,CAAC,UAAU,SAASC,OACxBA,MAAMF,YAPVD,CAAqB,CACjBD,KAAMA,OAqCd,SAASK,WAAWC,QAASJ,QAASpC,aAClCwC,QAAQC,iBAAiB,SAAS,SAASC,GACvC,IAAIC,QAAUlD,IAAImD,gBAAgBF,EAAEG,OAAQ,WAC5C,GAAIF,QAAS,CACT,IAAI5C,KAAO4C,QAAQG,aAAa,aAC5BH,QAAQI,UAAUC,SAAS,WAC3BR,QAAQtB,cAAc,2BAA2BE,MAAQrB,KAEzDF,wBAAwB2C,QAASzC,KAAMC,aAAa,OAKhEwC,QAAQC,iBAAiB,SAAS,SAASC,GACvC,GAAIjD,IAAImD,gBAAgBF,EAAEG,OAAQ,yBAA0B,CACxD,IAAI9C,KAAOyC,QAAQtB,cAAc,2BAA2BE,MAC5DvB,wBAAwB2C,QAASzC,KAAMC,iBAI/CwC,QAAQC,iBAAiB,UAAU,SAASC,GACxC,IAAIO,uBAAyBxD,IAAIyD,cAAcR,EAAEG,OAAQ,SACrDI,wBAA0B,2BAA6BA,uBAAuBE,IAC9EtD,wBAAwB2C,QAASS,uBAAuB7B,MAAOpB,gBAIvEwC,QAAQtB,cAAc,QAAQuB,iBAAiB,UAAU,SAASC,GAC9D,GAAIN,QAAQgB,SAAU,CAClB,IAAIC,iBAAmBC,KAAKpC,cAAc,mBAC1CmC,iBAAmBA,iBAAmBA,iBAAiBjC,MAAQ,KAC/D,IAAIrB,KAAOuD,KAAKpC,cAAc,2BAA2BE,OA1DrE,SAASmC,aAAaxD,KAAMyD,kBAAmBC,WAC3C,OAAOA,UAAUC,KAAK,CAClB3B,KAAM,OACN4B,IAAKF,UAAUG,OAAO,4BACtBC,KAAM,CACFC,kBAAmBN,kBACnB9B,KAAM3B,QAEXgE,OAAM,SAASC,UACd,GAAIA,SAAU,CACV,GAAwB,MAApBA,SAASC,OAET,OADAhC,UAAUvC,UAAUkC,UAAU,iBACvBjB,QAAQuD,SAEnB,GAAwB,MAApBF,SAASC,OAMT,OAJIhC,UADAuB,kBACU9D,UAAUkC,UAAU,uBAEpBlC,UAAUkC,UAAU,iBAE3BjB,QAAQuD,SAGvB,OAAOvD,QAAQwD,cAoCXZ,CAAaxD,KAAMqC,QAAQoB,kBAAmBlD,WAAWO,KAAKuB,QAAQgB,SAASrD,KAAMsD,mBAIzF,OAFAX,EAAE0B,iBACF1B,EAAE2B,mBACK,KAIf,SAASC,eAAelC,SACpB,OAAIA,QAAQrC,KACDY,QAAQwD,QAAQ/B,QAAQrC,MAExBO,UAAUiE,QAAQjE,UAAUsD,OAAO,wCAAwC/C,MAC9E,SAAS2D,QACL,OAAOA,OAAO9C,MAAQ,MACvB,WACC,MAAO,MAoEvB,IAAI+C,WACJ,OA/DA,SAASC,mBACL,IAAIC,cACOrB,KACNnD,KAAO,SAASiC,SAEjB,IAAIpC,YAAc,CACd4E,oBAAoB,GAEU,OAJlCxC,QAAUA,SAAW,IAITwC,qBACR5E,YAAY4E,mBAAqBxC,QAAQwC,oBAEjB,MAAxBxC,QAAQyC,eACR7E,YAAY6E,aAAezC,QAAQyC,cAEvClE,QAAQC,IAAI,CArPT6D,WAAa9D,QAAQwD,QAAQM,YAAcnE,UAAUwE,sBAAsBjE,MAC9E,SAASkE,MAEL,OADAN,WAAaM,KACNA,QAkPmBT,eAAelC,WAAWvB,MACpD,SAASC,WACL,IAAI2D,WAAa3D,UAAU,GACvBkE,YAAclE,UAAU,GACxBmE,IAAMzF,aAAa0F,aAAa,CAChCC,KAAM,QACNC,eAAe,EACfC,SAAS,IAEbJ,IAAIlC,UAAUuC,IAAI,aAClBL,IAAIlC,UAAUuC,IAAI,sBAClBL,IAAIlC,UAAUuC,IAAI,mBAClBL,IAAIlC,UAAUuC,IAAI,cAElB,IAAIrE,KAAO,GACXA,MAAQ,iCACRA,MAAQ,8IACRA,MAAQ,qCACRA,MAAQmB,QAAQmD,QAAU7F,UAAUkC,UAAU,oBAC9CX,MAAQ,QACRA,MAAQ,SACRA,MA3LhB,SAASuE,cAAcpD,QAASqC,YAC5B,IAuBIgB,SAvBAxE,KAAO,GACXA,MAAQ,0CACRA,MAAQ,oFACHmB,QAAQsD,eAETzE,MAAQ,wDACRA,MAFkBmB,QAAQuD,YAAcvD,QAAQuD,YAAc,aAAe,GAGzE,QAAUlB,WAAWmB,gBAAgBC,eACrC5E,MAAQ,QACRA,MAAQ,QACRA,MAAQvB,UAAUkC,UAAU,wCAC5BX,MAAQ,SACD,UAAYwD,WAAWmB,gBAAgBC,gBAC9C5E,MAAQ,QACRA,MAAQ,QACRA,MAAQvB,UAAUkC,UAAU,0CAC5BX,MAAQ,SAEZA,MAAQ,UAEZA,MAAQ,8BACRA,MAAQ,2EACRA,MAAQ,6BAGJwE,UADyB,IAAzBrD,QAAQyC,aACG,cAEA,YAEf,IAAIiB,kBAAoB1D,QAAQsD,aAAe,YAAc,GA0B7D,OAzBAzE,MAAQ,sFAAwF6E,kBAAoB,WAAapG,UAAUkC,UAAU6D,UAAY,MACjKxE,MAAQ,SACH6E,oBACD7E,MAAQ,iHAAmHvB,UAAUkC,UAAU,iBAAmB,0DAEtKX,MAAQ,SACH6E,oBACD7E,MAAQ,sFAERmB,QAAQ2D,yBACR9E,MAAQ,uDACRA,MAAQ,iEAAmEvB,UAAUkC,UAAU,4BAA8B,MAC7HX,MAAQ,iCACRA,MAAQvB,UAAUkC,UAAU,+BAAgC,oBAAqB,4BACjFX,MAAQ,SACRA,MAAQ,UAEZA,MAAQ,iCACRA,MAAQ,kGAAoGvB,UAAUkC,UAAU,YAAc,YAC9IX,MAAQ,SACRA,MAAQ,UACRA,MAAQ,SACRA,MAAQ,SACRA,MAAQ,SAqIYuE,CAAcpD,QAASqC,YAC/BQ,IAAIpD,UAAYZ,KAChBsB,WAAW0C,IAAK7C,QAASpC,aACzBiF,IAAIxC,iBAAiB,QAAS9C,gBAC9BH,aAAawG,KAAKf,KAClBA,IAAI/D,cAAc,mBAAmBuB,iBAAiB,SAAS,WAC3DjD,aAAayG,MAAMhB,QAEvBN,cAAgBM,IAChBA,IAAI/D,cAAc,2BAA2BE,MAAQ4D,YACrD,IAAIkB,eAAiBjB,IAAI/D,cAAc,mBACnCgF,iBACAA,eAAe9E,MAAQgB,QAAQiB,kBAAoB,IAElDjB,QAAQsD,cACT7F,wBAAwBoF,IAAKD,YAAahF,aAAa,OAhD5DsD,KAqDN2C,MAAQ,WACLtB,eACAnF,aAAayG,MAAMtB","file":"directorybrowser.js","sourcesContent":["define(['loading', 'dialogHelper', 'dom', 'globalize', 'listViewStyle', 'emby-input', 'paper-icon-button-light', 'css!./directorybrowser', 'formDialogStyle', 'emby-button'], function(loading, dialogHelper, dom, globalize) {\n    'use strict';\n\n    function getSystemInfo() {\n        return systemInfo ? Promise.resolve(systemInfo) : ApiClient.getPublicSystemInfo().then(\n            function(info) {\n                systemInfo = info;\n                return info;\n            }\n        );\n    }\n\n    function onDialogClosed() {\n        loading.hide();\n    }\n\n    function refreshDirectoryBrowser(page, path, fileOptions, updatePathOnError) {\n        if (path && typeof path !== 'string') {\n            throw new Error('invalid path');\n        }\n\n        loading.show();\n\n        var promises = [];\n\n        if ('Network' === path) {\n            promises.push(ApiClient.getNetworkDevices());\n        } else {\n            if (path) {\n                promises.push(ApiClient.getDirectoryContents(path, fileOptions));\n                promises.push(ApiClient.getParentPath(path));\n            } else {\n                promises.push(ApiClient.getDrives());\n            }\n        }\n\n        Promise.all(promises).then(\n            function(responses) {\n                var folders = responses[0];\n                var parentPath = responses[1] || '';\n                var html = '';\n\n                page.querySelector('.results').scrollTop = 0;\n                page.querySelector('#txtDirectoryPickerPath').value = path || '';\n\n                if (path) {\n                    html += getItem('lnkPath lnkDirectory', '', parentPath, '...');\n                }\n                for (var i = 0, length = folders.length; i < length; i++) {\n                    var folder = folders[i];\n                    var cssClass = 'File' === folder.Type ? 'lnkPath lnkFile' : 'lnkPath lnkDirectory';\n                    html += getItem(cssClass, folder.Type, folder.Path, folder.Name);\n                }\n\n                if (!path) {\n                    html += getItem('lnkPath lnkDirectory', '', 'Network', globalize.translate('ButtonNetwork'));\n                }\n\n                page.querySelector('.results').innerHTML = html;\n                loading.hide();\n            }, function() {\n                if (updatePathOnError) {\n                    page.querySelector('#txtDirectoryPickerPath').value = '';\n                    page.querySelector('.results').innerHTML = '';\n                    loading.hide();\n                }\n            }\n        );\n    }\n\n    function getItem(cssClass, type, path, name) {\n        var html = '';\n        html += '<div class=\"listItem listItem-border ' + cssClass + '\" data-type=\"' + type + '\" data-path=\"' + path + '\">';\n        html += '<div class=\"listItemBody\" style=\"padding-left:0;padding-top:.5em;padding-bottom:.5em;\">';\n        html += '<div class=\"listItemBodyText\">';\n        html += name;\n        html += '</div>';\n        html += '</div>';\n        html += '<span class=\"material-icons arrow_forward\" style=\"font-size:inherit;\"></span>';\n        html += '</div>';\n        return html;\n    }\n\n    function getEditorHtml(options, systemInfo) {\n        var html = '';\n        html += '<div class=\"formDialogContent scrollY\">';\n        html += '<div class=\"dialogContentInner dialog-content-centered\" style=\"padding-top:2em;\">';\n        if (!options.pathReadOnly) {\n            var instruction = options.instruction ? options.instruction + '<br/><br/>' : '';\n            html += '<div class=\"infoBanner\" style=\"margin-bottom:1.5em;\">';\n            html += instruction;\n            if ('bsd' === systemInfo.OperatingSystem.toLowerCase()) {\n                html += '<br/>';\n                html += '<br/>';\n                html += globalize.translate('MessageDirectoryPickerBSDInstruction');\n                html += '<br/>';\n            } else if ('linux' === systemInfo.OperatingSystem.toLowerCase()) {\n                html += '<br/>';\n                html += '<br/>';\n                html += globalize.translate('MessageDirectoryPickerLinuxInstruction');\n                html += '<br/>';\n            }\n            html += '</div>';\n        }\n        html += '<form style=\"margin:auto;\">';\n        html += '<div class=\"inputContainer\" style=\"display: flex; align-items: center;\">';\n        html += '<div style=\"flex-grow:1;\">';\n        var labelKey;\n        if (options.includeFiles !== true) {\n            labelKey = 'LabelFolder';\n        } else {\n            labelKey = 'LabelPath';\n        }\n        var readOnlyAttribute = options.pathReadOnly ? ' readonly' : '';\n        html += '<input is=\"emby-input\" id=\"txtDirectoryPickerPath\" type=\"text\" required=\"required\" ' + readOnlyAttribute + ' label=\"' + globalize.translate(labelKey) + '\"/>';\n        html += '</div>';\n        if (!readOnlyAttribute) {\n            html += '<button type=\"button\" is=\"paper-icon-button-light\" class=\"btnRefreshDirectories emby-input-iconbutton\" title=\"' + globalize.translate('ButtonRefresh') + '\"><span class=\"material-icons search\"></span></button>';\n        }\n        html += '</div>';\n        if (!readOnlyAttribute) {\n            html += '<div class=\"results paperList\" style=\"max-height: 200px; overflow-y: auto;\"></div>';\n        }\n        if (options.enableNetworkSharePath) {\n            html += '<div class=\"inputContainer\" style=\"margin-top:2em;\">';\n            html += '<input is=\"emby-input\" id=\"txtNetworkPath\" type=\"text\" label=\"' + globalize.translate('LabelOptionalNetworkPath') + '\"/>';\n            html += '<div class=\"fieldDescription\">';\n            html += globalize.translate('LabelOptionalNetworkPathHelp', '<b>\\\\\\\\server</b>', '<b>\\\\\\\\192.168.1.101</b>');\n            html += '</div>';\n            html += '</div>';\n        }\n        html += '<div class=\"formDialogFooter\">';\n        html += '<button is=\"emby-button\" type=\"submit\" class=\"raised button-submit block formDialogFooterItem\">' + globalize.translate('ButtonOk') + '</button>';\n        html += '</div>';\n        html += '</form>';\n        html += '</div>';\n        html += '</div>';\n        html += '</div>';\n\n        return html;\n    }\n\n    function alertText(text) {\n        alertTextWithOptions({\n            text: text\n        });\n    }\n\n    function alertTextWithOptions(options) {\n        require(['alert'], function(alert) {\n            alert(options);\n        });\n    }\n\n    function validatePath(path, validateWriteable, apiClient) {\n        return apiClient.ajax({\n            type: 'POST',\n            url: apiClient.getUrl('Environment/ValidatePath'),\n            data: {\n                ValidateWriteable: validateWriteable,\n                Path: path\n            }\n        }).catch(function(response) {\n            if (response) {\n                if (response.status === 404) {\n                    alertText(globalize.translate('PathNotFound'));\n                    return Promise.reject();\n                }\n                if (response.status === 500) {\n                    if (validateWriteable) {\n                        alertText(globalize.translate('WriteAccessRequired'));\n                    } else {\n                        alertText(globalize.translate('PathNotFound'));\n                    }\n                    return Promise.reject();\n                }\n            }\n            return Promise.resolve();\n        });\n    }\n\n    function initEditor(content, options, fileOptions) {\n        content.addEventListener('click', function(e) {\n            var lnkPath = dom.parentWithClass(e.target, 'lnkPath');\n            if (lnkPath) {\n                var path = lnkPath.getAttribute('data-path');\n                if (lnkPath.classList.contains('lnkFile')) {\n                    content.querySelector('#txtDirectoryPickerPath').value = path;\n                } else {\n                    refreshDirectoryBrowser(content, path, fileOptions, true);\n                }\n            }\n        });\n\n        content.addEventListener('click', function(e) {\n            if (dom.parentWithClass(e.target, 'btnRefreshDirectories')) {\n                var path = content.querySelector('#txtDirectoryPickerPath').value;\n                refreshDirectoryBrowser(content, path, fileOptions);\n            }\n        });\n\n        content.addEventListener('change', function(e) {\n            var txtDirectoryPickerPath = dom.parentWithTag(e.target, 'INPUT');\n            if (txtDirectoryPickerPath && 'txtDirectoryPickerPath' === txtDirectoryPickerPath.id) {\n                refreshDirectoryBrowser(content, txtDirectoryPickerPath.value, fileOptions);\n            }\n        });\n\n        content.querySelector('form').addEventListener('submit', function(e) {\n            if (options.callback) {\n                var networkSharePath = this.querySelector('#txtNetworkPath');\n                networkSharePath = networkSharePath ? networkSharePath.value : null;\n                var path = this.querySelector('#txtDirectoryPickerPath').value;\n                validatePath(path, options.validateWriteable, ApiClient).then(options.callback(path, networkSharePath));\n            }\n            e.preventDefault();\n            e.stopPropagation();\n            return false;\n        });\n    }\n\n    function getDefaultPath(options) {\n        if (options.path) {\n            return Promise.resolve(options.path);\n        } else {\n            return ApiClient.getJSON(ApiClient.getUrl('Environment/DefaultDirectoryBrowser')).then(\n                function(result) {\n                    return result.Path || '';\n                }, function() {\n                    return '';\n                }\n            );\n        }\n    }\n\n    function directoryBrowser() {\n        var currentDialog;\n        var self = this;\n        self.show = function(options) {\n            options = options || {};\n            var fileOptions = {\n                includeDirectories: true\n            };\n            if (options.includeDirectories != null) {\n                fileOptions.includeDirectories = options.includeDirectories;\n            }\n            if (options.includeFiles != null) {\n                fileOptions.includeFiles = options.includeFiles;\n            }\n            Promise.all([getSystemInfo(), getDefaultPath(options)]).then(\n                function(responses) {\n                    var systemInfo = responses[0];\n                    var initialPath = responses[1];\n                    var dlg = dialogHelper.createDialog({\n                        size: 'small',\n                        removeOnClose: true,\n                        scrollY: false\n                    });\n                    dlg.classList.add('ui-body-a');\n                    dlg.classList.add('background-theme-a');\n                    dlg.classList.add('directoryPicker');\n                    dlg.classList.add('formDialog');\n\n                    var html = '';\n                    html += '<div class=\"formDialogHeader\">';\n                    html += '<button is=\"paper-icon-button-light\" class=\"btnCloseDialog autoSize\" tabindex=\"-1\"><span class=\"material-icons arrow_back\"></span></button>';\n                    html += '<h3 class=\"formDialogHeaderTitle\">';\n                    html += options.header || globalize.translate('HeaderSelectPath');\n                    html += '</h3>';\n                    html += '</div>';\n                    html += getEditorHtml(options, systemInfo);\n                    dlg.innerHTML = html;\n                    initEditor(dlg, options, fileOptions);\n                    dlg.addEventListener('close', onDialogClosed);\n                    dialogHelper.open(dlg);\n                    dlg.querySelector('.btnCloseDialog').addEventListener('click', function() {\n                        dialogHelper.close(dlg);\n                    });\n                    currentDialog = dlg;\n                    dlg.querySelector('#txtDirectoryPickerPath').value = initialPath;\n                    var txtNetworkPath = dlg.querySelector('#txtNetworkPath');\n                    if (txtNetworkPath) {\n                        txtNetworkPath.value = options.networkSharePath || '';\n                    }\n                    if (!options.pathReadOnly) {\n                        refreshDirectoryBrowser(dlg, initialPath, fileOptions, true);\n                    }\n                }\n            );\n        };\n        self.close = function() {\n            if (currentDialog) {\n                dialogHelper.close(currentDialog);\n            }\n        };\n    }\n\n    var systemInfo;\n    return directoryBrowser;\n});\n"]}