{"version":3,"sources":["controllers/music/musicalbums.js"],"names":["define","layoutManager","playbackManager","loading","events","libraryBrowser","imageLoader","alphaPicker","listView","cardBuilder","userSettings","globalize","view","params","tabContent","playAll","ApiClient","getItem","getCurrentUserId","topParentId","then","item","play","items","shuffle","getQuery","getPageData","key","getSavedQueryKey","pageData","query","SortBy","SortOrder","IncludeItemTypes","Recursive","Fields","ImageTypeLimit","EnableImageTypes","StartIndex","getSavedView","libraryPageSize","ParentId","loadSavedQueryValues","savedQueryKey","onViewStyleChange","viewStyle","self","getCurrentViewStyle","itemsContainer","querySelector","classList","add","remove","innerHTML","reloadItems","page","show","isLoading","getItems","result","onNextPageClick","Limit","onPreviousPageClick","Math","max","html","window","scrollTo","updateFilterControls","i","length","pagingHtml","getQueryPagingHtml","startIndex","limit","totalRecordCount","TotalRecordCount","showLimit","updatePageSizeSetting","addLayoutButton","sortButton","filterButton","getListViewHtml","Items","context","sortBy","addToListButton","getCardsHtml","shape","showTitle","coverImage","showParentTitle","lazy","cardLayout","centerText","overlayPlayButton","elems","querySelectorAll","addEventListener","lazyChildren","saveQueryValues","hide","require","autoFocuser","autoFocus","value","NameStartsWithOrGreater","this","showFilterMenu","_ref","filterDialog","filterDialogFactory","default","mode","serverId","on","initPage","alphaPickerElement","e","newValue","detail","element","valueChangeEvent","showSortMenu","name","translate","id","callback","button","target","btnSelectView","showLayoutMenu","split","saveViewSetting","renderTab","destroy"],"mappings":"AAAA,aAAAA,OAAO,CAAC,gBAAiB,kBAAmB,UAAW,SAAU,iBAAkB,cAAe,cAAe,WAAY,cAAe,eAAgB,YAAa,wBAAwB,SAAUC,cAAeC,gBAAiBC,QAASC,OAAQC,eAAgBC,YAAaC,YAAaC,SAAUC,YAAaC,aAAcC,WAGvU,OAAO,SAAUC,KAAMC,OAAQC,YAC3B,SAASC,UACLC,UAAUC,QAAQD,UAAUE,mBAAoBL,OAAOM,aAAaC,MAAK,SAAUC,MAC/EnB,gBAAgBoB,KAAK,CACjBC,MAAO,CAACF,WAKpB,SAASG,UACLR,UAAUC,QAAQD,UAAUE,mBAAoBL,OAAOM,aAAaC,MAAK,SAAUC,MAC/EI,WACAvB,gBAAgBsB,QAAQH,KAAM,SAItC,SAASK,cACL,IAAIC,IAAMC,mBAyBV,OAvBKC,WACDA,SAAW,CACPC,MAAO,CACHC,OAAQ,WACRC,UAAW,YACXC,iBAAkB,aAClBC,WAAW,EACXC,OAAQ,iDACRC,eAAgB,EAChBC,iBAAkB,gCAClBC,WAAY,GAEhB1B,KAAMP,eAAekC,aAAaZ,MAAQ,UAG1CjB,aAAa8B,kBAAoB,IACjCX,SAASC,MAAT,MAA0BpB,aAAa8B,mBAG3CX,SAASC,MAAMW,SAAW5B,OAAOM,YACjCd,eAAeqC,qBAAqBf,IAAKE,SAASC,QAG/CD,SAGX,SAASJ,WACL,OAAOC,cAAcI,MAGzB,SAASF,mBAKL,OAJKe,gBACDA,cAAgBtC,eAAeuB,iBAAiB,gBAG7Ce,cAGX,SAASC,oBACL,IAAIC,UAAYC,KAAKC,sBACjBC,eAAiBlC,WAAWmC,cAAc,mBAE1C,QAAUJ,WACVG,eAAeE,UAAUC,IAAI,iBAC7BH,eAAeE,UAAUE,OAAO,mBAEhCJ,eAAeE,UAAUE,OAAO,iBAChCJ,eAAeE,UAAUC,IAAI,kBAGjCH,eAAeK,UAAY,GAG/B,SAASC,YAAYC,MACjBpD,QAAQqD,OACRC,WAAY,EACZ,IAAI3B,MAAQL,WACZT,UAAU0C,SAAS1C,UAAUE,mBAAoBY,OAAOV,MAAK,SAAUuC,QACnE,SAASC,kBACDH,YAIA/C,aAAa8B,kBAAoB,IACjCV,MAAMQ,YAAcR,MAAM+B,OAE9BP,YAAYxC,aAGhB,SAASgD,sBACDL,YAIA/C,aAAa8B,kBAAoB,IACjCV,MAAMQ,WAAayB,KAAKC,IAAI,EAAGlC,MAAMQ,WAAaR,MAAM+B,QAE5DP,YAAYxC,aAKhB,IAAImD,KAFJC,OAAOC,SAAS,EAAG,GACnBC,qBAAqBb,MAErB,IAyCIc,EACAC,OA1CAC,WAAalE,eAAemE,mBAAmB,CAC/CC,WAAY3C,MAAMQ,WAClBoC,MAAO5C,MAAM+B,MACbc,iBAAkBhB,OAAOiB,iBACzBC,WAAW,EACXC,uBAAuB,EACvBC,iBAAiB,EACjBC,YAAY,EACZC,cAAc,IAEdpC,UAAYC,KAAKC,sBAEjBkB,KADa,QAAbpB,UACOrC,SAAS0E,gBAAgB,CAC5B3D,MAAOoC,OAAOwB,MACdC,QAAS,QACTC,OAAQvD,MAAMC,OACduD,iBAAiB,IAED,cAAbzC,UACApC,YAAY8E,aAAa,CAC5BhE,MAAOoC,OAAOwB,MACdK,MAAO,SACPJ,QAAS,QACTK,WAAW,EACXC,YAAY,EACZC,iBAAiB,EACjBC,MAAM,EACNC,YAAY,IAGTpF,YAAY8E,aAAa,CAC5BhE,MAAOoC,OAAOwB,MACdK,MAAO,SACPJ,QAAS,QACTK,WAAW,EACXE,iBAAiB,EACjBC,MAAM,EACNE,YAAY,EACZC,mBAAmB,IAK3B,IAAIC,MAAQlF,WAAWmF,iBAAiB,WAExC,IAAK5B,EAAI,EAAGC,OAAS0B,MAAM1B,OAAQD,EAAIC,OAAQD,IAC3C2B,MAAM3B,GAAGhB,UAAYkB,WAIzB,IAAKF,EAAI,EAAGC,QADZ0B,MAAQlF,WAAWmF,iBAAiB,iBACT3B,OAAQD,EAAIC,OAAQD,IAC3C2B,MAAM3B,GAAG6B,iBAAiB,QAAStC,iBAIvC,IAAKS,EAAI,EAAGC,QADZ0B,MAAQlF,WAAWmF,iBAAiB,qBACT3B,OAAQD,EAAIC,OAAQD,IAC3C2B,MAAM3B,GAAG6B,iBAAiB,QAASpC,qBAGvC,IAAId,eAAiBlC,WAAWmC,cAAc,mBAC9CD,eAAeK,UAAYY,KAC3B3D,YAAY6F,aAAanD,gBACzB3C,eAAe+F,gBAAgBxE,mBAAoBE,OACnD3B,QAAQkG,OACR5C,WAAY,EAEZ6C,QAAQ,CAAC,gBAAgB,SAAUC,aAC/BA,YAAYC,UAAU1F,kBAKlC,SAASsD,qBAAqBtD,YAC1B,IAAIgB,MAAQL,WACZqB,KAAKvC,YAAYkG,MAAM3E,MAAM4E,yBAGjC,IAAI/D,cACAd,SACAiB,KAAO6D,KACPlD,WAAY,EAEhBX,KAAK8D,eAAiB,WAClBN,QAAQ,CAAC,yCAAyC,SAAAO,MAA0C,IACpFC,aAAe,IAAIC,EADiEF,KAA/BG,SACd,CACvClF,MAAOL,WACPwF,KAAM,SACNC,SAAUlG,UAAUkG,aAExB9G,OAAO+G,GAAGL,aAAc,gBAAgB,WACpCrF,WAAWa,WAAa,EACxBgB,YAAYxC,eAEhBgG,aAAatD,WAIrBV,KAAKC,oBAAsB,WACvB,OAAOrB,cAAcd,MAGzB,SAASwG,SAAStG,YACd,IAAIuG,mBAAqBvG,WAAWmC,cAAc,gBAC9CD,eAAiBlC,WAAWmC,cAAc,mBAE9CoE,mBAAmBnB,iBAAiB,qBAAqB,SAAUoB,GAC/D,IAAIC,SAAWD,EAAEE,OAAOf,MACpB3E,MAAQL,WACZK,MAAM4E,wBAA0Ba,SAChCzF,MAAMQ,WAAa,EACnBgB,YAAYxC,eAEhBgC,KAAKvC,YAAc,IAAIA,YAAY,CAC/BkH,QAASJ,mBACTK,iBAAkB,UAGtB5G,WAAWmC,cAAc,gBAAgBC,UAAUC,IAAI,wBACvDkE,mBAAmBnE,UAAUC,IAAI,2BACjCH,eAAeE,UAAUC,IAAI,gCAE7BrC,WAAWmC,cAAc,cAAciD,iBAAiB,SAAS,WAC7DpD,KAAK8D,oBAET9F,WAAWmC,cAAc,YAAYiD,iBAAiB,SAAS,SAAUoB,GACrEjH,eAAesH,aAAa,CACxBpG,MAAO,CAAC,CACJqG,KAAMjH,UAAUkH,UAAU,kBAC1BC,GAAI,YACL,CACCF,KAAMjH,UAAUkH,UAAU,qBAC1BC,GAAI,wBACL,CACCF,KAAMjH,UAAUkH,UAAU,yBAC1BC,GAAI,4BACL,CACCF,KAAMjH,UAAUkH,UAAU,sBAC1BC,GAAI,yBACL,CACCF,KAAMjH,UAAUkH,UAAU,mBAC1BC,GAAI,wBACL,CACCF,KAAMjH,UAAUkH,UAAU,qBAC1BC,GAAI,wCACL,CACCF,KAAMjH,UAAUkH,UAAU,gBAC1BC,GAAI,oBAERC,SAAU,SAAAA,WACNtG,WAAWa,WAAa,EACxBgB,YAAYxC,aAEhBgB,MAAOL,WACPuG,OAAQV,EAAEW,YAGlB,IAAIC,cAAgBpH,WAAWmC,cAAc,kBAC7CiF,cAAchC,iBAAiB,SAAS,SAAUoB,GAC9CjH,eAAe8H,eAAeb,EAAEW,OAAQnF,KAAKC,sBAAuB,yBAAyBqF,MAAM,SAEvGF,cAAchC,iBAAiB,gBAAgB,SAAUoB,GACrD,IAAIzE,UAAYyE,EAAEE,OAAO3E,UACzBnB,cAAcd,KAAOiC,UACrBxC,eAAegI,gBAAgBzG,mBAAoBiB,WACnDpB,WAAWa,WAAa,EACxBM,oBACAU,YAAYxC,eAEhBA,WAAWmC,cAAc,eAAeiD,iBAAiB,QAASnF,SAClED,WAAWmC,cAAc,eAAeiD,iBAAiB,QAAS1E,SAGtE4F,CAAStG,YACT8B,oBAEAE,KAAKwF,UAAY,WACbhF,YAAYxC,YACZsD,wBAGJtB,KAAKyF,QAAU","file":"musicalbums.js","sourcesContent":["define(['layoutManager', 'playbackManager', 'loading', 'events', 'libraryBrowser', 'imageLoader', 'alphaPicker', 'listView', 'cardBuilder', 'userSettings', 'globalize', 'emby-itemscontainer'], function (layoutManager, playbackManager, loading, events, libraryBrowser, imageLoader, alphaPicker, listView, cardBuilder, userSettings, globalize) {\n    'use strict';\n\n    return function (view, params, tabContent) {\n        function playAll() {\n            ApiClient.getItem(ApiClient.getCurrentUserId(), params.topParentId).then(function (item) {\n                playbackManager.play({\n                    items: [item]\n                });\n            });\n        }\n\n        function shuffle() {\n            ApiClient.getItem(ApiClient.getCurrentUserId(), params.topParentId).then(function (item) {\n                getQuery();\n                playbackManager.shuffle(item, null);\n            });\n        }\n\n        function getPageData() {\n            var key = getSavedQueryKey();\n\n            if (!pageData) {\n                pageData = {\n                    query: {\n                        SortBy: 'SortName',\n                        SortOrder: 'Ascending',\n                        IncludeItemTypes: 'MusicAlbum',\n                        Recursive: true,\n                        Fields: 'PrimaryImageAspectRatio,SortName,BasicSyncInfo',\n                        ImageTypeLimit: 1,\n                        EnableImageTypes: 'Primary,Backdrop,Banner,Thumb',\n                        StartIndex: 0\n                    },\n                    view: libraryBrowser.getSavedView(key) || 'Poster'\n                };\n\n                if (userSettings.libraryPageSize() > 0) {\n                    pageData.query['Limit'] = userSettings.libraryPageSize();\n                }\n\n                pageData.query.ParentId = params.topParentId;\n                libraryBrowser.loadSavedQueryValues(key, pageData.query);\n            }\n\n            return pageData;\n        }\n\n        function getQuery() {\n            return getPageData().query;\n        }\n\n        function getSavedQueryKey() {\n            if (!savedQueryKey) {\n                savedQueryKey = libraryBrowser.getSavedQueryKey('musicalbums');\n            }\n\n            return savedQueryKey;\n        }\n\n        function onViewStyleChange() {\n            var viewStyle = self.getCurrentViewStyle();\n            var itemsContainer = tabContent.querySelector('.itemsContainer');\n\n            if ('List' == viewStyle) {\n                itemsContainer.classList.add('vertical-list');\n                itemsContainer.classList.remove('vertical-wrap');\n            } else {\n                itemsContainer.classList.remove('vertical-list');\n                itemsContainer.classList.add('vertical-wrap');\n            }\n\n            itemsContainer.innerHTML = '';\n        }\n\n        function reloadItems(page) {\n            loading.show();\n            isLoading = true;\n            var query = getQuery();\n            ApiClient.getItems(ApiClient.getCurrentUserId(), query).then(function (result) {\n                function onNextPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    if (userSettings.libraryPageSize() > 0) {\n                        query.StartIndex += query.Limit;\n                    }\n                    reloadItems(tabContent);\n                }\n\n                function onPreviousPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    if (userSettings.libraryPageSize() > 0) {\n                        query.StartIndex = Math.max(0, query.StartIndex - query.Limit);\n                    }\n                    reloadItems(tabContent);\n                }\n\n                window.scrollTo(0, 0);\n                updateFilterControls(page);\n                var html;\n                var pagingHtml = libraryBrowser.getQueryPagingHtml({\n                    startIndex: query.StartIndex,\n                    limit: query.Limit,\n                    totalRecordCount: result.TotalRecordCount,\n                    showLimit: false,\n                    updatePageSizeSetting: false,\n                    addLayoutButton: false,\n                    sortButton: false,\n                    filterButton: false\n                });\n                var viewStyle = self.getCurrentViewStyle();\n                if (viewStyle == 'List') {\n                    html = listView.getListViewHtml({\n                        items: result.Items,\n                        context: 'music',\n                        sortBy: query.SortBy,\n                        addToListButton: true\n                    });\n                } else if (viewStyle == 'PosterCard') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'square',\n                        context: 'music',\n                        showTitle: true,\n                        coverImage: true,\n                        showParentTitle: true,\n                        lazy: true,\n                        cardLayout: true\n                    });\n                } else {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'square',\n                        context: 'music',\n                        showTitle: true,\n                        showParentTitle: true,\n                        lazy: true,\n                        centerText: true,\n                        overlayPlayButton: true\n                    });\n                }\n                var i;\n                var length;\n                var elems = tabContent.querySelectorAll('.paging');\n\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].innerHTML = pagingHtml;\n                }\n\n                elems = tabContent.querySelectorAll('.btnNextPage');\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener('click', onNextPageClick);\n                }\n\n                elems = tabContent.querySelectorAll('.btnPreviousPage');\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener('click', onPreviousPageClick);\n                }\n\n                var itemsContainer = tabContent.querySelector('.itemsContainer');\n                itemsContainer.innerHTML = html;\n                imageLoader.lazyChildren(itemsContainer);\n                libraryBrowser.saveQueryValues(getSavedQueryKey(), query);\n                loading.hide();\n                isLoading = false;\n\n                require(['autoFocuser'], function (autoFocuser) {\n                    autoFocuser.autoFocus(tabContent);\n                });\n            });\n        }\n\n        function updateFilterControls(tabContent) {\n            var query = getQuery();\n            self.alphaPicker.value(query.NameStartsWithOrGreater);\n        }\n\n        var savedQueryKey;\n        var pageData;\n        var self = this;\n        var isLoading = false;\n\n        self.showFilterMenu = function () {\n            require(['components/filterdialog/filterdialog'], function ({default: filterDialogFactory}) {\n                var filterDialog = new filterDialogFactory({\n                    query: getQuery(),\n                    mode: 'albums',\n                    serverId: ApiClient.serverId()\n                });\n                events.on(filterDialog, 'filterchange', function () {\n                    getQuery().StartIndex = 0;\n                    reloadItems(tabContent);\n                });\n                filterDialog.show();\n            });\n        };\n\n        self.getCurrentViewStyle = function () {\n            return getPageData().view;\n        };\n\n        function initPage(tabContent) {\n            var alphaPickerElement = tabContent.querySelector('.alphaPicker');\n            var itemsContainer = tabContent.querySelector('.itemsContainer');\n\n            alphaPickerElement.addEventListener('alphavaluechanged', function (e) {\n                var newValue = e.detail.value;\n                var query = getQuery();\n                query.NameStartsWithOrGreater = newValue;\n                query.StartIndex = 0;\n                reloadItems(tabContent);\n            });\n            self.alphaPicker = new alphaPicker({\n                element: alphaPickerElement,\n                valueChangeEvent: 'click'\n            });\n\n            tabContent.querySelector('.alphaPicker').classList.add('alphabetPicker-right');\n            alphaPickerElement.classList.add('alphaPicker-fixed-right');\n            itemsContainer.classList.add('padded-right-withalphapicker');\n\n            tabContent.querySelector('.btnFilter').addEventListener('click', function () {\n                self.showFilterMenu();\n            });\n            tabContent.querySelector('.btnSort').addEventListener('click', function (e) {\n                libraryBrowser.showSortMenu({\n                    items: [{\n                        name: globalize.translate('OptionNameSort'),\n                        id: 'SortName'\n                    }, {\n                        name: globalize.translate('OptionAlbumArtist'),\n                        id: 'AlbumArtist,SortName'\n                    }, {\n                        name: globalize.translate('OptionCommunityRating'),\n                        id: 'CommunityRating,SortName'\n                    }, {\n                        name: globalize.translate('OptionCriticRating'),\n                        id: 'CriticRating,SortName'\n                    }, {\n                        name: globalize.translate('OptionDateAdded'),\n                        id: 'DateCreated,SortName'\n                    }, {\n                        name: globalize.translate('OptionReleaseDate'),\n                        id: 'ProductionYear,PremiereDate,SortName'\n                    }, {\n                        name: globalize.translate('OptionRandom'),\n                        id: 'Random,SortName'\n                    }],\n                    callback: function () {\n                        getQuery().StartIndex = 0;\n                        reloadItems(tabContent);\n                    },\n                    query: getQuery(),\n                    button: e.target\n                });\n            });\n            var btnSelectView = tabContent.querySelector('.btnSelectView');\n            btnSelectView.addEventListener('click', function (e) {\n                libraryBrowser.showLayoutMenu(e.target, self.getCurrentViewStyle(), 'List,Poster,PosterCard'.split(','));\n            });\n            btnSelectView.addEventListener('layoutchange', function (e) {\n                var viewStyle = e.detail.viewStyle;\n                getPageData().view = viewStyle;\n                libraryBrowser.saveViewSetting(getSavedQueryKey(), viewStyle);\n                getQuery().StartIndex = 0;\n                onViewStyleChange();\n                reloadItems(tabContent);\n            });\n            tabContent.querySelector('.btnPlayAll').addEventListener('click', playAll);\n            tabContent.querySelector('.btnShuffle').addEventListener('click', shuffle);\n        }\n\n        initPage(tabContent);\n        onViewStyleChange();\n\n        self.renderTab = function () {\n            reloadItems(tabContent);\n            updateFilterControls(tabContent);\n        };\n\n        self.destroy = function () {};\n    };\n});\n"]}