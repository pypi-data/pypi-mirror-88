{"version":3,"sources":["controllers/music/musicartists.js"],"names":["define","layoutManager","loading","events","libraryBrowser","imageLoader","alphaPicker","listView","cardBuilder","appHost","userSettings","view","params","tabContent","getPageData","context","key","getSavedQueryKey","pageData","data","queryValues","SortBy","SortOrder","Recursive","Fields","StartIndex","ImageTypeLimit","EnableImageTypes","libraryPageSize","query","getSavedView","ParentId","topParentId","loadSavedQueryValues","getQuery","savedQueryKey","self","mode","onViewStyleChange","viewStyle","getCurrentViewStyle","itemsContainer","querySelector","classList","add","remove","innerHTML","reloadItems","page","show","isLoading","ApiClient","getAlbumArtists","getCurrentUserId","getArtists","then","result","onNextPageClick","Limit","onPreviousPageClick","Math","max","html","window","scrollTo","updateFilterControls","i","length","pagingHtml","getQueryPagingHtml","startIndex","limit","totalRecordCount","TotalRecordCount","showLimit","updatePageSizeSetting","addLayoutButton","sortButton","filterButton","getListViewHtml","items","Items","sortBy","getCardsHtml","shape","showTitle","coverImage","cardLayout","lazy","centerText","overlayPlayButton","elems","querySelectorAll","addEventListener","lazyChildren","saveQueryValues","hide","require","autoFocuser","autoFocus","value","NameStartsWithOrGreater","this","showFilterMenu","_ref","filterDialog","filterDialogFactory","default","serverId","on","initPage","alphaPickerElement","e","newValue","detail","element","valueChangeEvent","btnSelectView","showLayoutMenu","target","split","saveViewSetting","renderTab","destroy"],"mappings":"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","file":"musicartists.js","sourcesContent":["define(['layoutManager', 'loading', 'events', 'libraryBrowser', 'imageLoader', 'alphaPicker', 'listView', 'cardBuilder', 'apphost', 'userSettings', 'emby-itemscontainer'], function (layoutManager, loading, events, libraryBrowser, imageLoader, alphaPicker, listView, cardBuilder, appHost, userSettings) {\n    'use strict';\n\n    return function (view, params, tabContent) {\n        function getPageData(context) {\n            var key = getSavedQueryKey(context);\n            var pageData = data[key];\n\n            if (!pageData) {\n                var queryValues = {\n                    SortBy: 'SortName',\n                    SortOrder: 'Ascending',\n                    Recursive: true,\n                    Fields: 'PrimaryImageAspectRatio,SortName,BasicSyncInfo',\n                    StartIndex: 0,\n                    ImageTypeLimit: 1,\n                    EnableImageTypes: 'Primary,Backdrop,Banner,Thumb'\n                };\n\n                if (userSettings.libraryPageSize() > 0) {\n                    queryValues['Limit'] = userSettings.libraryPageSize();\n                }\n\n                pageData = data[key] = {\n                    query: queryValues,\n                    view: libraryBrowser.getSavedView(key) || 'Poster'\n                };\n                pageData.query.ParentId = params.topParentId;\n                libraryBrowser.loadSavedQueryValues(key, pageData.query);\n            }\n\n            return pageData;\n        }\n\n        function getQuery(context) {\n            return getPageData(context).query;\n        }\n\n        function getSavedQueryKey(context) {\n            if (!context.savedQueryKey) {\n                context.savedQueryKey = libraryBrowser.getSavedQueryKey(self.mode);\n            }\n\n            return context.savedQueryKey;\n        }\n\n        function onViewStyleChange() {\n            var viewStyle = self.getCurrentViewStyle();\n            var itemsContainer = tabContent.querySelector('.itemsContainer');\n\n            if ('List' == viewStyle) {\n                itemsContainer.classList.add('vertical-list');\n                itemsContainer.classList.remove('vertical-wrap');\n            } else {\n                itemsContainer.classList.remove('vertical-list');\n                itemsContainer.classList.add('vertical-wrap');\n            }\n\n            itemsContainer.innerHTML = '';\n        }\n\n        function reloadItems(page) {\n            loading.show();\n            isLoading = true;\n            var query = getQuery(page);\n            var promise = self.mode == 'albumartists' ?\n                ApiClient.getAlbumArtists(ApiClient.getCurrentUserId(), query) :\n                ApiClient.getArtists(ApiClient.getCurrentUserId(), query);\n            promise.then(function (result) {\n                function onNextPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    if (userSettings.libraryPageSize() > 0) {\n                        query.StartIndex += query.Limit;\n                    }\n                    reloadItems(tabContent);\n                }\n\n                function onPreviousPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    if (userSettings.libraryPageSize() > 0) {\n                        query.StartIndex = Math.max(0, query.StartIndex - query.Limit);\n                    }\n                    reloadItems(tabContent);\n                }\n\n                window.scrollTo(0, 0);\n                updateFilterControls(page);\n                var html;\n                var pagingHtml = libraryBrowser.getQueryPagingHtml({\n                    startIndex: query.StartIndex,\n                    limit: query.Limit,\n                    totalRecordCount: result.TotalRecordCount,\n                    showLimit: false,\n                    updatePageSizeSetting: false,\n                    addLayoutButton: false,\n                    sortButton: false,\n                    filterButton: false\n                });\n                var viewStyle = self.getCurrentViewStyle();\n                if (viewStyle == 'List') {\n                    html = listView.getListViewHtml({\n                        items: result.Items,\n                        sortBy: query.SortBy\n                    });\n                } else if (viewStyle == 'PosterCard') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'square',\n                        context: 'music',\n                        showTitle: true,\n                        coverImage: true,\n                        cardLayout: true\n                    });\n                } else {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'square',\n                        context: 'music',\n                        showTitle: true,\n                        coverImage: true,\n                        lazy: true,\n                        centerText: true,\n                        overlayPlayButton: true\n                    });\n                }\n                var i;\n                var length;\n                var elems = tabContent.querySelectorAll('.paging');\n\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].innerHTML = pagingHtml;\n                }\n\n                elems = tabContent.querySelectorAll('.btnNextPage');\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener('click', onNextPageClick);\n                }\n\n                elems = tabContent.querySelectorAll('.btnPreviousPage');\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener('click', onPreviousPageClick);\n                }\n\n                var itemsContainer = tabContent.querySelector('.itemsContainer');\n                itemsContainer.innerHTML = html;\n                imageLoader.lazyChildren(itemsContainer);\n                libraryBrowser.saveQueryValues(getSavedQueryKey(page), query);\n                loading.hide();\n                isLoading = false;\n\n                require(['autoFocuser'], function (autoFocuser) {\n                    autoFocuser.autoFocus(tabContent);\n                });\n            });\n        }\n\n        function updateFilterControls(tabContent) {\n            var query = getQuery(tabContent);\n            self.alphaPicker.value(query.NameStartsWithOrGreater);\n        }\n\n        var self = this;\n        var data = {};\n        var isLoading = false;\n\n        self.showFilterMenu = function () {\n            require(['components/filterdialog/filterdialog'], function ({default: filterDialogFactory}) {\n                var filterDialog = new filterDialogFactory({\n                    query: getQuery(tabContent),\n                    mode: self.mode,\n                    serverId: ApiClient.serverId()\n                });\n                events.on(filterDialog, 'filterchange', function () {\n                    getQuery(tabContent).StartIndex = 0;\n                    reloadItems(tabContent);\n                });\n                filterDialog.show();\n            });\n        };\n\n        self.getCurrentViewStyle = function () {\n            return getPageData(tabContent).view;\n        };\n\n        function initPage(tabContent) {\n            var alphaPickerElement = tabContent.querySelector('.alphaPicker');\n            var itemsContainer = tabContent.querySelector('.itemsContainer');\n\n            alphaPickerElement.addEventListener('alphavaluechanged', function (e) {\n                var newValue = e.detail.value;\n                var query = getQuery(tabContent);\n                query.NameStartsWithOrGreater = newValue;\n                query.StartIndex = 0;\n                reloadItems(tabContent);\n            });\n            self.alphaPicker = new alphaPicker({\n                element: alphaPickerElement,\n                valueChangeEvent: 'click'\n            });\n\n            tabContent.querySelector('.alphaPicker').classList.add('alphabetPicker-right');\n            alphaPickerElement.classList.add('alphaPicker-fixed-right');\n            itemsContainer.classList.add('padded-right-withalphapicker');\n\n            tabContent.querySelector('.btnFilter').addEventListener('click', function () {\n                self.showFilterMenu();\n            });\n            var btnSelectView = tabContent.querySelector('.btnSelectView');\n            btnSelectView.addEventListener('click', function (e) {\n                libraryBrowser.showLayoutMenu(e.target, self.getCurrentViewStyle(), 'List,Poster,PosterCard'.split(','));\n            });\n            btnSelectView.addEventListener('layoutchange', function (e) {\n                var viewStyle = e.detail.viewStyle;\n                getPageData(tabContent).view = viewStyle;\n                libraryBrowser.saveViewSetting(getSavedQueryKey(tabContent), viewStyle);\n                getQuery(tabContent).StartIndex = 0;\n                onViewStyleChange();\n                reloadItems(tabContent);\n            });\n        }\n\n        initPage(tabContent);\n        onViewStyleChange();\n\n        self.renderTab = function () {\n            reloadItems(tabContent);\n            updateFilterControls(tabContent);\n        };\n\n        self.destroy = function () {};\n    };\n});\n"]}