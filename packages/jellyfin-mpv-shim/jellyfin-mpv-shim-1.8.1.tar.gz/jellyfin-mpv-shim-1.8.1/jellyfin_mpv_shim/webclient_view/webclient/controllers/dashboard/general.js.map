{"version":3,"sources":["controllers/dashboard/general.js"],"names":["define","$","loading","globalize","onSubmit","show","form","this","parents","ApiClient","getServerConfiguration","then","config","ServerName","val","UICulture","CachePath","querySelector","value","MetadataPath","MetadataNetworkPath","requiresReload","currentLanguage","updateServerConfiguration","getNamedConfiguration","brandingConfigKey","brandingConfig","LoginDisclaimer","CustomCss","currentBrandingOptions","updateNamedConfiguration","Dashboard","processServerConfigurationUpdateResult","AppInfo","isNativeApp","window","location","reload","require","alert","translate","view","params","on","directoryBrowser","picker","callback","path","close","validateWriteable","header","instruction","networkSharePath","networkPath","enableNetworkSharePath","off","addEventListener","promiseConfig","promiseLanguageOptions","getJSON","getUrl","promiseSystemInfo","getSystemInfo","Promise","all","responses","loadPage","page","languageOptions","systemInfo","InternalMetadataPath","html","map","language","Value","Name","hide"],"mappings":"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","file":"general.js","sourcesContent":["define(['jQuery', 'loading', 'globalize', 'emby-checkbox', 'emby-textarea', 'emby-input', 'emby-select', 'emby-button'], function ($, loading, globalize) {\n    'use strict';\n\n    function loadPage(page, config, languageOptions, systemInfo) {\n        page.querySelector('#txtServerName').value = systemInfo.ServerName;\n        page.querySelector('#txtCachePath').value = systemInfo.CachePath || '';\n        $('#txtMetadataPath', page).val(systemInfo.InternalMetadataPath || '');\n        $('#txtMetadataNetworkPath', page).val(systemInfo.MetadataNetworkPath || '');\n        $('#selectLocalizationLanguage', page).html(languageOptions.map(function (language) {\n            return '<option value=\"' + language.Value + '\">' + language.Name + '</option>';\n        })).val(config.UICulture);\n        currentLanguage = config.UICulture;\n\n        loading.hide();\n    }\n\n    function onSubmit() {\n        loading.show();\n        var form = this;\n        $(form).parents('.page');\n        ApiClient.getServerConfiguration().then(function (config) {\n            config.ServerName = $('#txtServerName', form).val();\n            config.UICulture = $('#selectLocalizationLanguage', form).val();\n            config.CachePath = form.querySelector('#txtCachePath').value;\n            config.MetadataPath = $('#txtMetadataPath', form).val();\n            config.MetadataNetworkPath = $('#txtMetadataNetworkPath', form).val();\n            var requiresReload = config.UICulture !== currentLanguage;\n            ApiClient.updateServerConfiguration(config).then(function() {\n                ApiClient.getNamedConfiguration(brandingConfigKey).then(function(brandingConfig) {\n                    brandingConfig.LoginDisclaimer = form.querySelector('#txtLoginDisclaimer').value;\n                    brandingConfig.CustomCss = form.querySelector('#txtCustomCss').value;\n\n                    if (currentBrandingOptions && brandingConfig.CustomCss !== currentBrandingOptions.CustomCss) {\n                        requiresReload = true;\n                    }\n\n                    ApiClient.updateNamedConfiguration(brandingConfigKey, brandingConfig).then(function () {\n                        Dashboard.processServerConfigurationUpdateResult();\n\n                        if (requiresReload && !AppInfo.isNativeApp) {\n                            window.location.reload(true);\n                        }\n                    });\n                });\n            }, function () {\n                require(['alert'], function (alert) {\n                    alert(globalize.translate('DefaultErrorMessage'));\n                });\n\n                Dashboard.processServerConfigurationUpdateResult();\n            });\n        });\n        return false;\n    }\n\n    var currentBrandingOptions;\n    var currentLanguage;\n    var brandingConfigKey = 'branding';\n    return function (view, params) {\n        $('#btnSelectCachePath', view).on('click.selectDirectory', function () {\n            require(['directorybrowser'], function (directoryBrowser) {\n                var picker = new directoryBrowser();\n                picker.show({\n                    callback: function (path) {\n                        if (path) {\n                            view.querySelector('#txtCachePath').value = path;\n                        }\n\n                        picker.close();\n                    },\n                    validateWriteable: true,\n                    header: globalize.translate('HeaderSelectServerCachePath'),\n                    instruction: globalize.translate('HeaderSelectServerCachePathHelp')\n                });\n            });\n        });\n        $('#btnSelectMetadataPath', view).on('click.selectDirectory', function () {\n            require(['directorybrowser'], function (directoryBrowser) {\n                var picker = new directoryBrowser();\n                picker.show({\n                    path: $('#txtMetadataPath', view).val(),\n                    networkSharePath: $('#txtMetadataNetworkPath', view).val(),\n                    callback: function (path, networkPath) {\n                        if (path) {\n                            $('#txtMetadataPath', view).val(path);\n                        }\n\n                        if (networkPath) {\n                            $('#txtMetadataNetworkPath', view).val(networkPath);\n                        }\n\n                        picker.close();\n                    },\n                    validateWriteable: true,\n                    header: globalize.translate('HeaderSelectMetadataPath'),\n                    instruction: globalize.translate('HeaderSelectMetadataPathHelp'),\n                    enableNetworkSharePath: true\n                });\n            });\n        });\n        $('.dashboardGeneralForm', view).off('submit', onSubmit).on('submit', onSubmit);\n        view.addEventListener('viewshow', function () {\n            var promiseConfig = ApiClient.getServerConfiguration();\n            var promiseLanguageOptions = ApiClient.getJSON(ApiClient.getUrl('Localization/Options'));\n            var promiseSystemInfo = ApiClient.getSystemInfo();\n            Promise.all([promiseConfig, promiseLanguageOptions, promiseSystemInfo]).then(function (responses) {\n                loadPage(view, responses[0], responses[1], responses[2]);\n            });\n            ApiClient.getNamedConfiguration(brandingConfigKey).then(function (config) {\n                currentBrandingOptions = config;\n                view.querySelector('#txtLoginDisclaimer').value = config.LoginDisclaimer || '';\n                view.querySelector('#txtCustomCss').value = config.CustomCss || '';\n            });\n        });\n    };\n});\n"]}