{"version":3,"sources":["controllers/dashboard/networking.js"],"names":["define","loading","libraryMenu","globalize","onSubmit","e","form","this","localAddress","querySelector","value","enableUpnp","checked","confirmSelections","callback","showAlertText","title","translate","text","then","validationResult","getValidationAlert","validateHttps","certPath","Promise","reject","resolve","show","ApiClient","getServerConfiguration","config","LocalNetworkSubnets","split","map","s","trim","filter","length","RemoteIPFilter","IsRemoteIPFilterBlacklist","PublicPort","PublicHttpsPort","HttpServerPortNumber","HttpsPortNumber","EnableHttps","RequireHttps","EnableUPnP","BaseUrl","EnableRemoteAccess","CertificatePath","CertificatePassword","LocalNetworkAddresses","updateServerConfiguration","Dashboard","processServerConfigurationUpdateResult","processErrorResponse","preventDefault","options","require","alert","view","params","loadPage","page","join","triggerChange","select","evt","document","createEvent","initEvent","dispatchEvent","hide","addEventListener","classList","remove","add","directoryBrowser","picker","includeFiles","includeDirectories","path","close","header"],"mappings":"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","file":"networking.js","sourcesContent":["define(['loading', 'libraryMenu', 'globalize', 'emby-checkbox', 'emby-select'], function (loading, libraryMenu, globalize) {\n    'use strict';\n\n    function onSubmit(e) {\n        var form = this;\n        var localAddress = form.querySelector('#txtLocalAddress').value;\n        var enableUpnp = form.querySelector('#chkEnableUpnp').checked;\n        confirmSelections(localAddress, enableUpnp, function () {\n            var validationResult = getValidationAlert(form);\n\n            if (validationResult) {\n                showAlertText(validationResult);\n                return;\n            }\n\n            validateHttps(form).then(function () {\n                loading.show();\n                ApiClient.getServerConfiguration().then(function (config) {\n                    config.LocalNetworkSubnets = form.querySelector('#txtLanNetworks').value.split(',').map(function (s) {\n                        return s.trim();\n                    }).filter(function (s) {\n                        return s.length > 0;\n                    });\n                    config.RemoteIPFilter = form.querySelector('#txtExternalAddressFilter').value.split(',').map(function (s) {\n                        return s.trim();\n                    }).filter(function (s) {\n                        return s.length > 0;\n                    });\n                    config.IsRemoteIPFilterBlacklist = 'blacklist' === form.querySelector('#selectExternalAddressFilterMode').value;\n                    config.PublicPort = form.querySelector('#txtPublicPort').value;\n                    config.PublicHttpsPort = form.querySelector('#txtPublicHttpsPort').value;\n                    config.HttpServerPortNumber = form.querySelector('#txtPortNumber').value;\n                    config.HttpsPortNumber = form.querySelector('#txtHttpsPort').value;\n                    config.EnableHttps = form.querySelector('#chkEnableHttps').checked;\n                    config.RequireHttps = form.querySelector('#chkRequireHttps').checked;\n                    config.EnableUPnP = enableUpnp;\n                    config.BaseUrl = form.querySelector('#txtBaseUrl').value;\n                    config.EnableRemoteAccess = form.querySelector('#chkRemoteAccess').checked;\n                    config.CertificatePath = form.querySelector('#txtCertificatePath').value || null;\n                    config.CertificatePassword = form.querySelector('#txtCertPassword').value || null;\n                    config.LocalNetworkAddresses = localAddress ? [localAddress] : [];\n                    ApiClient.updateServerConfiguration(config).then(Dashboard.processServerConfigurationUpdateResult, Dashboard.processErrorResponse);\n                });\n            });\n        });\n        e.preventDefault();\n    }\n\n    function triggerChange(select) {\n        var evt = document.createEvent('HTMLEvents');\n        evt.initEvent('change', false, true);\n        select.dispatchEvent(evt);\n    }\n\n    function getValidationAlert(form) {\n        if (form.querySelector('#txtPublicPort').value === form.querySelector('#txtPublicHttpsPort').value) {\n            return 'The public http and https ports must be different.';\n        }\n\n        if (form.querySelector('#txtPortNumber').value === form.querySelector('#txtHttpsPort').value) {\n            return 'The http and https ports must be different.';\n        }\n\n        return null;\n    }\n\n    function validateHttps(form) {\n        var certPath = form.querySelector('#txtCertificatePath').value || null;\n        var httpsEnabled = form.querySelector('#chkEnableHttps').checked;\n\n        if (httpsEnabled && !certPath) {\n            return showAlertText({\n                title: globalize.translate('TitleHostingSettings'),\n                text: globalize.translate('HttpsRequiresCert')\n            }).then(Promise.reject);\n        }\n\n        return Promise.resolve();\n    }\n\n    function showAlertText(options) {\n        return new Promise(function (resolve, reject) {\n            require(['alert'], function (alert) {\n                alert(options).then(resolve, reject);\n            });\n        });\n    }\n\n    function confirmSelections(localAddress, enableUpnp, callback) {\n        if (localAddress || !enableUpnp) {\n            showAlertText({\n                title: globalize.translate('TitleHostingSettings'),\n                text: globalize.translate('SettingsWarning')\n            }).then(callback);\n        } else {\n            callback();\n        }\n    }\n\n    return function (view, params) {\n        function loadPage(page, config) {\n            page.querySelector('#txtPortNumber').value = config.HttpServerPortNumber;\n            page.querySelector('#txtPublicPort').value = config.PublicPort;\n            page.querySelector('#txtPublicHttpsPort').value = config.PublicHttpsPort;\n            page.querySelector('#txtLocalAddress').value = config.LocalNetworkAddresses[0] || '';\n            page.querySelector('#txtLanNetworks').value = (config.LocalNetworkSubnets || []).join(', ');\n            page.querySelector('#txtExternalAddressFilter').value = (config.RemoteIPFilter || []).join(', ');\n            page.querySelector('#selectExternalAddressFilterMode').value = config.IsRemoteIPFilterBlacklist ? 'blacklist' : 'whitelist';\n            page.querySelector('#chkRemoteAccess').checked = null == config.EnableRemoteAccess || config.EnableRemoteAccess;\n            page.querySelector('#txtHttpsPort').value = config.HttpsPortNumber;\n            page.querySelector('#chkEnableHttps').checked = config.EnableHttps;\n            page.querySelector('#chkRequireHttps').checked = config.RequireHttps;\n            page.querySelector('#txtBaseUrl').value = config.BaseUrl || '';\n            var txtCertificatePath = page.querySelector('#txtCertificatePath');\n            txtCertificatePath.value = config.CertificatePath || '';\n            page.querySelector('#txtCertPassword').value = config.CertificatePassword || '';\n            page.querySelector('#chkEnableUpnp').checked = config.EnableUPnP;\n            triggerChange(page.querySelector('#chkRemoteAccess'));\n            loading.hide();\n        }\n\n        view.querySelector('#chkRemoteAccess').addEventListener('change', function () {\n            if (this.checked) {\n                view.querySelector('.fldExternalAddressFilter').classList.remove('hide');\n                view.querySelector('.fldExternalAddressFilterMode').classList.remove('hide');\n                view.querySelector('.fldPublicPort').classList.remove('hide');\n                view.querySelector('.fldPublicHttpsPort').classList.remove('hide');\n                view.querySelector('.fldEnableUpnp').classList.remove('hide');\n            } else {\n                view.querySelector('.fldExternalAddressFilter').classList.add('hide');\n                view.querySelector('.fldExternalAddressFilterMode').classList.add('hide');\n                view.querySelector('.fldPublicPort').classList.add('hide');\n                view.querySelector('.fldPublicHttpsPort').classList.add('hide');\n                view.querySelector('.fldEnableUpnp').classList.add('hide');\n            }\n        });\n        view.querySelector('#btnSelectCertPath').addEventListener('click', function () {\n            require(['directorybrowser'], function (directoryBrowser) {\n                var picker = new directoryBrowser();\n                picker.show({\n                    includeFiles: true,\n                    includeDirectories: true,\n                    callback: function (path) {\n                        if (path) {\n                            view.querySelector('#txtCertificatePath').value = path;\n                        }\n\n                        picker.close();\n                    },\n                    header: globalize.translate('HeaderSelectCertificatePath')\n                });\n            });\n        });\n        view.querySelector('.dashboardHostingForm').addEventListener('submit', onSubmit);\n        view.addEventListener('viewshow', function (e) {\n            loading.show();\n            ApiClient.getServerConfiguration().then(function (config) {\n                loadPage(view, config);\n            });\n        });\n    };\n});\n"]}