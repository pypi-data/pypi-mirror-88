{"version":3,"sources":["controllers/movies/moviecollections.js"],"names":["define","loading","events","libraryBrowser","imageLoader","listView","cardBuilder","userSettings","globalize","view","params","tabContent","getPageData","context","key","getSavedQueryKey","pageData","data","query","SortBy","SortOrder","IncludeItemTypes","Recursive","Fields","ImageTypeLimit","EnableImageTypes","StartIndex","getSavedView","libraryPageSize","ParentId","topParentId","loadSavedQueryValues","getQuery","savedQueryKey","onViewStyleChange","viewStyle","self","getCurrentViewStyle","itemsContainer","querySelector","classList","add","remove","innerHTML","reloadItems","page","show","isLoading","ApiClient","getItems","getCurrentUserId","then","result","onNextPageClick","Limit","onPreviousPageClick","Math","max","html","window","scrollTo","i","length","pagingHtml","getQueryPagingHtml","startIndex","limit","totalRecordCount","TotalRecordCount","showLimit","updatePageSizeSetting","addLayoutButton","sortButton","filterButton","getCardsHtml","items","Items","shape","preferThumb","overlayPlayButton","centerText","showTitle","lazy","cardLayout","preferBanner","getListViewHtml","sortBy","elems","querySelectorAll","addEventListener","translate","lazyChildren","saveQueryValues","hide","require","autoFocuser","autoFocus","this","initPage","e","showSortMenu","name","id","callback","button","target","btnSelectView","showLayoutMenu","split","detail","saveViewSetting","collectionEditor","serverId","serverInfo","Id","renderTab","destroy"],"mappings":"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","file":"moviecollections.js","sourcesContent":["define(['loading', 'events', 'libraryBrowser', 'imageLoader', 'listView', 'cardBuilder', 'userSettings', 'globalize', 'emby-itemscontainer'], function (loading, events, libraryBrowser, imageLoader, listView, cardBuilder, userSettings, globalize) {\n    'use strict';\n\n    return function (view, params, tabContent) {\n        function getPageData(context) {\n            var key = getSavedQueryKey(context);\n            var pageData = data[key];\n\n            if (!pageData) {\n                pageData = data[key] = {\n                    query: {\n                        SortBy: 'SortName',\n                        SortOrder: 'Ascending',\n                        IncludeItemTypes: 'BoxSet',\n                        Recursive: true,\n                        Fields: 'PrimaryImageAspectRatio,SortName',\n                        ImageTypeLimit: 1,\n                        EnableImageTypes: 'Primary,Backdrop,Banner,Thumb',\n                        StartIndex: 0\n                    },\n                    view: libraryBrowser.getSavedView(key) || 'Poster'\n                };\n\n                if (userSettings.libraryPageSize() > 0) {\n                    pageData.query['Limit'] = userSettings.libraryPageSize();\n                }\n\n                pageData.query.ParentId = params.topParentId;\n                libraryBrowser.loadSavedQueryValues(key, pageData.query);\n            }\n\n            return pageData;\n        }\n\n        function getQuery(context) {\n            return getPageData(context).query;\n        }\n\n        function getSavedQueryKey(context) {\n            if (!context.savedQueryKey) {\n                context.savedQueryKey = libraryBrowser.getSavedQueryKey('moviecollections');\n            }\n\n            return context.savedQueryKey;\n        }\n\n        function onViewStyleChange() {\n            var viewStyle = self.getCurrentViewStyle();\n            var itemsContainer = tabContent.querySelector('.itemsContainer');\n\n            if ('List' == viewStyle) {\n                itemsContainer.classList.add('vertical-list');\n                itemsContainer.classList.remove('vertical-wrap');\n            } else {\n                itemsContainer.classList.remove('vertical-list');\n                itemsContainer.classList.add('vertical-wrap');\n            }\n\n            itemsContainer.innerHTML = '';\n        }\n\n        function reloadItems(page) {\n            loading.show();\n            isLoading = true;\n            var query = getQuery(page);\n            ApiClient.getItems(ApiClient.getCurrentUserId(), query).then(function (result) {\n                function onNextPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    if (userSettings.libraryPageSize() > 0) {\n                        query.StartIndex += query.Limit;\n                    }\n                    reloadItems(tabContent);\n                }\n\n                function onPreviousPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    if (userSettings.libraryPageSize() > 0) {\n                        query.StartIndex = Math.max(0, query.StartIndex - query.Limit);\n                    }\n                    reloadItems(tabContent);\n                }\n\n                window.scrollTo(0, 0);\n                var html;\n                var pagingHtml = libraryBrowser.getQueryPagingHtml({\n                    startIndex: query.StartIndex,\n                    limit: query.Limit,\n                    totalRecordCount: result.TotalRecordCount,\n                    showLimit: false,\n                    updatePageSizeSetting: false,\n                    addLayoutButton: false,\n                    sortButton: false,\n                    filterButton: false\n                });\n                var viewStyle = self.getCurrentViewStyle();\n                if (viewStyle == 'Thumb') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'backdrop',\n                        preferThumb: true,\n                        context: 'movies',\n                        overlayPlayButton: true,\n                        centerText: true,\n                        showTitle: true\n                    });\n                } else if (viewStyle == 'ThumbCard') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'backdrop',\n                        preferThumb: true,\n                        context: 'movies',\n                        lazy: true,\n                        cardLayout: true,\n                        showTitle: true\n                    });\n                } else if (viewStyle == 'Banner') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'banner',\n                        preferBanner: true,\n                        context: 'movies',\n                        lazy: true\n                    });\n                } else if (viewStyle == 'List') {\n                    html = listView.getListViewHtml({\n                        items: result.Items,\n                        context: 'movies',\n                        sortBy: query.SortBy\n                    });\n                } else if (viewStyle == 'PosterCard') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'auto',\n                        context: 'movies',\n                        showTitle: true,\n                        centerText: false,\n                        cardLayout: true\n                    });\n                } else {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'auto',\n                        context: 'movies',\n                        centerText: true,\n                        overlayPlayButton: true,\n                        showTitle: true\n                    });\n                }\n                var i;\n                var length;\n                var elems = tabContent.querySelectorAll('.paging');\n\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].innerHTML = pagingHtml;\n                }\n\n                elems = tabContent.querySelectorAll('.btnNextPage');\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener('click', onNextPageClick);\n                }\n\n                elems = tabContent.querySelectorAll('.btnPreviousPage');\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener('click', onPreviousPageClick);\n                }\n\n                if (!result.Items.length) {\n                    html = '';\n\n                    html += '<div class=\"noItemsMessage centerMessage\">';\n                    html += '<h1>' + globalize.translate('MessageNothingHere') + '</h1>';\n                    html += '<p>' + globalize.translate('MessageNoCollectionsAvailable') + '</p>';\n                    html += '</div>';\n                }\n\n                var itemsContainer = tabContent.querySelector('.itemsContainer');\n                itemsContainer.innerHTML = html;\n                imageLoader.lazyChildren(itemsContainer);\n                libraryBrowser.saveQueryValues(getSavedQueryKey(page), query);\n                loading.hide();\n                isLoading = false;\n\n                require(['autoFocuser'], function (autoFocuser) {\n                    autoFocuser.autoFocus(page);\n                });\n            });\n        }\n\n        var self = this;\n        var data = {};\n        var isLoading = false;\n\n        self.getCurrentViewStyle = function () {\n            return getPageData(tabContent).view;\n        };\n\n        function initPage(tabContent) {\n            tabContent.querySelector('.btnSort').addEventListener('click', function (e) {\n                libraryBrowser.showSortMenu({\n                    items: [{\n                        name: globalize.translate('OptionNameSort'),\n                        id: 'SortName'\n                    }, {\n                        name: globalize.translate('OptionImdbRating'),\n                        id: 'CommunityRating,SortName'\n                    }, {\n                        name: globalize.translate('OptionDateAdded'),\n                        id: 'DateCreated,SortName'\n                    }, {\n                        name: globalize.translate('OptionParentalRating'),\n                        id: 'OfficialRating,SortName'\n                    }, {\n                        name: globalize.translate('OptionReleaseDate'),\n                        id: 'PremiereDate,SortName'\n                    }],\n                    callback: function () {\n                        getQuery(tabContent).StartIndex = 0;\n                        reloadItems(tabContent);\n                    },\n                    query: getQuery(tabContent),\n                    button: e.target\n                });\n            });\n            var btnSelectView = tabContent.querySelector('.btnSelectView');\n            btnSelectView.addEventListener('click', function (e) {\n                libraryBrowser.showLayoutMenu(e.target, self.getCurrentViewStyle(), 'List,Poster,PosterCard,Thumb,ThumbCard'.split(','));\n            });\n            btnSelectView.addEventListener('layoutchange', function (e) {\n                var viewStyle = e.detail.viewStyle;\n                getPageData(tabContent).view = viewStyle;\n                libraryBrowser.saveViewSetting(getSavedQueryKey(tabContent), viewStyle);\n                getQuery(tabContent).StartIndex = 0;\n                onViewStyleChange();\n                reloadItems(tabContent);\n            });\n            tabContent.querySelector('.btnNewCollection').addEventListener('click', function () {\n                require(['collectionEditor'], function (collectionEditor) {\n                    var serverId = ApiClient.serverInfo().Id;\n                    new collectionEditor().show({\n                        items: [],\n                        serverId: serverId\n                    });\n                });\n            });\n        }\n\n        initPage(tabContent);\n        onViewStyleChange();\n\n        self.renderTab = function () {\n            reloadItems(tabContent);\n        };\n\n        self.destroy = function () {};\n    };\n});\n"]}