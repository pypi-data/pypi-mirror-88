{"version":3,"sources":["plugins/sessionPlayer/plugin.js"],"names":["define","playbackManager","events","serverNotifications","connectionManager","getActivePlayerId","info","getPlayerInfo","id","sendPlayCommand","apiClient","options","playType","sessionId","remoteOptions","ItemIds","ids","items","map","i","Id","join","PlayCommand","startPositionTicks","StartPositionTicks","mediaSourceId","MediaSourceId","audioStreamIndex","AudioStreamIndex","subtitleStreamIndex","SubtitleStreamIndex","startIndex","StartIndex","sendPlayStateCommand","command","getCurrentApiClient","instance","currentServerId","getApiClient","currentApiClient","sendCommandByName","name","Name","Arguments","sendCommand","processUpdatedSessions","sessions","serverId","s","NowPlayingItem","ServerId","currentTargetId","session","filter","normalizeImages","state","item","ImageTags","Primary","PrimaryImageTag","BackdropImageTag","BackdropItemId","BackdropImageTags","ParentBackdropImageTags","ParentBackdropItemId","eventNames","getChangedEvents","state1","state2","names","push","lastPlayerData","length","trigger","setDefaultPlayerActive","onPollIntervalFired","this","isMessageChannelOpen","getSessions","then","subscribeToPlayerUpdates","isUpdating","sendMessage","pollInterval","clearInterval","setInterval","bind","SessionPlayer","self","type","isLocalPlayer","on","e","data","prototype","beginPlayerUpdates","playerListenerCount","endPlayerUpdates","unsubscribeFromPlayerUpdates","getPlayerState","getTargets","sessionQuery","ControllableByUserId","getCurrentUserId","DeviceId","deviceId","DeviceName","deviceName","deviceType","DeviceType","playerName","appName","Client","playableMediaTypes","PlayableMediaTypes","supportedCommands","Capabilities","SupportedCommands","user","UserId","UserName","UserPrimaryImageTag","Promise","resolve","play","Object","assign","shuffle","instantMix","queue","queueNext","canPlayMediaType","mediaType","toLowerCase","canQueueMediaType","stop","nextTrack","previousTrack","seek","positionTicks","SeekPositionTicks","currentTime","val","PlayState","PositionTicks","duration","RunTimeTicks","paused","IsPaused","getVolume","VolumeLevel","isMuted","IsMuted","pause","unpause","playPause","setMute","toggleMute","setVolume","vol","Volume","volumeUp","volumeDown","toggleFullscreen","audioTracks","MediaStreams","Type","getAudioStreamIndex","playTrailers","ItemId","setAudioStreamIndex","index","Index","subtitleTracks","getSubtitleStreamIndex","setSubtitleStreamIndex","getMaxStreamingBitrate","setMaxStreamingBitrate","isFullscreen","getRepeatMode","setRepeatMode","mode","RepeatMode","setQueueShuffleMode","ShuffleMode","getQueueShuffleMode","displayContent","isPlaying","isPlayingVideo","MediaType","isPlayingAudio","getPlaylist","getCurrentPlaylistItemId","setCurrentPlaylistItem","playlistItemId","removeFromPlaylist","playlistItemIds","tryPair","target"],"mappings":"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","file":"plugin.js","sourcesContent":["define(['playbackManager', 'events', 'serverNotifications', 'connectionManager'], function (playbackManager, events, serverNotifications, connectionManager) {\n    'use strict';\n\n    function getActivePlayerId() {\n        var info = playbackManager.getPlayerInfo();\n        return info ? info.id : null;\n    }\n\n    function sendPlayCommand(apiClient, options, playType) {\n\n        var sessionId = getActivePlayerId();\n\n        var ids = options.ids || options.items.map(function (i) {\n            return i.Id;\n        });\n\n        var remoteOptions = {\n            ItemIds: ids.join(','),\n\n            PlayCommand: playType\n        };\n\n        if (options.startPositionTicks) {\n            remoteOptions.StartPositionTicks = options.startPositionTicks;\n        }\n\n        if (options.mediaSourceId) {\n            remoteOptions.MediaSourceId = options.mediaSourceId;\n        }\n\n        if (options.audioStreamIndex != null) {\n            remoteOptions.AudioStreamIndex = options.audioStreamIndex;\n        }\n\n        if (options.subtitleStreamIndex != null) {\n            remoteOptions.SubtitleStreamIndex = options.subtitleStreamIndex;\n        }\n\n        if (options.startIndex != null) {\n            remoteOptions.StartIndex = options.startIndex;\n        }\n\n        return apiClient.sendPlayCommand(sessionId, remoteOptions);\n    }\n\n    function sendPlayStateCommand(apiClient, command, options) {\n\n        var sessionId = getActivePlayerId();\n\n        apiClient.sendPlayStateCommand(sessionId, command, options);\n    }\n\n    function getCurrentApiClient(instance) {\n\n        var currentServerId = instance.currentServerId;\n\n        if (currentServerId) {\n            return connectionManager.getApiClient(currentServerId);\n        }\n\n        return connectionManager.currentApiClient();\n    }\n\n    function sendCommandByName(instance, name, options) {\n\n        var command = {\n            Name: name\n        };\n\n        if (options) {\n            command.Arguments = options;\n        }\n\n        instance.sendCommand(command);\n    }\n\n    function unsubscribeFromPlayerUpdates(instance) {\n\n        instance.isUpdating = true;\n\n        var apiClient = getCurrentApiClient(instance);\n        apiClient.sendMessage('SessionsStop');\n        if (instance.pollInterval) {\n            clearInterval(instance.pollInterval);\n            instance.pollInterval = null;\n        }\n    }\n\n    function processUpdatedSessions(instance, sessions, apiClient) {\n\n        var serverId = apiClient.serverId();\n\n        sessions.map(function (s) {\n            if (s.NowPlayingItem) {\n                s.NowPlayingItem.ServerId = serverId;\n            }\n        });\n\n        var currentTargetId = getActivePlayerId();\n\n        var session = sessions.filter(function (s) {\n            return s.Id === currentTargetId;\n        })[0];\n\n        if (session) {\n\n            normalizeImages(session, apiClient);\n\n            var eventNames = getChangedEvents(instance.lastPlayerData, session);\n            instance.lastPlayerData = session;\n\n            for (var i = 0, length = eventNames.length; i < length; i++) {\n                events.trigger(instance, eventNames[i], [session]);\n            }\n\n        } else {\n\n            instance.lastPlayerData = session;\n\n            playbackManager.setDefaultPlayerActive();\n        }\n    }\n\n    function getChangedEvents(state1, state2) {\n\n        var names = [];\n\n        if (!state1) {\n            names.push('statechange');\n            names.push('timeupdate');\n            names.push('pause');\n\n            return names;\n        }\n\n        // TODO: Trim these down to prevent the UI from over-refreshing\n        names.push('statechange');\n        names.push('timeupdate');\n        names.push('pause');\n\n        return names;\n    }\n\n    function onPollIntervalFired() {\n\n        var instance = this;\n        var apiClient = getCurrentApiClient(instance);\n        if (!apiClient.isMessageChannelOpen()) {\n\n            apiClient.getSessions().then(function (sessions) {\n                processUpdatedSessions(instance, sessions, apiClient);\n            });\n        }\n    }\n\n    function subscribeToPlayerUpdates(instance) {\n\n        instance.isUpdating = true;\n\n        var apiClient = getCurrentApiClient(instance);\n        apiClient.sendMessage('SessionsStart', '100,800');\n        if (instance.pollInterval) {\n            clearInterval(instance.pollInterval);\n            instance.pollInterval = null;\n        }\n        instance.pollInterval = setInterval(onPollIntervalFired.bind(instance), 5000);\n    }\n\n    function normalizeImages(state, apiClient) {\n\n        if (state && state.NowPlayingItem) {\n\n            var item = state.NowPlayingItem;\n\n            if (!item.ImageTags || !item.ImageTags.Primary) {\n                if (item.PrimaryImageTag) {\n                    item.ImageTags = item.ImageTags || {};\n                    item.ImageTags.Primary = item.PrimaryImageTag;\n                }\n            }\n            if (item.BackdropImageTag && item.BackdropItemId === item.Id) {\n                item.BackdropImageTags = [item.BackdropImageTag];\n            }\n            if (item.BackdropImageTag && item.BackdropItemId !== item.Id) {\n                item.ParentBackdropImageTags = [item.BackdropImageTag];\n                item.ParentBackdropItemId = item.BackdropItemId;\n            }\n            if (!item.ServerId) {\n                item.ServerId = apiClient.serverId();\n            }\n        }\n    }\n\n    function SessionPlayer() {\n\n        var self = this;\n\n        this.name = 'Remote Control';\n        this.type = 'mediaplayer';\n        this.isLocalPlayer = false;\n        this.id = 'remoteplayer';\n\n        events.on(serverNotifications, 'Sessions', function (e, apiClient, data) {\n            processUpdatedSessions(self, data, apiClient);\n        });\n    }\n\n    SessionPlayer.prototype.beginPlayerUpdates = function () {\n\n        this.playerListenerCount = this.playerListenerCount || 0;\n\n        if (this.playerListenerCount <= 0) {\n\n            this.playerListenerCount = 0;\n\n            subscribeToPlayerUpdates(this);\n        }\n\n        this.playerListenerCount++;\n    };\n\n    SessionPlayer.prototype.endPlayerUpdates = function () {\n\n        this.playerListenerCount = this.playerListenerCount || 0;\n        this.playerListenerCount--;\n\n        if (this.playerListenerCount <= 0) {\n\n            unsubscribeFromPlayerUpdates(this);\n            this.playerListenerCount = 0;\n        }\n    };\n\n    SessionPlayer.prototype.getPlayerState = function () {\n\n        return this.lastPlayerData || {};\n    };\n\n    SessionPlayer.prototype.getTargets = function () {\n\n        var apiClient = getCurrentApiClient(this);\n\n        var sessionQuery = {\n            ControllableByUserId: apiClient.getCurrentUserId()\n        };\n\n        if (apiClient) {\n\n            var name = this.name;\n\n            return apiClient.getSessions(sessionQuery).then(function (sessions) {\n\n                return sessions.filter(function (s) {\n                    return s.DeviceId !== apiClient.deviceId();\n\n                }).map(function (s) {\n                    return {\n                        name: s.DeviceName,\n                        deviceName: s.DeviceName,\n                        deviceType: s.DeviceType,\n                        id: s.Id,\n                        playerName: name,\n                        appName: s.Client,\n                        playableMediaTypes: s.PlayableMediaTypes,\n                        isLocalPlayer: false,\n                        supportedCommands: s.Capabilities.SupportedCommands,\n                        user: s.UserId ? {\n\n                            Id: s.UserId,\n                            Name: s.UserName,\n                            PrimaryImageTag: s.UserPrimaryImageTag\n\n                        } : null\n                    };\n                });\n\n            });\n\n        } else {\n            return Promise.resolve([]);\n        }\n    };\n\n    SessionPlayer.prototype.sendCommand = function (command) {\n\n        var sessionId = getActivePlayerId();\n\n        var apiClient = getCurrentApiClient(this);\n        apiClient.sendCommand(sessionId, command);\n    };\n\n    SessionPlayer.prototype.play = function (options) {\n\n        options = Object.assign({}, options);\n\n        if (options.items) {\n            options.ids = options.items.map(function (i) {\n                return i.Id;\n            });\n\n            options.items = null;\n        }\n\n        return sendPlayCommand(getCurrentApiClient(this), options, 'PlayNow');\n    };\n\n    SessionPlayer.prototype.shuffle = function (item) {\n\n        sendPlayCommand(getCurrentApiClient(this), { ids: [item.Id] }, 'PlayShuffle');\n    };\n\n    SessionPlayer.prototype.instantMix = function (item) {\n\n        sendPlayCommand(getCurrentApiClient(this), { ids: [item.Id] }, 'PlayInstantMix');\n    };\n\n    SessionPlayer.prototype.queue = function (options) {\n\n        sendPlayCommand(getCurrentApiClient(this), options, 'PlayNext');\n    };\n\n    SessionPlayer.prototype.queueNext = function (options) {\n\n        sendPlayCommand(getCurrentApiClient(this), options, 'PlayLast');\n    };\n\n    SessionPlayer.prototype.canPlayMediaType = function (mediaType) {\n\n        mediaType = (mediaType || '').toLowerCase();\n        return mediaType === 'audio' || mediaType === 'video';\n    };\n\n    SessionPlayer.prototype.canQueueMediaType = function (mediaType) {\n        return this.canPlayMediaType(mediaType);\n    };\n\n    SessionPlayer.prototype.stop = function () {\n        sendPlayStateCommand(getCurrentApiClient(this), 'stop');\n    };\n\n    SessionPlayer.prototype.nextTrack = function () {\n        sendPlayStateCommand(getCurrentApiClient(this), 'nextTrack');\n    };\n\n    SessionPlayer.prototype.previousTrack = function () {\n        sendPlayStateCommand(getCurrentApiClient(this), 'previousTrack');\n    };\n\n    SessionPlayer.prototype.seek = function (positionTicks) {\n        sendPlayStateCommand(getCurrentApiClient(this), 'seek',\n            {\n                SeekPositionTicks: positionTicks\n            });\n    };\n\n    SessionPlayer.prototype.currentTime = function (val) {\n\n        if (val != null) {\n            return this.seek(val);\n        }\n\n        var state = this.lastPlayerData || {};\n        state = state.PlayState || {};\n        return state.PositionTicks;\n    };\n\n    SessionPlayer.prototype.duration = function () {\n        var state = this.lastPlayerData || {};\n        state = state.NowPlayingItem || {};\n        return state.RunTimeTicks;\n    };\n\n    SessionPlayer.prototype.paused = function () {\n        var state = this.lastPlayerData || {};\n        state = state.PlayState || {};\n        return state.IsPaused;\n    };\n\n    SessionPlayer.prototype.getVolume = function () {\n        var state = this.lastPlayerData || {};\n        state = state.PlayState || {};\n        return state.VolumeLevel;\n    };\n\n    SessionPlayer.prototype.isMuted = function () {\n        var state = this.lastPlayerData || {};\n        state = state.PlayState || {};\n        return state.IsMuted;\n    };\n\n    SessionPlayer.prototype.pause = function () {\n        sendPlayStateCommand(getCurrentApiClient(this), 'Pause');\n    };\n\n    SessionPlayer.prototype.unpause = function () {\n        sendPlayStateCommand(getCurrentApiClient(this), 'Unpause');\n    };\n\n    SessionPlayer.prototype.playPause = function () {\n        sendPlayStateCommand(getCurrentApiClient(this), 'PlayPause');\n    };\n\n    SessionPlayer.prototype.setMute = function (isMuted) {\n\n        if (isMuted) {\n            sendCommandByName(this, 'Mute');\n        } else {\n            sendCommandByName(this, 'Unmute');\n        }\n    };\n\n    SessionPlayer.prototype.toggleMute = function () {\n        sendCommandByName(this, 'ToggleMute');\n    };\n\n    SessionPlayer.prototype.setVolume = function (vol) {\n        sendCommandByName(this, 'SetVolume', {\n            Volume: vol\n        });\n    };\n\n    SessionPlayer.prototype.volumeUp = function () {\n        sendCommandByName(this, 'VolumeUp');\n    };\n\n    SessionPlayer.prototype.volumeDown = function () {\n        sendCommandByName(this, 'VolumeDown');\n    };\n\n    SessionPlayer.prototype.toggleFullscreen = function () {\n        sendCommandByName(this, 'ToggleFullscreen');\n    };\n\n    SessionPlayer.prototype.audioTracks = function () {\n        var state = this.lastPlayerData || {};\n        state = state.NowPlayingItem || {};\n        var streams = state.MediaStreams || [];\n        return streams.filter(function (s) {\n            return s.Type === 'Audio';\n        });\n    };\n\n    SessionPlayer.prototype.getAudioStreamIndex = function () {\n        var state = this.lastPlayerData || {};\n        state = state.PlayState || {};\n        return state.AudioStreamIndex;\n    };\n\n    SessionPlayer.prototype.playTrailers = function (item) {\n        sendCommandByName(this, 'PlayTrailers', {\n            ItemId: item.Id\n        });\n    };\n\n    SessionPlayer.prototype.setAudioStreamIndex = function (index) {\n        sendCommandByName(this, 'SetAudioStreamIndex', {\n            Index: index\n        });\n    };\n\n    SessionPlayer.prototype.subtitleTracks = function () {\n        var state = this.lastPlayerData || {};\n        state = state.NowPlayingItem || {};\n        var streams = state.MediaStreams || [];\n        return streams.filter(function (s) {\n            return s.Type === 'Subtitle';\n        });\n    };\n\n    SessionPlayer.prototype.getSubtitleStreamIndex = function () {\n        var state = this.lastPlayerData || {};\n        state = state.PlayState || {};\n        return state.SubtitleStreamIndex;\n    };\n\n    SessionPlayer.prototype.setSubtitleStreamIndex = function (index) {\n        sendCommandByName(this, 'SetSubtitleStreamIndex', {\n            Index: index\n        });\n    };\n\n    SessionPlayer.prototype.getMaxStreamingBitrate = function () {\n\n    };\n\n    SessionPlayer.prototype.setMaxStreamingBitrate = function (options) {\n\n    };\n\n    SessionPlayer.prototype.isFullscreen = function () {\n\n    };\n\n    SessionPlayer.prototype.toggleFullscreen = function () {\n\n    };\n\n    SessionPlayer.prototype.getRepeatMode = function () {\n\n    };\n\n    SessionPlayer.prototype.setRepeatMode = function (mode) {\n\n        sendCommandByName(this, 'SetRepeatMode', {\n            RepeatMode: mode\n        });\n    };\n\n    SessionPlayer.prototype.setQueueShuffleMode = function (mode) {\n\n        sendCommandByName(this, 'SetShuffleQueue', {\n            ShuffleMode: mode\n        });\n    };\n\n    SessionPlayer.prototype.getQueueShuffleMode = function () {\n\n    };\n\n    SessionPlayer.prototype.displayContent = function (options) {\n\n        sendCommandByName(this, 'DisplayContent', options);\n    };\n\n    SessionPlayer.prototype.isPlaying = function () {\n        var state = this.lastPlayerData || {};\n        return state.NowPlayingItem != null;\n    };\n\n    SessionPlayer.prototype.isPlayingVideo = function () {\n        var state = this.lastPlayerData || {};\n        state = state.NowPlayingItem || {};\n        return state.MediaType === 'Video';\n    };\n\n    SessionPlayer.prototype.isPlayingAudio = function () {\n        var state = this.lastPlayerData || {};\n        state = state.NowPlayingItem || {};\n        return state.MediaType === 'Audio';\n    };\n\n    SessionPlayer.prototype.getPlaylist = function () {\n        return Promise.resolve([]);\n    };\n\n    SessionPlayer.prototype.getCurrentPlaylistItemId = function () {\n    };\n\n    SessionPlayer.prototype.setCurrentPlaylistItem = function (playlistItemId) {\n        return Promise.resolve();\n    };\n\n    SessionPlayer.prototype.removeFromPlaylist = function (playlistItemIds) {\n        return Promise.resolve();\n    };\n\n    SessionPlayer.prototype.tryPair = function (target) {\n\n        return Promise.resolve();\n    };\n\n    return SessionPlayer;\n});\n"]}