{"version":3,"sources":["controllers/dashboard/notifications/notification.js"],"names":["define","$","fillItems","elem","items","cssClass","idPrefix","currentList","isEnabledList","html","map","u","checkedHtml","indexOf","Id","Name","join","trigger","onSubmit","save","page","type","getParameterByName","promise1","ApiClient","getNamedConfiguration","notificationsConfigurationKey","promise2","getJSON","getUrl","Promise","all","then","responses","notificationOptions","notificationConfig","Options","filter","n","Type","push","Enabled","is","SendToUserMode","val","DisabledMonitorUsers","get","c","checked","getAttribute","SendToUsers","DisabledServices","updateNamedConfiguration","r","Dashboard","processServerConfigurationUpdateResult","navigate","this","parents","document","on","value","show","hide","off","reload","getUsers","promise3","promise4","users","types","services","typeInfo","IsBasedOnUserEvent","prop"],"mappings":"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","file":"notification.js","sourcesContent":["define(['jQuery', 'emby-checkbox'], function ($) {\n    'use strict';\n\n    function fillItems(elem, items, cssClass, idPrefix, currentList, isEnabledList) {\n        var html = '<div class=\"checkboxList paperList\" style=\"padding: .5em 1em;\">';\n        html += items.map(function (u) {\n            var isChecked = isEnabledList ? currentList.indexOf(u.Id) != -1 : currentList.indexOf(u.Id) == -1;\n            var checkedHtml = isChecked ? ' checked=\"checked\"' : '';\n            return '<label><input is=\"emby-checkbox\" class=\"' + cssClass + '\" type=\"checkbox\" data-itemid=\"' + u.Id + '\"' + checkedHtml + '/><span>' + u.Name + '</span></label>';\n        }).join('');\n        html += '</div>';\n        elem.html(html).trigger('create');\n    }\n\n    function reload(page) {\n        var type = getParameterByName('type');\n        var promise1 = ApiClient.getUsers();\n        var promise2 = ApiClient.getNamedConfiguration(notificationsConfigurationKey);\n        var promise3 = ApiClient.getJSON(ApiClient.getUrl('Notifications/Types'));\n        var promise4 = ApiClient.getJSON(ApiClient.getUrl('Notifications/Services'));\n        Promise.all([promise1, promise2, promise3, promise4]).then(function (responses) {\n            var users = responses[0];\n            var notificationOptions = responses[1];\n            var types = responses[2];\n            var services = responses[3];\n            var notificationConfig = notificationOptions.Options.filter(function (n) {\n                return n.Type == type;\n            })[0];\n            var typeInfo = types.filter(function (n) {\n                return n.Type == type;\n            })[0] || {};\n\n            if (typeInfo.IsBasedOnUserEvent) {\n                $('.monitorUsers', page).show();\n            } else {\n                $('.monitorUsers', page).hide();\n            }\n\n            $('.notificationType', page).html(typeInfo.Name || 'Unknown Notification');\n\n            if (!notificationConfig) {\n                notificationConfig = {\n                    DisabledMonitorUsers: [],\n                    SendToUsers: [],\n                    DisabledServices: [],\n                    SendToUserMode: 'Admins'\n                };\n            }\n\n            fillItems($('.monitorUsersList', page), users, 'chkMonitor', 'chkMonitor', notificationConfig.DisabledMonitorUsers);\n            fillItems($('.sendToUsersList', page), users, 'chkSendTo', 'chkSendTo', notificationConfig.SendToUsers, true);\n            fillItems($('.servicesList', page), services, 'chkService', 'chkService', notificationConfig.DisabledServices);\n            $('#chkEnabled', page).prop('checked', notificationConfig.Enabled || false);\n            $('#selectUsers', page).val(notificationConfig.SendToUserMode).trigger('change');\n        });\n    }\n\n    function save(page) {\n        var type = getParameterByName('type');\n        var promise1 = ApiClient.getNamedConfiguration(notificationsConfigurationKey);\n        // TODO: Check if this promise is really needed, as it's unused.\n        var promise2 = ApiClient.getJSON(ApiClient.getUrl('Notifications/Types'));\n        Promise.all([promise1, promise2]).then(function (responses) {\n            var notificationOptions = responses[0];\n            var notificationConfig = notificationOptions.Options.filter(function (n) {\n                return n.Type == type;\n            })[0];\n\n            if (!notificationConfig) {\n                notificationConfig = {\n                    Type: type\n                };\n                notificationOptions.Options.push(notificationConfig);\n            }\n\n            notificationConfig.Enabled = $('#chkEnabled', page).is(':checked');\n            notificationConfig.SendToUserMode = $('#selectUsers', page).val();\n            notificationConfig.DisabledMonitorUsers = $('.chkMonitor', page).get().filter(function (c) {\n                return !c.checked;\n            }).map(function (c) {\n                return c.getAttribute('data-itemid');\n            });\n            notificationConfig.SendToUsers = $('.chkSendTo', page).get().filter(function (c) {\n                return c.checked;\n            }).map(function (c) {\n                return c.getAttribute('data-itemid');\n            });\n            notificationConfig.DisabledServices = $('.chkService', page).get().filter(function (c) {\n                return !c.checked;\n            }).map(function (c) {\n                return c.getAttribute('data-itemid');\n            });\n            ApiClient.updateNamedConfiguration(notificationsConfigurationKey, notificationOptions).then(function (r) {\n                Dashboard.processServerConfigurationUpdateResult();\n                Dashboard.navigate('notificationsettings.html');\n            });\n        });\n    }\n\n    function onSubmit() {\n        save($(this).parents('.page'));\n        return false;\n    }\n\n    var notificationsConfigurationKey = 'notifications';\n    $(document).on('pageinit', '#notificationSettingPage', function () {\n        var page = this;\n        $('#selectUsers', page).on('change', function () {\n            if ('Custom' == this.value) {\n                $('.selectCustomUsers', page).show();\n            } else {\n                $('.selectCustomUsers', page).hide();\n            }\n        });\n        $('.notificationSettingForm').off('submit', onSubmit).on('submit', onSubmit);\n    }).on('pageshow', '#notificationSettingPage', function () {\n        reload(this);\n    });\n});\n"]}