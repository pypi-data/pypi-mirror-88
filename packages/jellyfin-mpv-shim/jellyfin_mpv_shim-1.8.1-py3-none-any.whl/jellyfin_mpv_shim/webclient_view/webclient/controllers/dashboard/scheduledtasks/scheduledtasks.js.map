{"version":3,"sources":["controllers/dashboard/scheduledtasks/scheduledtasks.js"],"names":["define","$","loading","events","globalize","serverNotifications","datefns","dfnshelper","reloadList","page","ApiClient","getScheduledTasks","isHidden","then","tasks","populateList","currentCategory","sort","a","b","Category","Name","html","i","length","task","translate","State","Id","getTaskProgressHtml","querySelector","innerHTML","hide","LastExecutionResult","endtime","Date","parse","EndTimeUtc","starttime","StartTimeUtc","formatDistanceToNow","localeWithSuffix","formatDistance","locale","getLocale","Status","progress","CurrentProgressPercentage","toFixed","setTaskButtonIcon","button","icon","inner","classList","remove","add","updateTaskButton","elem","state","title","parents","setAttribute","view","params","onPollIntervalFired","isMessageChannelOpen","onScheduledTasksUpdate","e","apiClient","info","serverId","updateTasks","pollInterval","on","this","id","getAttribute","startScheduledTask","stopScheduledTask","addEventListener","off","stopInterval","sendMessage","clearInterval","show","startInterval","setInterval"],"mappings":"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","file":"scheduledtasks.js","sourcesContent":["define(['jQuery', 'loading', 'events', 'globalize', 'serverNotifications', 'date-fns', 'dfnshelper', 'listViewStyle', 'emby-button'], function ($, loading, events, globalize, serverNotifications, datefns, dfnshelper) {\n    'use strict';\n\n    function reloadList(page) {\n        ApiClient.getScheduledTasks({\n            isHidden: false\n        }).then(function(tasks) {\n            populateList(page, tasks);\n            loading.hide();\n        });\n    }\n\n    function populateList(page, tasks) {\n        tasks = tasks.sort(function(a, b) {\n            a = a.Category + ' ' + a.Name;\n            b = b.Category + ' ' + b.Name;\n            return a == b ? 0 : a < b ? -1 : 1;\n        });\n\n        var currentCategory;\n        var html = '';\n        for (var i = 0; i < tasks.length; i++) {\n            var task = tasks[i];\n            if (task.Category != currentCategory) {\n                currentCategory = task.Category;\n                if (currentCategory) {\n                    html += '</div>';\n                    html += '</div>';\n                }\n                html += '<div class=\"verticalSection verticalSection-extrabottompadding\">';\n                html += '<div class=\"sectionTitleContainer\" style=\"margin-bottom:1em;\">';\n                html += '<h2 class=\"sectionTitle\">';\n                html += currentCategory;\n                html += '</h2>';\n                if (i === 0) {\n                    html += '<a is=\"emby-linkbutton\" class=\"raised button-alt headerHelpButton\" target=\"_blank\" href=\"https://docs.jellyfin.org/general/server/tasks.html\">' + globalize.translate('Help') + '</a>';\n                }\n                html += '</div>';\n                html += '<div class=\"paperList\">';\n            }\n            html += '<div class=\"listItem listItem-border scheduledTaskPaperIconItem\" data-status=\"' + task.State + '\">';\n            html += \"<a is='emby-linkbutton' style='margin:0;padding:0;' class='clearLink listItemIconContainer' href='scheduledtask.html?id=\" + task.Id + \"'>\";\n            html += '<span class=\"material-icons listItemIcon schedule\"></span>';\n            html += '</a>';\n            html += '<div class=\"listItemBody two-line\">';\n            html += \"<a class='clearLink' style='margin:0;padding:0;display:block;text-align:left;' is='emby-linkbutton' href='scheduledtask.html?id=\" + task.Id + \"'>\";\n            html += \"<h3 class='listItemBodyText'>\" + task.Name + '</h3>';\n            html += \"<div class='secondary listItemBodyText' id='taskProgress\" + task.Id + \"'>\" + getTaskProgressHtml(task) + '</div>';\n            html += '</a>';\n            html += '</div>';\n            if (task.State === 'Running') {\n                html += '<button type=\"button\" is=\"paper-icon-button-light\" id=\"btnTask' + task.Id + '\" class=\"btnStopTask\" data-taskid=\"' + task.Id + '\" title=\"' + globalize.translate('ButtonStop') + '\"><span class=\"material-icons stop\"></span></button>';\n            } else if (task.State === 'Idle') {\n                html += '<button type=\"button\" is=\"paper-icon-button-light\" id=\"btnTask' + task.Id + '\" class=\"btnStartTask\" data-taskid=\"' + task.Id + '\" title=\"' + globalize.translate('ButtonStart') + '\"><span class=\"material-icons play_arrow\"></span></button>';\n            }\n            html += '</div>';\n        }\n        if (tasks.length) {\n            html += '</div>';\n            html += '</div>';\n        }\n        page.querySelector('.divScheduledTasks').innerHTML = html;\n    }\n\n    function getTaskProgressHtml(task) {\n        var html = '';\n        if (task.State === 'Idle') {\n            if (task.LastExecutionResult) {\n                var endtime = Date.parse(task.LastExecutionResult.EndTimeUtc);\n                var starttime = Date.parse(task.LastExecutionResult.StartTimeUtc);\n                html += globalize.translate('LabelScheduledTaskLastRan', datefns.formatDistanceToNow(endtime, dfnshelper.localeWithSuffix),\n                    datefns.formatDistance(starttime, endtime, { locale: dfnshelper.getLocale() }));\n                if (task.LastExecutionResult.Status === 'Failed') {\n                    html += \" <span style='color:#FF0000;'>(\" + globalize.translate('LabelFailed') + ')</span>';\n                } else if (task.LastExecutionResult.Status === 'Cancelled') {\n                    html += \" <span style='color:#0026FF;'>(\" + globalize.translate('LabelCancelled') + ')</span>';\n                } else if (task.LastExecutionResult.Status === 'Aborted') {\n                    html += \" <span style='color:#FF0000;'>\" + globalize.translate('LabelAbortedByServerShutdown') + '</span>';\n                }\n            }\n        } else if (task.State === 'Running') {\n            var progress = (task.CurrentProgressPercentage || 0).toFixed(1);\n            html += '<div style=\"display:flex;align-items:center;\">';\n            html += '<div class=\"taskProgressOuter\" title=\"' + progress + '%\" style=\"flex-grow:1;\">';\n            html += '<div class=\"taskProgressInner\" style=\"width:' + progress + '%;\">';\n            html += '</div>';\n            html += '</div>';\n            html += \"<span style='color:#00a4dc;margin-left:5px;'>\" + progress + '%</span>';\n            html += '</div>';\n        } else {\n            html += \"<span style='color:#FF0000;'>\" + globalize.translate('LabelStopping') + '</span>';\n        }\n        return html;\n    }\n\n    function setTaskButtonIcon(button, icon) {\n        var inner = button.querySelector('.material-icons');\n        inner.classList.remove('stop', 'play_arrow');\n        inner.classList.add(icon);\n    }\n\n    function updateTaskButton(elem, state) {\n        if (state === 'Running') {\n            elem.classList.remove('btnStartTask');\n            elem.classList.add('btnStopTask');\n            setTaskButtonIcon(elem, 'stop');\n            elem.title = globalize.translate('ButtonStop');\n        } else if (state === 'Idle') {\n            elem.classList.add('btnStartTask');\n            elem.classList.remove('btnStopTask');\n            setTaskButtonIcon(elem, 'play_arrow');\n            elem.title = globalize.translate('ButtonStart');\n        }\n        $(elem).parents('.listItem')[0].setAttribute('data-status', state);\n    }\n\n    return function(view, params) {\n        function updateTasks(tasks) {\n            for (var i = 0; i < tasks.length; i++) {\n                var task = tasks[i];\n                view.querySelector('#taskProgress' + task.Id).innerHTML = getTaskProgressHtml(task);\n                updateTaskButton(view.querySelector('#btnTask' + task.Id), task.State);\n            }\n        }\n\n        function onPollIntervalFired() {\n            if (!ApiClient.isMessageChannelOpen()) {\n                reloadList(view);\n            }\n        }\n\n        function onScheduledTasksUpdate(e, apiClient, info) {\n            if (apiClient.serverId() === serverId) {\n                updateTasks(info);\n            }\n        }\n\n        function startInterval() {\n            ApiClient.sendMessage('ScheduledTasksInfoStart', '1000,1000');\n            pollInterval && clearInterval(pollInterval);\n            pollInterval = setInterval(onPollIntervalFired, 1e4);\n        }\n\n        function stopInterval() {\n            ApiClient.sendMessage('ScheduledTasksInfoStop');\n            pollInterval && clearInterval(pollInterval);\n        }\n\n        var pollInterval;\n        var serverId = ApiClient.serverId();\n\n        $('.divScheduledTasks', view).on('click', '.btnStartTask', function() {\n            var button = this;\n            var id = button.getAttribute('data-taskid');\n            ApiClient.startScheduledTask(id).then(function() {\n                updateTaskButton(button, 'Running');\n                reloadList(view);\n            });\n        });\n\n        $('.divScheduledTasks', view).on('click', '.btnStopTask', function() {\n            var button = this;\n            var id = button.getAttribute('data-taskid');\n            ApiClient.stopScheduledTask(id).then(function() {\n                updateTaskButton(button, '');\n                reloadList(view);\n            });\n        });\n\n        view.addEventListener('viewbeforehide', function() {\n            events.off(serverNotifications, 'ScheduledTasksInfo', onScheduledTasksUpdate);\n            stopInterval();\n        });\n\n        view.addEventListener('viewshow', function() {\n            loading.show();\n            startInterval();\n            reloadList(view);\n            events.on(serverNotifications, 'ScheduledTasksInfo', onScheduledTasksUpdate);\n        });\n    };\n});\n"]}