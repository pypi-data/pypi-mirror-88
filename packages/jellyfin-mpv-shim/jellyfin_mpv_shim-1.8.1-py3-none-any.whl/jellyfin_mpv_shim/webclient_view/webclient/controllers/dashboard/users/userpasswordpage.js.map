{"version":3,"sources":["controllers/dashboard/users/userpasswordpage.js"],"names":["define","loading","libraryMenu","globalize","loadUser","page","params","userid","userId","ApiClient","getUser","then","user","Dashboard","getCurrentUser","loggedInUser","setTitle","Name","querySelector","innerHTML","showPasswordSection","showLocalAccessSection","ConnectLinkType","classList","add","HasConfiguredPassword","remove","Policy","IsAdministrator","EnableUserPreferenceAccess","txtEasyPassword","value","HasConfiguredEasyPassword","placeholder","removeAttribute","checked","Configuration","EnableLocalPassword","require","autoFocuser","autoFocus","view","onEasyPasswordSaved","updateUserConfiguration","Id","hide","toast","translate","addEventListener","onSubmit","e","this","show","savePassword","currentPassword","newPassword","contains","updateUserPassword","alert","title","message","preventDefault","onLocalAccessSubmit","saveEasyPassword","easyPassword","updateEasyPassword","resetEasyPassword","msg","confirm","resetPassword","resetUserPassword"],"mappings":"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","file":"userpasswordpage.js","sourcesContent":["define(['loading', 'libraryMenu', 'globalize', 'emby-button'], function (loading, libraryMenu, globalize) {\n    'use strict';\n\n    function loadUser(page, params) {\n        var userid = params.userId;\n        ApiClient.getUser(userid).then(function (user) {\n            Dashboard.getCurrentUser().then(function (loggedInUser) {\n                libraryMenu.setTitle(user.Name);\n                page.querySelector('.username').innerHTML = user.Name;\n                var showPasswordSection = true;\n                var showLocalAccessSection = false;\n\n                if ('Guest' == user.ConnectLinkType) {\n                    page.querySelector('.localAccessSection').classList.add('hide');\n                    showPasswordSection = false;\n                } else if (user.HasConfiguredPassword) {\n                    page.querySelector('#btnResetPassword').classList.remove('hide');\n                    page.querySelector('#fldCurrentPassword').classList.remove('hide');\n                    showLocalAccessSection = true;\n                } else {\n                    page.querySelector('#btnResetPassword').classList.add('hide');\n                    page.querySelector('#fldCurrentPassword').classList.add('hide');\n                }\n\n                if (showPasswordSection && (loggedInUser.Policy.IsAdministrator || user.Policy.EnableUserPreferenceAccess)) {\n                    page.querySelector('.passwordSection').classList.remove('hide');\n                } else {\n                    page.querySelector('.passwordSection').classList.add('hide');\n                }\n\n                if (showLocalAccessSection && (loggedInUser.Policy.IsAdministrator || user.Policy.EnableUserPreferenceAccess)) {\n                    page.querySelector('.localAccessSection').classList.remove('hide');\n                } else {\n                    page.querySelector('.localAccessSection').classList.add('hide');\n                }\n\n                var txtEasyPassword = page.querySelector('#txtEasyPassword');\n                txtEasyPassword.value = '';\n\n                if (user.HasConfiguredEasyPassword) {\n                    txtEasyPassword.placeholder = '******';\n                    page.querySelector('#btnResetEasyPassword').classList.remove('hide');\n                } else {\n                    txtEasyPassword.removeAttribute('placeholder');\n                    txtEasyPassword.placeholder = '';\n                    page.querySelector('#btnResetEasyPassword').classList.add('hide');\n                }\n\n                page.querySelector('.chkEnableLocalEasyPassword').checked = user.Configuration.EnableLocalPassword;\n\n                require(['autoFocuser'], function (autoFocuser) {\n                    autoFocuser.autoFocus(page);\n                });\n            });\n        });\n        page.querySelector('#txtCurrentPassword').value = '';\n        page.querySelector('#txtNewPassword').value = '';\n        page.querySelector('#txtNewPasswordConfirm').value = '';\n    }\n\n    return function (view, params) {\n        function saveEasyPassword() {\n            var userId = params.userId;\n            var easyPassword = view.querySelector('#txtEasyPassword').value;\n\n            if (easyPassword) {\n                ApiClient.updateEasyPassword(userId, easyPassword).then(function () {\n                    onEasyPasswordSaved(userId);\n                });\n            } else {\n                onEasyPasswordSaved(userId);\n            }\n        }\n\n        function onEasyPasswordSaved(userId) {\n            ApiClient.getUser(userId).then(function (user) {\n                user.Configuration.EnableLocalPassword = view.querySelector('.chkEnableLocalEasyPassword').checked;\n                ApiClient.updateUserConfiguration(user.Id, user.Configuration).then(function () {\n                    loading.hide();\n\n                    require(['toast'], function (toast) {\n                        toast(globalize.translate('MessageSettingsSaved'));\n                    });\n\n                    loadUser(view, params);\n                });\n            });\n        }\n\n        function savePassword() {\n            var userId = params.userId;\n            var currentPassword = view.querySelector('#txtCurrentPassword').value;\n            var newPassword = view.querySelector('#txtNewPassword').value;\n\n            if (view.querySelector('#fldCurrentPassword').classList.contains('hide')) {\n                // Firefox does not respect autocomplete=off, so clear it if the field is supposed to be hidden (and blank)\n                // This should only happen when user.HasConfiguredPassword is false, but this information is not passed on\n                currentPassword = '';\n            }\n\n            ApiClient.updateUserPassword(userId, currentPassword, newPassword).then(function () {\n                loading.hide();\n\n                require(['toast'], function (toast) {\n                    toast(globalize.translate('PasswordSaved'));\n                });\n\n                loadUser(view, params);\n            }, function () {\n                loading.hide();\n                Dashboard.alert({\n                    title: globalize.translate('HeaderLoginFailure'),\n                    message: globalize.translate('MessageInvalidUser')\n                });\n            });\n        }\n\n        function onSubmit(e) {\n            var form = this;\n\n            if (form.querySelector('#txtNewPassword').value != form.querySelector('#txtNewPasswordConfirm').value) {\n                require(['toast'], function (toast) {\n                    toast(globalize.translate('PasswordMatchError'));\n                });\n            } else {\n                loading.show();\n                savePassword();\n            }\n\n            e.preventDefault();\n            return false;\n        }\n\n        function onLocalAccessSubmit(e) {\n            loading.show();\n            saveEasyPassword();\n            e.preventDefault();\n            return false;\n        }\n\n        function resetPassword() {\n            var msg = globalize.translate('PasswordResetConfirmation');\n\n            require(['confirm'], function (confirm) {\n                confirm(msg, globalize.translate('PasswordResetHeader')).then(function () {\n                    var userId = params.userId;\n                    loading.show();\n                    ApiClient.resetUserPassword(userId).then(function () {\n                        loading.hide();\n                        Dashboard.alert({\n                            message: globalize.translate('PasswordResetComplete'),\n                            title: globalize.translate('PasswordResetHeader')\n                        });\n                        loadUser(view, params);\n                    });\n                });\n            });\n        }\n\n        function resetEasyPassword() {\n            var msg = globalize.translate('PinCodeResetConfirmation');\n\n            require(['confirm'], function (confirm) {\n                confirm(msg, globalize.translate('HeaderPinCodeReset')).then(function () {\n                    var userId = params.userId;\n                    loading.show();\n                    ApiClient.resetEasyPassword(userId).then(function () {\n                        loading.hide();\n                        Dashboard.alert({\n                            message: globalize.translate('PinCodeResetComplete'),\n                            title: globalize.translate('HeaderPinCodeReset')\n                        });\n                        loadUser(view, params);\n                    });\n                });\n            });\n        }\n\n        view.querySelector('.updatePasswordForm').addEventListener('submit', onSubmit);\n        view.querySelector('.localAccessForm').addEventListener('submit', onLocalAccessSubmit);\n        view.querySelector('#btnResetEasyPassword').addEventListener('click', resetEasyPassword);\n        view.querySelector('#btnResetPassword').addEventListener('click', resetPassword);\n        view.addEventListener('viewshow', function () {\n            loadUser(view, params);\n        });\n    };\n});\n"]}