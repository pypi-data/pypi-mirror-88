{"version":3,"sources":["controllers/dashboard/plugins/add.js"],"names":["define","$","loading","libraryMenu","globalize","connectionManager","renderPackage","pkg","installedPlugins","page","installedPlugin","filter","ip","Name","name","populateVersions","packageInfo","html","i","versions","length","version","selectmenu","hide","packageVersion","val","populateHistory","Math","min","changelog","removeClass","overview","show","description","owner","currentVersionText","translate","Version","performInstallation","guid","developer","toLowerCase","alertCallback","querySelector","disabled","ApiClient","installPlugin","then","alertText","options","require","_ref","alert","default","msg","confirm","console","debug","view","params","on","this","parents","getInstalledPlugins","plugins","plugin","Dashboard","message","title","addEventListener","promise1","getPackageInfo","promise2","Promise","all","responses"],"mappings":"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","file":"add.js","sourcesContent":["define(['jQuery', 'loading', 'libraryMenu', 'globalize', 'connectionManager', 'emby-button'], function ($, loading, libraryMenu, globalize, connectionManager) {\n    'use strict';\n\n    function populateHistory(packageInfo, page) {\n        var html = '';\n        var length = Math.min(packageInfo.versions.length, 10);\n\n        for (var i = 0; i < length; i++) {\n            var version = packageInfo.versions[i];\n            html += '<h2 style=\"margin:.5em 0;\">' + version.version + '</h2>';\n            html += '<div style=\"margin-bottom:1.5em;\">' + version.changelog + '</div>';\n        }\n\n        $('#revisionHistory', page).html(html);\n    }\n\n    function populateVersions(packageInfo, page, installedPlugin) {\n        var html = '';\n\n        for (var i = 0; i < packageInfo.versions.length; i++) {\n            var version = packageInfo.versions[i];\n            html += '<option value=\"' + version.version + '\">' + version.version + '</option>';\n        }\n\n        var selectmenu = $('#selectVersion', page).html(html);\n\n        if (!installedPlugin) {\n            $('#pCurrentVersion', page).hide().html('');\n        }\n\n        var packageVersion = packageInfo.versions[0];\n        if (packageVersion) {\n            selectmenu.val(packageVersion.version);\n        }\n    }\n\n    function renderPackage(pkg, installedPlugins, page) {\n        var installedPlugin = installedPlugins.filter(function (ip) {\n            return ip.Name == pkg.name;\n        })[0];\n\n        populateVersions(pkg, page, installedPlugin);\n        populateHistory(pkg, page);\n\n        $('.pluginName', page).html(pkg.name);\n        $('#btnInstallDiv', page).removeClass('hide');\n        $('#pSelectVersion', page).removeClass('hide');\n\n        if (pkg.overview) {\n            $('#overview', page).show().html(pkg.overview);\n        } else {\n            $('#overview', page).hide();\n        }\n\n        $('#description', page).html(pkg.description);\n        $('#developer', page).html(pkg.owner);\n\n        if (installedPlugin) {\n            var currentVersionText = globalize.translate('MessageYouHaveVersionInstalled', '<strong>' + installedPlugin.Version + '</strong>');\n            $('#pCurrentVersion', page).show().html(currentVersionText);\n        } else {\n            $('#pCurrentVersion', page).hide().html('');\n        }\n\n        loading.hide();\n    }\n\n    function alertText(options) {\n        require(['alert'], function ({default: alert}) {\n            alert(options);\n        });\n    }\n\n    function performInstallation(page, name, guid, version) {\n        var developer = $('#developer', page).html().toLowerCase();\n\n        var alertCallback = function () {\n            loading.show();\n            page.querySelector('#btnInstall').disabled = true;\n            ApiClient.installPlugin(name, guid, version).then(function () {\n                loading.hide();\n                alertText(globalize.translate('PluginInstalledMessage'));\n            });\n        };\n\n        if (developer !== 'jellyfin') {\n            loading.hide();\n            var msg = globalize.translate('MessagePluginInstallDisclaimer');\n            msg += '<br/>';\n            msg += '<br/>';\n            msg += globalize.translate('PleaseConfirmPluginInstallation');\n\n            require(['confirm'], function (confirm) {\n                confirm(msg, globalize.translate('HeaderConfirmPluginInstallation')).then(function () {\n                    alertCallback();\n                }, function () {\n                    console.debug('plugin not installed');\n                });\n            });\n        } else {\n            alertCallback();\n        }\n    }\n\n    return function (view, params) {\n        $('.addPluginForm', view).on('submit', function () {\n            loading.show();\n            var page = $(this).parents('#addPluginPage')[0];\n            var name = params.name;\n            var guid = params.guid;\n            ApiClient.getInstalledPlugins().then(function (plugins) {\n                var installedPlugin = plugins.filter(function (plugin) {\n                    return plugin.Name == name;\n                })[0];\n\n                var version = $('#selectVersion', page).val();\n                if (installedPlugin && installedPlugin.Version === version) {\n                    loading.hide();\n                    Dashboard.alert({\n                        message: globalize.translate('MessageAlreadyInstalled'),\n                        title: globalize.translate('HeaderPluginInstallation')\n                    });\n                } else {\n                    performInstallation(page, name, guid, version);\n                }\n            });\n            return false;\n        });\n        view.addEventListener('viewshow', function () {\n            var page = this;\n            loading.show();\n            var name = params.name;\n            var guid = params.guid;\n            var promise1 = ApiClient.getPackageInfo(name, guid);\n            var promise2 = ApiClient.getInstalledPlugins();\n            Promise.all([promise1, promise2]).then(function (responses) {\n                renderPackage(responses[0], responses[1], page);\n            });\n        });\n    };\n});\n"]}