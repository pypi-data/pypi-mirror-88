{"version":3,"sources":["controllers/dashboard/scheduledtasks/scheduledtask.js"],"names":["define","$","loading","datetime","dom","globalize","Array","prototype","remove","from","to","rest","this","slice","length","push","apply","ScheduledTaskPage","refreshScheduledTask","view","show","id","getParameterByName","ApiClient","getScheduledTask","then","task","loadScheduledTask","html","Name","Description","require","loadTaskTriggers","hide","context","i","Triggers","trigger","MaxRuntimeMs","getTriggerFriendlyName","hours","MaxRuntimeTicks","translate","querySelector","innerHTML","Type","getDisplayTime","TimeOfDayTicks","DayOfWeek","SystemEvent","IntervalTicks","ticks","ms","now","Date","setHours","setTime","getTime","showAddTriggerPopup","val","dispatchEvent","CustomEvent","removeClass","confirmDeleteTrigger","index","confirm","deleteTrigger","updateScheduledTaskTriggers","Id","refreshTriggerFields","page","triggerType","attr","removeAttr","getTriggerToAdd","timeLimit","parseFloat","params","addEventListener","onSubmit","e","addClass","preventDefault","fillTimeOfDay","select","options","name","value","map","o","join","parentNode","btnDeleteTrigger","parentWithClass","target","parseInt","getAttribute"],"mappings":"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","file":"scheduledtask.js","sourcesContent":["define(['jQuery', 'loading', 'datetime', 'dom', 'globalize', 'emby-input', 'emby-button', 'emby-select'], function ($, loading, datetime, dom, globalize) {\n    'use strict';\n\n    function fillTimeOfDay(select) {\n\n        var options = [];\n\n        for (var i = 0; i < 86400000; i += 900000) {\n            options.push({\n                name: ScheduledTaskPage.getDisplayTime(i * 10000),\n                value: i * 10000\n            });\n        }\n\n        select.innerHTML = options.map(function (o) {\n            return '<option value=\"' + o.value + '\">' + o.name + '</option>';\n        }).join('');\n    }\n\n    Array.prototype.remove = function (from, to) {\n        var rest = this.slice((to || from) + 1 || this.length);\n        this.length = from < 0 ? this.length + from : from;\n        return this.push.apply(this, rest);\n    };\n\n    var ScheduledTaskPage = {\n        refreshScheduledTask: function (view) {\n            loading.show();\n            var id = getParameterByName('id');\n            ApiClient.getScheduledTask(id).then(function (task) {\n                ScheduledTaskPage.loadScheduledTask(view, task);\n            });\n        },\n        loadScheduledTask: function (view, task) {\n            $('.taskName', view).html(task.Name);\n            $('#pTaskDescription', view).html(task.Description);\n\n            require(['listViewStyle'], function () {\n                ScheduledTaskPage.loadTaskTriggers(view, task);\n            });\n\n            loading.hide();\n        },\n        loadTaskTriggers: function (context, task) {\n            var html = '';\n            html += '<div class=\"paperList\">';\n\n            for (var i = 0, length = task.Triggers.length; i < length; i++) {\n                var trigger = task.Triggers[i];\n\n                html += '<div class=\"listItem listItem-border\">';\n                html += '<span class=\"material-icons listItemIcon schedule\"></span>';\n                if (trigger.MaxRuntimeMs) {\n                    html += '<div class=\"listItemBody two-line\">';\n                } else {\n                    html += '<div class=\"listItemBody\">';\n                }\n                html += \"<div class='listItemBodyText'>\" + ScheduledTaskPage.getTriggerFriendlyName(trigger) + '</div>';\n                if (trigger.MaxRuntimeMs) {\n                    html += '<div class=\"listItemBodyText secondary\">';\n                    var hours = trigger.MaxRuntimeTicks / 36e9;\n                    if (hours == 1) {\n                        html += globalize.translate('ValueTimeLimitSingleHour');\n                    } else {\n                        html += globalize.translate('ValueTimeLimitMultiHour', hours);\n                    }\n                    html += '</div>';\n                }\n\n                html += '</div>';\n                html += '<button class=\"btnDeleteTrigger\" data-index=\"' + i + '\" type=\"button\" is=\"paper-icon-button-light\" title=\"' + globalize.translate('ButtonDelete') + '\"><span class=\"material-icons delete\"></span></button>';\n                html += '</div>';\n            }\n\n            html += '</div>';\n            context.querySelector('.taskTriggers').innerHTML = html;\n        },\n        // TODO: Replace this mess with date-fns and remove datetime completely\n        getTriggerFriendlyName: function (trigger) {\n            if ('DailyTrigger' == trigger.Type) {\n                return globalize.translate('DailyAt', ScheduledTaskPage.getDisplayTime(trigger.TimeOfDayTicks));\n            }\n\n            if ('WeeklyTrigger' == trigger.Type) {\n                // TODO: The day of week isn't localised as well\n                return globalize.translate('WeeklyAt', trigger.DayOfWeek, ScheduledTaskPage.getDisplayTime(trigger.TimeOfDayTicks));\n            }\n\n            if ('SystemEventTrigger' == trigger.Type && 'WakeFromSleep' == trigger.SystemEvent) {\n                return globalize.translate('OnWakeFromSleep');\n            }\n\n            if (trigger.Type == 'IntervalTrigger') {\n\n                var hours = trigger.IntervalTicks / 36e9;\n\n                if (hours == 0.25) {\n                    return globalize.translate('EveryXMinutes', '15');\n                }\n                if (hours == 0.5) {\n                    return globalize.translate('EveryXMinutes', '30');\n                }\n                if (hours == 0.75) {\n                    return globalize.translate('EveryXMinutes', '45');\n                }\n                if (hours == 1) {\n                    return globalize.translate('EveryHour');\n                }\n\n                return globalize.translate('EveryXHours', hours);\n            }\n\n            if (trigger.Type == 'StartupTrigger') {\n                return globalize.translate('OnApplicationStartup');\n            }\n\n            return trigger.Type;\n        },\n        getDisplayTime: function (ticks) {\n            var ms = ticks / 1e4;\n            var now = new Date();\n            now.setHours(0, 0, 0, 0);\n            now.setTime(now.getTime() + ms);\n            return datetime.getDisplayTime(now);\n        },\n        showAddTriggerPopup: function (view) {\n            $('#selectTriggerType', view).val('DailyTrigger');\n            view.querySelector('#selectTriggerType').dispatchEvent(new CustomEvent('change', {}));\n            $('#popupAddTrigger', view).removeClass('hide');\n        },\n        confirmDeleteTrigger: function (view, index) {\n            require(['confirm'], function (confirm) {\n                confirm(globalize.translate('MessageDeleteTaskTrigger'), globalize.translate('HeaderDeleteTaskTrigger')).then(function () {\n                    ScheduledTaskPage.deleteTrigger(view, index);\n                });\n            });\n        },\n        deleteTrigger: function (view, index) {\n            loading.show();\n            var id = getParameterByName('id');\n            ApiClient.getScheduledTask(id).then(function (task) {\n                task.Triggers.remove(index);\n                ApiClient.updateScheduledTaskTriggers(task.Id, task.Triggers).then(function () {\n                    ScheduledTaskPage.refreshScheduledTask(view);\n                });\n            });\n        },\n        refreshTriggerFields: function (page, triggerType) {\n            if (triggerType == 'DailyTrigger') {\n                $('#fldTimeOfDay', page).show();\n                $('#fldDayOfWeek', page).hide();\n                $('#fldSelectSystemEvent', page).hide();\n                $('#fldSelectInterval', page).hide();\n                $('#selectTimeOfDay', page).attr('required', 'required');\n            } else if (triggerType == 'WeeklyTrigger') {\n                $('#fldTimeOfDay', page).show();\n                $('#fldDayOfWeek', page).show();\n                $('#fldSelectSystemEvent', page).hide();\n                $('#fldSelectInterval', page).hide();\n                $('#selectTimeOfDay', page).attr('required', 'required');\n            } else if (triggerType == 'SystemEventTrigger') {\n                $('#fldTimeOfDay', page).hide();\n                $('#fldDayOfWeek', page).hide();\n                $('#fldSelectSystemEvent', page).show();\n                $('#fldSelectInterval', page).hide();\n                $('#selectTimeOfDay', page).removeAttr('required');\n            } else if (triggerType == 'IntervalTrigger') {\n                $('#fldTimeOfDay', page).hide();\n                $('#fldDayOfWeek', page).hide();\n                $('#fldSelectSystemEvent', page).hide();\n                $('#fldSelectInterval', page).show();\n                $('#selectTimeOfDay', page).removeAttr('required');\n            } else if (triggerType == 'StartupTrigger') {\n                $('#fldTimeOfDay', page).hide();\n                $('#fldDayOfWeek', page).hide();\n                $('#fldSelectSystemEvent', page).hide();\n                $('#fldSelectInterval', page).hide();\n                $('#selectTimeOfDay', page).removeAttr('required');\n            }\n        },\n        getTriggerToAdd: function (page) {\n            var trigger = {\n                Type: $('#selectTriggerType', page).val()\n            };\n\n            if (trigger.Type == 'DailyTrigger') {\n                trigger.TimeOfDayTicks = $('#selectTimeOfDay', page).val();\n            } else if (trigger.Type == 'WeeklyTrigger') {\n                trigger.DayOfWeek = $('#selectDayOfWeek', page).val();\n                trigger.TimeOfDayTicks = $('#selectTimeOfDay', page).val();\n            } else if (trigger.Type == 'SystemEventTrigger') {\n                trigger.SystemEvent = $('#selectSystemEvent', page).val();\n            } else if (trigger.Type == 'IntervalTrigger') {\n                trigger.IntervalTicks = $('#selectInterval', page).val();\n            }\n\n            var timeLimit = $('#txtTimeLimit', page).val() || '0';\n            timeLimit = parseFloat(timeLimit) * 3600000;\n\n            trigger.MaxRuntimeMs = timeLimit || null;\n\n            return trigger;\n        }\n    };\n    return function (view, params) {\n        function onSubmit(e) {\n            loading.show();\n            var id = getParameterByName('id');\n            ApiClient.getScheduledTask(id).then(function (task) {\n                task.Triggers.push(ScheduledTaskPage.getTriggerToAdd(view));\n                ApiClient.updateScheduledTaskTriggers(task.Id, task.Triggers).then(function () {\n                    $('#popupAddTrigger').addClass('hide');\n                    ScheduledTaskPage.refreshScheduledTask(view);\n                });\n            });\n            e.preventDefault();\n        }\n\n        view.querySelector('.addTriggerForm').addEventListener('submit', onSubmit);\n        fillTimeOfDay(view.querySelector('#selectTimeOfDay'));\n        $(view.querySelector('#popupAddTrigger').parentNode).trigger('create');\n        view.querySelector('.selectTriggerType').addEventListener('change', function () {\n            ScheduledTaskPage.refreshTriggerFields(view, this.value);\n        });\n        view.querySelector('.btnAddTrigger').addEventListener('click', function () {\n            ScheduledTaskPage.showAddTriggerPopup(view);\n        });\n        view.addEventListener('click', function (e) {\n            var btnDeleteTrigger = dom.parentWithClass(e.target, 'btnDeleteTrigger');\n\n            if (btnDeleteTrigger) {\n                ScheduledTaskPage.confirmDeleteTrigger(view, parseInt(btnDeleteTrigger.getAttribute('data-index')));\n            }\n        });\n        view.addEventListener('viewshow', function () {\n            ScheduledTaskPage.refreshScheduledTask(view);\n        });\n    };\n});\n"]}