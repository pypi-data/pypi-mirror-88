{"version":3,"sources":["controllers/livetv/livetvrecordings.js"],"names":["define","layoutManager","loading","cardBuilder","appHost","imageLoader","renderRecordings","elem","recordings","cardOptions","scrollX","length","classList","remove","add","recordingItems","querySelector","supports","innerHTML","getCardsHtml","Object","assign","items","shape","defaultShape","showTitle","showParentTitle","coverImage","cardLayout","centerText","allowBottomPadding","preferThumb","overlayText","lazyChildren","onMoreClick","e","type","this","getAttribute","serverId","ApiClient","Dashboard","navigate","view","params","tabContent","enableFullRender","Date","getTime","lastFullRender","foldersPromise","latestPromise","moreButtons","querySelectorAll","i","addEventListener","preRender","getLiveTvRecordings","UserId","getCurrentUserId","Limit","Fields","EnableTotalRecordCount","EnableImageTypes","getRecordingFolders","renderTab","show","renderLatestRecordings","context","promise","then","result","Items","showYear","lines","hide","renderRecordingFolders"],"mappings":"AAAA,aAAAA,OAAO,CAAC,gBAAiB,UAAW,cAAe,UAAW,cAAe,2BAA4B,gBAAiB,wBAAwB,SAAUC,cAAeC,QAASC,YAAaC,QAASC,aAGtM,SAASC,iBAAiBC,KAAMC,WAAYC,YAAaC,SACrD,GAAKH,KAAL,CAIIC,WAAWG,OACXJ,KAAKK,UAAUC,OAAO,QAEtBN,KAAKK,UAAUE,IAAI,QAGvB,IAAIC,eAAiBR,KAAKS,cAAc,mBAEpCN,SACAK,eAAeH,UAAUE,IAAI,WAC7BC,eAAeH,UAAUE,IAAI,iBAC7BC,eAAeH,UAAUC,OAAO,mBAEhCE,eAAeH,UAAUC,OAAO,WAChCE,eAAeH,UAAUC,OAAO,iBAChCE,eAAeH,UAAUE,IAAI,kBAGjCV,QAAQa,SAAS,iBACjBF,eAAeG,UAAYf,YAAYgB,aAAaC,OAAOC,OAAO,CAC9DC,MAAOd,WACPe,MAAOb,QAAU,eAAiB,OAClCc,aAAcd,QAAU,mBAAqB,WAC7Ce,WAAW,EACXC,iBAAiB,EACjBC,YAAY,EACZC,YAAY,EACZC,YAAY,EACZC,oBAAqBpB,QACrBqB,YAAa,OACbC,aAAa,GACdvB,aAAe,KAClBJ,YAAY4B,aAAalB,iBAsB7B,SAASmB,YAAYC,GACjB,IAAIC,KAAOC,KAAKC,aAAa,aACzBC,SAAWC,UAAUD,WAEzB,OAAQH,MACJ,IAAK,SACDK,UAAUC,SAAS,sCAAwCH,WAIvE,OAAO,SAAUI,KAAMC,OAAQC,YAC3B,SAASC,mBACL,OAAO,IAAIC,MAAOC,UAAYC,eAAiB,IASnD,IANA,IAAIC,eACAC,cAEAF,eAAiB,EACjBG,YAAcP,WAAWQ,iBAAiB,SAErCC,EAAI,EAAG3C,OAASyC,YAAYzC,OAAQ2C,EAAI3C,OAAQ2C,IACrDF,YAAYE,GAAGC,iBAAiB,QAASrB,aALlCG,KAQNmB,UAAY,WACTV,qBACAK,cAAgBX,UAAUiB,oBAAoB,CAC1CC,OAAQjB,UAAUkB,mBAClBC,MAAO,GACPC,OAAQ,kDACRC,wBAAwB,EACxBC,iBAAkB,2BAEtBb,eAAiBV,UAAUwB,oBAAoBvB,UAAUkB,sBAjBtDtB,KAqBN4B,UAAY,WACTnB,qBACA5C,QAAQgE,OA3DpB,SAASC,uBAAuBC,QAASC,SACrCA,QAAQC,MAAK,SAAUC,QACnBjE,iBAAiB8D,QAAQpD,cAAc,qBAAsBuD,OAAOC,MAAO,CACvEC,UAAU,EACVC,MAAO,IACR,GACHxE,QAAQyE,UAsDJR,CAAuBtB,WAAYM,eAlD/C,SAASyB,uBAAuBR,QAASC,SACrCA,QAAQC,MAAK,SAAUC,QACnBjE,iBAAiB8D,QAAQpD,cAAc,qBAAsBuD,OAAOC,MAAO,CACvEC,UAAU,EACV/C,iBAAiB,IAClB,MA8CCkD,CAAuB/B,WAAYK,gBACnCD,gBAAiB,IAAIF,MAAOC","file":"livetvrecordings.js","sourcesContent":["define(['layoutManager', 'loading', 'cardBuilder', 'apphost', 'imageLoader', 'scripts/livetvcomponents', 'listViewStyle', 'emby-itemscontainer'], function (layoutManager, loading, cardBuilder, appHost, imageLoader) {\n    'use strict';\n\n    function renderRecordings(elem, recordings, cardOptions, scrollX) {\n        if (!elem) {\n            return;\n        }\n\n        if (recordings.length) {\n            elem.classList.remove('hide');\n        } else {\n            elem.classList.add('hide');\n        }\n\n        var recordingItems = elem.querySelector('.recordingItems');\n\n        if (scrollX) {\n            recordingItems.classList.add('scrollX');\n            recordingItems.classList.add('hiddenScrollX');\n            recordingItems.classList.remove('vertical-wrap');\n        } else {\n            recordingItems.classList.remove('scrollX');\n            recordingItems.classList.remove('hiddenScrollX');\n            recordingItems.classList.add('vertical-wrap');\n        }\n\n        appHost.supports('imageanalysis');\n        recordingItems.innerHTML = cardBuilder.getCardsHtml(Object.assign({\n            items: recordings,\n            shape: scrollX ? 'autooverflow' : 'auto',\n            defaultShape: scrollX ? 'overflowBackdrop' : 'backdrop',\n            showTitle: true,\n            showParentTitle: true,\n            coverImage: true,\n            cardLayout: false,\n            centerText: true,\n            allowBottomPadding: !scrollX,\n            preferThumb: 'auto',\n            overlayText: false\n        }, cardOptions || {}));\n        imageLoader.lazyChildren(recordingItems);\n    }\n\n    function renderLatestRecordings(context, promise) {\n        promise.then(function (result) {\n            renderRecordings(context.querySelector('#latestRecordings'), result.Items, {\n                showYear: true,\n                lines: 2\n            }, false);\n            loading.hide();\n        });\n    }\n\n    function renderRecordingFolders(context, promise) {\n        promise.then(function (result) {\n            renderRecordings(context.querySelector('#recordingFolders'), result.Items, {\n                showYear: false,\n                showParentTitle: false\n            }, false);\n        });\n    }\n\n    function onMoreClick(e) {\n        var type = this.getAttribute('data-type');\n        var serverId = ApiClient.serverId();\n\n        switch (type) {\n            case 'latest':\n                Dashboard.navigate('list.html?type=Recordings&serverId=' + serverId);\n        }\n    }\n\n    return function (view, params, tabContent) {\n        function enableFullRender() {\n            return new Date().getTime() - lastFullRender > 300000;\n        }\n\n        var foldersPromise;\n        var latestPromise;\n        var self = this;\n        var lastFullRender = 0;\n        var moreButtons = tabContent.querySelectorAll('.more');\n\n        for (var i = 0, length = moreButtons.length; i < length; i++) {\n            moreButtons[i].addEventListener('click', onMoreClick);\n        }\n\n        self.preRender = function () {\n            if (enableFullRender()) {\n                latestPromise = ApiClient.getLiveTvRecordings({\n                    UserId: Dashboard.getCurrentUserId(),\n                    Limit: 12,\n                    Fields: 'CanDelete,PrimaryImageAspectRatio,BasicSyncInfo',\n                    EnableTotalRecordCount: false,\n                    EnableImageTypes: 'Primary,Thumb,Backdrop'\n                });\n                foldersPromise = ApiClient.getRecordingFolders(Dashboard.getCurrentUserId());\n            }\n        };\n\n        self.renderTab = function () {\n            if (enableFullRender()) {\n                loading.show();\n                renderLatestRecordings(tabContent, latestPromise);\n                renderRecordingFolders(tabContent, foldersPromise);\n                lastFullRender = new Date().getTime();\n            }\n        };\n    };\n});\n"]}