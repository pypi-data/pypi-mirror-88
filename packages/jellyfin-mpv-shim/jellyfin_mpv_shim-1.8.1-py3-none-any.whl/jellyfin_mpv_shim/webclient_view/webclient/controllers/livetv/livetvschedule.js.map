{"version":3,"sources":["controllers/livetv/livetvschedule.js"],"names":["define","layoutManager","cardBuilder","appHost","imageLoader","loading","enableScrollX","desktop","renderActiveRecordings","context","promise","then","result","renderRecordings","elem","recordings","cardOptions","length","classList","remove","add","recordingItems","querySelector","tv","supports","preferVisualCards","innerHTML","getCardsHtml","Object","assign","items","shape","showTitle","showParentTitle","coverImage","cardLayout","centerText","allowBottomPadding","preferThumb","lazyChildren","Items","defaultShape","showParentTitleOrTitle","showAirTime","showAirEndTime","showChannelName","overlayText","overlayMoreButton","renderUpcomingRecordings","renderTimers","timers","options","LiveTvHelpers","getTimersHtml","html","hide","view","params","tabContent","activeRecordingsPromise","upcomingRecordingsPromise","self","this","addEventListener","preRender","renderTab","ApiClient","getLiveTvRecordings","UserId","Dashboard","getCurrentUserId","IsInProgress","Fields","EnableTotalRecordCount","EnableImageTypes","getLiveTvTimers","IsActive","IsScheduled","show"],"mappings":"AAAA,aAAAA,OAAO,CAAC,gBAAiB,cAAe,UAAW,cAAe,UAAW,2BAA4B,cAAe,wBAAwB,SAAUC,cAAeC,YAAaC,QAASC,YAAaC,SAGxM,SAASC,gBACL,OAAQL,cAAcM,QAiD1B,SAASC,uBAAuBC,QAASC,SACrCA,QAAQC,MAAK,SAAUC,SA/C3B,SAASC,iBAAiBC,KAAMC,WAAYC,aACpCD,WAAWE,OACXH,KAAKI,UAAUC,OAAO,QAEtBL,KAAKI,UAAUE,IAAI,QAGvB,IAAIC,eAAiBP,KAAKQ,cAAc,mBAEpChB,iBACAe,eAAeH,UAAUE,IAAI,WAEzBnB,cAAcsB,IACdF,eAAeH,UAAUE,IAAI,iBAGjCC,eAAeH,UAAUE,IAAI,iBAC7BC,eAAeH,UAAUC,OAAO,mBAEhCE,eAAeH,UAAUC,OAAO,WAChCE,eAAeH,UAAUC,OAAO,iBAChCE,eAAeH,UAAUC,OAAO,iBAChCE,eAAeH,UAAUE,IAAI,kBAGLjB,QAAQqB,SAAS,iBAC5BrB,QAAQsB,kBAEzBJ,eAAeK,UAAYxB,YAAYyB,aAAaC,OAAOC,OAAO,CAC9DC,MAAOf,WACPgB,MAAOzB,gBAAkB,eAAiB,OAC1C0B,WAAW,EACXC,iBAAiB,EACjBC,YAAY,EACZC,YAPS,EAQTC,YAAY,EACZC,oBAAqB/B,gBACrBgC,YAAa,QACdtB,aAAe,KAClBZ,YAAYmC,aAAalB,gBASrBR,CAAiBJ,QAAQa,cAAc,qBAAsBV,OAAO4B,MAAO,CACvET,MAAOzB,gBAAkB,eAAiB,OAC1CmC,aAPDnC,gBAAkB,mBAAqB,WAQtC2B,iBAAiB,EACjBS,wBAAwB,EACxBV,WAAW,EACXW,aAAa,EACbC,gBAAgB,EAChBC,iBAAiB,EACjBX,YAAY,EACZY,aAAa,EACbC,mBAAmB,OAoB/B,SAASC,yBAAyBvC,QAASC,SACvCA,QAAQC,MAAK,SAAUC,SAhB3B,SAASqC,aAAaxC,QAASyC,OAAQC,SACnCC,cAAcC,cAAcH,OAAQC,SAASxC,MAAK,SAAU2C,MACxD,IAAIxC,KAAOL,QAEP6C,KACAxC,KAAKI,UAAUC,OAAO,QAEtBL,KAAKI,UAAUE,IAAI,QAGvBN,KAAKQ,cAAc,mBAAmBI,UAAY4B,KAClDlD,YAAYmC,aAAazB,SAMzBmC,CAAaxC,QAAQa,cAAc,uBAAwBV,OAAO4B,OAClEnC,QAAQkD,UAIhB,OAAO,SAAUC,KAAMC,OAAQC,YAC3B,IAAIC,wBACAC,0BACAC,KAAOC,KACXJ,WAAWpC,cAAc,uCAAuCyC,iBAAiB,kBAAkB,WAC/FF,KAAKG,YACLH,KAAKI,eAGTJ,KAAKG,UAAY,WACbL,wBAA0BO,UAAUC,oBAAoB,CACpDC,OAAQC,UAAUC,mBAClBC,cAAc,EACdC,OAAQ,kDACRC,wBAAwB,EACxBC,iBAAkB,2BAEtBd,0BAA4BM,UAAUS,gBAAgB,CAClDC,UAAU,EACVC,aAAa,KAIrBhB,KAAKI,UAAY,WACb5D,QAAQyE,OACRtE,uBAAuBkD,WAAYC,yBACnCX,yBAAyBU,WAAYE","file":"livetvschedule.js","sourcesContent":["define(['layoutManager', 'cardBuilder', 'apphost', 'imageLoader', 'loading', 'scripts/livetvcomponents', 'emby-button', 'emby-itemscontainer'], function (layoutManager, cardBuilder, appHost, imageLoader, loading) {\n    'use strict';\n\n    function enableScrollX() {\n        return !layoutManager.desktop;\n    }\n\n    function renderRecordings(elem, recordings, cardOptions) {\n        if (recordings.length) {\n            elem.classList.remove('hide');\n        } else {\n            elem.classList.add('hide');\n        }\n\n        var recordingItems = elem.querySelector('.recordingItems');\n\n        if (enableScrollX()) {\n            recordingItems.classList.add('scrollX');\n\n            if (layoutManager.tv) {\n                recordingItems.classList.add('smoothScrollX');\n            }\n\n            recordingItems.classList.add('hiddenScrollX');\n            recordingItems.classList.remove('vertical-wrap');\n        } else {\n            recordingItems.classList.remove('scrollX');\n            recordingItems.classList.remove('smoothScrollX');\n            recordingItems.classList.remove('hiddenScrollX');\n            recordingItems.classList.add('vertical-wrap');\n        }\n\n        var supportsImageAnalysis = appHost.supports('imageanalysis');\n        var cardLayout = appHost.preferVisualCards || supportsImageAnalysis;\n        cardLayout = false;\n        recordingItems.innerHTML = cardBuilder.getCardsHtml(Object.assign({\n            items: recordings,\n            shape: enableScrollX() ? 'autooverflow' : 'auto',\n            showTitle: true,\n            showParentTitle: true,\n            coverImage: true,\n            cardLayout: cardLayout,\n            centerText: !cardLayout,\n            allowBottomPadding: !enableScrollX(),\n            preferThumb: 'auto'\n        }, cardOptions || {}));\n        imageLoader.lazyChildren(recordingItems);\n    }\n\n    function getBackdropShape() {\n        return enableScrollX() ? 'overflowBackdrop' : 'backdrop';\n    }\n\n    function renderActiveRecordings(context, promise) {\n        promise.then(function (result) {\n            renderRecordings(context.querySelector('#activeRecordings'), result.Items, {\n                shape: enableScrollX() ? 'autooverflow' : 'auto',\n                defaultShape: getBackdropShape(),\n                showParentTitle: false,\n                showParentTitleOrTitle: true,\n                showTitle: false,\n                showAirTime: true,\n                showAirEndTime: true,\n                showChannelName: true,\n                coverImage: true,\n                overlayText: false,\n                overlayMoreButton: true\n            });\n        });\n    }\n\n    function renderTimers(context, timers, options) {\n        LiveTvHelpers.getTimersHtml(timers, options).then(function (html) {\n            var elem = context;\n\n            if (html) {\n                elem.classList.remove('hide');\n            } else {\n                elem.classList.add('hide');\n            }\n\n            elem.querySelector('.recordingItems').innerHTML = html;\n            imageLoader.lazyChildren(elem);\n        });\n    }\n\n    function renderUpcomingRecordings(context, promise) {\n        promise.then(function (result) {\n            renderTimers(context.querySelector('#upcomingRecordings'), result.Items);\n            loading.hide();\n        });\n    }\n\n    return function (view, params, tabContent) {\n        var activeRecordingsPromise;\n        var upcomingRecordingsPromise;\n        var self = this;\n        tabContent.querySelector('#upcomingRecordings .recordingItems').addEventListener('timercancelled', function () {\n            self.preRender();\n            self.renderTab();\n        });\n\n        self.preRender = function () {\n            activeRecordingsPromise = ApiClient.getLiveTvRecordings({\n                UserId: Dashboard.getCurrentUserId(),\n                IsInProgress: true,\n                Fields: 'CanDelete,PrimaryImageAspectRatio,BasicSyncInfo',\n                EnableTotalRecordCount: false,\n                EnableImageTypes: 'Primary,Thumb,Backdrop'\n            });\n            upcomingRecordingsPromise = ApiClient.getLiveTvTimers({\n                IsActive: false,\n                IsScheduled: true\n            });\n        };\n\n        self.renderTab = function () {\n            loading.show();\n            renderActiveRecordings(tabContent, activeRecordingsPromise);\n            renderUpcomingRecordings(tabContent, upcomingRecordingsPromise);\n        };\n    };\n});\n"]}