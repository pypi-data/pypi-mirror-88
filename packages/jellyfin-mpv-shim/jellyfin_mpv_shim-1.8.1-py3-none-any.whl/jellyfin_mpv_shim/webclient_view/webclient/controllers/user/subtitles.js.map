{"version":3,"sources":["controllers/user/subtitles.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","define","_exports","_subtitleSettings","userSettings","_autoFocuser","_getRequireWildcardCache","WeakMap","cache","_interopRequireDefault","__esModule","default","Object","defineProperty","value","_default","view","params","onBeforeUnload","e","hasChanges","returnValue","subtitleSettingsInstance","userId","ApiClient","getCurrentUserId","currentSettings","UserSettings","addEventListener","window","loadData","SubtitleSettings","serverId","element","querySelector","enableSaveButton","enableSaveConfirmation","autoFocus","autoFocuser","isEnabled","destroy","_interopRequireWildcard","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set"],"mappings":"AAAA,SAASA,QAAQC,KAAmV,OAAtOD,QAArD,mBAAXE,QAAoD,iBAApBA,OAAOC,SAAmC,SAASH,QAAQC,KAAO,cAAcA,KAA2B,SAASD,QAAQC,KAAO,OAAOA,KAAyB,mBAAXC,QAAyBD,IAAIG,cAAgBF,QAAUD,MAAQC,OAAOG,UAAY,gBAAkBJ,MAAyBA,KAEnXK,OAAO,CAAC,UAAW,mBAAoB,eAAgB,gBAAgB,SAAUC,SAAUC,kBAAmBC,aAAcC,cAC1H,aAUA,SAASC,2BAA6B,GAAuB,mBAAZC,QAAwB,OAAO,KAAM,IAAIC,MAAQ,IAAID,QAA6F,OAAlFD,yBAA2B,SAASA,2BAA6B,OAAOE,OAAiBA,MAI1M,SAASC,uBAAuBb,KAAO,OAAOA,KAAOA,IAAIc,WAAad,IAAM,CAAEe,QAASf,KAZvFgB,OAAOC,eAAeX,SAAU,aAAc,CAC5CY,OAAO,IAETZ,SAASS,QACQ,SAAAI,SAAUC,KAAMC,QAC3B,SAASC,eAAeC,GAChBC,aACAD,EAAEE,YAAc,uEAIxB,IAAIC,yBACAF,WACEG,OAASN,OAAOM,QAAUC,UAAUC,mBACpCC,gBAAkBH,SAAWC,UAAUC,mBAAqBrB,aAAe,IAAIuB,aACrFX,KAAKY,iBAAiB,YAAY,WAC9BC,OAAOD,iBAAiB,eAAgBV,gBAEpCI,yBACAA,yBAAyBQ,WAEzBR,yBAA2B,IAAIS,kBAAAA,QAAiB,CAC5CC,SAAUR,UAAUQ,WACpBT,OAAQA,OACRU,QAASjB,KAAKkB,cAAc,sBAC5B9B,aAAcsB,gBACdS,kBAAkB,EAClBC,wBAAwB,EACxBC,UAAWC,aAAAA,QAAYC,iBAKnCvB,KAAKY,iBAAiB,UAAU,WAC5BR,YAAa,KAGjBJ,KAAKY,iBAAiB,eAAe,WAC7BN,2BACAA,yBAAyBkB,UACzBlB,yBAA2B,UA7C3CnB,kBAAAM,uBAAAN,mBACAC,aAcE,SAASqC,wBAAwB7C,KAAO,GAAIA,KAAOA,IAAIc,WAAc,OAAOd,IAAO,GAAY,OAARA,KAAiC,WAAjBD,QAAQC,MAAoC,mBAARA,IAAsB,MAAO,CAAEe,QAASf,KAAS,IAAIY,MAAQF,2BAA4B,GAAIE,OAASA,MAAMkC,IAAI9C,KAAQ,OAAOY,MAAMmC,IAAI/C,KAAQ,IAAIgD,OAAS,GAAQC,sBAAwBjC,OAAOC,gBAAkBD,OAAOkC,yBAA0B,IAAK,IAAIC,OAAOnD,IAAO,GAAIgB,OAAOZ,UAAUgD,eAAeC,KAAKrD,IAAKmD,KAAM,CAAE,IAAIG,KAAOL,sBAAwBjC,OAAOkC,yBAAyBlD,IAAKmD,KAAO,KAAUG,OAASA,KAAKP,KAAOO,KAAKC,KAAQvC,OAAOC,eAAe+B,OAAQG,IAAKG,MAAgBN,OAAOG,KAAOnD,IAAImD,KAAYH,OAAOjC,QAAUf,IAASY,OAASA,MAAM2C,IAAIvD,IAAKgD,QAAW,OAAOA,OAdluBH,CAAArC,cACAC,aAAAI,uBAAAJ,cAKI,IAAMsB,aAAevB,aAAauB","file":"subtitles.js","sourcesContent":["import SubtitleSettings from 'subtitleSettings';\nimport * as userSettings from 'userSettings';\nimport autoFocuser from 'autoFocuser';\n\n/* eslint-disable indent */\n\n    // Shortcuts\n    const UserSettings = userSettings.UserSettings;\n\n    export default function (view, params) {\n        function onBeforeUnload(e) {\n            if (hasChanges) {\n                e.returnValue = 'You currently have unsaved changes. Are you sure you wish to leave?';\n            }\n        }\n\n        let subtitleSettingsInstance;\n        let hasChanges;\n        const userId = params.userId || ApiClient.getCurrentUserId();\n        const currentSettings = userId === ApiClient.getCurrentUserId() ? userSettings : new UserSettings();\n        view.addEventListener('viewshow', function () {\n            window.addEventListener('beforeunload', onBeforeUnload);\n\n            if (subtitleSettingsInstance) {\n                subtitleSettingsInstance.loadData();\n            } else {\n                subtitleSettingsInstance = new SubtitleSettings({\n                    serverId: ApiClient.serverId(),\n                    userId: userId,\n                    element: view.querySelector('.settingsContainer'),\n                    userSettings: currentSettings,\n                    enableSaveButton: true,\n                    enableSaveConfirmation: true,\n                    autoFocus: autoFocuser.isEnabled()\n                });\n            }\n        });\n\n        view.addEventListener('change', function () {\n            hasChanges = true;\n        });\n\n        view.addEventListener('viewdestroy', function () {\n            if (subtitleSettingsInstance) {\n                subtitleSettingsInstance.destroy();\n                subtitleSettingsInstance = null;\n            }\n        });\n    }\n\n/* eslint-enable indent */\n"]}