{"version":3,"sources":["controllers/auth/selectserver.js"],"names":["define","loading","appRouter","layoutManager","appSettings","appHost","focusManager","connectionManager","globalize","actionSheet","dom","browser","enableFocusTransform","slow","edge","alertText","text","alertTextWithOptions","options","require","alert","view","params","connectToServer","server","show","enableAutoLogin","then","result","hide","apiClient","ApiClient","State","Dashboard","onServerChanged","getCurrentUserId","accessToken","navigate","Servers","Id","translate","html","showServerConnectionFailure","onServerClick","menuItems","push","name","id","items","title","Name","deleteServer","loadServers","onServersRetrieved","servers","renderSelectServerItems","map","showIcon","icon","cardType","item","cardImageContainer","cardImageStyle","cssClass","tv","cardContainer","url","join","itemsContainer","querySelector","length","innerHTML","autoFocus","getAvailableServers","updatePageStyle","showuser","classList","add","remove","addEventListener","e","isRestored","detail","setTitle","card","parentWithClass","target","getAttribute","filter","s"],"mappings":"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","file":"selectserver.js","sourcesContent":["define(['loading', 'appRouter', 'layoutManager', 'appSettings', 'apphost', 'focusManager', 'connectionManager', 'globalize', 'actionsheet', 'dom', 'browser', 'material-icons', 'flexStyles', 'emby-scroller', 'emby-itemscontainer', 'cardStyle', 'emby-button'], function (loading, appRouter, layoutManager, appSettings, appHost, focusManager, connectionManager, globalize, actionSheet, dom, browser) {\n    'use strict';\n\n    var enableFocusTransform = !browser.slow && !browser.edge;\n\n    function renderSelectServerItems(view, servers) {\n        var items = servers.map(function (server) {\n            return {\n                name: server.Name,\n                showIcon: true,\n                icon: 'cast',\n                cardType: '',\n                id: server.Id,\n                server: server\n            };\n        });\n        var html = items.map(function (item) {\n            var cardImageContainer;\n\n            if (item.showIcon) {\n                cardImageContainer = '<span class=\"cardImageIcon material-icons ' + item.icon + '\"></span>';\n            } else {\n                cardImageContainer = '<div class=\"cardImage\" style=\"' + item.cardImageStyle + '\"></div>';\n            }\n\n            // TODO move card creation code to Card component\n\n            var cssClass = 'card overflowSquareCard loginSquareCard scalableCard overflowSquareCard-scalable';\n\n            if (layoutManager.tv) {\n                cssClass += ' show-focus';\n\n                if (enableFocusTransform) {\n                    cssClass += ' show-animation';\n                }\n            }\n\n            var cardBoxCssClass = 'cardBox';\n\n            var innerOpening = '<div class=\"' + cardBoxCssClass + '\">';\n            var cardContainer = '';\n            cardContainer += '<button raised class=\"' + cssClass + '\" style=\"display:inline-block;\" data-id=\"' + item.id + '\" data-url=\"' + (item.url || '') + '\" data-cardtype=\"' + item.cardType + '\">';\n            cardContainer += innerOpening;\n            cardContainer += '<div class=\"cardScalable\">';\n            cardContainer += '<div class=\"cardPadder cardPadder-square\">';\n            cardContainer += '</div>';\n            cardContainer += '<div class=\"cardContent\">';\n            cardContainer += '<div class=\"cardImageContainer coveredImage\" style=\"background:#0288D1;border-radius:.15em;\">';\n            cardContainer += cardImageContainer;\n            cardContainer += '</div>';\n            cardContainer += '</div>';\n            cardContainer += '</div>';\n            cardContainer += '<div class=\"cardFooter\">';\n            cardContainer += '<div class=\"cardText cardTextCentered\">' + item.name + '</div>';\n            cardContainer += '</div></div></button>';\n            return cardContainer;\n        }).join('');\n        var itemsContainer = view.querySelector('.servers');\n\n        if (!items.length) {\n            html = '<p>' + globalize.translate('MessageNoServersAvailable') + '</p>';\n        }\n\n        itemsContainer.innerHTML = html;\n        loading.hide();\n    }\n\n    function updatePageStyle(view, params) {\n        if (params.showuser == '1') {\n            view.classList.add('libraryPage');\n            view.classList.remove('standalonePage');\n            view.classList.add('noSecondaryNavPage');\n        } else {\n            view.classList.add('standalonePage');\n            view.classList.remove('libraryPage');\n            view.classList.remove('noSecondaryNavPage');\n        }\n    }\n\n    function showGeneralError() {\n        loading.hide();\n        alertText(globalize.translate('DefaultErrorMessage'));\n    }\n\n    function alertText(text) {\n        alertTextWithOptions({\n            text: text\n        });\n    }\n\n    function alertTextWithOptions(options) {\n        require(['alert'], function (alert) {\n            alert(options);\n        });\n    }\n\n    function showServerConnectionFailure() {\n        alertText(globalize.translate('MessageUnableToConnectToServer'));\n    }\n\n    return function (view, params) {\n        function connectToServer(server) {\n            loading.show();\n            connectionManager.connectToServer(server, {\n                enableAutoLogin: appSettings.enableAutoLogin()\n            }).then(function (result) {\n                loading.hide();\n                var apiClient = result.ApiClient;\n\n                switch (result.State) {\n                    case 'SignedIn':\n                        Dashboard.onServerChanged(apiClient.getCurrentUserId(), apiClient.accessToken(), apiClient);\n                        Dashboard.navigate('home.html');\n                        break;\n\n                    case 'ServerSignIn':\n                        Dashboard.onServerChanged(null, null, apiClient);\n                        Dashboard.navigate('login.html?serverid=' + result.Servers[0].Id);\n                        break;\n\n                    case 'ServerUpdateNeeded':\n                        alertTextWithOptions({\n                            text: globalize.translate('core#ServerUpdateNeeded', 'https://github.com/jellyfin/jellyfin'),\n                            html: globalize.translate('core#ServerUpdateNeeded', '<a href=\"https://github.com/jellyfin/jellyfin\">https://github.com/jellyfin/jellyfin</a>')\n                        });\n                        break;\n\n                    default:\n                        showServerConnectionFailure();\n                }\n            });\n        }\n\n        function deleteServer(server) {\n            loading.show();\n            connectionManager.deleteServer(server.Id).then(function () {\n                loading.hide();\n                loadServers();\n            });\n        }\n\n        function onServerClick(server) {\n            var menuItems = [];\n            menuItems.push({\n                name: globalize.translate('Connect'),\n                id: 'connect'\n            });\n            menuItems.push({\n                name: globalize.translate('Delete'),\n                id: 'delete'\n            });\n            actionSheet.show({\n                items: menuItems,\n                title: server.Name\n            }).then(function (id) {\n                switch (id) {\n                    case 'connect':\n                        connectToServer(server);\n                        break;\n\n                    case 'delete':\n                        deleteServer(server);\n                }\n            });\n        }\n\n        function onServersRetrieved(result) {\n            servers = result;\n            renderSelectServerItems(view, result);\n\n            if (layoutManager.tv) {\n                focusManager.autoFocus(view);\n            }\n        }\n\n        function loadServers() {\n            loading.show();\n            connectionManager.getAvailableServers().then(onServersRetrieved);\n        }\n\n        var servers;\n        updatePageStyle(view, params);\n        view.addEventListener('viewshow', function (e) {\n            var isRestored = e.detail.isRestored;\n            appRouter.setTitle(null);\n\n            if (!isRestored) {\n                loadServers();\n            }\n        });\n        view.querySelector('.servers').addEventListener('click', function (e) {\n            var card = dom.parentWithClass(e.target, 'card');\n\n            if (card) {\n                var url = card.getAttribute('data-url');\n\n                if (url) {\n                    appRouter.show(url);\n                } else {\n                    var id = card.getAttribute('data-id');\n                    onServerClick(servers.filter(function (s) {\n                        return s.Id === id;\n                    })[0]);\n                }\n            }\n        });\n    };\n});\n"]}