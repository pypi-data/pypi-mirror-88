{"version":3,"sources":["controllers/movies/movies.js"],"names":["define","loading","layoutManager","userSettings","events","libraryBrowser","alphaPicker","listView","cardBuilder","globalize","view","params","tabContent","options","onViewStyleChange","self","getCurrentViewStyle","itemsContainer","classList","add","remove","innerHTML","updateFilterControls","value","query","NameStartsWithOrGreater","fetchData","isLoading","show","ApiClient","getItems","getCurrentUserId","afterRefresh","result","onNextPageClick","libraryPageSize","StartIndex","Limit","refreshItems","onPreviousPageClick","Math","max","window","scrollTo","i","length","pagingHtml","getQueryPagingHtml","startIndex","limit","totalRecordCount","TotalRecordCount","showLimit","updatePageSizeSetting","addLayoutButton","sortButton","filterButton","elems","querySelectorAll","addEventListener","hide","require","autoFocuser","autoFocus","getItemsHtml","items","viewStyle","getCardsHtml","shape","preferThumb","context","lazy","overlayPlayButton","showTitle","showYear","centerText","cardLayout","preferBanner","getListViewHtml","sortBy","SortBy","this","querySelector","savedQueryKey","topParentId","mode","savedViewKey","SortOrder","IncludeItemTypes","Recursive","Fields","ImageTypeLimit","EnableImageTypes","ParentId","IsFavorite","loadQuerySettings","showFilterMenu","_ref","filterDialog","filterDialogFactory","default","serverId","on","get","initTab","initPage","alphaPickerElement","e","newValue","detail","element","valueChangeEvent","btnFilter","btnSort","showSortMenu","name","translate","id","callback","saveQuerySettings","button","target","btnSelectView","showLayoutMenu","split","set","renderTab","destroy"],"mappings":"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","file":"movies.js","sourcesContent":["define(['loading', 'layoutManager', 'userSettings', 'events', 'libraryBrowser', 'alphaPicker', 'listView', 'cardBuilder', 'globalize', 'emby-itemscontainer'], function (loading, layoutManager, userSettings, events, libraryBrowser, alphaPicker, listView, cardBuilder, globalize) {\n    'use strict';\n\n    return function (view, params, tabContent, options) {\n        function onViewStyleChange() {\n            if (self.getCurrentViewStyle() == 'List') {\n                itemsContainer.classList.add('vertical-list');\n                itemsContainer.classList.remove('vertical-wrap');\n            } else {\n                itemsContainer.classList.remove('vertical-list');\n                itemsContainer.classList.add('vertical-wrap');\n            }\n\n            itemsContainer.innerHTML = '';\n        }\n\n        function updateFilterControls() {\n            if (self.alphaPicker) {\n                self.alphaPicker.value(query.NameStartsWithOrGreater);\n            }\n        }\n\n        function fetchData() {\n            isLoading = true;\n            loading.show();\n            return ApiClient.getItems(ApiClient.getCurrentUserId(), query);\n        }\n\n        function afterRefresh(result) {\n            function onNextPageClick() {\n                if (isLoading) {\n                    return;\n                }\n\n                if (userSettings.libraryPageSize() > 0) {\n                    query.StartIndex += query.Limit;\n                }\n                itemsContainer.refreshItems();\n            }\n\n            function onPreviousPageClick() {\n                if (isLoading) {\n                    return;\n                }\n\n                if (userSettings.libraryPageSize() > 0) {\n                    query.StartIndex = Math.max(0, query.StartIndex - query.Limit);\n                }\n                itemsContainer.refreshItems();\n            }\n\n            window.scrollTo(0, 0);\n            updateFilterControls();\n            var pagingHtml = libraryBrowser.getQueryPagingHtml({\n                startIndex: query.StartIndex,\n                limit: query.Limit,\n                totalRecordCount: result.TotalRecordCount,\n                showLimit: false,\n                updatePageSizeSetting: false,\n                addLayoutButton: false,\n                sortButton: false,\n                filterButton: false\n            });\n            var i;\n            var length;\n            var elems = tabContent.querySelectorAll('.paging');\n\n            for (i = 0, length = elems.length; i < length; i++) {\n                elems[i].innerHTML = pagingHtml;\n            }\n\n            elems = tabContent.querySelectorAll('.btnNextPage');\n            for (i = 0, length = elems.length; i < length; i++) {\n                elems[i].addEventListener('click', onNextPageClick);\n            }\n\n            elems = tabContent.querySelectorAll('.btnPreviousPage');\n            for (i = 0, length = elems.length; i < length; i++) {\n                elems[i].addEventListener('click', onPreviousPageClick);\n            }\n\n            isLoading = false;\n            loading.hide();\n\n            require(['autoFocuser'], function (autoFocuser) {\n                autoFocuser.autoFocus(tabContent);\n            });\n        }\n\n        function getItemsHtml(items) {\n            var html;\n            var viewStyle = self.getCurrentViewStyle();\n\n            if (viewStyle == 'Thumb') {\n                html = cardBuilder.getCardsHtml({\n                    items: items,\n                    shape: 'backdrop',\n                    preferThumb: true,\n                    context: 'movies',\n                    lazy: true,\n                    overlayPlayButton: true,\n                    showTitle: true,\n                    showYear: true,\n                    centerText: true\n                });\n            } else if (viewStyle == 'ThumbCard') {\n                html = cardBuilder.getCardsHtml({\n                    items: items,\n                    shape: 'backdrop',\n                    preferThumb: true,\n                    context: 'movies',\n                    lazy: true,\n                    cardLayout: true,\n                    showTitle: true,\n                    showYear: true,\n                    centerText: true\n                });\n            } else if (viewStyle == 'Banner') {\n                html = cardBuilder.getCardsHtml({\n                    items: items,\n                    shape: 'banner',\n                    preferBanner: true,\n                    context: 'movies',\n                    lazy: true\n                });\n            } else if (viewStyle == 'List') {\n                html = listView.getListViewHtml({\n                    items: items,\n                    context: 'movies',\n                    sortBy: query.SortBy\n                });\n            } else if (viewStyle == 'PosterCard') {\n                html = cardBuilder.getCardsHtml({\n                    items: items,\n                    shape: 'portrait',\n                    context: 'movies',\n                    showTitle: true,\n                    showYear: true,\n                    centerText: true,\n                    lazy: true,\n                    cardLayout: true\n                });\n            } else {\n                html = cardBuilder.getCardsHtml({\n                    items: items,\n                    shape: 'portrait',\n                    context: 'movies',\n                    overlayPlayButton: true,\n                    showTitle: true,\n                    showYear: true,\n                    centerText: true\n                });\n            }\n\n            return html;\n        }\n\n        function initPage(tabContent) {\n            itemsContainer.fetchData = fetchData;\n            itemsContainer.getItemsHtml = getItemsHtml;\n            itemsContainer.afterRefresh = afterRefresh;\n            var alphaPickerElement = tabContent.querySelector('.alphaPicker');\n\n            if (alphaPickerElement) {\n                alphaPickerElement.addEventListener('alphavaluechanged', function (e) {\n                    var newValue = e.detail.value;\n                    query.NameStartsWithOrGreater = newValue;\n                    query.StartIndex = 0;\n                    itemsContainer.refreshItems();\n                });\n                self.alphaPicker = new alphaPicker({\n                    element: alphaPickerElement,\n                    valueChangeEvent: 'click'\n                });\n\n                tabContent.querySelector('.alphaPicker').classList.add('alphabetPicker-right');\n                alphaPickerElement.classList.add('alphaPicker-fixed-right');\n                itemsContainer.classList.add('padded-right-withalphapicker');\n            }\n\n            var btnFilter = tabContent.querySelector('.btnFilter');\n\n            if (btnFilter) {\n                btnFilter.addEventListener('click', function () {\n                    self.showFilterMenu();\n                });\n            }\n            var btnSort = tabContent.querySelector('.btnSort');\n\n            if (btnSort) {\n                btnSort.addEventListener('click', function (e) {\n                    libraryBrowser.showSortMenu({\n                        items: [{\n                            name: globalize.translate('OptionNameSort'),\n                            id: 'SortName,ProductionYear'\n                        }, {\n                            name: globalize.translate('OptionImdbRating'),\n                            id: 'CommunityRating,SortName,ProductionYear'\n                        }, {\n                            name: globalize.translate('OptionCriticRating'),\n                            id: 'CriticRating,SortName,ProductionYear'\n                        }, {\n                            name: globalize.translate('OptionDateAdded'),\n                            id: 'DateCreated,SortName,ProductionYear'\n                        }, {\n                            name: globalize.translate('OptionDatePlayed'),\n                            id: 'DatePlayed,SortName,ProductionYear'\n                        }, {\n                            name: globalize.translate('OptionParentalRating'),\n                            id: 'OfficialRating,SortName,ProductionYear'\n                        }, {\n                            name: globalize.translate('OptionPlayCount'),\n                            id: 'PlayCount,SortName,ProductionYear'\n                        }, {\n                            name: globalize.translate('OptionReleaseDate'),\n                            id: 'PremiereDate,SortName,ProductionYear'\n                        }, {\n                            name: globalize.translate('OptionRuntime'),\n                            id: 'Runtime,SortName,ProductionYear'\n                        }],\n                        callback: function () {\n                            query.StartIndex = 0;\n                            userSettings.saveQuerySettings(savedQueryKey, query);\n                            itemsContainer.refreshItems();\n                        },\n                        query: query,\n                        button: e.target\n                    });\n                });\n            }\n            var btnSelectView = tabContent.querySelector('.btnSelectView');\n            btnSelectView.addEventListener('click', function (e) {\n                libraryBrowser.showLayoutMenu(e.target, self.getCurrentViewStyle(), 'Banner,List,Poster,PosterCard,Thumb,ThumbCard'.split(','));\n            });\n            btnSelectView.addEventListener('layoutchange', function (e) {\n                var viewStyle = e.detail.viewStyle;\n                userSettings.set(savedViewKey, viewStyle);\n                query.StartIndex = 0;\n                onViewStyleChange();\n                itemsContainer.refreshItems();\n            });\n        }\n\n        var self = this;\n        var itemsContainer = tabContent.querySelector('.itemsContainer');\n        var savedQueryKey = params.topParentId + '-' + options.mode;\n        var savedViewKey = savedQueryKey + '-view';\n        var query = {\n            SortBy: 'SortName,ProductionYear',\n            SortOrder: 'Ascending',\n            IncludeItemTypes: 'Movie',\n            Recursive: true,\n            Fields: 'PrimaryImageAspectRatio,MediaSourceCount,BasicSyncInfo',\n            ImageTypeLimit: 1,\n            EnableImageTypes: 'Primary,Backdrop,Banner,Thumb',\n            StartIndex: 0,\n            ParentId: params.topParentId\n        };\n\n        if (userSettings.libraryPageSize() > 0) {\n            query['Limit'] = userSettings.libraryPageSize();\n        }\n\n        var isLoading = false;\n\n        if (options.mode === 'favorites') {\n            query.IsFavorite = true;\n        }\n\n        query = userSettings.loadQuerySettings(savedQueryKey, query);\n\n        self.showFilterMenu = function () {\n            require(['components/filterdialog/filterdialog'], function ({default: filterDialogFactory}) {\n                var filterDialog = new filterDialogFactory({\n                    query: query,\n                    mode: 'movies',\n                    serverId: ApiClient.serverId()\n                });\n                events.on(filterDialog, 'filterchange', function () {\n                    query.StartIndex = 0;\n                    itemsContainer.refreshItems();\n                });\n                filterDialog.show();\n            });\n        };\n\n        self.getCurrentViewStyle = function () {\n            return userSettings.get(savedViewKey) || 'Poster';\n        };\n\n        self.initTab = function () {\n            initPage(tabContent);\n            onViewStyleChange();\n        };\n\n        self.renderTab = function () {\n            itemsContainer.refreshItems();\n            updateFilterControls();\n        };\n\n        self.destroy = function () {\n            itemsContainer = null;\n        };\n    };\n});\n"]}