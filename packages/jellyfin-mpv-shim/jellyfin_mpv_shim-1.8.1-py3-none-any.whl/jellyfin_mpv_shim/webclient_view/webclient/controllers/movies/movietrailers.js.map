{"version":3,"sources":["controllers/movies/movietrailers.js"],"names":["define","layoutManager","loading","events","libraryBrowser","imageLoader","alphaPicker","listView","cardBuilder","userSettings","globalize","view","params","tabContent","getPageData","context","key","getSavedQueryKey","pageData","data","query","SortBy","SortOrder","IncludeItemTypes","Recursive","Fields","ImageTypeLimit","EnableImageTypes","StartIndex","getSavedView","libraryPageSize","loadSavedQueryValues","getQuery","savedQueryKey","reloadItems","show","isLoading","ApiClient","getItems","getCurrentUserId","then","result","onNextPageClick","Limit","onPreviousPageClick","Math","max","window","scrollTo","updateFilterControls","html","i","length","pagingHtml","getQueryPagingHtml","startIndex","limit","totalRecordCount","TotalRecordCount","showLimit","updatePageSizeSetting","addLayoutButton","sortButton","filterButton","viewStyle","self","getCurrentViewStyle","getCardsHtml","items","Items","shape","preferThumb","overlayPlayButton","cardLayout","showTitle","showYear","centerText","preferBanner","getListViewHtml","sortBy","elems","querySelectorAll","innerHTML","addEventListener","translate","itemsContainer","querySelector","lazyChildren","saveQueryValues","hide","value","NameStartsWithOrGreater","this","showFilterMenu","require","_ref","filterDialog","filterDialogFactory","default","mode","serverId","on","initPage","alphaPickerElement","e","newValue","detail","element","valueChangeEvent","classList","add","showSortMenu","name","id","callback","button","target","renderTab","destroy"],"mappings":"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","file":"movietrailers.js","sourcesContent":["define(['layoutManager', 'loading', 'events', 'libraryBrowser', 'imageLoader', 'alphaPicker', 'listView', 'cardBuilder', 'userSettings', 'globalize', 'emby-itemscontainer'], function (layoutManager, loading, events, libraryBrowser, imageLoader, alphaPicker, listView, cardBuilder, userSettings, globalize) {\n    'use strict';\n\n    return function (view, params, tabContent) {\n        function getPageData(context) {\n            var key = getSavedQueryKey(context);\n            var pageData = data[key];\n\n            if (!pageData) {\n                pageData = data[key] = {\n                    query: {\n                        SortBy: 'SortName',\n                        SortOrder: 'Ascending',\n                        IncludeItemTypes: 'Trailer',\n                        Recursive: true,\n                        Fields: 'PrimaryImageAspectRatio,SortName,BasicSyncInfo',\n                        ImageTypeLimit: 1,\n                        EnableImageTypes: 'Primary,Backdrop,Banner,Thumb',\n                        StartIndex: 0\n                    },\n                    view: libraryBrowser.getSavedView(key) || 'Poster'\n                };\n\n                if (userSettings.libraryPageSize() > 0) {\n                    pageData.query['Limit'] = userSettings.libraryPageSize();\n                }\n\n                libraryBrowser.loadSavedQueryValues(key, pageData.query);\n            }\n\n            return pageData;\n        }\n\n        function getQuery(context) {\n            return getPageData(context).query;\n        }\n\n        function getSavedQueryKey(context) {\n            if (!context.savedQueryKey) {\n                context.savedQueryKey = libraryBrowser.getSavedQueryKey('trailers');\n            }\n\n            return context.savedQueryKey;\n        }\n\n        function reloadItems() {\n            loading.show();\n            isLoading = true;\n            var query = getQuery(tabContent);\n            ApiClient.getItems(ApiClient.getCurrentUserId(), query).then(function (result) {\n                function onNextPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    if (userSettings.libraryPageSize() > 0) {\n                        query.StartIndex += query.Limit;\n                    }\n                    reloadItems();\n                }\n\n                function onPreviousPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    if (userSettings.libraryPageSize() > 0) {\n                        query.StartIndex = Math.max(0, query.StartIndex - query.Limit);\n                    }\n                    reloadItems();\n                }\n\n                window.scrollTo(0, 0);\n                updateFilterControls(tabContent);\n                var pagingHtml = libraryBrowser.getQueryPagingHtml({\n                    startIndex: query.StartIndex,\n                    limit: query.Limit,\n                    totalRecordCount: result.TotalRecordCount,\n                    showLimit: false,\n                    updatePageSizeSetting: false,\n                    addLayoutButton: false,\n                    sortButton: false,\n                    filterButton: false\n                });\n                var html;\n                var viewStyle = self.getCurrentViewStyle();\n\n                if (viewStyle == 'Thumb') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'backdrop',\n                        preferThumb: true,\n                        context: 'movies',\n                        overlayPlayButton: true\n                    });\n                } else if (viewStyle == 'ThumbCard') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'backdrop',\n                        preferThumb: true,\n                        context: 'movies',\n                        cardLayout: true,\n                        showTitle: true,\n                        showYear: true,\n                        centerText: true\n                    });\n                } else if (viewStyle == 'Banner') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'banner',\n                        preferBanner: true,\n                        context: 'movies'\n                    });\n                } else if (viewStyle == 'List') {\n                    html = listView.getListViewHtml({\n                        items: result.Items,\n                        context: 'movies',\n                        sortBy: query.SortBy\n                    });\n                } else if (viewStyle == 'PosterCard') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'portrait',\n                        context: 'movies',\n                        showTitle: true,\n                        showYear: true,\n                        cardLayout: true,\n                        centerText: true\n                    });\n                } else {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'portrait',\n                        context: 'movies',\n                        centerText: true,\n                        overlayPlayButton: true,\n                        showTitle: true,\n                        showYear: true\n                    });\n                }\n\n                var i;\n                var length;\n                var elems = tabContent.querySelectorAll('.paging');\n\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].innerHTML = pagingHtml;\n                }\n\n                elems = tabContent.querySelectorAll('.btnNextPage');\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener('click', onNextPageClick);\n                }\n\n                elems = tabContent.querySelectorAll('.btnPreviousPage');\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener('click', onPreviousPageClick);\n                }\n\n                if (!result.Items.length) {\n                    html = '';\n\n                    html += '<div class=\"noItemsMessage centerMessage\">';\n                    html += '<h1>' + globalize.translate('MessageNothingHere') + '</h1>';\n                    html += '<p>' + globalize.translate('MessageNoTrailersFound') + '</p>';\n                    html += '</div>';\n                }\n\n                var itemsContainer = tabContent.querySelector('.itemsContainer');\n                itemsContainer.innerHTML = html;\n                imageLoader.lazyChildren(itemsContainer);\n                libraryBrowser.saveQueryValues(getSavedQueryKey(tabContent), query);\n                loading.hide();\n                isLoading = false;\n            });\n        }\n\n        function updateFilterControls(tabContent) {\n            var query = getQuery(tabContent);\n            self.alphaPicker.value(query.NameStartsWithOrGreater);\n        }\n\n        var self = this;\n        var data = {};\n        var isLoading = false;\n\n        self.showFilterMenu = function () {\n            require(['components/filterdialog/filterdialog'], function ({default: filterDialogFactory}) {\n                var filterDialog = new filterDialogFactory({\n                    query: getQuery(tabContent),\n                    mode: 'movies',\n                    serverId: ApiClient.serverId()\n                });\n                events.on(filterDialog, 'filterchange', function () {\n                    getQuery(tabContent).StartIndex = 0;\n                    reloadItems();\n                });\n                filterDialog.show();\n            });\n        };\n\n        self.getCurrentViewStyle = function () {\n            return getPageData(tabContent).view;\n        };\n\n        function initPage(tabContent) {\n            var alphaPickerElement = tabContent.querySelector('.alphaPicker');\n            var itemsContainer = tabContent.querySelector('.itemsContainer');\n            alphaPickerElement.addEventListener('alphavaluechanged', function (e) {\n                var newValue = e.detail.value;\n                var query = getQuery(tabContent);\n                query.NameStartsWithOrGreater = newValue;\n                query.StartIndex = 0;\n                reloadItems();\n            });\n            self.alphaPicker = new alphaPicker({\n                element: alphaPickerElement,\n                valueChangeEvent: 'click'\n            });\n\n            tabContent.querySelector('.alphaPicker').classList.add('alphabetPicker-right');\n            alphaPickerElement.classList.add('alphaPicker-fixed-right');\n            itemsContainer.classList.add('padded-right-withalphapicker');\n\n            tabContent.querySelector('.btnFilter').addEventListener('click', function () {\n                self.showFilterMenu();\n            });\n            tabContent.querySelector('.btnSort').addEventListener('click', function (e) {\n                libraryBrowser.showSortMenu({\n                    items: [{\n                        name: globalize.translate('OptionNameSort'),\n                        id: 'SortName'\n                    }, {\n                        name: globalize.translate('OptionImdbRating'),\n                        id: 'CommunityRating,SortName'\n                    }, {\n                        name: globalize.translate('OptionDateAdded'),\n                        id: 'DateCreated,SortName'\n                    }, {\n                        name: globalize.translate('OptionDatePlayed'),\n                        id: 'DatePlayed,SortName'\n                    }, {\n                        name: globalize.translate('OptionParentalRating'),\n                        id: 'OfficialRating,SortName'\n                    }, {\n                        name: globalize.translate('OptionPlayCount'),\n                        id: 'PlayCount,SortName'\n                    }, {\n                        name: globalize.translate('OptionReleaseDate'),\n                        id: 'PremiereDate,SortName'\n                    }],\n                    callback: function () {\n                        getQuery(tabContent).StartIndex = 0;\n                        reloadItems();\n                    },\n                    query: getQuery(tabContent),\n                    button: e.target\n                });\n            });\n        }\n\n        initPage(tabContent);\n\n        self.renderTab = function () {\n            reloadItems();\n            updateFilterControls(tabContent);\n        };\n\n        self.destroy = function () {};\n    };\n});\n"]}