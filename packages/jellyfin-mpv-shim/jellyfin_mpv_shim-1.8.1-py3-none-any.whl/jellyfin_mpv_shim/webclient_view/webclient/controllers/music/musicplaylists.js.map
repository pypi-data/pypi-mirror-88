{"version":3,"sources":["controllers/music/musicplaylists.js"],"names":["define","libraryBrowser","cardBuilder","appHost","imageLoader","loading","view","params","tabContent","getPageData","key","getSavedQueryKey","pageData","data","query","SortBy","SortOrder","IncludeItemTypes","Recursive","Fields","StartIndex","getSavedView","ParentId","topParentId","loadSavedQueryValues","getQuery","promise","this","getCurrentViewStyle","preRender","getPromise","show","ApiClient","getItems","getCurrentUserId","renderTab","reloadItems","context","then","result","html","getCardsHtml","items","Items","shape","showTitle","coverImage","centerText","overlayPlayButton","allowBottomPadding","cardLayout","elem","querySelector","innerHTML","lazyChildren","saveQueryValues","hide","require","autoFocuser","autoFocus"],"mappings":"AAAA,aAAAA,OAAO,CAAC,iBAAkB,cAAe,UAAW,cAAe,YAAY,SAAUC,eAAgBC,YAAaC,QAASC,YAAaC,SAGxI,OAAO,SAAUC,KAAMC,OAAQC,YAC3B,SAASC,cACL,IAAIC,IAAMC,mBACNC,SAAWC,KAAKH,KAkBpB,OAhBKE,YACDA,SAAWC,KAAKH,KAAO,CACnBI,MAAO,CACHC,OAAQ,WACRC,UAAW,YACXC,iBAAkB,WAClBC,WAAW,EACXC,OAAQ,6CACRC,WAAY,GAEhBd,KAAML,eAAeoB,aAAaX,MAAQ,WAErCI,MAAMQ,SAAWf,OAAOgB,YACjCtB,eAAeuB,qBAAqBd,IAAKE,SAASE,QAG/CF,SAGX,SAASa,WACL,OAAOhB,cAAcK,MAGzB,SAASH,mBACL,OAAOV,eAAeU,iBAAiB,UAmC3C,IAOIe,QANAb,KAAO,GADAc,KAGNC,oBAAsB,WACvB,OAAOnB,cAAcH,MAJdqB,KASNE,UAAY,WACbH,QA1CJ,SAASI,aACLzB,QAAQ0B,OACR,IAAIjB,MAAQW,WACZ,OAAOO,UAAUC,SAASD,UAAUE,mBAAoBpB,OAuC9CgB,IAVHH,KAaNQ,UAAY,YAvCjB,SAASC,YAAYC,QAASX,SAC1B,IAAIZ,MAAQW,WACZC,QAAQY,MAAK,SAAUC,QACnB,IAAIC,KACJA,KAAOtC,YAAYuC,aAAa,CAC5BC,MAAOH,OAAOI,MACdC,MAAO,SACPC,WAAW,EACXC,YAAY,EACZC,YAAY,EACZC,mBAAmB,EACnBC,oBAAoB,EACpBC,YAAY,IAEhB,IAAIC,KAAOd,QAAQe,cAAc,UACjCD,KAAKE,UAAYb,KACjBpC,YAAYkD,aAAaH,MACzBlD,eAAesD,gBAAgB5C,mBAAoBG,OACnDT,QAAQmD,OAERC,QAAQ,CAAC,gBAAgB,SAAUC,aAC/BA,YAAYC,UAAUtB,eAmB9BD,CAAY5B,WAAYkB","file":"musicplaylists.js","sourcesContent":["define(['libraryBrowser', 'cardBuilder', 'apphost', 'imageLoader', 'loading'], function (libraryBrowser, cardBuilder, appHost, imageLoader, loading) {\n    'use strict';\n\n    return function (view, params, tabContent) {\n        function getPageData() {\n            var key = getSavedQueryKey();\n            var pageData = data[key];\n\n            if (!pageData) {\n                pageData = data[key] = {\n                    query: {\n                        SortBy: 'SortName',\n                        SortOrder: 'Ascending',\n                        IncludeItemTypes: 'Playlist',\n                        Recursive: true,\n                        Fields: 'PrimaryImageAspectRatio,SortName,CanDelete',\n                        StartIndex: 0\n                    },\n                    view: libraryBrowser.getSavedView(key) || 'Poster'\n                };\n                pageData.query.ParentId = params.topParentId;\n                libraryBrowser.loadSavedQueryValues(key, pageData.query);\n            }\n\n            return pageData;\n        }\n\n        function getQuery() {\n            return getPageData().query;\n        }\n\n        function getSavedQueryKey() {\n            return libraryBrowser.getSavedQueryKey('genres');\n        }\n\n        function getPromise() {\n            loading.show();\n            var query = getQuery();\n            return ApiClient.getItems(ApiClient.getCurrentUserId(), query);\n        }\n\n        function reloadItems(context, promise) {\n            var query = getQuery();\n            promise.then(function (result) {\n                var html = '';\n                html = cardBuilder.getCardsHtml({\n                    items: result.Items,\n                    shape: 'square',\n                    showTitle: true,\n                    coverImage: true,\n                    centerText: true,\n                    overlayPlayButton: true,\n                    allowBottomPadding: true,\n                    cardLayout: false\n                });\n                var elem = context.querySelector('#items');\n                elem.innerHTML = html;\n                imageLoader.lazyChildren(elem);\n                libraryBrowser.saveQueryValues(getSavedQueryKey(), query);\n                loading.hide();\n\n                require(['autoFocuser'], function (autoFocuser) {\n                    autoFocuser.autoFocus(context);\n                });\n            });\n        }\n\n        var self = this;\n        var data = {};\n\n        self.getCurrentViewStyle = function () {\n            return getPageData().view;\n        };\n\n        var promise;\n\n        self.preRender = function () {\n            promise = getPromise();\n        };\n\n        self.renderTab = function () {\n            reloadItems(tabContent, promise);\n        };\n    };\n});\n"]}