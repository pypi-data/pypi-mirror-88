{"version":3,"sources":["controllers/shows/episodes.js"],"names":["define","loading","events","libraryBrowser","imageLoader","listView","cardBuilder","userSettings","globalize","view","params","tabContent","getPageData","context","key","getSavedQueryKey","pageData","data","query","SortBy","SortOrder","IncludeItemTypes","Recursive","Fields","IsMissing","ImageTypeLimit","EnableImageTypes","StartIndex","getSavedView","libraryPageSize","ParentId","topParentId","loadSavedQueryValues","getQuery","savedQueryKey","onViewStyleChange","viewStyle","self","getCurrentViewStyle","itemsContainer","querySelector","classList","add","remove","innerHTML","reloadItems","page","show","isLoading","ApiClient","getItems","Dashboard","getCurrentUserId","then","result","onNextPageClick","Limit","onPreviousPageClick","Math","max","html","window","scrollTo","i","length","elems","pagingHtml","getQueryPagingHtml","startIndex","limit","totalRecordCount","TotalRecordCount","showLimit","updatePageSizeSetting","addLayoutButton","sortButton","filterButton","getListViewHtml","items","Items","sortBy","showParentTitle","getCardsHtml","shape","showTitle","scalable","cardLayout","overlayText","centerText","overlayPlayButton","querySelectorAll","addEventListener","lazyChildren","saveQueryValues","hide","require","autoFocuser","autoFocus","this","showFilterMenu","_ref","filterDialog","filterDialogFactory","default","mode","serverId","on","initPage","e","showSortMenu","name","translate","id","callback","button","target","btnSelectView","showLayoutMenu","split","detail","saveViewSetting","renderTab","destroy"],"mappings":"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","file":"episodes.js","sourcesContent":["define(['loading', 'events', 'libraryBrowser', 'imageLoader', 'listView', 'cardBuilder', 'userSettings', 'globalize', 'emby-itemscontainer'], function (loading, events, libraryBrowser, imageLoader, listView, cardBuilder, userSettings, globalize) {\n    'use strict';\n\n    return function (view, params, tabContent) {\n        function getPageData(context) {\n            var key = getSavedQueryKey(context);\n            var pageData = data[key];\n\n            if (!pageData) {\n                pageData = data[key] = {\n                    query: {\n                        SortBy: 'SeriesSortName,SortName',\n                        SortOrder: 'Ascending',\n                        IncludeItemTypes: 'Episode',\n                        Recursive: true,\n                        Fields: 'PrimaryImageAspectRatio,MediaSourceCount,UserData',\n                        IsMissing: false,\n                        ImageTypeLimit: 1,\n                        EnableImageTypes: 'Primary,Backdrop,Thumb',\n                        StartIndex: 0\n                    },\n                    view: libraryBrowser.getSavedView(key) || 'Poster'\n                };\n\n                if (userSettings.libraryPageSize() > 0) {\n                    pageData.query['Limit'] = userSettings.libraryPageSize();\n                }\n\n                pageData.query.ParentId = params.topParentId;\n                libraryBrowser.loadSavedQueryValues(key, pageData.query);\n            }\n\n            return pageData;\n        }\n\n        function getQuery(context) {\n            return getPageData(context).query;\n        }\n\n        function getSavedQueryKey(context) {\n            if (!context.savedQueryKey) {\n                context.savedQueryKey = libraryBrowser.getSavedQueryKey('episodes');\n            }\n\n            return context.savedQueryKey;\n        }\n\n        function onViewStyleChange() {\n            var viewStyle = self.getCurrentViewStyle();\n            var itemsContainer = tabContent.querySelector('.itemsContainer');\n\n            if ('List' == viewStyle) {\n                itemsContainer.classList.add('vertical-list');\n                itemsContainer.classList.remove('vertical-wrap');\n            } else {\n                itemsContainer.classList.remove('vertical-list');\n                itemsContainer.classList.add('vertical-wrap');\n            }\n\n            itemsContainer.innerHTML = '';\n        }\n\n        function reloadItems(page) {\n            loading.show();\n            isLoading = true;\n            var query = getQuery(page);\n            ApiClient.getItems(Dashboard.getCurrentUserId(), query).then(function (result) {\n                function onNextPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    if (userSettings.libraryPageSize() > 0) {\n                        query.StartIndex += query.Limit;\n                    }\n                    reloadItems(tabContent);\n                }\n\n                function onPreviousPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    if (userSettings.libraryPageSize() > 0) {\n                        query.StartIndex = Math.max(0, query.StartIndex - query.Limit);\n                    }\n                    reloadItems(tabContent);\n                }\n\n                window.scrollTo(0, 0);\n                var html;\n                var pagingHtml = libraryBrowser.getQueryPagingHtml({\n                    startIndex: query.StartIndex,\n                    limit: query.Limit,\n                    totalRecordCount: result.TotalRecordCount,\n                    showLimit: false,\n                    updatePageSizeSetting: false,\n                    addLayoutButton: false,\n                    sortButton: false,\n                    filterButton: false\n                });\n                var viewStyle = self.getCurrentViewStyle();\n                var itemsContainer = tabContent.querySelector('.itemsContainer');\n                if (viewStyle == 'List') {\n                    html = listView.getListViewHtml({\n                        items: result.Items,\n                        sortBy: query.SortBy,\n                        showParentTitle: true\n                    });\n                } else if (viewStyle == 'PosterCard') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'backdrop',\n                        showTitle: true,\n                        showParentTitle: true,\n                        scalable: true,\n                        cardLayout: true\n                    });\n                } else {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'backdrop',\n                        showTitle: true,\n                        showParentTitle: true,\n                        overlayText: false,\n                        centerText: true,\n                        scalable: true,\n                        overlayPlayButton: true\n                    });\n                }\n                var i;\n                var length;\n                var elems;\n\n                elems = tabContent.querySelectorAll('.paging');\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].innerHTML = pagingHtml;\n                }\n\n                elems = tabContent.querySelectorAll('.btnNextPage');\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener('click', onNextPageClick);\n                }\n\n                elems = tabContent.querySelectorAll('.btnPreviousPage');\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener('click', onPreviousPageClick);\n                }\n\n                itemsContainer.innerHTML = html;\n                imageLoader.lazyChildren(itemsContainer);\n                libraryBrowser.saveQueryValues(getSavedQueryKey(page), query);\n                loading.hide();\n                isLoading = false;\n\n                require(['autoFocuser'], function (autoFocuser) {\n                    autoFocuser.autoFocus(page);\n                });\n            });\n        }\n\n        var self = this;\n        var data = {};\n        var isLoading = false;\n\n        self.showFilterMenu = function () {\n            require(['components/filterdialog/filterdialog'], function ({default: filterDialogFactory}) {\n                var filterDialog = new filterDialogFactory({\n                    query: getQuery(tabContent),\n                    mode: 'episodes',\n                    serverId: ApiClient.serverId()\n                });\n                events.on(filterDialog, 'filterchange', function () {\n                    reloadItems(tabContent);\n                });\n                filterDialog.show();\n            });\n        };\n\n        self.getCurrentViewStyle = function () {\n            return getPageData(tabContent).view;\n        };\n\n        function initPage(tabContent) {\n            tabContent.querySelector('.btnFilter').addEventListener('click', function () {\n                self.showFilterMenu();\n            });\n            tabContent.querySelector('.btnSort').addEventListener('click', function (e) {\n                libraryBrowser.showSortMenu({\n                    items: [{\n                        name: globalize.translate('OptionNameSort'),\n                        id: 'SeriesSortName,SortName'\n                    }, {\n                        name: globalize.translate('OptionTvdbRating'),\n                        id: 'CommunityRating,SeriesSortName,SortName'\n                    }, {\n                        name: globalize.translate('OptionDateAdded'),\n                        id: 'DateCreated,SeriesSortName,SortName'\n                    }, {\n                        name: globalize.translate('OptionPremiereDate'),\n                        id: 'PremiereDate,SeriesSortName,SortName'\n                    }, {\n                        name: globalize.translate('OptionDatePlayed'),\n                        id: 'DatePlayed,SeriesSortName,SortName'\n                    }, {\n                        name: globalize.translate('OptionParentalRating'),\n                        id: 'OfficialRating,SeriesSortName,SortName'\n                    }, {\n                        name: globalize.translate('OptionPlayCount'),\n                        id: 'PlayCount,SeriesSortName,SortName'\n                    }, {\n                        name: globalize.translate('OptionRuntime'),\n                        id: 'Runtime,SeriesSortName,SortName'\n                    }],\n                    callback: function () {\n                        reloadItems(tabContent);\n                    },\n                    query: getQuery(tabContent),\n                    button: e.target\n                });\n            });\n            var btnSelectView = tabContent.querySelector('.btnSelectView');\n            btnSelectView.addEventListener('click', function (e) {\n                libraryBrowser.showLayoutMenu(e.target, self.getCurrentViewStyle(), 'List,Poster,PosterCard'.split(','));\n            });\n            btnSelectView.addEventListener('layoutchange', function (e) {\n                var viewStyle = e.detail.viewStyle;\n                getPageData(tabContent).view = viewStyle;\n                libraryBrowser.saveViewSetting(getSavedQueryKey(tabContent), viewStyle);\n                onViewStyleChange();\n                reloadItems(tabContent);\n            });\n        }\n\n        initPage(tabContent);\n        onViewStyleChange();\n\n        self.renderTab = function () {\n            reloadItems(tabContent);\n        };\n\n        self.destroy = function () {};\n    };\n});\n"]}