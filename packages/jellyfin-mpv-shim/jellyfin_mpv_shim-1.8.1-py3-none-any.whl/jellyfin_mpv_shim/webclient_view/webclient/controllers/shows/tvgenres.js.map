{"version":3,"sources":["controllers/shows/tvgenres.js"],"names":["define","layoutManager","loading","libraryBrowser","cardBuilder","lazyLoader","appHost","globalize","appRouter","dom","view","params","tabContent","getPageData","key","getSavedQueryKey","pageData","data","query","SortBy","SortOrder","IncludeItemTypes","Recursive","EnableTotalRecordCount","ParentId","topParentId","loadSavedQueryValues","getQuery","enableScrollX","desktop","getThumbShape","getPortraitShape","fillItemsContainer","entry","elem","target","id","getAttribute","viewStyle","self","getCurrentViewStyle","limit","Fields","ImageTypeLimit","EnableImageTypes","Limit","GenreIds","ApiClient","getItems","getCurrentUserId","then","result","supports","buildCards","Items","itemsContainer","shape","preferThumb","showTitle","scalable","centerText","overlayMoreButton","allowBottomPadding","cardLayout","showYear","length","querySelector","classList","remove","promise","this","getViewStyles","split","setCurrentViewStyle","saveViewSetting","fullyReload","preRender","renderTab","enableViewSelection","getPromise","show","getGenres","reloadItems","context","html","items","i","item","getRouteUrl","parentId","Id","Name","scrollXClass","tv","translate","innerHTML","lazyChildren","saveQueryValues","hide"],"mappings":"AAAA,aAAAA,OAAO,CAAC,gBAAiB,UAAW,iBAAkB,cAAe,aAAc,UAAW,YAAa,YAAa,MAAO,gBAAgB,SAAUC,cAAeC,QAASC,eAAgBC,YAAaC,WAAYC,QAASC,UAAWC,UAAWC,KAGrP,OAAO,SAAUC,KAAMC,OAAQC,YAC3B,SAASC,cACL,IAAIC,IAAMC,mBACNC,SAAWC,KAAKH,KAiBpB,OAfKE,YACDA,SAAWC,KAAKH,KAAO,CACnBI,MAAO,CACHC,OAAQ,WACRC,UAAW,YACXC,iBAAkB,SAClBC,WAAW,EACXC,wBAAwB,GAE5Bb,KAAM,WAEDQ,MAAMM,SAAWb,OAAOc,YACjCtB,eAAeuB,qBAAqBZ,IAAKE,SAASE,QAG/CF,SAGX,SAASW,WACL,OAAOd,cAAcK,MAGzB,SAASH,mBACL,OAAOZ,eAAeY,iBAAiB,gBAS3C,SAASa,gBACL,OAAQ3B,cAAc4B,QAG1B,SAASC,gBACL,OAAOF,gBAAkB,mBAAqB,WAGlD,SAASG,mBACL,OAAOH,gBAAkB,mBAAqB,WAGlD,SAASI,mBAAmBC,OACxB,IAAIC,KAAOD,MAAME,OACbC,GAAKF,KAAKG,aAAa,WACvBC,UAAYC,KAAKC,sBACjBC,MAAQ,SAAWH,WAAa,aAAeA,UAAY,EAAI,EAE/DV,kBACAa,MAAQ,IAGZ,IACIvB,MAAQ,CACRC,OAAQ,WACRC,UAAW,YACXC,iBAAkB,SAClBC,WAAW,EACXoB,OAAQ,yDACRC,eAAgB,EAChBC,iBARmB,SAAWN,WAAa,aAAeA,UAAY,yBAA2B,UASjGO,MAAOJ,MACPK,SAAUV,GACVb,wBAAwB,EACxBC,SAAUb,OAAOc,aAErBsB,UAAUC,SAASD,UAAUE,mBAAoB/B,OAAOgC,MAAK,SAAUC,QACvC7C,QAAQ8C,SAAS,iBAE5B,SAAbd,UACAlC,YAAYiD,WAAWF,OAAOG,MAAO,CACjCC,eAAgBrB,KAChBsB,MAAO1B,gBACP2B,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,YAAY,EACZC,mBAAmB,EACnBC,oBAAoB,IAEJ,aAAbxB,UACPlC,YAAYiD,WAAWF,OAAOG,MAAO,CACjCC,eAAgBrB,KAChBsB,MAAO1B,gBACP2B,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,YAAY,EACZG,YAAY,EACZC,UAAU,IAEM,cAAb1B,UACPlC,YAAYiD,WAAWF,OAAOG,MAAO,CACjCC,eAAgBrB,KAChBsB,MAAOzB,mBACP2B,WAAW,EACXC,UAAU,EACVC,YAAY,EACZG,YAAY,EACZC,UAAU,IAEM,UAAb1B,WACPlC,YAAYiD,WAAWF,OAAOG,MAAO,CACjCC,eAAgBrB,KAChBsB,MAAOzB,mBACP4B,UAAU,EACVD,WAAW,EACXE,YAAY,EACZI,UAAU,EACVH,mBAAmB,EACnBC,oBAAoB,IAGxBX,OAAOG,MAAMW,QAAU/C,MAAM2B,OAC7BjC,WAAWsD,cAAc,oBAAsB9B,GAAK,oBAAoB+B,UAAUC,OAAO,WA4DrG,IAkBIC,QAlBA9B,KAAO+B,KACPrD,KAAO,GAEXsB,KAAKgC,cAAgB,WACjB,MAAO,oCAAoCC,MAAM,MAGrDjC,KAAKC,oBAAsB,WACvB,OAAO3B,cAAcH,MAGzB6B,KAAKkC,oBAAsB,SAAUnC,WACjCzB,cAAcH,KAAO4B,UACrBnC,eAAeuE,gBAAgB3D,mBAAoBuB,WAlBvD,SAASqC,cACLpC,KAAKqC,YACLrC,KAAKsC,YAiBLF,IAGJpC,KAAKuC,qBAAsB,EAG3BvC,KAAKqC,UAAY,WACbP,QA3KJ,SAASU,aACL7E,QAAQ8E,OACR,IAAI9D,MAAQS,WACZ,OAAOoB,UAAUkC,UAAUlC,UAAUE,mBAAoB/B,OAwK/C6D,IAGdxC,KAAKsC,UAAY,YA/EjB,SAASK,YAAYC,QAASd,SAC1B,IAAInD,MAAQS,WACZ0C,QAAQnB,MAAK,SAAUC,QAKnB,IAJA,IAAIjB,KAAOiD,QAAQjB,cAAc,UAC7BkB,KAAO,GACPC,MAAQlC,OAAOG,MAEVgC,EAAI,EAAGrB,OAASoB,MAAMpB,OAAQqB,EAAIrB,OAAQqB,IAAK,CACpD,IAAIC,KAAOF,MAAMC,GAajB,GAZAF,MAAQ,gCACRA,MAAQ,8EACRA,MAAQ,iCAAmC5E,UAAUgF,YAAYD,KAAM,CACnEJ,QAAS,UACTM,SAAU9E,OAAOc,cAChB,qFAAuF8D,KAAKG,GAAK,KACtGN,MAAQ,+CACRA,MAAQG,KAAKI,KACbP,MAAQ,QACRA,MAAQ,0DACRA,MAAQ,OACRA,MAAQ,SACJxD,gBAAiB,CACjB,IAAIgE,aAAe,wBACf3F,cAAc4F,KACdD,cAAgB,gEAEpBR,MAAQ,uDAAyDQ,aAAe,4CAA8CL,KAAKG,GAAK,UAExIN,MAAQ,6GAA+GG,KAAKG,GAAK,KAErIN,MAAQ,SACRA,MAAQ,SAGPjC,OAAOG,MAAMW,SACdmB,KAAO,GAEPA,MAAQ,6CACRA,MAAQ,OAAS7E,UAAUuF,UAAU,sBAAwB,QAC7DV,MAAQ,MAAQ7E,UAAUuF,UAAU,4BAA8B,OAClEV,MAAQ,UAGZlD,KAAK6D,UAAYX,KACjB/E,WAAW2F,aAAa9D,KAAMF,oBAC9B7B,eAAe8F,gBAAgBlF,mBAAoBG,OACnDhB,QAAQgG,UAkCZhB,CAAYtE,WAAYyD","file":"tvgenres.js","sourcesContent":["define(['layoutManager', 'loading', 'libraryBrowser', 'cardBuilder', 'lazyLoader', 'apphost', 'globalize', 'appRouter', 'dom', 'emby-button'], function (layoutManager, loading, libraryBrowser, cardBuilder, lazyLoader, appHost, globalize, appRouter, dom) {\n    'use strict';\n\n    return function (view, params, tabContent) {\n        function getPageData() {\n            var key = getSavedQueryKey();\n            var pageData = data[key];\n\n            if (!pageData) {\n                pageData = data[key] = {\n                    query: {\n                        SortBy: 'SortName',\n                        SortOrder: 'Ascending',\n                        IncludeItemTypes: 'Series',\n                        Recursive: true,\n                        EnableTotalRecordCount: false\n                    },\n                    view: 'Poster'\n                };\n                pageData.query.ParentId = params.topParentId;\n                libraryBrowser.loadSavedQueryValues(key, pageData.query);\n            }\n\n            return pageData;\n        }\n\n        function getQuery() {\n            return getPageData().query;\n        }\n\n        function getSavedQueryKey() {\n            return libraryBrowser.getSavedQueryKey('seriesgenres');\n        }\n\n        function getPromise() {\n            loading.show();\n            var query = getQuery();\n            return ApiClient.getGenres(ApiClient.getCurrentUserId(), query);\n        }\n\n        function enableScrollX() {\n            return !layoutManager.desktop;\n        }\n\n        function getThumbShape() {\n            return enableScrollX() ? 'overflowBackdrop' : 'backdrop';\n        }\n\n        function getPortraitShape() {\n            return enableScrollX() ? 'overflowPortrait' : 'portrait';\n        }\n\n        function fillItemsContainer(entry) {\n            var elem = entry.target;\n            var id = elem.getAttribute('data-id');\n            var viewStyle = self.getCurrentViewStyle();\n            var limit = 'Thumb' == viewStyle || 'ThumbCard' == viewStyle ? 5 : 9;\n\n            if (enableScrollX()) {\n                limit = 10;\n            }\n\n            var enableImageTypes = 'Thumb' == viewStyle || 'ThumbCard' == viewStyle ? 'Primary,Backdrop,Thumb' : 'Primary';\n            var query = {\n                SortBy: 'SortName',\n                SortOrder: 'Ascending',\n                IncludeItemTypes: 'Series',\n                Recursive: true,\n                Fields: 'PrimaryImageAspectRatio,MediaSourceCount,BasicSyncInfo',\n                ImageTypeLimit: 1,\n                EnableImageTypes: enableImageTypes,\n                Limit: limit,\n                GenreIds: id,\n                EnableTotalRecordCount: false,\n                ParentId: params.topParentId\n            };\n            ApiClient.getItems(ApiClient.getCurrentUserId(), query).then(function (result) {\n                var supportsImageAnalysis = appHost.supports('imageanalysis');\n\n                if (viewStyle == 'Thumb') {\n                    cardBuilder.buildCards(result.Items, {\n                        itemsContainer: elem,\n                        shape: getThumbShape(),\n                        preferThumb: true,\n                        showTitle: true,\n                        scalable: true,\n                        centerText: true,\n                        overlayMoreButton: true,\n                        allowBottomPadding: false\n                    });\n                } else if (viewStyle == 'ThumbCard') {\n                    cardBuilder.buildCards(result.Items, {\n                        itemsContainer: elem,\n                        shape: getThumbShape(),\n                        preferThumb: true,\n                        showTitle: true,\n                        scalable: true,\n                        centerText: false,\n                        cardLayout: true,\n                        showYear: true\n                    });\n                } else if (viewStyle == 'PosterCard') {\n                    cardBuilder.buildCards(result.Items, {\n                        itemsContainer: elem,\n                        shape: getPortraitShape(),\n                        showTitle: true,\n                        scalable: true,\n                        centerText: false,\n                        cardLayout: true,\n                        showYear: true\n                    });\n                } else if (viewStyle == 'Poster') {\n                    cardBuilder.buildCards(result.Items, {\n                        itemsContainer: elem,\n                        shape: getPortraitShape(),\n                        scalable: true,\n                        showTitle: true,\n                        centerText: true,\n                        showYear: true,\n                        overlayMoreButton: true,\n                        allowBottomPadding: false\n                    });\n                }\n                if (result.Items.length >= query.Limit) {\n                    tabContent.querySelector('.btnMoreFromGenre' + id + ' .material-icons').classList.remove('hide');\n                }\n            });\n        }\n\n        function reloadItems(context, promise) {\n            var query = getQuery();\n            promise.then(function (result) {\n                var elem = context.querySelector('#items');\n                var html = '';\n                var items = result.Items;\n\n                for (var i = 0, length = items.length; i < length; i++) {\n                    var item = items[i];\n                    html += '<div class=\"verticalSection\">';\n                    html += '<div class=\"sectionTitleContainer sectionTitleContainer-cards padded-left\">';\n                    html += '<a is=\"emby-linkbutton\" href=\"' + appRouter.getRouteUrl(item, {\n                        context: 'tvshows',\n                        parentId: params.topParentId\n                    }) + '\" class=\"more button-flat button-flat-mini sectionTitleTextButton btnMoreFromGenre' + item.Id + '\">';\n                    html += '<h2 class=\"sectionTitle sectionTitle-cards\">';\n                    html += item.Name;\n                    html += '</h2>';\n                    html += '<span class=\"material-icons hide chevron_right\"></span>';\n                    html += '</a>';\n                    html += '</div>';\n                    if (enableScrollX()) {\n                        var scrollXClass = 'scrollX hiddenScrollX';\n                        if (layoutManager.tv) {\n                            scrollXClass += 'smoothScrollX padded-top-focusscale padded-bottom-focusscale';\n                        }\n                        html += '<div is=\"emby-itemscontainer\" class=\"itemsContainer ' + scrollXClass + ' lazy padded-left padded-right\" data-id=\"' + item.Id + '\">';\n                    } else {\n                        html += '<div is=\"emby-itemscontainer\" class=\"itemsContainer vertical-wrap lazy padded-left padded-right\" data-id=\"' + item.Id + '\">';\n                    }\n                    html += '</div>';\n                    html += '</div>';\n                }\n\n                if (!result.Items.length) {\n                    html = '';\n\n                    html += '<div class=\"noItemsMessage centerMessage\">';\n                    html += '<h1>' + globalize.translate('MessageNothingHere') + '</h1>';\n                    html += '<p>' + globalize.translate('MessageNoGenresAvailable') + '</p>';\n                    html += '</div>';\n                }\n\n                elem.innerHTML = html;\n                lazyLoader.lazyChildren(elem, fillItemsContainer);\n                libraryBrowser.saveQueryValues(getSavedQueryKey(), query);\n                loading.hide();\n            });\n        }\n\n        function fullyReload() {\n            self.preRender();\n            self.renderTab();\n        }\n\n        var self = this;\n        var data = {};\n\n        self.getViewStyles = function () {\n            return 'Poster,PosterCard,Thumb,ThumbCard'.split(',');\n        };\n\n        self.getCurrentViewStyle = function () {\n            return getPageData().view;\n        };\n\n        self.setCurrentViewStyle = function (viewStyle) {\n            getPageData().view = viewStyle;\n            libraryBrowser.saveViewSetting(getSavedQueryKey(), viewStyle);\n            fullyReload();\n        };\n\n        self.enableViewSelection = true;\n        var promise;\n\n        self.preRender = function () {\n            promise = getPromise();\n        };\n\n        self.renderTab = function () {\n            reloadItems(tabContent, promise);\n        };\n    };\n});\n"]}