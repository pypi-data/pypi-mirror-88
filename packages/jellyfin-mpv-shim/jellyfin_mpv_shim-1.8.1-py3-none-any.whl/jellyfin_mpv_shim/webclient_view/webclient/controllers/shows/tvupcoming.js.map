{"version":3,"sources":["controllers/shows/tvupcoming.js"],"names":["define","layoutManager","loading","datetime","libraryBrowser","cardBuilder","appHost","imageLoader","globalize","loadUpcoming","context","params","promise","then","result","items","Items","length","querySelector","style","display","renderUpcoming","elem","i","groups","currentGroupName","currentGroup","item","dateText","PremiereDate","premiereDate","parseISO8601Date","isRelativeDay","translate","toLocaleDateString","weekday","month","day","err","console","error","push","name","html","group","allowBottomPadding","enableScrollX","scrollXClass","tv","supports","getCardsHtml","showLocationTypeIndicator","shape","showTitle","preferThumb","lazy","showDetailsMenu","centerText","showParentTitle","overlayText","cardLayout","overlayMoreButton","missingIndicator","innerHTML","lazyChildren","hide","desktop","view","tabContent","upcomingPromise","this","preRender","getUpcomingPromise","show","query","Limit","Fields","UserId","ApiClient","getCurrentUserId","ImageTypeLimit","EnableImageTypes","EnableTotalRecordCount","ParentId","topParentId","getJSON","getUrl","renderTab"],"mappings":"AAAA,aAAAA,OAAO,CAAC,gBAAiB,UAAW,WAAY,iBAAkB,cAAe,UAAW,cAAe,YAAa,eAAgB,wBAAwB,SAAUC,cAAeC,QAASC,SAAUC,eAAgBC,YAAaC,QAASC,YAAaC,WAiB3P,SAASC,aAAaC,QAASC,OAAQC,SACnCA,QAAQC,MAAK,SAAUC,QACnB,IAAIC,MAAQD,OAAOE,MAEfD,MAAME,OACNP,QAAQQ,cAAc,mBAAmBC,MAAMC,QAAU,OAEzDV,QAAQQ,cAAc,mBAAmBC,MAAMC,QAAU,QAgBrE,SAASC,eAAeC,KAAMP,OAC1B,IAAIQ,EACAN,OACAO,OAAS,GACTC,iBAAmB,GACnBC,aAAe,GAEnB,IAAKH,EAAI,EAAGN,OAASF,MAAME,OAAQM,EAAIN,OAAQM,IAAK,CAChD,IAAII,KAAOZ,MAAMQ,GACbK,SAAW,GAEf,GAAID,KAAKE,aACL,IACI,IAAIC,aAAe3B,SAAS4B,iBAAiBJ,KAAKE,cAAc,GAChED,SAAWzB,SAAS6B,cAAcF,cAAe,GAAKtB,UAAUyB,UAAU,aAAe9B,SAAS+B,mBAAmBJ,aAAc,CAC/HK,QAAS,OACTC,MAAO,QACPC,IAAK,YAEX,MAAOC,KACLC,QAAQC,MAAM,iDAIlBZ,UAAYH,kBACRC,aAAaT,QACbO,OAAOiB,KAAK,CACRC,KAAMjB,iBACNV,MAAOW,eAIfD,iBAAmBG,SACnBF,aAAe,CAACC,OAEhBD,aAAae,KAAKd,MAI1B,IAAIgB,KAAO,GAEX,IAAKpB,EAAI,EAAGN,OAASO,OAAOP,OAAQM,EAAIN,OAAQM,IAAK,CACjD,IAAIqB,MAAQpB,OAAOD,GACnBoB,MAAQ,gCACRA,MAAQ,2DAA6DC,MAAMF,KAAO,QAClF,IAAIG,oBAAqB,EAEzB,GAAIC,gBAAiB,CACjBD,oBAAqB,EACrB,IAAIE,aAAe,wBAEf9C,cAAc+C,KACdD,cAAgB,kBAGpBJ,MAAQ,uDAAyDI,aAAe,mCAEhFJ,MAAQ,+FAGgBrC,QAAQ2C,SAAS,kBACrB,EACxBN,MAAQtC,YAAY6C,aAAa,CAC7BnC,MAAO6B,MAAM7B,MACboC,2BAA2B,EAC3BC,MApEDN,gBAAkB,mBAAqB,WAqEtCO,WAAW,EACXC,aAAa,EACbC,MAAM,EACNC,iBAAiB,EACjBC,YAAY,EACZC,iBAAiB,EACjBC,aAAa,EACbd,mBAAoBA,mBACpBe,YAboB,EAcpBC,mBAAmB,EACnBC,kBAAkB,IAEtBnB,MAAQ,SACRA,MAAQ,SAGZrB,KAAKyC,UAAYpB,KACjBpC,YAAYyD,aAAa1C,MAhGrBD,CAAeX,QAAQQ,cAAc,kBAAmBH,OACxDb,QAAQ+D,UAIhB,SAASnB,gBACL,OAAQ7C,cAAciE,QA6F1B,OAAO,SAAUC,KAAMxD,OAAQyD,YAC3B,IAAIC,gBACOC,KAENC,UAAY,WACbF,gBAhIR,SAASG,mBAAmB9D,QAASC,QACjCT,QAAQuE,OACR,IAAIC,MAAQ,CACRC,MAAO,GACPC,OAAQ,mBACRC,OAAQC,UAAUC,mBAClBC,eAAgB,EAChBC,iBAAkB,gCAClBC,wBAAwB,GAG5B,OADAR,MAAMS,SAAWxE,OAAOyE,YACjBN,UAAUO,QAAQP,UAAUQ,OAAO,iBAAkBZ,QAqHtCF,CAAmBL,EAAMxD,SAHpC2D,KAMNiB,UAAY,WACb9E,aAAa2D,WAAYzD,EAAQ0D","file":"tvupcoming.js","sourcesContent":["define(['layoutManager', 'loading', 'datetime', 'libraryBrowser', 'cardBuilder', 'apphost', 'imageLoader', 'globalize', 'scrollStyles', 'emby-itemscontainer'], function (layoutManager, loading, datetime, libraryBrowser, cardBuilder, appHost, imageLoader, globalize) {\n    'use strict';\n\n    function getUpcomingPromise(context, params) {\n        loading.show();\n        var query = {\n            Limit: 48,\n            Fields: 'AirTime,UserData',\n            UserId: ApiClient.getCurrentUserId(),\n            ImageTypeLimit: 1,\n            EnableImageTypes: 'Primary,Backdrop,Banner,Thumb',\n            EnableTotalRecordCount: false\n        };\n        query.ParentId = params.topParentId;\n        return ApiClient.getJSON(ApiClient.getUrl('Shows/Upcoming', query));\n    }\n\n    function loadUpcoming(context, params, promise) {\n        promise.then(function (result) {\n            var items = result.Items;\n\n            if (items.length) {\n                context.querySelector('.noItemsMessage').style.display = 'none';\n            } else {\n                context.querySelector('.noItemsMessage').style.display = 'block';\n            }\n\n            renderUpcoming(context.querySelector('#upcomingItems'), items);\n            loading.hide();\n        });\n    }\n\n    function enableScrollX() {\n        return !layoutManager.desktop;\n    }\n\n    function getThumbShape() {\n        return enableScrollX() ? 'overflowBackdrop' : 'backdrop';\n    }\n\n    function renderUpcoming(elem, items) {\n        var i;\n        var length;\n        var groups = [];\n        var currentGroupName = '';\n        var currentGroup = [];\n\n        for (i = 0, length = items.length; i < length; i++) {\n            var item = items[i];\n            var dateText = '';\n\n            if (item.PremiereDate) {\n                try {\n                    var premiereDate = datetime.parseISO8601Date(item.PremiereDate, true);\n                    dateText = datetime.isRelativeDay(premiereDate, -1) ? globalize.translate('Yesterday') : datetime.toLocaleDateString(premiereDate, {\n                        weekday: 'long',\n                        month: 'short',\n                        day: 'numeric'\n                    });\n                } catch (err) {\n                    console.error('error parsing timestamp for upcoming tv shows');\n                }\n            }\n\n            if (dateText != currentGroupName) {\n                if (currentGroup.length) {\n                    groups.push({\n                        name: currentGroupName,\n                        items: currentGroup\n                    });\n                }\n\n                currentGroupName = dateText;\n                currentGroup = [item];\n            } else {\n                currentGroup.push(item);\n            }\n        }\n\n        var html = '';\n\n        for (i = 0, length = groups.length; i < length; i++) {\n            var group = groups[i];\n            html += '<div class=\"verticalSection\">';\n            html += '<h2 class=\"sectionTitle sectionTitle-cards padded-left\">' + group.name + '</h2>';\n            var allowBottomPadding = true;\n\n            if (enableScrollX()) {\n                allowBottomPadding = false;\n                var scrollXClass = 'scrollX hiddenScrollX';\n\n                if (layoutManager.tv) {\n                    scrollXClass += ' smoothScrollX';\n                }\n\n                html += '<div is=\"emby-itemscontainer\" class=\"itemsContainer ' + scrollXClass + ' padded-left padded-right\">';\n            } else {\n                html += '<div is=\"emby-itemscontainer\" class=\"itemsContainer vertical-wrap padded-left padded-right\">';\n            }\n\n            var supportsImageAnalysis = appHost.supports('imageanalysis');\n            supportsImageAnalysis = false;\n            html += cardBuilder.getCardsHtml({\n                items: group.items,\n                showLocationTypeIndicator: false,\n                shape: getThumbShape(),\n                showTitle: true,\n                preferThumb: true,\n                lazy: true,\n                showDetailsMenu: true,\n                centerText: !supportsImageAnalysis,\n                showParentTitle: true,\n                overlayText: false,\n                allowBottomPadding: allowBottomPadding,\n                cardLayout: supportsImageAnalysis,\n                overlayMoreButton: true,\n                missingIndicator: false\n            });\n            html += '</div>';\n            html += '</div>';\n        }\n\n        elem.innerHTML = html;\n        imageLoader.lazyChildren(elem);\n    }\n\n    return function (view, params, tabContent) {\n        var upcomingPromise;\n        var self = this;\n\n        self.preRender = function () {\n            upcomingPromise = getUpcomingPromise(view, params);\n        };\n\n        self.renderTab = function () {\n            loadUpcoming(tabContent, params, upcomingPromise);\n        };\n    };\n});\n"]}