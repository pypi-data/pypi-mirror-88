{"version":3,"sources":["controllers/shows/tvshows.js"],"names":["define","layoutManager","loading","events","libraryBrowser","imageLoader","listView","cardBuilder","alphaPicker","userSettings","globalize","view","params","tabContent","getPageData","context","key","getSavedQueryKey","pageData","data","query","SortBy","SortOrder","IncludeItemTypes","Recursive","Fields","ImageTypeLimit","EnableImageTypes","StartIndex","getSavedView","libraryPageSize","ParentId","topParentId","loadSavedQueryValues","getQuery","savedQueryKey","onViewStyleChange","viewStyle","self","getCurrentViewStyle","itemsContainer","querySelector","classList","add","remove","innerHTML","reloadItems","page","show","isLoading","ApiClient","getItems","getCurrentUserId","then","result","onNextPageClick","Limit","onPreviousPageClick","Math","max","html","window","scrollTo","updateFilterControls","i","length","pagingHtml","getQueryPagingHtml","startIndex","limit","totalRecordCount","TotalRecordCount","showLimit","updatePageSizeSetting","addLayoutButton","sortButton","filterButton","getCardsHtml","items","Items","shape","preferThumb","overlayMoreButton","showTitle","centerText","cardLayout","showYear","preferBanner","getListViewHtml","sortBy","lazy","elems","querySelectorAll","addEventListener","lazyChildren","saveQueryValues","hide","require","autoFocuser","autoFocus","value","NameStartsWithOrGreater","this","showFilterMenu","_ref","filterDialog","filterDialogFactory","default","mode","serverId","on","initPage","alphaPickerElement","e","newValue","detail","element","valueChangeEvent","showSortMenu","name","translate","id","callback","button","target","btnSelectView","showLayoutMenu","split","saveViewSetting","renderTab","destroy"],"mappings":"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","file":"tvshows.js","sourcesContent":["define(['layoutManager', 'loading', 'events', 'libraryBrowser', 'imageLoader', 'listView', 'cardBuilder', 'alphaPicker', 'userSettings', 'globalize', 'emby-itemscontainer'], function (layoutManager, loading, events, libraryBrowser, imageLoader, listView, cardBuilder, alphaPicker, userSettings, globalize) {\n    'use strict';\n\n    return function (view, params, tabContent) {\n        function getPageData(context) {\n            var key = getSavedQueryKey(context);\n            var pageData = data[key];\n\n            if (!pageData) {\n                pageData = data[key] = {\n                    query: {\n                        SortBy: 'SortName',\n                        SortOrder: 'Ascending',\n                        IncludeItemTypes: 'Series',\n                        Recursive: true,\n                        Fields: 'PrimaryImageAspectRatio,BasicSyncInfo',\n                        ImageTypeLimit: 1,\n                        EnableImageTypes: 'Primary,Backdrop,Banner,Thumb',\n                        StartIndex: 0\n                    },\n                    view: libraryBrowser.getSavedView(key) || 'Poster'\n                };\n\n                if (userSettings.libraryPageSize() > 0) {\n                    pageData.query['Limit'] = userSettings.libraryPageSize();\n                }\n\n                pageData.query.ParentId = params.topParentId;\n                libraryBrowser.loadSavedQueryValues(key, pageData.query);\n            }\n\n            return pageData;\n        }\n\n        function getQuery(context) {\n            return getPageData(context).query;\n        }\n\n        function getSavedQueryKey(context) {\n            if (!context.savedQueryKey) {\n                context.savedQueryKey = libraryBrowser.getSavedQueryKey('series');\n            }\n\n            return context.savedQueryKey;\n        }\n\n        function onViewStyleChange() {\n            var viewStyle = self.getCurrentViewStyle();\n            var itemsContainer = tabContent.querySelector('.itemsContainer');\n\n            if ('List' == viewStyle) {\n                itemsContainer.classList.add('vertical-list');\n                itemsContainer.classList.remove('vertical-wrap');\n            } else {\n                itemsContainer.classList.remove('vertical-list');\n                itemsContainer.classList.add('vertical-wrap');\n            }\n\n            itemsContainer.innerHTML = '';\n        }\n\n        function reloadItems(page) {\n            loading.show();\n            isLoading = true;\n            var query = getQuery(page);\n            ApiClient.getItems(ApiClient.getCurrentUserId(), query).then(function (result) {\n                function onNextPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    if (userSettings.libraryPageSize() > 0) {\n                        query.StartIndex += query.Limit;\n                    }\n                    reloadItems(tabContent);\n                }\n\n                function onPreviousPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    if (userSettings.libraryPageSize() > 0) {\n                        query.StartIndex = Math.max(0, query.StartIndex - query.Limit);\n                    }\n                    reloadItems(tabContent);\n                }\n\n                window.scrollTo(0, 0);\n                updateFilterControls(page);\n                var html;\n                var pagingHtml = libraryBrowser.getQueryPagingHtml({\n                    startIndex: query.StartIndex,\n                    limit: query.Limit,\n                    totalRecordCount: result.TotalRecordCount,\n                    showLimit: false,\n                    updatePageSizeSetting: false,\n                    addLayoutButton: false,\n                    sortButton: false,\n                    filterButton: false\n                });\n                var viewStyle = self.getCurrentViewStyle();\n                if (viewStyle == 'Thumb') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'backdrop',\n                        preferThumb: true,\n                        context: 'tvshows',\n                        overlayMoreButton: true,\n                        showTitle: true,\n                        centerText: true\n                    });\n                } else if (viewStyle == 'ThumbCard') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'backdrop',\n                        preferThumb: true,\n                        context: 'tvshows',\n                        cardLayout: true,\n                        showTitle: true,\n                        showYear: true,\n                        centerText: true\n                    });\n                } else if (viewStyle == 'Banner') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'banner',\n                        preferBanner: true,\n                        context: 'tvshows'\n                    });\n                } else if (viewStyle == 'List') {\n                    html = listView.getListViewHtml({\n                        items: result.Items,\n                        context: 'tvshows',\n                        sortBy: query.SortBy\n                    });\n                } else if (viewStyle == 'PosterCard') {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'portrait',\n                        context: 'tvshows',\n                        showTitle: true,\n                        showYear: true,\n                        centerText: true,\n                        cardLayout: true\n                    });\n                } else {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: 'portrait',\n                        context: 'tvshows',\n                        centerText: true,\n                        lazy: true,\n                        overlayMoreButton: true,\n                        showTitle: true,\n                        showYear: true\n                    });\n                }\n                var i;\n                var length;\n                var elems = tabContent.querySelectorAll('.paging');\n\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].innerHTML = pagingHtml;\n                }\n\n                elems = tabContent.querySelectorAll('.btnNextPage');\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener('click', onNextPageClick);\n                }\n\n                elems = tabContent.querySelectorAll('.btnPreviousPage');\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener('click', onPreviousPageClick);\n                }\n\n                var itemsContainer = tabContent.querySelector('.itemsContainer');\n                itemsContainer.innerHTML = html;\n                imageLoader.lazyChildren(itemsContainer);\n                libraryBrowser.saveQueryValues(getSavedQueryKey(page), query);\n                loading.hide();\n                isLoading = false;\n\n                require(['autoFocuser'], function (autoFocuser) {\n                    autoFocuser.autoFocus(page);\n                });\n            });\n        }\n\n        function updateFilterControls(tabContent) {\n            var query = getQuery(tabContent);\n            self.alphaPicker.value(query.NameStartsWithOrGreater);\n        }\n\n        var self = this;\n        var data = {};\n        var isLoading = false;\n\n        self.showFilterMenu = function () {\n            require(['components/filterdialog/filterdialog'], function ({default: filterDialogFactory}) {\n                var filterDialog = new filterDialogFactory({\n                    query: getQuery(tabContent),\n                    mode: 'series',\n                    serverId: ApiClient.serverId()\n                });\n                events.on(filterDialog, 'filterchange', function () {\n                    getQuery(tabContent).StartIndex = 0;\n                    reloadItems(tabContent);\n                });\n                filterDialog.show();\n            });\n        };\n\n        self.getCurrentViewStyle = function () {\n            return getPageData(tabContent).view;\n        };\n\n        function initPage(tabContent) {\n            var alphaPickerElement = tabContent.querySelector('.alphaPicker');\n            var itemsContainer = tabContent.querySelector('.itemsContainer');\n\n            alphaPickerElement.addEventListener('alphavaluechanged', function (e) {\n                var newValue = e.detail.value;\n                var query = getQuery(tabContent);\n                query.NameStartsWithOrGreater = newValue;\n                query.StartIndex = 0;\n                reloadItems(tabContent);\n            });\n            self.alphaPicker = new alphaPicker({\n                element: alphaPickerElement,\n                valueChangeEvent: 'click'\n            });\n\n            tabContent.querySelector('.alphaPicker').classList.add('alphabetPicker-right');\n            alphaPickerElement.classList.add('alphaPicker-fixed-right');\n            itemsContainer.classList.add('padded-right-withalphapicker');\n\n            tabContent.querySelector('.btnFilter').addEventListener('click', function () {\n                self.showFilterMenu();\n            });\n            tabContent.querySelector('.btnSort').addEventListener('click', function (e) {\n                libraryBrowser.showSortMenu({\n                    items: [{\n                        name: globalize.translate('OptionNameSort'),\n                        id: 'SortName'\n                    }, {\n                        name: globalize.translate('OptionImdbRating'),\n                        id: 'CommunityRating,SortName'\n                    }, {\n                        name: globalize.translate('OptionDateAdded'),\n                        id: 'DateCreated,SortName'\n                    }, {\n                        name: globalize.translate('OptionDatePlayed'),\n                        id: 'DatePlayed,SortName'\n                    }, {\n                        name: globalize.translate('OptionParentalRating'),\n                        id: 'OfficialRating,SortName'\n                    }, {\n                        name: globalize.translate('OptionReleaseDate'),\n                        id: 'PremiereDate,SortName'\n                    }],\n                    callback: function () {\n                        getQuery(tabContent).StartIndex = 0;\n                        reloadItems(tabContent);\n                    },\n                    query: getQuery(tabContent),\n                    button: e.target\n                });\n            });\n            var btnSelectView = tabContent.querySelector('.btnSelectView');\n            btnSelectView.addEventListener('click', function (e) {\n                libraryBrowser.showLayoutMenu(e.target, self.getCurrentViewStyle(), 'Banner,List,Poster,PosterCard,Thumb,ThumbCard'.split(','));\n            });\n            btnSelectView.addEventListener('layoutchange', function (e) {\n                var viewStyle = e.detail.viewStyle;\n                getPageData(tabContent).view = viewStyle;\n                libraryBrowser.saveViewSetting(getSavedQueryKey(tabContent), viewStyle);\n                getQuery(tabContent).StartIndex = 0;\n                onViewStyleChange();\n                reloadItems(tabContent);\n            });\n        }\n\n        initPage(tabContent);\n        onViewStyleChange();\n\n        self.renderTab = function () {\n            reloadItems(tabContent);\n            updateFilterControls(tabContent);\n        };\n\n        self.destroy = function () {};\n    };\n});\n"]}