{"version":3,"sources":["scripts/dom.js"],"names":["define","_exports","parentWithAttribute","elem","name","value","getAttribute","parentNode","parentWithTag","tagNames","Array","isArray","indexOf","tagName","containsAnyClass","classList","classNames","i","length","contains","parentWithClass","Object","defineProperty","addEventListener","removeEventListener","getWindowSize","getScreenWidth","whichAnimationEvent","whichAnimationCancelEvent","whichTransitionEvent","default","windowSize","windowSizeEventsBound","supportsCaptureOption","opts","get","window","e","console","debug","target","type","handler","options","optionsOrCapture","capture","clearWindowSize","innerHeight","innerWidth","passive","_animationEvent","_transitionEvent","standardWidths","width","height","sort","a","b","Math","abs","el","document","createElement","animations","animation","OAnimation","MozAnimation","WebkitAnimation","t","undefined","style","replace","transitions","transition","OTransition","MozTransition","WebkitTransition","_default"],"mappings":"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","file":"dom.js","sourcesContent":["/* eslint-disable indent */\n\n/**\n * Useful DOM utilities.\n * @module components/dom\n */\n\n    /**\n     * Returns parent of element with specified attribute value.\n     * @param {HTMLElement} elem - Element whose parent need to find.\n     * @param {string} name - Attribute name.\n     * @param {mixed} value - Attribute value.\n     * @returns {HTMLElement} Parent with specified attribute value.\n     */\n    export function parentWithAttribute(elem, name, value) {\n        while ((value ? elem.getAttribute(name) !== value : !elem.getAttribute(name))) {\n            elem = elem.parentNode;\n\n            if (!elem || !elem.getAttribute) {\n                return null;\n            }\n        }\n\n        return elem;\n    }\n\n    /**\n     * Returns parent of element with one of specified tag names.\n     * @param {HTMLElement} elem - Element whose parent need to find.\n     * @param {(string|Array)} tagNames - Tag name or array of tag names.\n     * @returns {HTMLElement} Parent with one of specified tag names.\n     */\n    export function parentWithTag(elem, tagNames) {\n        // accept both string and array passed in\n        if (!Array.isArray(tagNames)) {\n            tagNames = [tagNames];\n        }\n\n        while (tagNames.indexOf(elem.tagName || '') === -1) {\n            elem = elem.parentNode;\n\n            if (!elem) {\n                return null;\n            }\n        }\n\n        return elem;\n    }\n\n    /**\n     * Returns _true_ if class list contains one of specified names.\n     * @param {DOMTokenList} classList - Class list.\n     * @param {Array} classNames - Array of class names.\n     * @returns {boolean} _true_ if class list contains one of specified names.\n     */\n    function containsAnyClass(classList, classNames) {\n        for (let i = 0, length = classNames.length; i < length; i++) {\n            if (classList.contains(classNames[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Returns parent of element with one of specified class names.\n     * @param {HTMLElement} elem - Element whose parent need to find.\n     * @param {(string|Array)} classNames - Class name or array of class names.\n     * @returns {HTMLElement} Parent with one of specified class names.\n     */\n    export function parentWithClass(elem, classNames) {\n        // accept both string and array passed in\n        if (!Array.isArray(classNames)) {\n            classNames = [classNames];\n        }\n\n        while (!elem.classList || !containsAnyClass(elem.classList, classNames)) {\n            elem = elem.parentNode;\n\n            if (!elem) {\n                return null;\n            }\n        }\n\n        return elem;\n    }\n\n    let supportsCaptureOption = false;\n    try {\n        const opts = Object.defineProperty({}, 'capture', {\n            // eslint-disable-next-line getter-return\n            get: function () {\n                supportsCaptureOption = true;\n            }\n        });\n        window.addEventListener('test', null, opts);\n    } catch (e) {\n        console.debug('error checking capture support');\n    }\n\n    /**\n     * Adds event listener to specified target.\n     * @param {EventTarget} target - Event target.\n     * @param {string} type - Event type.\n     * @param {function} handler - Event handler.\n     * @param {Object} [options] - Listener options.\n     */\n    export function addEventListener(target, type, handler, options) {\n        let optionsOrCapture = options || {};\n        if (!supportsCaptureOption) {\n            optionsOrCapture = optionsOrCapture.capture;\n        }\n        target.addEventListener(type, handler, optionsOrCapture);\n    }\n\n    /**\n     * Removes event listener from specified target.\n     * @param {EventTarget} target - Event target.\n     * @param {string} type - Event type.\n     * @param {function} handler - Event handler.\n     * @param {Object} [options] - Listener options.\n     */\n    export function removeEventListener(target, type, handler, options) {\n        let optionsOrCapture = options || {};\n        if (!supportsCaptureOption) {\n            optionsOrCapture = optionsOrCapture.capture;\n        }\n        target.removeEventListener(type, handler, optionsOrCapture);\n    }\n\n    /**\n     * Cached window size.\n     */\n    let windowSize;\n\n    /**\n     * Flag of event listener bound.\n     */\n    let windowSizeEventsBound;\n\n    /**\n     * Resets cached window size.\n     */\n    function clearWindowSize() {\n        windowSize = null;\n    }\n\n    /**\n     * Returns window size.\n     * @returns {Object} Window size.\n     */\n    export function getWindowSize() {\n        if (!windowSize) {\n            windowSize = {\n                innerHeight: window.innerHeight,\n                innerWidth: window.innerWidth\n            };\n\n            if (!windowSizeEventsBound) {\n                windowSizeEventsBound = true;\n                addEventListener(window, 'orientationchange', clearWindowSize, { passive: true });\n                addEventListener(window, 'resize', clearWindowSize, { passive: true });\n            }\n        }\n\n        return windowSize;\n    }\n\n    /**\n     * Standard screen widths.\n     */\n    const standardWidths = [480, 720, 1280, 1440, 1920, 2560, 3840, 5120, 7680];\n\n    /**\n     * Returns screen width.\n     * @returns {number} Screen width.\n     */\n    export function getScreenWidth() {\n        let width = window.innerWidth;\n        const height = window.innerHeight;\n\n        if (height > width) {\n            width = height * (16.0 / 9.0);\n        }\n\n        const closest = standardWidths.sort(function (a, b) {\n            return Math.abs(width - a) - Math.abs(width - b);\n        })[0];\n\n        return closest;\n    }\n\n    /**\n     * Name of animation end event.\n     */\n    let _animationEvent;\n\n    /**\n     * Returns name of animation end event.\n     * @returns {string} Name of animation end event.\n     */\n    export function whichAnimationEvent() {\n        if (_animationEvent) {\n            return _animationEvent;\n        }\n\n        const el = document.createElement('div');\n        const animations = {\n            'animation': 'animationend',\n            'OAnimation': 'oAnimationEnd',\n            'MozAnimation': 'animationend',\n            'WebkitAnimation': 'webkitAnimationEnd'\n        };\n        for (const t in animations) {\n            if (el.style[t] !== undefined) {\n                _animationEvent = animations[t];\n                return animations[t];\n            }\n        }\n\n        _animationEvent = 'animationend';\n        return _animationEvent;\n    }\n\n    /**\n     * Returns name of animation cancel event.\n     * @returns {string} Name of animation cancel event.\n     */\n    export function whichAnimationCancelEvent() {\n        return whichAnimationEvent().replace('animationend', 'animationcancel').replace('AnimationEnd', 'AnimationCancel');\n    }\n\n    /**\n     * Name of transition end event.\n     */\n    let _transitionEvent;\n\n    /**\n     * Returns name of transition end event.\n     * @returns {string} Name of transition end event.\n     */\n    export function whichTransitionEvent() {\n        if (_transitionEvent) {\n            return _transitionEvent;\n        }\n\n        const el = document.createElement('div');\n        const transitions = {\n            'transition': 'transitionend',\n            'OTransition': 'oTransitionEnd',\n            'MozTransition': 'transitionend',\n            'WebkitTransition': 'webkitTransitionEnd'\n        };\n        for (const t in transitions) {\n            if (el.style[t] !== undefined) {\n                _transitionEvent = transitions[t];\n                return transitions[t];\n            }\n        }\n\n        _transitionEvent = 'transitionend';\n        return _transitionEvent;\n    }\n\n/* eslint-enable indent */\n\nexport default {\n    parentWithAttribute: parentWithAttribute,\n    parentWithClass: parentWithClass,\n    parentWithTag: parentWithTag,\n    addEventListener: addEventListener,\n    removeEventListener: removeEventListener,\n    getWindowSize: getWindowSize,\n    getScreenWidth: getScreenWidth,\n    whichTransitionEvent: whichTransitionEvent,\n    whichAnimationEvent: whichAnimationEvent,\n    whichAnimationCancelEvent: whichAnimationCancelEvent\n};\n"]}