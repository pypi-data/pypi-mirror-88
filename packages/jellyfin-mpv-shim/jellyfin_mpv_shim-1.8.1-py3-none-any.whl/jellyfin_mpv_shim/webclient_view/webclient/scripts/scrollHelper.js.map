{"version":3,"sources":["scripts/scrollHelper.js"],"names":["define","focusManager","dom","getBoundingClientRect","elem","top","left","getPosition","scrollContainer","item","horizontal","slideeOffset","itemOffset","offset","size","width","height","currentStart","scrollLeft","scrollTop","frameSize","offsetWidth","offsetHeight","start","center","end","isVisible","toCenter","container","skipWhenVisible","pos","scrollTo","Math","round","centerOnFocus","e","scrollSlider","focused","focusableParent","target","centerOnFocusHorizontal","this","centerOnFocusVertical","centerFocus","on","element","addEventListener","capture","passive","off","removeEventListener","toStart"],"mappings":"AAAA,aAAAA,OAAO,CAAC,eAAgB,MAAO,iBAAiB,SAAUC,aAAcC,KAGpE,SAASC,sBAAsBC,MAI3B,OAAIA,KAAKD,sBACEC,KAAKD,wBAEL,CAAEE,IAAK,EAAGC,KAAM,GAI/B,SAASC,YAAYC,gBAAiBC,KAAMC,YAExC,IAAIC,aAAeR,sBAAsBK,iBACrCI,WAAaT,sBAAsBM,MAEnCI,OAASH,WAAaE,WAAWN,KAAOK,aAAaL,KAAOM,WAAWP,IAAMM,aAAaN,IAC1FS,KAAOJ,WAAaE,WAAWG,MAAQH,WAAWI,OACjDF,MAAiB,IAATA,OACTA,KAAOL,KAAKC,WAAa,cAAgB,iBAG7C,IAAIO,aAAeP,WAAaF,gBAAgBU,WAAaV,gBAAgBW,UAE7EN,QAAUI,aAEV,IAAIG,UAAYV,WAAaF,gBAAgBa,YAAcb,gBAAgBc,aAM3E,MAAO,CACHC,MAAOV,OACPW,OAASX,OAAUO,UAAY,EAAMN,KAAO,EAC5CW,IAAKZ,OAASO,UAAYN,KAC1BA,KAAMA,KACNY,UAPYb,QAAUI,cAAiBJ,OAASC,MAFnCG,aAAeG,WAapC,SAASO,SAASC,UAAWxB,KAAMM,WAAYmB,iBAC3C,IAAIC,IAAMvB,YAAYqB,UAAWxB,KAAMM,YAEnCmB,iBAAmBC,IAAIJ,YAIvBE,UAAUG,SACNrB,WACAkB,UAAUG,SAASD,IAAIN,OAAQ,GAE/BI,UAAUG,SAAS,EAAGD,IAAIN,QAG1Bd,WACAkB,UAAUV,WAAac,KAAKC,MAAMH,IAAIN,QAEtCI,UAAUT,UAAYa,KAAKC,MAAMH,IAAIN,SA2BjD,SAASU,cAAcC,EAAGC,aAAc1B,YACpC,IAAI2B,QAAUpC,aAAaqC,gBAAgBH,EAAEI,QAEzCF,SACAV,SAASS,aAAcC,QAAS3B,YAIxC,SAAS8B,wBAAwBL,GAC7BD,cAAcC,EAAGM,MAAM,GAE3B,SAASC,sBAAsBP,GAC3BD,cAAcC,EAAGM,MAAM,GAG3B,MAAO,CACHlC,YAAaA,YACboC,YAAa,CACTC,GAAI,SAAAA,GAAUC,QAASnC,YACfA,WACAR,IAAI4C,iBAAiBD,QAAS,QAASL,wBAAyB,CAC5DO,SAAS,EACTC,SAAS,IAGb9C,IAAI4C,iBAAiBD,QAAS,QAASH,sBAAuB,CAC1DK,SAAS,EACTC,SAAS,KAIrBC,IAAK,SAAAA,IAAUJ,QAASnC,YAChBA,WACAR,IAAIgD,oBAAoBL,QAAS,QAASL,wBAAyB,CAC/DO,SAAS,EACTC,SAAS,IAGb9C,IAAIgD,oBAAoBL,QAAS,QAASH,sBAAuB,CAC7DK,SAAS,EACTC,SAAS,MAKzBrB,SAAUA,SACVwB,QApEJ,SAASA,QAAQvB,UAAWxB,KAAMM,WAAYmB,iBAC1C,IAAIC,IAAMvB,YAAYqB,UAAWxB,KAAMM,YAEnCmB,iBAAmBC,IAAIJ,YAIvBE,UAAUG,SACNrB,WACAkB,UAAUG,SAASD,IAAIP,MAAO,GAE9BK,UAAUG,SAAS,EAAGD,IAAIP,OAG1Bb,WACAkB,UAAUV,WAAac,KAAKC,MAAMH,IAAIP,OAEtCK,UAAUT,UAAYa,KAAKC,MAAMH,IAAIP","file":"scrollHelper.js","sourcesContent":["define(['focusManager', 'dom', 'scrollStyles'], function (focusManager, dom) {\n    'use strict';\n\n    function getBoundingClientRect(elem) {\n\n        // Support: BlackBerry 5, iOS 3 (original iPhone)\n        // If we don't have gBCR, just use 0,0 rather than error\n        if (elem.getBoundingClientRect) {\n            return elem.getBoundingClientRect();\n        } else {\n            return { top: 0, left: 0 };\n        }\n    }\n\n    function getPosition(scrollContainer, item, horizontal) {\n\n        var slideeOffset = getBoundingClientRect(scrollContainer);\n        var itemOffset = getBoundingClientRect(item);\n\n        var offset = horizontal ? itemOffset.left - slideeOffset.left : itemOffset.top - slideeOffset.top;\n        var size = horizontal ? itemOffset.width : itemOffset.height;\n        if (!size && size !== 0) {\n            size = item[horizontal ? 'offsetWidth' : 'offsetHeight'];\n        }\n\n        var currentStart = horizontal ? scrollContainer.scrollLeft : scrollContainer.scrollTop;\n\n        offset += currentStart;\n\n        var frameSize = horizontal ? scrollContainer.offsetWidth : scrollContainer.offsetHeight;\n\n        var currentEnd = currentStart + frameSize;\n\n        var isVisible = offset >= currentStart && (offset + size) <= currentEnd;\n\n        return {\n            start: offset,\n            center: (offset - (frameSize / 2) + (size / 2)),\n            end: offset - frameSize + size,\n            size: size,\n            isVisible: isVisible\n        };\n    }\n\n    function toCenter(container, elem, horizontal, skipWhenVisible) {\n        var pos = getPosition(container, elem, horizontal);\n\n        if (skipWhenVisible && pos.isVisible) {\n            return;\n        }\n\n        if (container.scrollTo) {\n            if (horizontal) {\n                container.scrollTo(pos.center, 0);\n            } else {\n                container.scrollTo(0, pos.center);\n            }\n        } else {\n            if (horizontal) {\n                container.scrollLeft = Math.round(pos.center);\n            } else {\n                container.scrollTop = Math.round(pos.center);\n            }\n        }\n    }\n\n    function toStart(container, elem, horizontal, skipWhenVisible) {\n        var pos = getPosition(container, elem, horizontal);\n\n        if (skipWhenVisible && pos.isVisible) {\n            return;\n        }\n\n        if (container.scrollTo) {\n            if (horizontal) {\n                container.scrollTo(pos.start, 0);\n            } else {\n                container.scrollTo(0, pos.start);\n            }\n        } else {\n            if (horizontal) {\n                container.scrollLeft = Math.round(pos.start);\n            } else {\n                container.scrollTop = Math.round(pos.start);\n            }\n        }\n    }\n\n    function centerOnFocus(e, scrollSlider, horizontal) {\n        var focused = focusManager.focusableParent(e.target);\n\n        if (focused) {\n            toCenter(scrollSlider, focused, horizontal);\n        }\n    }\n\n    function centerOnFocusHorizontal(e) {\n        centerOnFocus(e, this, true);\n    }\n    function centerOnFocusVertical(e) {\n        centerOnFocus(e, this, false);\n    }\n\n    return {\n        getPosition: getPosition,\n        centerFocus: {\n            on: function (element, horizontal) {\n                if (horizontal) {\n                    dom.addEventListener(element, 'focus', centerOnFocusHorizontal, {\n                        capture: true,\n                        passive: true\n                    });\n                } else {\n                    dom.addEventListener(element, 'focus', centerOnFocusVertical, {\n                        capture: true,\n                        passive: true\n                    });\n                }\n            },\n            off: function (element, horizontal) {\n                if (horizontal) {\n                    dom.removeEventListener(element, 'focus', centerOnFocusHorizontal, {\n                        capture: true,\n                        passive: true\n                    });\n                } else {\n                    dom.removeEventListener(element, 'focus', centerOnFocusVertical, {\n                        capture: true,\n                        passive: true\n                    });\n                }\n            }\n        },\n        toCenter: toCenter,\n        toStart: toStart\n    };\n});\n"]}