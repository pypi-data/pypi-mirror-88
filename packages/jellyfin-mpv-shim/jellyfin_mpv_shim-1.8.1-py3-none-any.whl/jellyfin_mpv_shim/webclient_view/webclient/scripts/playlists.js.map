{"version":3,"sources":["scripts/playlists.js"],"names":["define","loading","listView","cardBuilder","libraryMenu","libraryBrowser","appHost","imageLoader","userSettings","view","params","getPageData","context","key","getSavedQueryKey","pageData","data","query","SortBy","SortOrder","IncludeItemTypes","Recursive","Fields","StartIndex","getSavedView","libraryPageSize","ParentId","getTopParentId","loadSavedQueryValues","savedQueryKey","onViewStyleChange","viewStyle","itemsContainer","querySelector","classList","add","remove","innerHTML","reloadItems","showLoadingMessage","show","getQuery","promise1","ApiClient","getItems","Dashboard","getCurrentUserId","promise2","getCurrentUser","Promise","all","then","responses","result","window","scrollTo","html","getQueryPagingHtml","startIndex","limit","Limit","totalRecordCount","TotalRecordCount","viewButton","showLimit","updatePageSizeSetting","addLayoutButton","layouts","currentLayout","getListViewHtml","items","Items","sortBy","getCardsHtml","shape","coverImage","showTitle","cardLayout","centerText","preferThumb","overlayPlayButton","elem","lazyChildren","btnNextPage","addEventListener","btnPreviousPage","Math","max","btnChangeLayout","e","layout","detail","saveViewSetting","saveQueryValues","hideLoadingMessage","hide","require","playlistEditor","serverId","serverInfo","Id"],"mappings":"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","file":"playlists.js","sourcesContent":["define(['loading', 'listView', 'cardBuilder', 'libraryMenu', 'libraryBrowser', 'apphost', 'imageLoader', 'userSettings', 'emby-itemscontainer'], function (loading, listView, cardBuilder, libraryMenu, libraryBrowser, appHost, imageLoader, userSettings) {\n    'use strict';\n\n    return function (view, params) {\n        function getPageData(context) {\n            var key = getSavedQueryKey(context);\n            var pageData = data[key];\n\n            if (!pageData) {\n                pageData = data[key] = {\n                    query: {\n                        SortBy: 'SortName',\n                        SortOrder: 'Ascending',\n                        IncludeItemTypes: 'Playlist',\n                        Recursive: true,\n                        Fields: 'PrimaryImageAspectRatio,SortName,CumulativeRunTimeTicks,CanDelete',\n                        StartIndex: 0\n                    },\n                    view: libraryBrowser.getSavedView(key) || 'Poster'\n                };\n\n                if (userSettings.libraryPageSize() > 0) {\n                    pageData.query['Limit'] = userSettings.libraryPageSize();\n                }\n\n                pageData.query.ParentId = libraryMenu.getTopParentId();\n                libraryBrowser.loadSavedQueryValues(key, pageData.query);\n            }\n\n            return pageData;\n        }\n\n        function getQuery(context) {\n            return getPageData(context).query;\n        }\n\n        function getSavedQueryKey(context) {\n            if (!context.savedQueryKey) {\n                context.savedQueryKey = libraryBrowser.getSavedQueryKey();\n            }\n\n            return context.savedQueryKey;\n        }\n\n        function showLoadingMessage() {\n            loading.show();\n        }\n\n        function hideLoadingMessage() {\n            loading.hide();\n        }\n\n        function onViewStyleChange() {\n            var viewStyle = getPageData(view).view;\n            var itemsContainer = view.querySelector('.itemsContainer');\n\n            if ('List' == viewStyle) {\n                itemsContainer.classList.add('vertical-list');\n                itemsContainer.classList.remove('vertical-wrap');\n            } else {\n                itemsContainer.classList.remove('vertical-list');\n                itemsContainer.classList.add('vertical-wrap');\n            }\n\n            itemsContainer.innerHTML = '';\n        }\n\n        function reloadItems() {\n            showLoadingMessage();\n            var query = getQuery(view);\n            var promise1 = ApiClient.getItems(Dashboard.getCurrentUserId(), query);\n            // TODO: promise2 is unused, check if necessary.\n            var promise2 = Dashboard.getCurrentUser();\n            Promise.all([promise1, promise2]).then(function (responses) {\n                var result = responses[0];\n                // TODO: Is the scroll necessary?\n                window.scrollTo(0, 0);\n                var html = '';\n                var viewStyle = getPageData(view).view;\n                view.querySelector('.listTopPaging').innerHTML = libraryBrowser.getQueryPagingHtml({\n                    startIndex: query.StartIndex,\n                    limit: query.Limit,\n                    totalRecordCount: result.TotalRecordCount,\n                    viewButton: false,\n                    showLimit: false,\n                    updatePageSizeSetting: false,\n                    addLayoutButton: true,\n                    layouts: 'List,Poster,PosterCard,Thumb,ThumbCard',\n                    currentLayout: viewStyle\n                });\n\n                if (result.TotalRecordCount) {\n                    if (viewStyle == 'List') {\n                        html = listView.getListViewHtml({\n                            items: result.Items,\n                            sortBy: query.SortBy\n                        });\n                    } else if (viewStyle == 'PosterCard') {\n                        html = cardBuilder.getCardsHtml({\n                            items: result.Items,\n                            shape: 'square',\n                            coverImage: true,\n                            showTitle: true,\n                            cardLayout: true\n                        });\n                    } else if (viewStyle == 'Thumb') {\n                        html = cardBuilder.getCardsHtml({\n                            items: result.Items,\n                            shape: 'backdrop',\n                            showTitle: true,\n                            centerText: true,\n                            preferThumb: true,\n                            overlayPlayButton: true\n                        });\n                    } else if (viewStyle == 'ThumbCard') {\n                        html = cardBuilder.getCardsHtml({\n                            items: result.Items,\n                            shape: 'backdrop',\n                            showTitle: true,\n                            preferThumb: true,\n                            cardLayout: true\n                        });\n                    } else {\n                        html = cardBuilder.getCardsHtml({\n                            items: result.Items,\n                            shape: 'square',\n                            showTitle: true,\n                            coverImage: true,\n                            centerText: true,\n                            overlayPlayButton: true\n                        });\n                    }\n                    view.querySelector('.noItemsMessage').classList.add('hide');\n                } else {\n                    view.querySelector('.noItemsMessage').classList.remove('hide');\n                }\n\n                var elem = view.querySelector('.itemsContainer');\n                elem.innerHTML = html;\n                imageLoader.lazyChildren(elem);\n                var btnNextPage = view.querySelector('.btnNextPage');\n\n                if (btnNextPage) {\n                    btnNextPage.addEventListener('click', function () {\n                        if (userSettings.libraryPageSize() > 0) {\n                            query.StartIndex += query.Limit;\n                        }\n                        reloadItems();\n                    });\n                }\n\n                var btnPreviousPage = view.querySelector('.btnPreviousPage');\n\n                if (btnPreviousPage) {\n                    btnPreviousPage.addEventListener('click', function () {\n                        if (userSettings.libraryPageSize() > 0) {\n                            query.StartIndex = Math.max(0, query.StartIndex - query.Limit);\n                        }\n                        reloadItems();\n                    });\n                }\n\n                var btnChangeLayout = view.querySelector('.btnChangeLayout');\n\n                if (btnChangeLayout) {\n                    btnChangeLayout.addEventListener('layoutchange', function (e) {\n                        var layout = e.detail.viewStyle;\n                        getPageData(view).view = layout;\n                        libraryBrowser.saveViewSetting(getSavedQueryKey(view), layout);\n                        onViewStyleChange();\n                        reloadItems();\n                    });\n                }\n\n                libraryBrowser.saveQueryValues(getSavedQueryKey(view), query);\n                hideLoadingMessage();\n            });\n        }\n\n        var data = {};\n        view.addEventListener('viewbeforeshow', function () {\n            reloadItems();\n        });\n        view.querySelector('.btnNewPlaylist').addEventListener('click', function () {\n            require(['playlistEditor'], function (playlistEditor) {\n                var serverId = ApiClient.serverInfo().Id;\n                new playlistEditor().show({\n                    items: [],\n                    serverId: serverId\n                });\n            });\n        });\n        onViewStyleChange();\n    };\n});\n"]}