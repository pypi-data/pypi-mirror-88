{"version":3,"sources":["scripts/gamepadtokey.js"],"names":["require","appHost","_leftThumbstickUpPressed","_leftThumbstickDownPressed","_leftThumbstickLeftPressed","_leftThumbstickRightPressed","_dPadUpPressed","_dPadDownPressed","_dPadLeftPressed","_dPadRightPressed","_gamepadAPressed","_gamepadBPressed","ProcessedButtons","_ButtonPressedState","newPressedState","raiseKeyEvent","times","resetThrottle","key","Date","getTime","inputLoopTimer","isElectron","navigator","userAgent","toLowerCase","indexOf","allowInput","document","hidden","getWindowState","raiseEvent","name","keyCode","event","createEvent","initEvent","activeElement","body","dispatchEvent","oldPressedState","enableRepeatKeyDown","clickonKeyUp","fire","throttle","time","clickElement","elem","click","window","runInputLoop","gamepads","getGamepads","i","len","length","gamepad","axes","leftStickX","leftStickY","setleftThumbstickRight","setleftThumbstickLeft","setleftThumbstickUp","setleftThumbstickDown","buttons","j","pressed","setdPadUp","setdPadDown","setdPadLeft","setdPadRight","setgamepadA","setgamepadB","getdPadUp","getdPadDown","getdPadLeft","getdPadRight","getgamepadA","getgamepadB","requestAnimationFrame","isGamepadConnected","connected","onFocusOrGamepadAttach","e","hasFocus","console","log","startInputLoop","onFocusOrGamepadDetach","stopInputLoop","cancelAnimationFrame","undefined","addEventListener","gamepadInputEmulation"],"mappings":"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","file":"gamepadtokey.js","sourcesContent":["// #      The MIT License (MIT)\n// #\n// #      Copyright (c) 2016 Microsoft. All rights reserved.\n// #\n// #      Permission is hereby granted, free of charge, to any person obtaining a copy\n// #      of this software and associated documentation files (the \"Software\"), to deal\n// #      in the Software without restriction, including without limitation the rights\n// #      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// #      copies of the Software, and to permit persons to whom the Software is\n// #      furnished to do so, subject to the following conditions:\n// #\n// #      The above copyright notice and this permission notice shall be included in\n// #      all copies or substantial portions of the Software.\n// #\n// #      THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// #      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// #      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// #      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// #      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// #      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// #      THE SOFTWARE.\nrequire(['apphost'], function (appHost) {\n    'use strict';\n\n    var _GAMEPAD_A_BUTTON_INDEX = 0;\n    var _GAMEPAD_B_BUTTON_INDEX = 1;\n    var _GAMEPAD_DPAD_UP_BUTTON_INDEX = 12;\n    var _GAMEPAD_DPAD_DOWN_BUTTON_INDEX = 13;\n    var _GAMEPAD_DPAD_LEFT_BUTTON_INDEX = 14;\n    var _GAMEPAD_DPAD_RIGHT_BUTTON_INDEX = 15;\n    var _GAMEPAD_A_KEY = 'GamepadA';\n    var _GAMEPAD_B_KEY = 'GamepadB';\n    var _GAMEPAD_DPAD_UP_KEY = 'GamepadDPadUp';\n    var _GAMEPAD_DPAD_DOWN_KEY = 'GamepadDPadDown';\n    var _GAMEPAD_DPAD_LEFT_KEY = 'GamepadDPadLeft';\n    var _GAMEPAD_DPAD_RIGHT_KEY = 'GamepadDPadRight';\n    var _GAMEPAD_LEFT_THUMBSTICK_UP_KEY = 'GamepadLeftThumbStickUp';\n    var _GAMEPAD_LEFT_THUMBSTICK_DOWN_KEY = 'GamepadLeftThumbStickDown';\n    var _GAMEPAD_LEFT_THUMBSTICK_LEFT_KEY = 'GamepadLeftThumbStickLeft';\n    var _GAMEPAD_LEFT_THUMBSTICK_RIGHT_KEY = 'GamepadLeftThumbStickRight';\n    var _GAMEPAD_A_KEYCODE = 0;\n    var _GAMEPAD_B_KEYCODE = 27;\n    var _GAMEPAD_DPAD_UP_KEYCODE = 38;\n    var _GAMEPAD_DPAD_DOWN_KEYCODE = 40;\n    var _GAMEPAD_DPAD_LEFT_KEYCODE = 37;\n    var _GAMEPAD_DPAD_RIGHT_KEYCODE = 39;\n    var _GAMEPAD_LEFT_THUMBSTICK_UP_KEYCODE = 38;\n    var _GAMEPAD_LEFT_THUMBSTICK_DOWN_KEYCODE = 40;\n    var _GAMEPAD_LEFT_THUMBSTICK_LEFT_KEYCODE = 37;\n    var _GAMEPAD_LEFT_THUMBSTICK_RIGHT_KEYCODE = 39;\n    var _THUMB_STICK_THRESHOLD = 0.75;\n\n    var _leftThumbstickUpPressed = false;\n    var _leftThumbstickDownPressed = false;\n    var _leftThumbstickLeftPressed = false;\n    var _leftThumbstickRightPressed = false;\n    var _dPadUpPressed = false;\n    var _dPadDownPressed = false;\n    var _dPadLeftPressed = false;\n    var _dPadRightPressed = false;\n    var _gamepadAPressed = false;\n    var _gamepadBPressed = false;\n\n    // The set of buttons on the gamepad we listen for.\n    var ProcessedButtons = [\n        _GAMEPAD_DPAD_UP_BUTTON_INDEX,\n        _GAMEPAD_DPAD_DOWN_BUTTON_INDEX,\n        _GAMEPAD_DPAD_LEFT_BUTTON_INDEX,\n        _GAMEPAD_DPAD_RIGHT_BUTTON_INDEX,\n        _GAMEPAD_A_BUTTON_INDEX,\n        _GAMEPAD_B_BUTTON_INDEX\n    ];\n\n    var _ButtonPressedState = {};\n    _ButtonPressedState.getgamepadA = function () {\n        return _gamepadAPressed;\n    };\n\n    _ButtonPressedState.setgamepadA = function (newPressedState) {\n        raiseKeyEvent(_gamepadAPressed, newPressedState, _GAMEPAD_A_KEY, _GAMEPAD_A_KEYCODE, false, true);\n        _gamepadAPressed = newPressedState;\n    };\n\n    _ButtonPressedState.getgamepadB = function () {\n        return _gamepadBPressed;\n    };\n\n    _ButtonPressedState.setgamepadB = function (newPressedState) {\n        raiseKeyEvent(_gamepadBPressed, newPressedState, _GAMEPAD_B_KEY, _GAMEPAD_B_KEYCODE);\n        _gamepadBPressed = newPressedState;\n    };\n\n    _ButtonPressedState.getleftThumbstickUp = function () {\n        return _leftThumbstickUpPressed;\n    };\n\n    _ButtonPressedState.setleftThumbstickUp = function (newPressedState) {\n        raiseKeyEvent(_leftThumbstickUpPressed, newPressedState, _GAMEPAD_LEFT_THUMBSTICK_UP_KEY, _GAMEPAD_LEFT_THUMBSTICK_UP_KEYCODE, true);\n        _leftThumbstickUpPressed = newPressedState;\n    };\n\n    _ButtonPressedState.getleftThumbstickDown = function () {\n        return _leftThumbstickDownPressed;\n    };\n\n    _ButtonPressedState.setleftThumbstickDown = function (newPressedState) {\n        raiseKeyEvent(_leftThumbstickDownPressed, newPressedState, _GAMEPAD_LEFT_THUMBSTICK_DOWN_KEY, _GAMEPAD_LEFT_THUMBSTICK_DOWN_KEYCODE, true);\n        _leftThumbstickDownPressed = newPressedState;\n    };\n\n    _ButtonPressedState.getleftThumbstickLeft = function () {\n        return _leftThumbstickLeftPressed;\n    };\n\n    _ButtonPressedState.setleftThumbstickLeft = function (newPressedState) {\n        raiseKeyEvent(_leftThumbstickLeftPressed, newPressedState, _GAMEPAD_LEFT_THUMBSTICK_LEFT_KEY, _GAMEPAD_LEFT_THUMBSTICK_LEFT_KEYCODE, true);\n        _leftThumbstickLeftPressed = newPressedState;\n    };\n\n    _ButtonPressedState.getleftThumbstickRight = function () {\n        return _leftThumbstickRightPressed;\n    };\n\n    _ButtonPressedState.setleftThumbstickRight = function (newPressedState) {\n        raiseKeyEvent(_leftThumbstickRightPressed, newPressedState, _GAMEPAD_LEFT_THUMBSTICK_RIGHT_KEY, _GAMEPAD_LEFT_THUMBSTICK_RIGHT_KEYCODE, true);\n        _leftThumbstickRightPressed = newPressedState;\n    };\n\n    _ButtonPressedState.getdPadUp = function () {\n        return _dPadUpPressed;\n    };\n\n    _ButtonPressedState.setdPadUp = function (newPressedState) {\n        raiseKeyEvent(_dPadUpPressed, newPressedState, _GAMEPAD_DPAD_UP_KEY, _GAMEPAD_DPAD_UP_KEYCODE, true);\n        _dPadUpPressed = newPressedState;\n    };\n\n    _ButtonPressedState.getdPadDown = function () {\n        return _dPadDownPressed;\n    };\n\n    _ButtonPressedState.setdPadDown = function (newPressedState) {\n        raiseKeyEvent(_dPadDownPressed, newPressedState, _GAMEPAD_DPAD_DOWN_KEY, _GAMEPAD_DPAD_DOWN_KEYCODE, true);\n        _dPadDownPressed = newPressedState;\n    };\n\n    _ButtonPressedState.getdPadLeft = function () {\n        return _dPadLeftPressed;\n    };\n\n    _ButtonPressedState.setdPadLeft = function (newPressedState) {\n        raiseKeyEvent(_dPadLeftPressed, newPressedState, _GAMEPAD_DPAD_LEFT_KEY, _GAMEPAD_DPAD_LEFT_KEYCODE, true);\n        _dPadLeftPressed = newPressedState;\n    };\n\n    _ButtonPressedState.getdPadRight = function () {\n        return _dPadRightPressed;\n    };\n\n    _ButtonPressedState.setdPadRight = function (newPressedState) {\n        raiseKeyEvent(_dPadRightPressed, newPressedState, _GAMEPAD_DPAD_RIGHT_KEY, _GAMEPAD_DPAD_RIGHT_KEYCODE, true);\n        _dPadRightPressed = newPressedState;\n    };\n\n    var times = {};\n\n    function throttle(key) {\n        var time = times[key] || 0;\n        var now = new Date().getTime();\n\n        if ((now - time) >= 200) {\n            //times[key] = now;\n            return true;\n        }\n\n        return false;\n    }\n\n    function resetThrottle(key) {\n        times[key] = new Date().getTime();\n    }\n\n    var isElectron = navigator.userAgent.toLowerCase().indexOf('electron') !== -1;\n    function allowInput() {\n\n        // This would be nice but always seems to return true with electron\n        if (!isElectron && document.hidden) { /* eslint-disable-line compat/compat */\n            return false;\n        }\n\n        if (appHost.getWindowState() === 'Minimized') {\n            return false;\n        }\n\n        return true;\n    }\n\n    function raiseEvent(name, key, keyCode) {\n\n        if (!allowInput()) {\n            return;\n        }\n\n        var event = document.createEvent('Event');\n        event.initEvent(name, true, true);\n        event.key = key;\n        event.keyCode = keyCode;\n        (document.activeElement || document.body).dispatchEvent(event);\n    }\n\n    function clickElement(elem) {\n\n        if (!allowInput()) {\n            return;\n        }\n\n        elem.click();\n    }\n\n    function raiseKeyEvent(oldPressedState, newPressedState, key, keyCode, enableRepeatKeyDown, clickonKeyUp) {\n\n        // No-op if oldPressedState === newPressedState\n        if (newPressedState === true) {\n\n            // button down\n            var fire = false;\n\n            // always fire if this is the initial down press\n            if (oldPressedState === false) {\n                fire = true;\n                resetThrottle(key);\n            } else if (enableRepeatKeyDown) {\n                fire = throttle(key);\n            }\n\n            if (fire && keyCode) {\n                raiseEvent('keydown', key, keyCode);\n            }\n\n        } else if (newPressedState === false && oldPressedState === true) {\n\n            resetThrottle(key);\n\n            // button up\n            if (keyCode) {\n                raiseEvent('keyup', key, keyCode);\n            }\n            if (clickonKeyUp) {\n                clickElement(document.activeElement || window);\n            }\n        }\n    }\n\n    var inputLoopTimer;\n    function runInputLoop() {\n        // Get the latest gamepad state.\n        var gamepads = navigator.getGamepads(); /* eslint-disable-line compat/compat */\n        for (var i = 0, len = gamepads.length; i < len; i++) {\n            var gamepad = gamepads[i];\n            if (!gamepad) {\n                continue;\n            }\n            // Iterate through the axes\n            var axes = gamepad.axes;\n            var leftStickX = axes[0];\n            var leftStickY = axes[1];\n            if (leftStickX > _THUMB_STICK_THRESHOLD) { // Right\n                _ButtonPressedState.setleftThumbstickRight(true);\n            } else if (leftStickX < -_THUMB_STICK_THRESHOLD) { // Left\n                _ButtonPressedState.setleftThumbstickLeft(true);\n            } else if (leftStickY < -_THUMB_STICK_THRESHOLD) { // Up\n                _ButtonPressedState.setleftThumbstickUp(true);\n            } else if (leftStickY > _THUMB_STICK_THRESHOLD) { // Down\n                _ButtonPressedState.setleftThumbstickDown(true);\n            } else {\n                _ButtonPressedState.setleftThumbstickLeft(false);\n                _ButtonPressedState.setleftThumbstickRight(false);\n                _ButtonPressedState.setleftThumbstickUp(false);\n                _ButtonPressedState.setleftThumbstickDown(false);\n            }\n            // Iterate through the buttons to see if Left thumbstick, DPad, A and B are pressed.\n            var buttons = gamepad.buttons;\n            for (var j = 0, len = buttons.length; j < len; j++) {\n                if (ProcessedButtons.indexOf(j) !== -1) {\n                    if (buttons[j].pressed) {\n                        switch (j) {\n                            case _GAMEPAD_DPAD_UP_BUTTON_INDEX:\n                                _ButtonPressedState.setdPadUp(true);\n                                break;\n                            case _GAMEPAD_DPAD_DOWN_BUTTON_INDEX:\n                                _ButtonPressedState.setdPadDown(true);\n                                break;\n                            case _GAMEPAD_DPAD_LEFT_BUTTON_INDEX:\n                                _ButtonPressedState.setdPadLeft(true);\n                                break;\n                            case _GAMEPAD_DPAD_RIGHT_BUTTON_INDEX:\n                                _ButtonPressedState.setdPadRight(true);\n                                break;\n                            case _GAMEPAD_A_BUTTON_INDEX:\n                                _ButtonPressedState.setgamepadA(true);\n                                break;\n                            case _GAMEPAD_B_BUTTON_INDEX:\n                                _ButtonPressedState.setgamepadB(true);\n                                break;\n                            default:\n                                // No-op\n                                break;\n                        }\n                    } else {\n                        switch (j) {\n                            case _GAMEPAD_DPAD_UP_BUTTON_INDEX:\n                                if (_ButtonPressedState.getdPadUp()) {\n                                    _ButtonPressedState.setdPadUp(false);\n                                }\n                                break;\n                            case _GAMEPAD_DPAD_DOWN_BUTTON_INDEX:\n                                if (_ButtonPressedState.getdPadDown()) {\n                                    _ButtonPressedState.setdPadDown(false);\n                                }\n                                break;\n                            case _GAMEPAD_DPAD_LEFT_BUTTON_INDEX:\n                                if (_ButtonPressedState.getdPadLeft()) {\n                                    _ButtonPressedState.setdPadLeft(false);\n                                }\n                                break;\n                            case _GAMEPAD_DPAD_RIGHT_BUTTON_INDEX:\n                                if (_ButtonPressedState.getdPadRight()) {\n                                    _ButtonPressedState.setdPadRight(false);\n                                }\n                                break;\n                            case _GAMEPAD_A_BUTTON_INDEX:\n                                if (_ButtonPressedState.getgamepadA()) {\n                                    _ButtonPressedState.setgamepadA(false);\n                                }\n                                break;\n                            case _GAMEPAD_B_BUTTON_INDEX:\n                                if (_ButtonPressedState.getgamepadB()) {\n                                    _ButtonPressedState.setgamepadB(false);\n                                }\n                                break;\n                            default:\n                                // No-op\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        // Schedule the next one\n        inputLoopTimer = requestAnimationFrame(runInputLoop);\n    }\n\n    function startInputLoop() {\n        if (!inputLoopTimer) {\n            runInputLoop();\n        }\n    }\n\n    function stopInputLoop() {\n        cancelAnimationFrame(inputLoopTimer);\n        inputLoopTimer = undefined;\n    }\n\n    function isGamepadConnected() {\n        var gamepads = navigator.getGamepads(); /* eslint-disable-line compat/compat */\n        for (var i = 0, len = gamepads.length; i < len; i++) {\n            var gamepad = gamepads[i];\n            if (gamepad && gamepad.connected) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function onFocusOrGamepadAttach(e) {\n        /* eslint-disable-next-line compat/compat */\n        if (isGamepadConnected() && document.hasFocus()) {\n            console.log('Gamepad connected! Starting input loop');\n            startInputLoop();\n        }\n    }\n\n    function onFocusOrGamepadDetach(e) {\n        /* eslint-disable-next-line compat/compat */\n        if (!isGamepadConnected() || !document.hasFocus()) {\n            console.log('Gamepad disconnected! No other gamepads are connected, stopping input loop');\n            stopInputLoop();\n        } else {\n            console.log('Gamepad disconnected! There are gamepads still connected.');\n        }\n    }\n\n    // Event listeners for any change in gamepads' state.\n    window.addEventListener('gamepaddisconnected', onFocusOrGamepadDetach);\n    window.addEventListener('gamepadconnected', onFocusOrGamepadAttach);\n    window.addEventListener('blur', onFocusOrGamepadDetach);\n    window.addEventListener('focus', onFocusOrGamepadAttach);\n\n    onFocusOrGamepadAttach();\n\n    // The gamepadInputEmulation is a string property that exists in JavaScript UWAs and in WebViews in UWAs.\n    // It won't exist in Win8.1 style apps or browsers.\n    if (window.navigator && typeof window.navigator.gamepadInputEmulation === 'string') {\n        // We want the gamepad to provide gamepad VK keyboard events rather than moving a\n        // mouse like cursor. Set to \"keyboard\", the gamepad will provide such keyboard events\n        // and provide input to the DOM navigator.getGamepads API.\n        window.navigator.gamepadInputEmulation = 'gamepad';\n    }\n\n});\n"]}