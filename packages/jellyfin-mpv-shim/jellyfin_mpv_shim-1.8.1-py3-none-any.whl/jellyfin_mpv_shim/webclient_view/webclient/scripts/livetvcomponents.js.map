{"version":3,"sources":["scripts/livetvcomponents.js"],"names":["define","layoutManager","datetime","cardBuilder","appHost","enableScrollX","desktop","window","LiveTvHelpers","getTimersHtml","timers","options","i","length","items","map","t","Type","groups","currentGroupName","currentGroup","item","dateText","indexByDate","StartDate","premiereDate","parseISO8601Date","toLocaleDateString","weekday","month","day","err","console","error","push","name","html","group","supports","preferVisualCards","scrollXClass","tv","getCardsHtml","shape","showParentTitleOrTitle","showAirTime","showAirEndTime","showChannelName","cardLayout","centerText","action","cardFooterAside","preferThumb","defaultShape","coverImage","allowBottomPadding","overlayText","showChannelLogo","Promise","resolve"],"mappings":"AAAA,aAAAA,OAAO,CAAC,gBAAiB,WAAY,cAAe,YAAY,SAAUC,cAAeC,SAAUC,YAAaC,SAG5G,SAASC,gBACL,OAAQJ,cAAcK,QA8G1BC,OAAOC,cAAgB,CACnBC,cAxGJ,SAASA,cAAcC,OAAQC,SAE3B,IAAIC,EACAC,OAFJF,QAAUA,SAAW,GAGrB,IAAIG,MAAQJ,OAAOK,KAAI,SAAUC,GAE7B,OADAA,EAAEC,KAAO,QACFD,KAEPE,OAAS,GACTC,iBAAmB,GACnBC,aAAe,GAEnB,IAAKR,EAAI,EAAGC,OAASC,MAAMD,OAAQD,EAAIC,OAAQD,IAAK,CAChD,IAAIS,KAAOP,MAAMF,GACbU,SAAW,GAEf,IAA4B,IAAxBX,QAAQY,aAAyBF,KAAKG,UACtC,IACI,IAAIC,aAAevB,SAASwB,iBAAiBL,KAAKG,WAAW,GAC7DF,SAAWpB,SAASyB,mBAAmBF,aAAc,CACjDG,QAAS,OACTC,MAAO,QACPC,IAAK,YAEX,MAAOC,KACLC,QAAQC,MAAM,8BAAgCZ,KAAKG,UAAY,YAAcO,KAIjFT,UAAYH,kBACRC,aAAaP,QACbK,OAAOgB,KAAK,CACRC,KAAMhB,iBACNL,MAAOM,eAIfD,iBAAmBG,SACnBF,aAAe,CAACC,OAEhBD,aAAac,KAAKb,MAItBD,aAAaP,QACbK,OAAOgB,KAAK,CACRC,KAAMhB,iBACNL,MAAOM,eAIf,IAAIgB,KAAO,GAEX,IAAKxB,EAAI,EAAGC,OAASK,OAAOL,OAAQD,EAAIC,OAAQD,IAAK,CACjD,IAAIyB,MAAQnB,OAAON,GACSR,QAAQkC,SAAS,iBAC5BlC,QAAQmC,kBAOzB,IALa,EACTF,MAAMF,OACNC,MAAQ,gCACRA,MAAQ,2DAA6DC,MAAMF,KAAO,SAElF9B,gBAAiB,CACjB,IAAImC,aAAe,wBAEfvC,cAAcwC,KACdD,cAAgB,kBAGpBJ,MAAQ,uDAAyDI,aAAe,mCAEhFJ,MAAQ,+FAGZA,MAAQjC,YAAYuC,aAAa,CAC7B5B,MAAOuB,MAAMvB,MACb6B,MAhFDtC,gBAAkB,mBAAqB,WAiFtCuC,wBAAwB,EACxBC,aAAa,EACbC,gBAAgB,EAChBC,iBAAiB,EACjBC,YAxBS,EAyBTC,YAAY,EACZC,OAAQ,OACRC,gBAAiB,OACjBC,aAAa,EACbC,aAA2B,KAC3BC,YAAY,EACZC,oBAAoB,EACpBC,aAAa,EACbC,iBAjCS,IAmCbrB,MAAQ,SAEJC,MAAMF,OACNC,MAAQ,UAIhB,OAAOsB,QAAQC,QAAQvB","file":"livetvcomponents.js","sourcesContent":["define(['layoutManager', 'datetime', 'cardBuilder', 'apphost'], function (layoutManager, datetime, cardBuilder, appHost) {\n    'use strict';\n\n    function enableScrollX() {\n        return !layoutManager.desktop;\n    }\n\n    function getBackdropShape() {\n        return enableScrollX() ? 'overflowBackdrop' : 'backdrop';\n    }\n\n    function getTimersHtml(timers, options) {\n        options = options || {};\n        var i;\n        var length;\n        var items = timers.map(function (t) {\n            t.Type = 'Timer';\n            return t;\n        });\n        var groups = [];\n        var currentGroupName = '';\n        var currentGroup = [];\n\n        for (i = 0, length = items.length; i < length; i++) {\n            var item = items[i];\n            var dateText = '';\n\n            if (options.indexByDate !== false && item.StartDate) {\n                try {\n                    var premiereDate = datetime.parseISO8601Date(item.StartDate, true);\n                    dateText = datetime.toLocaleDateString(premiereDate, {\n                        weekday: 'long',\n                        month: 'short',\n                        day: 'numeric'\n                    });\n                } catch (err) {\n                    console.error('error parsing premiereDate:' + item.StartDate + '; error: ' + err);\n                }\n            }\n\n            if (dateText != currentGroupName) {\n                if (currentGroup.length) {\n                    groups.push({\n                        name: currentGroupName,\n                        items: currentGroup\n                    });\n                }\n\n                currentGroupName = dateText;\n                currentGroup = [item];\n            } else {\n                currentGroup.push(item);\n            }\n        }\n\n        if (currentGroup.length) {\n            groups.push({\n                name: currentGroupName,\n                items: currentGroup\n            });\n        }\n\n        var html = '';\n\n        for (i = 0, length = groups.length; i < length; i++) {\n            var group = groups[i];\n            var supportsImageAnalysis = appHost.supports('imageanalysis');\n            var cardLayout = appHost.preferVisualCards || supportsImageAnalysis;\n\n            cardLayout = true;\n            if (group.name) {\n                html += '<div class=\"verticalSection\">';\n                html += '<h2 class=\"sectionTitle sectionTitle-cards padded-left\">' + group.name + '</h2>';\n            }\n            if (enableScrollX()) {\n                var scrollXClass = 'scrollX hiddenScrollX';\n\n                if (layoutManager.tv) {\n                    scrollXClass += ' smoothScrollX';\n                }\n\n                html += '<div is=\"emby-itemscontainer\" class=\"itemsContainer ' + scrollXClass + ' padded-left padded-right\">';\n            } else {\n                html += '<div is=\"emby-itemscontainer\" class=\"itemsContainer vertical-wrap padded-left padded-right\">';\n            }\n\n            html += cardBuilder.getCardsHtml({\n                items: group.items,\n                shape: cardLayout ? getBackdropShape() : enableScrollX() ? 'autoOverflow' : 'autoVertical',\n                showParentTitleOrTitle: true,\n                showAirTime: true,\n                showAirEndTime: true,\n                showChannelName: !cardLayout,\n                cardLayout: cardLayout,\n                centerText: !cardLayout,\n                action: 'edit',\n                cardFooterAside: 'none',\n                preferThumb: !!cardLayout || 'auto',\n                defaultShape: cardLayout ? null : 'portrait',\n                coverImage: true,\n                allowBottomPadding: false,\n                overlayText: false,\n                showChannelLogo: cardLayout\n            });\n            html += '</div>';\n\n            if (group.name) {\n                html += '</div>';\n            }\n        }\n\n        return Promise.resolve(html);\n    }\n\n    window.LiveTvHelpers = {\n        getTimersHtml: getTimersHtml\n    };\n});\n"]}