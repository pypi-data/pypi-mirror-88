{"version":3,"sources":["scripts/datetime.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","define","globalize","parseISO8601Date","s","toLocal","d","match","a","i","parseInt","parseFloat","ms","Date","UTC","Math","round","offset","getTimezoneOffset","toLocaleTimeStringSupportsLocales","toLocaleTimeString","e","name","date","options","Error","currentLocale","getCurrentDateTimeLocale","getDisplayRunningTime","ticks","parts","hours","floor","push","minutes","seconds","join","toLocaleDateString","optionList","getOptionList","list","value","length","weekday","getDay","toLocaleString","getDisplayTime","toString","toLowerCase","err","hour","minute","time","timeLower","indexOf","getHours","suffix","getMinutes","timeParts","split","isRelativeDay","offsetInDays","yesterday","day","getDate","setDate","getFullYear","getMonth","supportsLocalization"],"mappings":"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","file":"datetime.js","sourcesContent":["define(['globalize'], function (globalize) {\n    'use strict';\n\n    function parseISO8601Date(s, toLocal) {\n\n        // parenthese matches:\n        // year month day    hours minutes seconds\n        // dotmilliseconds\n        // tzstring plusminus hours minutes\n        var re = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))?/;\n\n        var d = s.match(re);\n\n        // \"2010-12-07T11:00:00.000-09:00\" parses to:\n        //  [\"2010-12-07T11:00:00.000-09:00\", \"2010\", \"12\", \"07\", \"11\",\n        //     \"00\", \"00\", \".000\", \"-09:00\", \"-\", \"09\", \"00\"]\n        // \"2010-12-07T11:00:00.000Z\" parses to:\n        //  [\"2010-12-07T11:00:00.000Z\",      \"2010\", \"12\", \"07\", \"11\",\n        //     \"00\", \"00\", \".000\", \"Z\", undefined, undefined, undefined]\n\n        if (!d) {\n\n            throw \"Couldn't parse ISO 8601 date string '\" + s + \"'\";\n        }\n\n        // parse strings, leading zeros into proper ints\n        var a = [1, 2, 3, 4, 5, 6, 10, 11];\n        for (var i in a) {\n            d[a[i]] = parseInt(d[a[i]], 10);\n        }\n        d[7] = parseFloat(d[7]);\n\n        // Date.UTC(year, month[, date[, hrs[, min[, sec[, ms]]]]])\n        // note that month is 0-11, not 1-12\n        // see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date/UTC\n        var ms = Date.UTC(d[1], d[2] - 1, d[3], d[4], d[5], d[6]);\n\n        // if there are milliseconds, add them\n        if (d[7] > 0) {\n            ms += Math.round(d[7] * 1000);\n        }\n\n        // if there's a timezone, calculate it\n        if (d[8] !== 'Z' && d[10]) {\n            var offset = d[10] * 60 * 60 * 1000;\n            if (d[11]) {\n                offset += d[11] * 60 * 1000;\n            }\n            if (d[9] === '-') {\n                ms -= offset;\n            } else {\n                ms += offset;\n            }\n        } else if (toLocal === false) {\n            ms += new Date().getTimezoneOffset() * 60000;\n        }\n\n        return new Date(ms);\n    }\n\n    function getDisplayRunningTime(ticks) {\n        var ticksPerHour = 36000000000;\n        var ticksPerMinute = 600000000;\n        var ticksPerSecond = 10000000;\n\n        var parts = [];\n\n        var hours = ticks / ticksPerHour;\n        hours = Math.floor(hours);\n\n        if (hours) {\n            parts.push(hours);\n        }\n\n        ticks -= (hours * ticksPerHour);\n\n        var minutes = ticks / ticksPerMinute;\n        minutes = Math.floor(minutes);\n\n        ticks -= (minutes * ticksPerMinute);\n\n        if (minutes < 10 && hours) {\n            minutes = '0' + minutes;\n        }\n        parts.push(minutes);\n\n        var seconds = ticks / ticksPerSecond;\n        seconds = Math.floor(seconds);\n\n        if (seconds < 10) {\n            seconds = '0' + seconds;\n        }\n        parts.push(seconds);\n\n        return parts.join(':');\n    }\n\n    var toLocaleTimeStringSupportsLocales = function () {\n        try {\n            new Date().toLocaleTimeString('i');\n        } catch (e) {\n            return e.name === 'RangeError';\n        }\n        return false;\n    }();\n\n    function getOptionList(options) {\n\n        var list = [];\n\n        for (var i in options) {\n            list.push({\n                name: i,\n                value: options[i]\n            });\n        }\n\n        return list;\n    }\n\n    function toLocaleString(date, options) {\n\n        if (!date) {\n            throw new Error('date cannot be null');\n        }\n\n        options = options || {};\n\n        if (toLocaleTimeStringSupportsLocales) {\n\n            var currentLocale = globalize.getCurrentDateTimeLocale();\n\n            if (currentLocale) {\n                return date.toLocaleString(currentLocale, options);\n            }\n        }\n\n        return date.toLocaleString();\n    }\n\n    function toLocaleDateString(date, options) {\n\n        if (!date) {\n            throw new Error('date cannot be null');\n        }\n\n        options = options || {};\n\n        if (toLocaleTimeStringSupportsLocales) {\n\n            var currentLocale = globalize.getCurrentDateTimeLocale();\n\n            if (currentLocale) {\n                return date.toLocaleDateString(currentLocale, options);\n            }\n        }\n\n        // This is essentially a hard-coded polyfill\n        var optionList = getOptionList(options);\n        if (optionList.length === 1 && optionList[0].name === 'weekday') {\n            var weekday = [];\n            weekday[0] = 'Sun';\n            weekday[1] = 'Mon';\n            weekday[2] = 'Tue';\n            weekday[3] = 'Wed';\n            weekday[4] = 'Thu';\n            weekday[5] = 'Fri';\n            weekday[6] = 'Sat';\n            return weekday[date.getDay()];\n        }\n\n        return date.toLocaleDateString();\n    }\n\n    function toLocaleTimeString(date, options) {\n\n        if (!date) {\n            throw new Error('date cannot be null');\n        }\n\n        options = options || {};\n\n        if (toLocaleTimeStringSupportsLocales) {\n\n            var currentLocale = globalize.getCurrentDateTimeLocale();\n\n            if (currentLocale) {\n                return date.toLocaleTimeString(currentLocale, options);\n            }\n        }\n\n        return date.toLocaleTimeString();\n    }\n\n    function getDisplayTime(date) {\n\n        if (!date) {\n            throw new Error('date cannot be null');\n        }\n\n        if ((typeof date).toString().toLowerCase() === 'string') {\n            try {\n\n                date = parseISO8601Date(date, true);\n\n            } catch (err) {\n                return date;\n            }\n        }\n\n        if (toLocaleTimeStringSupportsLocales) {\n            return toLocaleTimeString(date, {\n\n                hour: 'numeric',\n                minute: '2-digit'\n\n            });\n        }\n\n        var time = toLocaleTimeString(date);\n\n        var timeLower = time.toLowerCase();\n\n        if (timeLower.indexOf('am') !== -1 || timeLower.indexOf('pm') !== -1) {\n\n            time = timeLower;\n            var hour = date.getHours() % 12;\n            var suffix = date.getHours() > 11 ? 'pm' : 'am';\n            if (!hour) {\n                hour = 12;\n            }\n            var minutes = date.getMinutes();\n\n            if (minutes < 10) {\n                minutes = '0' + minutes;\n            }\n\n            minutes = ':' + minutes;\n            time = hour + minutes + suffix;\n        } else {\n\n            var timeParts = time.split(':');\n\n            // Trim off seconds\n            if (timeParts.length > 2) {\n\n                // setting to 2 also handles '21:00:28 GMT+9:30'\n                timeParts.length = 2;\n                time = timeParts.join(':');\n            }\n        }\n\n        return time;\n    }\n\n    function isRelativeDay(date, offsetInDays) {\n\n        if (!date) {\n            throw new Error('date cannot be null');\n        }\n\n        var yesterday = new Date();\n        var day = yesterday.getDate() + offsetInDays;\n\n        yesterday.setDate(day); // automatically adjusts month/year appropriately\n\n        return date.getFullYear() === yesterday.getFullYear() && date.getMonth() === yesterday.getMonth() && date.getDate() === day;\n    }\n\n    return {\n        parseISO8601Date: parseISO8601Date,\n        getDisplayRunningTime: getDisplayRunningTime,\n        toLocaleDateString: toLocaleDateString,\n        toLocaleString: toLocaleString,\n        getDisplayTime: getDisplayTime,\n        isRelativeDay: isRelativeDay,\n        toLocaleTimeString: toLocaleTimeString,\n        supportsLocalization: function () {\n            return toLocaleTimeStringSupportsLocales;\n        }\n    };\n});\n"]}