{"version":3,"sources":["libraries/navdrawer/navdrawer.js"],"names":["define","browser","dom","options","getTouches","e","changedTouches","targetTouches","touches","onMenuTouchStart","target","classList","remove","touch","menuTouchStartX","clientX","menuTouchStartY","clientY","menuTouchStartTime","Date","getTime","onMenuTouchMove","isOpen","self","visible","endX","endY","deltaX","deltaY","setVelocity","time","velocity","Math","abs","dragMode","scrollContainer","addEventListener","disableEvent","showMask","newPos","currentPos","changeMenuPos","onMenuTouchEnd","add","removeEventListener","checkMenuState","onEdgeTouchStart","isPeeking","handleSize","type","edgeContainer","onEdgeTouchMove","preventDefault","stopPropagation","onEdgeTouchEnd","onBackgroundTouchStart","backgroundTouchStartX","backgroundTouchStartTime","onBackgroundTouchMove","width","isVisible","countStart","startPoint","onBackgroundTouchEnd","onMaskTransitionEnd","mask","contains","defaults","querySelector","TouchMenuLA","this","disableMask","maxMaskOpacity","initialize","prototype","initElements","style","left","document","createElement","className","body","appendChild","whichTransitionEvent","passive","_edgeSwipeEnabled","animateToPosition","pos","requestAnimationFrame","transform","clickMaskClose","close","open","invoke","onChange","hideMask","toggle","fn","apply","setEdgeSwipeEnabled","enabled","disableEdgeSwipe","Object","assign","edge"],"mappings":"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","file":"navdrawer.js","sourcesContent":["define([\"browser\", \"dom\", \"css!./navdrawer\", \"scrollStyles\"], function (browser, dom) {\n    \"use strict\";\n\n    return function (options) {\n        function getTouches(e) {\n            return e.changedTouches || e.targetTouches || e.touches;\n        }\n\n        function onMenuTouchStart(e) {\n            options.target.classList.remove(\"transition\");\n            var touches = getTouches(e);\n            var touch = touches[0] || {};\n            menuTouchStartX = touch.clientX;\n            menuTouchStartY = touch.clientY;\n            menuTouchStartTime = new Date().getTime();\n        }\n\n        function setVelocity(deltaX) {\n            var time = new Date().getTime() - (menuTouchStartTime || 0);\n            velocity = Math.abs(deltaX) / time;\n        }\n\n        function onMenuTouchMove(e) {\n            var isOpen = self.visible;\n            var touches = getTouches(e);\n            var touch = touches[0] || {};\n            var endX = touch.clientX || 0;\n            var endY = touch.clientY || 0;\n            var deltaX = endX - (menuTouchStartX || 0);\n            var deltaY = endY - (menuTouchStartY || 0);\n            setVelocity(deltaX);\n\n            if (isOpen && 1 !== dragMode && deltaX > 0) {\n                dragMode = 2;\n            }\n\n            if (0 === dragMode && (!isOpen || Math.abs(deltaX) >= 10) && Math.abs(deltaY) < 5) {\n                dragMode = 1;\n                scrollContainer.addEventListener(\"scroll\", disableEvent);\n                self.showMask();\n            } else if (0 === dragMode && Math.abs(deltaY) >= 5) {\n                dragMode = 2;\n            }\n\n            if (1 === dragMode) {\n                newPos = currentPos + deltaX;\n                self.changeMenuPos();\n            }\n        }\n\n        function onMenuTouchEnd(e) {\n            options.target.classList.add(\"transition\");\n            scrollContainer.removeEventListener(\"scroll\", disableEvent);\n            dragMode = 0;\n            var touches = getTouches(e);\n            var touch = touches[0] || {};\n            var endX = touch.clientX || 0;\n            var endY = touch.clientY || 0;\n            var deltaX = endX - (menuTouchStartX || 0);\n            var deltaY = endY - (menuTouchStartY || 0);\n            currentPos = deltaX;\n            self.checkMenuState(deltaX, deltaY);\n        }\n\n        function onEdgeTouchStart(e) {\n            if (isPeeking) {\n                onMenuTouchMove(e);\n            } else {\n                if (((getTouches(e)[0] || {}).clientX || 0) <= options.handleSize) {\n                    isPeeking = true;\n\n                    if (e.type === \"touchstart\") {\n                        dom.removeEventListener(edgeContainer, \"touchmove\", onEdgeTouchMove, {});\n                        dom.addEventListener(edgeContainer, \"touchmove\", onEdgeTouchMove, {});\n                    }\n\n                    onMenuTouchStart(e);\n                }\n            }\n        }\n\n        function onEdgeTouchMove(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            onEdgeTouchStart(e);\n        }\n\n        function onEdgeTouchEnd(e) {\n            if (isPeeking) {\n                isPeeking = false;\n                dom.removeEventListener(edgeContainer, \"touchmove\", onEdgeTouchMove, {});\n                onMenuTouchEnd(e);\n            }\n        }\n\n        function disableEvent(e) {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n\n        function onBackgroundTouchStart(e) {\n            var touches = getTouches(e);\n            var touch = touches[0] || {};\n            backgroundTouchStartX = touch.clientX;\n            backgroundTouchStartTime = new Date().getTime();\n        }\n\n        function onBackgroundTouchMove(e) {\n            var touches = getTouches(e);\n            var touch = touches[0] || {};\n            var endX = touch.clientX || 0;\n\n            if (endX <= options.width && self.isVisible) {\n                countStart++;\n                var deltaX = endX - (backgroundTouchStartX || 0);\n\n                if (countStart == 1) {\n                    startPoint = deltaX;\n                }\n                if (deltaX < 0 && dragMode !== 2) {\n                    dragMode = 1;\n                    newPos = deltaX - startPoint + options.width;\n                    self.changeMenuPos();\n                    var time = new Date().getTime() - (backgroundTouchStartTime || 0);\n                    velocity = Math.abs(deltaX) / time;\n                }\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n        }\n\n        function onBackgroundTouchEnd(e) {\n            var touches = getTouches(e);\n            var touch = touches[0] || {};\n            var endX = touch.clientX || 0;\n            var deltaX = endX - (backgroundTouchStartX || 0);\n            self.checkMenuState(deltaX);\n            countStart = 0;\n        }\n\n        function onMaskTransitionEnd() {\n            var classList = mask.classList;\n\n            if (!classList.contains(\"backdrop\")) {\n                classList.add(\"hide\");\n            }\n        }\n\n        var self;\n        var defaults;\n        var mask;\n        var newPos = 0;\n        var currentPos = 0;\n        var startPoint = 0;\n        var countStart = 0;\n        var velocity = 0;\n        options.target.classList.add(\"transition\");\n        var dragMode = 0;\n        var scrollContainer = options.target.querySelector(\".mainDrawer-scrollContainer\");\n        scrollContainer.classList.add(\"scrollY\");\n\n        var TouchMenuLA = function () {\n            self = this;\n            defaults = {\n                width: 260,\n                handleSize: 10,\n                disableMask: false,\n                maxMaskOpacity: 0.5\n            };\n            this.isVisible = false;\n            this.initialize();\n        };\n\n        TouchMenuLA.prototype.initElements = function () {\n            options.target.classList.add(\"touch-menu-la\");\n            options.target.style.width = options.width + \"px\";\n            options.target.style.left = -options.width + \"px\";\n\n            if (!options.disableMask) {\n                mask = document.createElement(\"div\");\n                mask.className = \"tmla-mask hide\";\n                document.body.appendChild(mask);\n                dom.addEventListener(mask, dom.whichTransitionEvent(), onMaskTransitionEnd, {\n                    passive: true\n                });\n            }\n        };\n\n        var menuTouchStartX;\n        var menuTouchStartY;\n        var menuTouchStartTime;\n        var edgeContainer = document.querySelector(\".mainDrawerHandle\");\n        var isPeeking = false;\n\n        TouchMenuLA.prototype.animateToPosition = function (pos) {\n            requestAnimationFrame(function () {\n                options.target.style.transform = pos ? \"translateX(\" + pos + \"px)\" : \"none\";\n            });\n        };\n\n        TouchMenuLA.prototype.changeMenuPos = function () {\n            if (newPos <= options.width) {\n                this.animateToPosition(newPos);\n            }\n        };\n\n        TouchMenuLA.prototype.clickMaskClose = function () {\n            mask.addEventListener(\"click\", function () {\n                self.close();\n            });\n        };\n\n        TouchMenuLA.prototype.checkMenuState = function (deltaX, deltaY) {\n            if (velocity >= 0.4) {\n                if (deltaX >= 0 || Math.abs(deltaY || 0) >= 70) {\n                    self.open();\n                } else {\n                    self.close();\n                }\n            } else {\n                if (newPos >= 100) {\n                    self.open();\n                } else {\n                    if (newPos) {\n                        self.close();\n                    }\n                }\n            }\n        };\n\n        TouchMenuLA.prototype.open = function () {\n            this.animateToPosition(options.width);\n            currentPos = options.width;\n            this.isVisible = true;\n            options.target.classList.add(\"drawer-open\");\n            self.showMask();\n            self.invoke(options.onChange);\n        };\n\n        TouchMenuLA.prototype.close = function () {\n            this.animateToPosition(0);\n            currentPos = 0;\n            self.isVisible = false;\n            options.target.classList.remove(\"drawer-open\");\n            self.hideMask();\n            self.invoke(options.onChange);\n        };\n\n        TouchMenuLA.prototype.toggle = function () {\n            if (self.isVisible) {\n                self.close();\n            } else {\n                self.open();\n            }\n        };\n\n        var backgroundTouchStartX;\n        var backgroundTouchStartTime;\n\n        TouchMenuLA.prototype.showMask = function () {\n            mask.classList.remove(\"hide\");\n            mask.classList.add(\"backdrop\");\n        };\n\n        TouchMenuLA.prototype.hideMask = function () {\n            mask.classList.add(\"hide\");\n            mask.classList.remove(\"backdrop\");\n        };\n\n        TouchMenuLA.prototype.invoke = function (fn) {\n            if (fn) {\n                fn.apply(self);\n            }\n        };\n\n        var _edgeSwipeEnabled;\n\n        TouchMenuLA.prototype.setEdgeSwipeEnabled = function (enabled) {\n            if (!options.disableEdgeSwipe) {\n                if (browser.touch) {\n                    if (enabled) {\n                        if (!_edgeSwipeEnabled) {\n                            _edgeSwipeEnabled = true;\n                            dom.addEventListener(edgeContainer, \"touchstart\", onEdgeTouchStart, {\n                                passive: true\n                            });\n                            dom.addEventListener(edgeContainer, \"touchend\", onEdgeTouchEnd, {\n                                passive: true\n                            });\n                            dom.addEventListener(edgeContainer, \"touchcancel\", onEdgeTouchEnd, {\n                                passive: true\n                            });\n                        }\n                    } else {\n                        if (_edgeSwipeEnabled) {\n                            _edgeSwipeEnabled = false;\n                            dom.removeEventListener(edgeContainer, \"touchstart\", onEdgeTouchStart, {\n                                passive: true\n                            });\n                            dom.removeEventListener(edgeContainer, \"touchend\", onEdgeTouchEnd, {\n                                passive: true\n                            });\n                            dom.removeEventListener(edgeContainer, \"touchcancel\", onEdgeTouchEnd, {\n                                passive: true\n                            });\n                        }\n                    }\n                }\n            }\n        };\n\n        TouchMenuLA.prototype.initialize = function () {\n            options = Object.assign(defaults, options || {});\n\n            if (browser.edge) {\n                options.disableEdgeSwipe = true;\n            }\n\n            self.initElements();\n\n            if (browser.touch) {\n                dom.addEventListener(options.target, \"touchstart\", onMenuTouchStart, {\n                    passive: true\n                });\n                dom.addEventListener(options.target, \"touchmove\", onMenuTouchMove, {\n                    passive: true\n                });\n                dom.addEventListener(options.target, \"touchend\", onMenuTouchEnd, {\n                    passive: true\n                });\n                dom.addEventListener(options.target, \"touchcancel\", onMenuTouchEnd, {\n                    passive: true\n                });\n                dom.addEventListener(mask, \"touchstart\", onBackgroundTouchStart, {\n                    passive: true\n                });\n                dom.addEventListener(mask, \"touchmove\", onBackgroundTouchMove, {});\n                dom.addEventListener(mask, \"touchend\", onBackgroundTouchEnd, {\n                    passive: true\n                });\n                dom.addEventListener(mask, \"touchcancel\", onBackgroundTouchEnd, {\n                    passive: true\n                });\n            }\n\n            self.clickMaskClose();\n        };\n\n        return new TouchMenuLA();\n    };\n});\n"]}