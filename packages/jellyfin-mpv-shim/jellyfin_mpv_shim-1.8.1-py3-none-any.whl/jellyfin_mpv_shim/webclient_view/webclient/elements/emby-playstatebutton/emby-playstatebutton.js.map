{"version":3,"sources":["elements/emby-playstatebutton/emby-playstatebutton.js"],"names":["define","connectionManager","serverNotifications","events","globalize","EmbyButtonPrototype","onClick","e","id","this","getAttribute","serverId","apiClient","getApiClient","classList","contains","markUnplayed","getCurrentUserId","Date","setState","markPlayed","onUserDataChanged","userData","ItemId","Played","button","played","updateAttribute","icon","iconElement","querySelector","add","remove","setAttribute","setTitle","itemType","title","translate","text","innerHTML","clearEvents","removeEventListener","removeNotificationEvent","instance","name","handler","off","bindEvents","addEventListener","addNotificationEvent","localHandler","bind","on","EmbyPlaystateButtonPrototype","Object","create","createdCallback","call","attachedCallback","itemId","detachedCallback","setItem","item","Id","ServerId","UserData","Type","removeAttribute","document","registerElement","prototype","extends"],"mappings":"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","file":"emby-playstatebutton.js","sourcesContent":["define(['connectionManager', 'serverNotifications', 'events', 'globalize', 'emby-button'], function (connectionManager, serverNotifications, events, globalize, EmbyButtonPrototype) {\n    'use strict';\n\n    function addNotificationEvent(instance, name, handler) {\n        var localHandler = handler.bind(instance);\n        events.on(serverNotifications, name, localHandler);\n        instance[name] = localHandler;\n    }\n\n    function removeNotificationEvent(instance, name) {\n        var handler = instance[name];\n        if (handler) {\n            events.off(serverNotifications, name, handler);\n            instance[name] = null;\n        }\n    }\n\n    function onClick(e) {\n\n        var button = this;\n        var id = button.getAttribute('data-id');\n        var serverId = button.getAttribute('data-serverid');\n        var apiClient = connectionManager.getApiClient(serverId);\n\n        if (!button.classList.contains('playstatebutton-played')) {\n            apiClient.markPlayed(apiClient.getCurrentUserId(), id, new Date());\n            setState(button, true);\n        } else {\n            apiClient.markUnplayed(apiClient.getCurrentUserId(), id, new Date());\n            setState(button, false);\n        }\n    }\n\n    function onUserDataChanged(e, apiClient, userData) {\n        var button = this;\n        if (userData.ItemId === button.getAttribute('data-id')) {\n            setState(button, userData.Played);\n        }\n    }\n\n    function setState(button, played, updateAttribute) {\n        var icon = button.iconElement;\n        if (!icon) {\n            button.iconElement = button.querySelector('.material-icons');\n            icon = button.iconElement;\n        }\n\n        if (played) {\n            button.classList.add('playstatebutton-played');\n            if (icon) {\n                icon.classList.add('playstatebutton-icon-played');\n                icon.classList.remove('playstatebutton-icon-unplayed');\n            }\n        } else {\n            button.classList.remove('playstatebutton-played');\n            if (icon) {\n                icon.classList.remove('playstatebutton-icon-played');\n                icon.classList.add('playstatebutton-icon-unplayed');\n            }\n        }\n\n        if (updateAttribute !== false) {\n            button.setAttribute('data-played', played);\n        }\n    }\n\n    function setTitle(button, itemType) {\n\n        if (itemType !== 'AudioBook' && itemType !== 'AudioPodcast') {\n            button.title = globalize.translate('Watched');\n        } else {\n            button.title = globalize.translate('Played');\n        }\n\n        var text = button.querySelector('.button-text');\n        if (text) {\n            text.innerHTML = button.title;\n        }\n    }\n\n    function clearEvents(button) {\n\n        button.removeEventListener('click', onClick);\n        removeNotificationEvent(button, 'UserDataChanged');\n    }\n\n    function bindEvents(button) {\n\n        clearEvents(button);\n\n        button.addEventListener('click', onClick);\n        addNotificationEvent(button, 'UserDataChanged', onUserDataChanged);\n    }\n\n    var EmbyPlaystateButtonPrototype = Object.create(EmbyButtonPrototype);\n\n    EmbyPlaystateButtonPrototype.createdCallback = function () {\n\n        // base method\n        if (EmbyButtonPrototype.createdCallback) {\n            EmbyButtonPrototype.createdCallback.call(this);\n        }\n    };\n\n    EmbyPlaystateButtonPrototype.attachedCallback = function () {\n\n        // base method\n        if (EmbyButtonPrototype.attachedCallback) {\n            EmbyButtonPrototype.attachedCallback.call(this);\n        }\n\n        var itemId = this.getAttribute('data-id');\n        var serverId = this.getAttribute('data-serverid');\n        if (itemId && serverId) {\n\n            setState(this, this.getAttribute('data-played') === 'true', false);\n            bindEvents(this);\n            setTitle(this, this.getAttribute('data-type'));\n        }\n    };\n\n    EmbyPlaystateButtonPrototype.detachedCallback = function () {\n\n        // base method\n        if (EmbyButtonPrototype.detachedCallback) {\n            EmbyButtonPrototype.detachedCallback.call(this);\n        }\n\n        clearEvents(this);\n        this.iconElement = null;\n    };\n\n    EmbyPlaystateButtonPrototype.setItem = function (item) {\n\n        if (item) {\n\n            this.setAttribute('data-id', item.Id);\n            this.setAttribute('data-serverid', item.ServerId);\n\n            var played = item.UserData && item.UserData.Played;\n            setState(this, played);\n            bindEvents(this);\n\n            setTitle(this, item.Type);\n\n        } else {\n\n            this.removeAttribute('data-id');\n            this.removeAttribute('data-serverid');\n            this.removeAttribute('data-played');\n            clearEvents(this);\n        }\n    };\n\n    document.registerElement('emby-playstatebutton', {\n        prototype: EmbyPlaystateButtonPrototype,\n        extends: 'button'\n    });\n});\n"]}