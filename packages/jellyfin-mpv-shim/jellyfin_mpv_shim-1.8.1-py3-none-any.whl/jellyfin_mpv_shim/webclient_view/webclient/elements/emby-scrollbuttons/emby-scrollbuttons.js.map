{"version":3,"sources":["elements/emby-scrollbuttons/emby-scrollbuttons.js"],"names":["define","layoutManager","dom","EmbyScrollButtonsPrototype","Object","create","HTMLDivElement","prototype","getScrollButtonHtml","direction","html","getScrollPosition","parent","getScrollWidth","getScrollSize","onScroll","e","scroller","this","updateScrollButtons","scrollButtons","scrollSize","scrollPos","scrollWidth","scrollButtonsLeft","classList","add","scrollButtonsRight","disabled","scrollPosEnd","getStyleValue","style","name","value","getPropertyValue","replace","parseInt","isNaN","elem","offsetWidth","window","getComputedStyle","paddingLeft","paddingRight","slider","getScrollSlider","onScrollButtonClick","newPos","parentNode","nextSibling","getAttribute","Math","max","scrollToPosition","createdCallback","attachedCallback","innerHTML","buttons","querySelectorAll","addEventListener","scrollHandler","bind","addScrollEventListener","capture","passive","detachedCallback","removeScrollEventListener","document","registerElement","extends"],"mappings":"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","file":"emby-scrollbuttons.js","sourcesContent":["define(['layoutManager', 'dom', 'css!./emby-scrollbuttons', 'webcomponents', 'paper-icon-button-light'], function (layoutManager, dom) {\n    'use strict';\n\n    var EmbyScrollButtonsPrototype = Object.create(HTMLDivElement.prototype);\n\n    EmbyScrollButtonsPrototype.createdCallback = function () {};\n\n    function getScrollButtonHtml(direction) {\n        var html = '';\n        var icon = direction === 'left' ? 'chevron_left' : 'chevron_right';\n\n        html += '<button type=\"button\" is=\"paper-icon-button-light\" data-ripple=\"false\" data-direction=\"' + direction + '\" class=\"emby-scrollbuttons-button\">';\n        html += '<span class=\"material-icons ' + icon + '\"></span>';\n        html += '</button>';\n\n        return html;\n    }\n\n    function getScrollPosition(parent) {\n        if (parent.getScrollPosition) {\n            return parent.getScrollPosition();\n        }\n\n        return 0;\n    }\n\n    function getScrollWidth(parent) {\n        if (parent.getScrollSize) {\n            return parent.getScrollSize();\n        }\n\n        return 0;\n    }\n\n    function updateScrollButtons(scrollButtons, scrollSize, scrollPos, scrollWidth) {\n        // hack alert add twenty for rounding errors\n        if (scrollWidth <= scrollSize + 20) {\n            scrollButtons.scrollButtonsLeft.classList.add('hide');\n            scrollButtons.scrollButtonsRight.classList.add('hide');\n        }\n\n        if (scrollPos > 0) {\n            scrollButtons.scrollButtonsLeft.disabled = false;\n        } else {\n            scrollButtons.scrollButtonsLeft.disabled = true;\n        }\n\n        var scrollPosEnd = scrollPos + scrollSize;\n        if (scrollWidth > 0 && scrollPosEnd >= scrollWidth) {\n            scrollButtons.scrollButtonsRight.disabled = true;\n        } else {\n            scrollButtons.scrollButtonsRight.disabled = false;\n        }\n    }\n\n    function onScroll(e) {\n        var scrollButtons = this;\n        var scroller = this.scroller;\n\n        var scrollSize = getScrollSize(scroller);\n        var scrollPos = getScrollPosition(scroller);\n        var scrollWidth = getScrollWidth(scroller);\n\n        updateScrollButtons(scrollButtons, scrollSize, scrollPos, scrollWidth);\n    }\n\n    function getStyleValue(style, name) {\n        var value = style.getPropertyValue(name);\n        if (!value) {\n            return 0;\n        }\n\n        value = value.replace('px', '');\n        if (!value) {\n            return 0;\n        }\n\n        value = parseInt(value);\n        if (isNaN(value)) {\n            return 0;\n        }\n\n        return value;\n    }\n\n    function getScrollSize(elem) {\n        var scrollSize = elem.offsetWidth;\n        var style = window.getComputedStyle(elem, null);\n\n        var paddingLeft = getStyleValue(style, 'padding-left');\n        if (paddingLeft) {\n            scrollSize -= paddingLeft;\n        }\n\n        var paddingRight = getStyleValue(style, 'padding-right');\n        if (paddingRight) {\n            scrollSize -= paddingRight;\n        }\n\n        var slider = elem.getScrollSlider();\n        style = window.getComputedStyle(slider, null);\n\n        paddingLeft = getStyleValue(style, 'padding-left');\n        if (paddingLeft) {\n            scrollSize -= paddingLeft;\n        }\n\n        paddingRight = getStyleValue(style, 'padding-right');\n        if (paddingRight) {\n            scrollSize -= paddingRight;\n        }\n\n        return scrollSize;\n    }\n\n    function onScrollButtonClick(e) {\n        var scroller = this.parentNode.nextSibling;\n\n        var direction = this.getAttribute('data-direction');\n        var scrollSize = getScrollSize(scroller);\n        var scrollPos = getScrollPosition(scroller);\n        var scrollWidth = getScrollWidth(scroller);\n\n        var newPos;\n        if (direction === 'left') {\n            newPos = Math.max(0, scrollPos - scrollSize);\n        } else {\n            newPos = scrollPos + scrollSize;\n        }\n\n        scroller.scrollToPosition(newPos, false);\n    }\n\n    EmbyScrollButtonsPrototype.attachedCallback = function () {\n        var scroller = this.nextSibling;\n        this.scroller = scroller;\n\n        var parent = this.parentNode;\n        parent.classList.add('emby-scroller-container');\n\n        this.innerHTML = getScrollButtonHtml('left') + getScrollButtonHtml('right');\n\n        var buttons = this.querySelectorAll('.emby-scrollbuttons-button');\n        buttons[0].addEventListener('click', onScrollButtonClick);\n        buttons[1].addEventListener('click', onScrollButtonClick);\n        this.scrollButtonsLeft = buttons[0];\n        this.scrollButtonsRight = buttons[1];\n\n        var scrollHandler = onScroll.bind(this);\n        this.scrollHandler = scrollHandler;\n        scroller.addScrollEventListener(scrollHandler, {\n            capture: false,\n            passive: true\n        });\n    };\n\n    EmbyScrollButtonsPrototype.detachedCallback = function () {\n        var parent = this.scroller;\n        this.scroller = null;\n\n        var scrollHandler = this.scrollHandler;\n        if (parent && scrollHandler) {\n            parent.removeScrollEventListener(scrollHandler, {\n                capture: false,\n                passive: true\n            });\n        }\n\n        this.scrollHandler = null;\n        this.scrollButtonsLeft = null;\n        this.scrollButtonsRight = null;\n    };\n\n    document.registerElement('emby-scrollbuttons', {\n        prototype: EmbyScrollButtonsPrototype,\n        extends: 'div'\n    });\n});\n"]}