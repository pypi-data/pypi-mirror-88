{"version":3,"sources":["elements/emby-itemscontainer/emby-itemscontainer.js"],"names":["define","itemShortcuts","inputManager","connectionManager","playbackManager","imageLoader","layoutManager","browser","dom","loading","focusManager","serverNotifications","events","ItemsContainerPrototype","Object","create","HTMLDivElement","prototype","onClick","e","target","multiSelect","this","onContainerClick","call","disableEvent","preventDefault","stopPropagation","onContextMenu","card","parentWithAttribute","getAttribute","trigger","sourceElement","onUserDataChanged","apiClient","userData","itemsContainer","require","cardBuilder","eventsToMonitor","getEventsToMonitor","indexOf","notifyRefreshNeeded","monitor","split","onTimerCreated","data","programId","ProgramId","newTimerId","Id","onSeriesTimerCreated","onTimerCancelled","onSeriesTimerCancelled","onLibraryChanged","itemsAdded","ItemsAdded","itemsRemoved","ItemsRemoved","length","parentId","foldersAddedTo","FoldersAddedTo","foldersRemovedFrom","FoldersRemovedFrom","collectionFolders","CollectionFolders","onPlaybackStopped","stopInfo","state","NowPlayingItem","MediaType","addNotificationEvent","instance","name","handler","owner","localHandler","bind","on","removeNotificationEvent","off","clearRefreshInterval","isPausing","refreshInterval","clearInterval","refreshIntervalEndTime","resetRefreshInterval","intervalMs","parseInt","setInterval","Date","getTime","onDataFetched","result","items","Items","parentContainer","classList","remove","add","focusId","hasActiveElement","activeElement","document","contains","innerHTML","getItemsHtml","lazyChildren","setFocus","newElement","querySelector","focus","err","console","error","autoFocus","afterRefresh","enableMultiSelect","enabled","current","self","MultiSelect","container","bindOnClick","destroy","enableDragReordering","sortable","Sortable","draggable","handle","onEnd","evt","onDrop","el","item","newIndex","itemId","playlistId","serverId","getApiClient","show","ajax","url","getUrl","type","then","hide","refreshItems","oldIndex","dispatchEvent","CustomEvent","detail","playlistItemId","bubbles","cancelable","createdCallback","attachedCallback","addEventListener","touch","desktop","mobile","tv","click","detachedCallback","removeEventListener","fetchData","pause","paused","resume","options","remainingMs","needsRefresh","refresh","Promise","resolve","isInForeground","timeout","refreshTimeout","clearTimeout","setTimeout","registerElement","extends"],"mappings":"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","file":"emby-itemscontainer.js","sourcesContent":["define(['itemShortcuts', 'inputManager', 'connectionManager', 'playbackManager', 'imageLoader', 'layoutManager', 'browser', 'dom', 'loading', 'focusManager', 'serverNotifications', 'events', 'webcomponents'], function (itemShortcuts, inputManager, connectionManager, playbackManager, imageLoader, layoutManager, browser, dom, loading, focusManager, serverNotifications, events) {\n    'use strict';\n\n    var ItemsContainerPrototype = Object.create(HTMLDivElement.prototype);\n\n    function onClick(e) {\n        var itemsContainer = this;\n        var target = e.target;\n        var multiSelect = itemsContainer.multiSelect;\n\n        if (multiSelect) {\n            if (multiSelect.onContainerClick.call(itemsContainer, e) === false) {\n                return;\n            }\n        }\n\n        itemShortcuts.onClick.call(itemsContainer, e);\n    }\n\n    function disableEvent(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        return false;\n    }\n\n    function onContextMenu(e) {\n        var itemsContainer = this;\n        var target = e.target;\n        var card = dom.parentWithAttribute(target, 'data-id');\n\n        // check for serverId, it won't be present on selectserver\n        if (card && card.getAttribute('data-serverid')) {\n            inputManager.trigger('menu', {\n                sourceElement: card\n            });\n\n            e.preventDefault();\n            e.stopPropagation();\n            return false;\n        }\n    }\n\n    function getShortcutOptions() {\n        return {\n            click: false\n        };\n    }\n\n    ItemsContainerPrototype.enableMultiSelect = function (enabled) {\n        var current = this.multiSelect;\n\n        if (!enabled) {\n            if (current) {\n                current.destroy();\n                this.multiSelect = null;\n            }\n            return;\n        }\n\n        if (current) {\n            return;\n        }\n\n        var self = this;\n        require(['multiSelect'], function (MultiSelect) {\n            self.multiSelect = new MultiSelect({\n                container: self,\n                bindOnClick: false\n            });\n        });\n    };\n\n    function onDrop(evt, itemsContainer) {\n        var el = evt.item;\n\n        var newIndex = evt.newIndex;\n        var itemId = el.getAttribute('data-playlistitemid');\n        var playlistId = el.getAttribute('data-playlistid');\n\n        if (!playlistId) {\n            var oldIndex = evt.oldIndex;\n            el.dispatchEvent(new CustomEvent('itemdrop', {\n                detail: {\n                    oldIndex: oldIndex,\n                    newIndex: newIndex,\n                    playlistItemId: itemId\n                },\n                bubbles: true,\n                cancelable: false\n            }));\n            return;\n        }\n\n        var serverId = el.getAttribute('data-serverid');\n        var apiClient = connectionManager.getApiClient(serverId);\n\n        loading.show();\n\n        apiClient.ajax({\n            url: apiClient.getUrl('Playlists/' + playlistId + '/Items/' + itemId + '/Move/' + newIndex),\n            type: 'POST'\n        }).then(function () {\n            loading.hide();\n        }, function () {\n            loading.hide();\n            itemsContainer.refreshItems();\n        });\n    }\n\n    ItemsContainerPrototype.enableDragReordering = function (enabled) {\n        var current = this.sortable;\n        if (!enabled) {\n            if (current) {\n                current.destroy();\n                this.sortable = null;\n            }\n            return;\n        }\n\n        if (current) {\n            return;\n        }\n\n        var self = this;\n        require(['sortable'], function (Sortable) {\n            self.sortable = new Sortable(self, {\n                draggable: '.listItem',\n                handle: '.listViewDragHandle',\n\n                // dragging ended\n                onEnd: function (evt) {\n                    return onDrop(evt, self);\n                }\n            });\n        });\n    };\n\n    function onUserDataChanged(e, apiClient, userData) {\n\n        var itemsContainer = this;\n\n        require(['cardBuilder'], function (cardBuilder) {\n            cardBuilder.onUserDataChanged(userData, itemsContainer);\n        });\n\n        var eventsToMonitor = getEventsToMonitor(itemsContainer);\n\n        // TODO: Check user data change reason?\n        if (eventsToMonitor.indexOf('markfavorite') !== -1) {\n            itemsContainer.notifyRefreshNeeded();\n        } else if (eventsToMonitor.indexOf('markplayed') !== -1) {\n            itemsContainer.notifyRefreshNeeded();\n        }\n    }\n\n    function getEventsToMonitor(itemsContainer) {\n        var monitor = itemsContainer.getAttribute('data-monitor');\n        if (monitor) {\n            return monitor.split(',');\n        }\n\n        return [];\n    }\n\n    function onTimerCreated(e, apiClient, data) {\n\n        var itemsContainer = this;\n\n        if (getEventsToMonitor(itemsContainer).indexOf('timers') !== -1) {\n            itemsContainer.notifyRefreshNeeded();\n            return;\n        }\n\n        var programId = data.ProgramId;\n        // This could be null, not supported by all tv providers\n        var newTimerId = data.Id;\n\n        require(['cardBuilder'], function (cardBuilder) {\n            cardBuilder.onTimerCreated(programId, newTimerId, itemsContainer);\n        });\n    }\n\n    function onSeriesTimerCreated(e, apiClient, data) {\n        var itemsContainer = this;\n        if (getEventsToMonitor(itemsContainer).indexOf('seriestimers') !== -1) {\n            itemsContainer.notifyRefreshNeeded();\n            return;\n        }\n    }\n\n    function onTimerCancelled(e, apiClient, data) {\n        var itemsContainer = this;\n        if (getEventsToMonitor(itemsContainer).indexOf('timers') !== -1) {\n            itemsContainer.notifyRefreshNeeded();\n            return;\n        }\n\n        require(['cardBuilder'], function (cardBuilder) {\n            cardBuilder.onTimerCancelled(data.Id, itemsContainer);\n        });\n    }\n\n    function onSeriesTimerCancelled(e, apiClient, data) {\n        var itemsContainer = this;\n        if (getEventsToMonitor(itemsContainer).indexOf('seriestimers') !== -1) {\n            itemsContainer.notifyRefreshNeeded();\n            return;\n        }\n\n        require(['cardBuilder'], function (cardBuilder) {\n            cardBuilder.onSeriesTimerCancelled(data.Id, itemsContainer);\n        });\n    }\n\n    function onLibraryChanged(e, apiClient, data) {\n        var itemsContainer = this;\n\n        var eventsToMonitor = getEventsToMonitor(itemsContainer);\n        if (eventsToMonitor.indexOf('seriestimers') !== -1 || eventsToMonitor.indexOf('timers') !== -1) {\n            // yes this is an assumption\n            return;\n        }\n\n        var itemsAdded = data.ItemsAdded || [];\n        var itemsRemoved = data.ItemsRemoved || [];\n        if (!itemsAdded.length && !itemsRemoved.length) {\n            return;\n        }\n\n        var parentId = itemsContainer.getAttribute('data-parentid');\n        if (parentId) {\n            var foldersAddedTo = data.FoldersAddedTo || [];\n            var foldersRemovedFrom = data.FoldersRemovedFrom || [];\n            var collectionFolders = data.CollectionFolders || [];\n\n            if (foldersAddedTo.indexOf(parentId) === -1 && foldersRemovedFrom.indexOf(parentId) === -1 && collectionFolders.indexOf(parentId) === -1) {\n                return;\n            }\n        }\n\n        itemsContainer.notifyRefreshNeeded();\n    }\n\n    function onPlaybackStopped(e, stopInfo) {\n        var itemsContainer = this;\n        var state = stopInfo.state;\n\n        var eventsToMonitor = getEventsToMonitor(itemsContainer);\n        if (state.NowPlayingItem && state.NowPlayingItem.MediaType === 'Video') {\n            if (eventsToMonitor.indexOf('videoplayback') !== -1) {\n                itemsContainer.notifyRefreshNeeded(true);\n                return;\n            }\n        } else if (state.NowPlayingItem && state.NowPlayingItem.MediaType === 'Audio') {\n            if (eventsToMonitor.indexOf('audioplayback') !== -1) {\n                itemsContainer.notifyRefreshNeeded(true);\n                return;\n            }\n        }\n    }\n\n    function addNotificationEvent(instance, name, handler, owner) {\n        var localHandler = handler.bind(instance);\n        owner = owner || serverNotifications;\n        events.on(owner, name, localHandler);\n        instance['event_' + name] = localHandler;\n    }\n\n    function removeNotificationEvent(instance, name, owner) {\n        var handler = instance['event_' + name];\n        if (handler) {\n            owner = owner || serverNotifications;\n            events.off(owner, name, handler);\n            instance['event_' + name] = null;\n        }\n    }\n\n    ItemsContainerPrototype.createdCallback = function () {\n        this.classList.add('itemsContainer');\n    };\n\n    ItemsContainerPrototype.attachedCallback = function () {\n        this.addEventListener('click', onClick);\n\n        if (browser.touch) {\n            this.addEventListener('contextmenu', disableEvent);\n        } else {\n            if (this.getAttribute('data-contextmenu') !== 'false') {\n                this.addEventListener('contextmenu', onContextMenu);\n            }\n        }\n\n        if (layoutManager.desktop || layoutManager.mobile) {\n            if (this.getAttribute('data-multiselect') !== 'false') {\n                this.enableMultiSelect(true);\n            }\n        }\n\n        if (layoutManager.tv) {\n            this.classList.add('itemsContainer-tv');\n        }\n\n        itemShortcuts.on(this, getShortcutOptions());\n\n        addNotificationEvent(this, 'UserDataChanged', onUserDataChanged);\n        addNotificationEvent(this, 'TimerCreated', onTimerCreated);\n        addNotificationEvent(this, 'SeriesTimerCreated', onSeriesTimerCreated);\n        addNotificationEvent(this, 'TimerCancelled', onTimerCancelled);\n        addNotificationEvent(this, 'SeriesTimerCancelled', onSeriesTimerCancelled);\n        addNotificationEvent(this, 'LibraryChanged', onLibraryChanged);\n        addNotificationEvent(this, 'playbackstop', onPlaybackStopped, playbackManager);\n\n        if (this.getAttribute('data-dragreorder') === 'true') {\n            this.enableDragReordering(true);\n        }\n    };\n\n    ItemsContainerPrototype.detachedCallback = function () {\n        clearRefreshInterval(this);\n\n        this.enableMultiSelect(false);\n        this.enableDragReordering(false);\n        this.removeEventListener('click', onClick);\n        this.removeEventListener('contextmenu', onContextMenu);\n        this.removeEventListener('contextmenu', disableEvent);\n\n        itemShortcuts.off(this, getShortcutOptions());\n\n        removeNotificationEvent(this, 'UserDataChanged');\n        removeNotificationEvent(this, 'TimerCreated');\n        removeNotificationEvent(this, 'SeriesTimerCreated');\n        removeNotificationEvent(this, 'TimerCancelled');\n        removeNotificationEvent(this, 'SeriesTimerCancelled');\n        removeNotificationEvent(this, 'LibraryChanged');\n        removeNotificationEvent(this, 'playbackstop', playbackManager);\n\n        this.fetchData = null;\n        this.getItemsHtml = null;\n        this.parentContainer = null;\n    };\n\n    ItemsContainerPrototype.pause = function () {\n        clearRefreshInterval(this, true);\n        this.paused = true;\n    };\n\n    ItemsContainerPrototype.resume = function (options) {\n        this.paused = false;\n\n        var refreshIntervalEndTime = this.refreshIntervalEndTime;\n        if (refreshIntervalEndTime) {\n\n            var remainingMs = refreshIntervalEndTime - new Date().getTime();\n            if (remainingMs > 0 && !this.needsRefresh) {\n                resetRefreshInterval(this, remainingMs);\n            } else {\n                this.needsRefresh = true;\n                this.refreshIntervalEndTime = null;\n            }\n        }\n\n        if (this.needsRefresh || (options && options.refresh)) {\n            return this.refreshItems();\n        }\n\n        return Promise.resolve();\n    };\n\n    ItemsContainerPrototype.refreshItems = function () {\n        if (!this.fetchData) {\n            return Promise.resolve();\n        }\n\n        if (this.paused) {\n            this.needsRefresh = true;\n            return Promise.resolve();\n        }\n\n        this.needsRefresh = false;\n\n        return this.fetchData().then(onDataFetched.bind(this));\n    };\n\n    ItemsContainerPrototype.notifyRefreshNeeded = function (isInForeground) {\n        if (this.paused) {\n            this.needsRefresh = true;\n            return;\n        }\n\n        var timeout = this.refreshTimeout;\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n\n        if (isInForeground === true) {\n            this.refreshItems();\n        } else {\n            this.refreshTimeout = setTimeout(this.refreshItems.bind(this), 10000);\n        }\n    };\n\n    function clearRefreshInterval(itemsContainer, isPausing) {\n        if (itemsContainer.refreshInterval) {\n            clearInterval(itemsContainer.refreshInterval);\n            itemsContainer.refreshInterval = null;\n\n            if (!isPausing) {\n                itemsContainer.refreshIntervalEndTime = null;\n            }\n        }\n    }\n\n    function resetRefreshInterval(itemsContainer, intervalMs) {\n        clearRefreshInterval(itemsContainer);\n\n        if (!intervalMs) {\n            intervalMs = parseInt(itemsContainer.getAttribute('data-refreshinterval') || '0');\n        }\n\n        if (intervalMs) {\n            itemsContainer.refreshInterval = setInterval(itemsContainer.notifyRefreshNeeded.bind(itemsContainer), intervalMs);\n            itemsContainer.refreshIntervalEndTime = new Date().getTime() + intervalMs;\n        }\n    }\n\n    function onDataFetched(result) {\n        var items = result.Items || result;\n\n        var parentContainer = this.parentContainer;\n        if (parentContainer) {\n            if (items.length) {\n                parentContainer.classList.remove('hide');\n            } else {\n                parentContainer.classList.add('hide');\n            }\n        }\n\n        var activeElement = document.activeElement;\n        var focusId;\n        var hasActiveElement;\n\n        if (this.contains(activeElement)) {\n            hasActiveElement = true;\n            focusId = activeElement.getAttribute('data-id');\n        }\n\n        this.innerHTML = this.getItemsHtml(items);\n\n        imageLoader.lazyChildren(this);\n\n        if (hasActiveElement) {\n            setFocus(this, focusId);\n        }\n\n        resetRefreshInterval(this);\n\n        if (this.afterRefresh) {\n            this.afterRefresh(result);\n        }\n    }\n\n    function setFocus(itemsContainer, focusId) {\n        if (focusId) {\n            var newElement = itemsContainer.querySelector('[data-id=\"' + focusId + '\"]');\n            if (newElement) {\n                try {\n                    focusManager.focus(newElement);\n                    return;\n                } catch (err) {\n                    console.error(err);\n                }\n            }\n        }\n\n        focusManager.autoFocus(itemsContainer);\n    }\n\n    document.registerElement('emby-itemscontainer', {\n        prototype: ItemsContainerPrototype,\n        extends: 'div'\n    });\n});\n"]}