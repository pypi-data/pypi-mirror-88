{"version":3,"sources":["components/sanitizeFilename.js"],"names":["Object","defineProperty","exports","value","sanitize","illegalRe","controlRe","reservedRe","windowsReservedRe","windowsTrailingRe","isHighSurrogate","codePoint","isLowSurrogate","getByteLength","string","Error","charLength","length","byteLength","prevCodePoint","i","charCodeAt","truncate","segment","curByteLength","slice","input","replacement","replace"],"mappings":"AAAA,aAEAA,OAAOC,eAAeC,QAAS,aAAc,CAC3CC,OAAO,IAETD,QAAQE,SAAWA,SAHnB,IAAMC,UAAY,qBAEZC,UAAY,wBACZC,WAAa,QACbC,kBAAoB,gDACpBC,kBAAoB,UAE1B,SAASC,gBAAgBC,WACrB,OAAOA,WAAa,OAAUA,WAAa,MAG/C,SAASC,eAAeD,WACpB,OAAOA,WAAa,OAAUA,WAAa,MAG/C,SAASE,cAAcC,QACnB,GAAsB,iBAAXA,OACP,MAAM,IAAIC,MAAM,wBAOpB,IAJA,IAAMC,WAAaF,OAAOG,OACtBC,WAAa,EACbP,UAAY,KACZQ,cAAgB,KACXC,EAAI,EAAGA,EAAIJ,WAAYI,IAIxBR,eAHJD,UAAYG,OAAOO,WAAWD,IAKL,MAAjBD,eAAyBT,gBAAgBS,eACzCD,YAAc,EAEdA,YAAc,EAEXP,WAAa,IACpBO,YAAc,EACPP,WAAa,KAAQA,WAAa,KACzCO,YAAc,EACPP,WAAa,MAASA,WAAa,QAC1CO,YAAc,GAElBC,cAAgBR,UAGpB,OAAOO,WAGX,SAASI,SAASR,OAAQI,YACtB,GAAsB,iBAAXJ,OACP,MAAM,IAAIC,MAAM,wBAQpB,IALA,IAEIJ,UACAY,QAHEP,WAAaF,OAAOG,OACtBO,cAAgB,EAIXJ,EAAI,EAAGA,EAAIJ,WAAYI,GAAK,EAAG,CAWpC,GAVAT,UAAYG,OAAOO,WAAWD,GAC9BG,QAAUT,OAAOM,GAEbV,gBAAgBC,YAAcC,eAAeE,OAAOO,WAAWD,EAAI,MAEnEG,SAAWT,OADXM,GAAK,KAITI,eAAiBX,cAAcU,YAETL,WAClB,OAAOJ,OAAOW,MAAM,EAAGL,EAAI,GACxB,GAAII,cAAgBN,WACvB,OAAOJ,OAAOW,MAAM,EAAGL,EAAIG,QAAQN,OAAS,GAIpD,OAAOH,OAGJ,SAASV,SAASsB,MAAOC,aAO5B,OAAOL,SANWI,MACbE,QAAQvB,UAAWsB,aACnBC,QAAQtB,UAAWqB,aACnBC,QAAQrB,WAAYoB,aACpBC,QAAQpB,kBAAmBmB,aAC3BC,QAAQnB,kBAAmBkB,aACL","file":"sanitizeFilename.js","sourcesContent":["// From https://github.com/parshap/node-sanitize-filename\n\nconst illegalRe = /[\\/\\?<>\\\\:\\*\\|\":]/g;\n// eslint-disable-next-line no-control-regex\nconst controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g;\nconst reservedRe = /^\\.+$/;\nconst windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\\..*)?$/i;\nconst windowsTrailingRe = /[\\. ]+$/;\n\nfunction isHighSurrogate(codePoint) {\n    return codePoint >= 0xd800 && codePoint <= 0xdbff;\n}\n\nfunction isLowSurrogate(codePoint) {\n    return codePoint >= 0xdc00 && codePoint <= 0xdfff;\n}\n\nfunction getByteLength(string) {\n    if (typeof string !== 'string') {\n        throw new Error('Input must be string');\n    }\n\n    const charLength = string.length;\n    let byteLength = 0;\n    let codePoint = null;\n    let prevCodePoint = null;\n    for (let i = 0; i < charLength; i++) {\n        codePoint = string.charCodeAt(i);\n        // handle 4-byte non-BMP chars\n        // low surrogate\n        if (isLowSurrogate(codePoint)) {\n            // when parsing previous hi-surrogate, 3 is added to byteLength\n            if (prevCodePoint != null && isHighSurrogate(prevCodePoint)) {\n                byteLength += 1;\n            } else {\n                byteLength += 3;\n            }\n        } else if (codePoint <= 0x7f) {\n            byteLength += 1;\n        } else if (codePoint >= 0x80 && codePoint <= 0x7ff) {\n            byteLength += 2;\n        } else if (codePoint >= 0x800 && codePoint <= 0xffff) {\n            byteLength += 3;\n        }\n        prevCodePoint = codePoint;\n    }\n\n    return byteLength;\n}\n\nfunction truncate(string, byteLength) {\n    if (typeof string !== 'string') {\n        throw new Error('Input must be string');\n    }\n\n    const charLength = string.length;\n    let curByteLength = 0;\n    let codePoint;\n    let segment;\n\n    for (let i = 0; i < charLength; i += 1) {\n        codePoint = string.charCodeAt(i);\n        segment = string[i];\n\n        if (isHighSurrogate(codePoint) && isLowSurrogate(string.charCodeAt(i + 1))) {\n            i += 1;\n            segment += string[i];\n        }\n\n        curByteLength += getByteLength(segment);\n\n        if (curByteLength === byteLength) {\n            return string.slice(0, i + 1);\n        } else if (curByteLength > byteLength) {\n            return string.slice(0, i - segment.length + 1);\n        }\n    }\n\n    return string;\n}\n\nexport function sanitize(input, replacement) {\n    const sanitized = input\n        .replace(illegalRe, replacement)\n        .replace(controlRe, replacement)\n        .replace(reservedRe, replacement)\n        .replace(windowsReservedRe, replacement)\n        .replace(windowsTrailingRe, replacement);\n    return truncate(sanitized, 255);\n}\n"]}