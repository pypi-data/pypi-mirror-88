{"version":3,"sources":["components/autoFocuser.js"],"names":["define","_exports","_focusManager","_layoutManager","_interopRequireDefault","obj","__esModule","default","activeElement","isEnabled","layoutManager","tv","enable","window","addEventListener","e","target","console","debug","autoFocus","container","document","body","focusedElement","candidates","classList","contains","push","querySelector","concat","Array","from","querySelectorAll","every","element","focusManager","isCurrentlyFocusable","focus","itemsContainer","Object","defineProperty","value","_default"],"mappings":"AAAAA,OAAO,CAAC,UAAW,eAAgB,kBAAkB,SAAUC,SAAUC,cAAeC,gBACtF,aAYA,SAASC,uBAAuBC,KAAO,OAAOA,KAAOA,IAAIC,WAAaD,IAAM,CAAEE,QAASF,KAArF,IAAIG,cAKG,SAASC,YACZ,OAAOC,eAAAA,QAAcC,GAMlB,SAASC,SACPH,cAILI,OAAOC,iBAAiB,WAAW,SAAUC,GACzCP,cAAgBO,EAAEC,UAGtBC,QAAQC,MAAM,wBAQX,SAASC,UAAUC,WACtB,IAAKX,YACD,OAAO,KAGXW,UAAYA,WAAaC,SAASC,KAElC,IAoBIC,eApBAC,WAAa,GAgCjB,GA9BIhB,gBAEIA,cAAciB,UAAUC,SAAS,oBACjCF,WAAWG,KAAKP,UAAUQ,cAAc,qBACxCJ,WAAWG,KAAKP,UAAUQ,cAAc,kBACjCpB,cAAciB,UAAUC,SAAS,gBACxCF,WAAWG,KAAKP,UAAUQ,cAAc,iBACxCJ,WAAWG,KAAKP,UAAUQ,cAAc,sBACjCpB,cAAciB,UAAUC,SAAS,kBACxCF,WAAWG,KAAKP,UAAUQ,cAAc,mBAG5CJ,WAAWG,KAAKnB,iBAIpBgB,YADAA,WAAaA,WAAWK,OAAOC,MAAMC,KAAKX,UAAUY,iBAAiB,iBAC7CH,OAAOC,MAAMC,KAAKX,UAAUY,iBAAiB,eAI1DC,OAAM,SAAUC,SACvB,OAAIC,cAAAA,QAAaC,qBAAqBF,WAClCC,cAAAA,QAAaE,MAAMH,SACnBX,eAAiBW,SACV,OAMVX,eAAgB,CAEjB,IAAMe,eAAiBlB,UAAUQ,cAAc,mBAE3CU,iBACAf,eAAiBY,cAAAA,QAAahB,UAAUmB,iBAQhD,OAJKf,iBACDA,eAAiBY,cAAAA,QAAahB,UAAUC,YAGrCG,eA3FbgB,OAAOC,eAAevC,SAAU,aAAc,CAC5CwC,OAAO,IAETxC,SAASQ,UAAYA,UACrBR,SAASW,OAASA,OAClBX,SAASkB,UAAYA,UACrBlB,SAASM,aAAU,EAFrBL,cAAAE,uBAAAF,eACAC,eAAAC,uBAAAD,gBAsGE,IAAIuC,SAXS,CACXjC,UAAWA,UACXG,OAAQA,OACRO,UAAWA,WAablB,SAASM,QAAUmC","file":"autoFocuser.js","sourcesContent":["/* eslint-disable indent */\n\n/**\n * Module for performing auto-focus.\n * @module components/autoFocuser\n */\n\nimport focusManager from 'focusManager';\nimport layoutManager from 'layoutManager';\n\n    /**\n     * Previously selected element.\n     */\n    let activeElement;\n\n    /**\n     * Returns _true_ if AutoFocuser is enabled.\n     */\n    export function isEnabled() {\n        return layoutManager.tv;\n    }\n\n    /**\n     * Start AutoFocuser.\n     */\n    export function enable() {\n        if (!isEnabled()) {\n            return;\n        }\n\n        window.addEventListener('focusin', function (e) {\n            activeElement = e.target;\n        });\n\n        console.debug('AutoFocuser enabled');\n    }\n\n    /**\n     * Set focus on a suitable element, taking into account the previously selected.\n     * @param {HTMLElement} [container] - Element to limit scope.\n     * @returns {HTMLElement} Focused element.\n     */\n    export function autoFocus(container) {\n        if (!isEnabled()) {\n            return null;\n        }\n\n        container = container || document.body;\n\n        let candidates = [];\n\n        if (activeElement) {\n            // These elements are recreated\n            if (activeElement.classList.contains('btnPreviousPage')) {\n                candidates.push(container.querySelector('.btnPreviousPage'));\n                candidates.push(container.querySelector('.btnNextPage'));\n            } else if (activeElement.classList.contains('btnNextPage')) {\n                candidates.push(container.querySelector('.btnNextPage'));\n                candidates.push(container.querySelector('.btnPreviousPage'));\n            } else if (activeElement.classList.contains('btnSelectView')) {\n                candidates.push(container.querySelector('.btnSelectView'));\n            }\n\n            candidates.push(activeElement);\n        }\n\n        candidates = candidates.concat(Array.from(container.querySelectorAll('.btnResume')));\n        candidates = candidates.concat(Array.from(container.querySelectorAll('.btnPlay')));\n\n        let focusedElement;\n\n        candidates.every(function (element) {\n            if (focusManager.isCurrentlyFocusable(element)) {\n                focusManager.focus(element);\n                focusedElement = element;\n                return false;\n            }\n\n            return true;\n        });\n\n        if (!focusedElement) {\n            // FIXME: Multiple itemsContainers\n            const itemsContainer = container.querySelector('.itemsContainer');\n\n            if (itemsContainer) {\n                focusedElement = focusManager.autoFocus(itemsContainer);\n            }\n        }\n\n        if (!focusedElement) {\n            focusedElement = focusManager.autoFocus(container);\n        }\n\n        return focusedElement;\n    }\n\n/* eslint-enable indent */\n\nexport default {\n    isEnabled: isEnabled,\n    enable: enable,\n    autoFocus: autoFocus\n};\n"]}