{"version":3,"sources":["components/tunerPicker.js"],"names":["define","dialogHelper","dom","layoutManager","connectionManager","globalize","loading","browser","focusManager","scrollHelper","enableFocusTransform","slow","edge","getDeviceHtml","device","html","cssClass","tv","DeviceId","getTunerName","providerId","toLowerCase","Type","FriendlyName","Url","discoverDevices","view","apiClient","show","querySelector","classList","remove","ApiClient","getJSON","getUrl","NewDevicesOnly","then","devices","currentDevices","renderDevices","i","length","translate","add","elem","innerHTML","autoFocus","hide","tunerPicker","this","options","dialogOptions","removeOnClose","scrollY","size","dlg","createDialog","deviceResult","getEditorHtml","addEventListener","close","e","tunerCard","parentWithClass","target","deviceId","getAttribute","filter","d","centerFocus","on","getApiClient","serverId","off","open","Promise","resolve","reject"],"mappings":"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","file":"tunerPicker.js","sourcesContent":["define(['dialogHelper', 'dom', 'layoutManager', 'connectionManager', 'globalize', 'loading', 'browser', 'focusManager', 'scrollHelper', 'material-icons', 'formDialogStyle', 'emby-button', 'emby-itemscontainer', 'cardStyle'], function (dialogHelper, dom, layoutManager, connectionManager, globalize, loading, browser, focusManager, scrollHelper) {\n    'use strict';\n\n    var enableFocusTransform = !browser.slow && !browser.edge;\n\n    function getEditorHtml() {\n        var html = '';\n        html += '<div class=\"formDialogContent scrollY\">';\n        html += '<div class=\"dialogContentInner dialog-content-centered\">';\n        html += '<div class=\"loadingContent hide\">';\n        html += '<h1>' + globalize.translate('DetectingDevices') + '...</h1>';\n        html += '<p>' + globalize.translate('MessagePleaseWait') + '</p>';\n        html += '</div>';\n        html += '<h1 style=\"margin-bottom:.25em;\" class=\"devicesHeader hide\">' + globalize.translate('HeaderNewDevices') + '</h1>';\n        html += '<div is=\"emby-itemscontainer\" class=\"results vertical-wrap\">';\n        html += '</div>';\n        html += '</div>';\n        return html += '</div>';\n    }\n\n    function getDeviceHtml(device) {\n        var padderClass;\n        var html = '';\n        var cssClass = 'card scalableCard';\n        var cardBoxCssClass = 'cardBox visualCardBox';\n        cssClass += ' backdropCard backdropCard-scalable';\n        padderClass = 'cardPadder-backdrop';\n\n        // TODO move card creation code to Card component\n\n        if (layoutManager.tv) {\n            cssClass += ' show-focus';\n\n            if (enableFocusTransform) {\n                cssClass += ' show-animation';\n            }\n        }\n\n        html += '<button type=\"button\" class=\"' + cssClass + '\" data-id=\"' + device.DeviceId + '\" style=\"min-width:33.3333%;\">';\n        html += '<div class=\"' + cardBoxCssClass + '\">';\n        html += '<div class=\"cardScalable visualCardBox-cardScalable\">';\n        html += '<div class=\"' + padderClass + '\"></div>';\n        html += '<div class=\"cardContent searchImage\">';\n        html += '<div class=\"cardImageContainer coveredImage\"><span class=\"cardImageIcon material-icons dvr\"></span></div>';\n        html += '</div>';\n        html += '</div>';\n        html += '<div class=\"cardFooter visualCardBox-cardFooter\">';\n        html += '<div class=\"cardText cardTextCentered\">' + getTunerName(device.Type) + '</div>';\n        html += '<div class=\"cardText cardTextCentered cardText-secondary\">' + device.FriendlyName + '</div>';\n        html += '<div class=\"cardText cardText-secondary cardTextCentered\">';\n        html += device.Url || '&nbsp;';\n        html += '</div>';\n        html += '</div>';\n        html += '</div>';\n        return html += '</button>';\n    }\n\n    function getTunerName(providerId) {\n        switch (providerId = providerId.toLowerCase()) {\n            case 'm3u':\n                return 'M3U';\n\n            case 'hdhomerun':\n                return 'HDHomerun';\n\n            case 'hauppauge':\n                return 'Hauppauge';\n\n            case 'satip':\n                return 'DVB';\n\n            default:\n                return 'Unknown';\n        }\n    }\n\n    function renderDevices(view, devices) {\n        var i;\n        var length;\n        var html = '';\n\n        for (i = 0, length = devices.length; i < length; i++) {\n            html += getDeviceHtml(devices[i]);\n        }\n\n        if (devices.length) {\n            view.querySelector('.devicesHeader').classList.remove('hide');\n        } else {\n            html = '<p><br/>' + globalize.translate('NoNewDevicesFound') + '</p>';\n            view.querySelector('.devicesHeader').classList.add('hide');\n        }\n\n        var elem = view.querySelector('.results');\n        elem.innerHTML = html;\n\n        if (layoutManager.tv) {\n            focusManager.autoFocus(elem);\n        }\n    }\n\n    function discoverDevices(view, apiClient) {\n        loading.show();\n        view.querySelector('.loadingContent').classList.remove('hide');\n        return ApiClient.getJSON(ApiClient.getUrl('LiveTv/Tuners/Discvover', {\n            NewDevicesOnly: true\n        })).then(function (devices) {\n            currentDevices = devices;\n            renderDevices(view, devices);\n            view.querySelector('.loadingContent').classList.add('hide');\n            loading.hide();\n        });\n    }\n\n    function tunerPicker() {\n        this.show = function (options) {\n            var dialogOptions = {\n                removeOnClose: true,\n                scrollY: false\n            };\n\n            if (layoutManager.tv) {\n                dialogOptions.size = 'fullscreen';\n            } else {\n                dialogOptions.size = 'small';\n            }\n\n            var dlg = dialogHelper.createDialog(dialogOptions);\n            dlg.classList.add('formDialog');\n            var html = '';\n            html += '<div class=\"formDialogHeader\">';\n            html += '<button is=\"paper-icon-button-light\" class=\"btnCancel autoSize\" tabindex=\"-1\"><span class=\"material-icons arrow_back\"></span></button>';\n            html += '<h3 class=\"formDialogHeaderTitle\">';\n            html += globalize.translate('HeaderLiveTvTunerSetup');\n            html += '</h3>';\n            html += '</div>';\n            html += getEditorHtml();\n            dlg.innerHTML = html;\n            dlg.querySelector('.btnCancel').addEventListener('click', function () {\n                dialogHelper.close(dlg);\n            });\n            var deviceResult;\n            dlg.querySelector('.results').addEventListener('click', function (e) {\n                var tunerCard = dom.parentWithClass(e.target, 'card');\n\n                if (tunerCard) {\n                    var deviceId = tunerCard.getAttribute('data-id');\n                    deviceResult = currentDevices.filter(function (d) {\n                        return d.DeviceId === deviceId;\n                    })[0];\n                    dialogHelper.close(dlg);\n                }\n            });\n\n            if (layoutManager.tv) {\n                scrollHelper.centerFocus.on(dlg.querySelector('.formDialogContent'), false);\n            }\n\n            var apiClient = connectionManager.getApiClient(options.serverId);\n            discoverDevices(dlg, apiClient);\n\n            if (layoutManager.tv) {\n                scrollHelper.centerFocus.off(dlg.querySelector('.formDialogContent'), false);\n            }\n\n            return dialogHelper.open(dlg).then(function () {\n                if (deviceResult) {\n                    return Promise.resolve(deviceResult);\n                }\n\n                return Promise.reject();\n            });\n        };\n    }\n\n    var currentDevices = [];\n    return tunerPicker;\n});\n"]}