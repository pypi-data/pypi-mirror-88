{"version":3,"sources":["components/qualityOptions.js"],"names":["define","globalize","getVideoQualityOptions","options","maxStreamingBitrate","currentMaxBitrate","videoWidth","videoHeight","maxAllowedWidth","qualityOptions","push","name","maxHeight","bitrate","autoQualityOption","translate","selected","isAutomaticBitrateEnabled","enableAuto","selectedIndex","i","length","option","currentQualityOption","autoText","getAudioQualityOptions"],"mappings":"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","file":"qualityOptions.js","sourcesContent":["define(['globalize'], function (globalize) {\n    'use strict';\n\n    function getVideoQualityOptions(options) {\n\n        var maxStreamingBitrate = options.currentMaxBitrate;\n        var videoWidth = options.videoWidth;\n        var videoHeight = options.videoHeight;\n\n        // If the aspect ratio is less than 16/9 (1.77), set the width as if it were pillarboxed.\n        // 4:3 1440x1080 -> 1920x1080\n        if (videoWidth / videoHeight < 16 / 9) {\n            videoWidth = videoHeight * (16 / 9);\n        }\n\n        var maxAllowedWidth = videoWidth || 4096;\n        //var maxAllowedHeight = videoHeight || 2304;\n\n        var qualityOptions = [];\n\n        if (maxAllowedWidth >= 3800) {\n            qualityOptions.push({ name: '4K - 120 Mbps', maxHeight: 2160, bitrate: 120000000 });\n            qualityOptions.push({ name: '4K - 100 Mbps', maxHeight: 2160, bitrate: 100000000 });\n            qualityOptions.push({ name: '4K - 80 Mbps', maxHeight: 2160, bitrate: 80000000 });\n        }\n\n        // Some 1080- videos are reported as 1912?\n        if (maxAllowedWidth >= 1900) {\n\n            qualityOptions.push({ name: '1080p - 60 Mbps', maxHeight: 1080, bitrate: 60000000 });\n            qualityOptions.push({ name: '1080p - 50 Mbps', maxHeight: 1080, bitrate: 50000000 });\n            qualityOptions.push({ name: '1080p - 40 Mbps', maxHeight: 1080, bitrate: 40000000 });\n            qualityOptions.push({ name: '1080p - 30 Mbps', maxHeight: 1080, bitrate: 30000000 });\n            qualityOptions.push({ name: '1080p - 25 Mbps', maxHeight: 1080, bitrate: 25000000 });\n            qualityOptions.push({ name: '1080p - 20 Mbps', maxHeight: 1080, bitrate: 20000000 });\n            qualityOptions.push({ name: '1080p - 15 Mbps', maxHeight: 1080, bitrate: 15000000 });\n            qualityOptions.push({ name: '1080p - 10 Mbps', maxHeight: 1080, bitrate: 10000001 });\n            qualityOptions.push({ name: '1080p - 8 Mbps', maxHeight: 1080, bitrate: 8000001 });\n            qualityOptions.push({ name: '1080p - 6 Mbps', maxHeight: 1080, bitrate: 6000001 });\n            qualityOptions.push({ name: '1080p - 5 Mbps', maxHeight: 1080, bitrate: 5000001 });\n            qualityOptions.push({ name: '1080p - 4 Mbps', maxHeight: 1080, bitrate: 4000002 });\n\n        } else if (maxAllowedWidth >= 1260) {\n            qualityOptions.push({ name: '720p - 10 Mbps', maxHeight: 720, bitrate: 10000000 });\n            qualityOptions.push({ name: '720p - 8 Mbps', maxHeight: 720, bitrate: 8000000 });\n            qualityOptions.push({ name: '720p - 6 Mbps', maxHeight: 720, bitrate: 6000000 });\n            qualityOptions.push({ name: '720p - 5 Mbps', maxHeight: 720, bitrate: 5000000 });\n\n        } else if (maxAllowedWidth >= 620) {\n            qualityOptions.push({ name: '480p - 4 Mbps', maxHeight: 480, bitrate: 4000001 });\n            qualityOptions.push({ name: '480p - 3 Mbps', maxHeight: 480, bitrate: 3000001 });\n            qualityOptions.push({ name: '480p - 2.5 Mbps', maxHeight: 480, bitrate: 2500000 });\n            qualityOptions.push({ name: '480p - 2 Mbps', maxHeight: 480, bitrate: 2000001 });\n            qualityOptions.push({ name: '480p - 1.5 Mbps', maxHeight: 480, bitrate: 1500001 });\n        }\n\n        if (maxAllowedWidth >= 1260) {\n            qualityOptions.push({ name: '720p - 4 Mbps', maxHeight: 720, bitrate: 4000000 });\n            qualityOptions.push({ name: '720p - 3 Mbps', maxHeight: 720, bitrate: 3000000 });\n            qualityOptions.push({ name: '720p - 2 Mbps', maxHeight: 720, bitrate: 2000000 });\n\n            // The extra 1 is because they're keyed off the bitrate value\n            qualityOptions.push({ name: '720p - 1.5 Mbps', maxHeight: 720, bitrate: 1500000 });\n            qualityOptions.push({ name: '720p - 1 Mbps', maxHeight: 720, bitrate: 1000001 });\n        }\n\n        qualityOptions.push({ name: '480p - 1 Mbps', maxHeight: 480, bitrate: 1000000 });\n        qualityOptions.push({ name: '480p - 720 kbps', maxHeight: 480, bitrate: 720000 });\n        qualityOptions.push({ name: '480p - 420 kbps', maxHeight: 480, bitrate: 420000 });\n        qualityOptions.push({ name: '360p', maxHeight: 360, bitrate: 400000 });\n        qualityOptions.push({ name: '240p', maxHeight: 240, bitrate: 320000 });\n        qualityOptions.push({ name: '144p', maxHeight: 144, bitrate: 192000 });\n\n        var autoQualityOption = {\n            name: globalize.translate('Auto'),\n            bitrate: 0,\n            selected: options.isAutomaticBitrateEnabled\n        };\n\n        if (options.enableAuto) {\n            qualityOptions.push(autoQualityOption);\n        }\n\n        if (maxStreamingBitrate) {\n            var selectedIndex = -1;\n            for (var i = 0, length = qualityOptions.length; i < length; i++) {\n\n                var option = qualityOptions[i];\n\n                if (selectedIndex === -1 && option.bitrate <= maxStreamingBitrate) {\n                    selectedIndex = i;\n                }\n            }\n\n            if (selectedIndex === -1) {\n\n                selectedIndex = qualityOptions.length - 1;\n            }\n\n            var currentQualityOption = qualityOptions[selectedIndex];\n\n            if (!options.isAutomaticBitrateEnabled) {\n                currentQualityOption.selected = true;\n            } else {\n                autoQualityOption.autoText = currentQualityOption.name;\n            }\n        }\n\n        return qualityOptions;\n    }\n\n    function getAudioQualityOptions(options) {\n\n        var maxStreamingBitrate = options.currentMaxBitrate;\n\n        var qualityOptions = [];\n\n        qualityOptions.push({ name: '2 Mbps', bitrate: 2000000 });\n        qualityOptions.push({ name: '1.5 Mbps', bitrate: 1500000 });\n        qualityOptions.push({ name: '1 Mbps', bitrate: 1000000 });\n        qualityOptions.push({ name: '320 kbps', bitrate: 320000 });\n        qualityOptions.push({ name: '256 kbps', bitrate: 256000 });\n        qualityOptions.push({ name: '192 kbps', bitrate: 192000 });\n        qualityOptions.push({ name: '128 kbps', bitrate: 128000 });\n        qualityOptions.push({ name: '96 kbps', bitrate: 96000 });\n        qualityOptions.push({ name: '64 kbps', bitrate: 64000 });\n\n        var autoQualityOption = {\n            name: globalize.translate('Auto'),\n            bitrate: 0,\n            selected: options.isAutomaticBitrateEnabled\n        };\n\n        if (options.enableAuto) {\n            qualityOptions.push(autoQualityOption);\n        }\n\n        if (maxStreamingBitrate) {\n            var selectedIndex = -1;\n            for (var i = 0, length = qualityOptions.length; i < length; i++) {\n\n                var option = qualityOptions[i];\n\n                if (selectedIndex === -1 && option.bitrate <= maxStreamingBitrate) {\n                    selectedIndex = i;\n                }\n            }\n\n            if (selectedIndex === -1) {\n\n                selectedIndex = qualityOptions.length - 1;\n            }\n\n            var currentQualityOption = qualityOptions[selectedIndex];\n\n            if (!options.isAutomaticBitrateEnabled) {\n                currentQualityOption.selected = true;\n            } else {\n                autoQualityOption.autoText = currentQualityOption.name;\n            }\n        }\n\n        return qualityOptions;\n    }\n\n    return {\n        getVideoQualityOptions: getVideoQualityOptions,\n        getAudioQualityOptions: getAudioQualityOptions\n    };\n});\n"]}