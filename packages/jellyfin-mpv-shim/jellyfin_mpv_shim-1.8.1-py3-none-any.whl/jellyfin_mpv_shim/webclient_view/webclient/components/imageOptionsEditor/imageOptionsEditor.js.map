{"version":3,"sources":["components/imageOptionsEditor/imageOptionsEditor.js"],"names":["define","globalize","dom","dialogHelper","findImageOptions","imageOptions","type","filter","i","Type","getImageConfig","options","availableOptions","imageType","itemType","ImageOptions","DefaultImageOptions","getDefaultImageConfig","MinWidth","Limit","setVisibilityOfBackdrops","elem","visible","classList","remove","querySelector","setAttribute","add","removeAttribute","editor","this","show","Promise","resolve","reject","xhr","XMLHttpRequest","open","onload","e","template","response","dlg","createDialog","size","removeOnClose","scrollY","innerHTML","translateDocument","addEventListener","saveValues","context","Array","prototype","map","call","querySelectorAll","c","getAttribute","checked","push","value","loadValues","supportedImageTypes","SupportedImageTypes","indexOf","forEach","container","parentWithTag","backdropConfig","screenshotConfig","then","close","send"],"mappings":"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","file":"imageOptionsEditor.js","sourcesContent":["define(['globalize', 'dom', 'dialogHelper', 'emby-checkbox', 'emby-select', 'emby-input'], function (globalize, dom, dialogHelper) {\n    'use strict';\n\n    function getDefaultImageConfig(itemType, type) {\n        return {\n            Type: type,\n            MinWidth: 0,\n            Limit: 'Primary' === type ? 1 : 0\n        };\n    }\n\n    function findImageOptions(imageOptions, type) {\n        return imageOptions.filter(function (i) {\n            return i.Type == type;\n        })[0];\n    }\n\n    function getImageConfig(options, availableOptions, imageType, itemType) {\n        return findImageOptions(options.ImageOptions || [], imageType) || findImageOptions(availableOptions.DefaultImageOptions || [], imageType) || getDefaultImageConfig(itemType, imageType);\n    }\n\n    function setVisibilityOfBackdrops(elem, visible) {\n        if (visible) {\n            elem.classList.remove('hide');\n            elem.querySelector('input').setAttribute('required', 'required');\n        } else {\n            elem.classList.add('hide');\n            elem.querySelector('input').setAttribute('required', '');\n            elem.querySelector('input').removeAttribute('required');\n        }\n    }\n\n    function loadValues(context, itemType, options, availableOptions) {\n        var supportedImageTypes = availableOptions.SupportedImageTypes || [];\n        setVisibilityOfBackdrops(context.querySelector('.backdropFields'), -1 != supportedImageTypes.indexOf('Backdrop'));\n        setVisibilityOfBackdrops(context.querySelector('.screenshotFields'), -1 != supportedImageTypes.indexOf('Screenshot'));\n        Array.prototype.forEach.call(context.querySelectorAll('.imageType'), function (i) {\n            var imageType = i.getAttribute('data-imagetype');\n            var container = dom.parentWithTag(i, 'LABEL');\n\n            if (-1 == supportedImageTypes.indexOf(imageType)) {\n                container.classList.add('hide');\n            } else {\n                container.classList.remove('hide');\n            }\n\n            if (getImageConfig(options, availableOptions, imageType, itemType).Limit) {\n                i.checked = true;\n            } else {\n                i.checked = false;\n            }\n        });\n        var backdropConfig = getImageConfig(options, availableOptions, 'Backdrop', itemType);\n        context.querySelector('#txtMaxBackdrops').value = backdropConfig.Limit;\n        context.querySelector('#txtMinBackdropDownloadWidth').value = backdropConfig.MinWidth;\n        var screenshotConfig = getImageConfig(options, availableOptions, 'Screenshot', itemType);\n        context.querySelector('#txtMaxScreenshots').value = screenshotConfig.Limit;\n        context.querySelector('#txtMinScreenshotDownloadWidth').value = screenshotConfig.MinWidth;\n    }\n\n    function saveValues(context, options) {\n        options.ImageOptions = Array.prototype.map.call(context.querySelectorAll('.imageType:not(.hide)'), function (c) {\n            return {\n                Type: c.getAttribute('data-imagetype'),\n                Limit: c.checked ? 1 : 0,\n                MinWidth: 0\n            };\n        });\n        options.ImageOptions.push({\n            Type: 'Backdrop',\n            Limit: context.querySelector('#txtMaxBackdrops').value,\n            MinWidth: context.querySelector('#txtMinBackdropDownloadWidth').value\n        });\n        options.ImageOptions.push({\n            Type: 'Screenshot',\n            Limit: context.querySelector('#txtMaxScreenshots').value,\n            MinWidth: context.querySelector('#txtMinScreenshotDownloadWidth').value\n        });\n    }\n\n    function editor() {\n        this.show = function (itemType, options, availableOptions) {\n            return new Promise(function (resolve, reject) {\n                var xhr = new XMLHttpRequest();\n                xhr.open('GET', 'components/imageOptionsEditor/imageOptionsEditor.template.html', true);\n\n                xhr.onload = function (e) {\n                    var template = this.response;\n                    var dlg = dialogHelper.createDialog({\n                        size: 'small',\n                        removeOnClose: true,\n                        scrollY: false\n                    });\n                    dlg.classList.add('formDialog');\n                    dlg.innerHTML = globalize.translateDocument(template);\n                    dlg.addEventListener('close', function () {\n                        saveValues(dlg, options);\n                    });\n                    loadValues(dlg, itemType, options, availableOptions);\n                    dialogHelper.open(dlg).then(resolve, resolve);\n                    dlg.querySelector('.btnCancel').addEventListener('click', function () {\n                        dialogHelper.close(dlg);\n                    });\n                };\n\n                xhr.send();\n            });\n        };\n    }\n\n    return editor;\n});\n"]}