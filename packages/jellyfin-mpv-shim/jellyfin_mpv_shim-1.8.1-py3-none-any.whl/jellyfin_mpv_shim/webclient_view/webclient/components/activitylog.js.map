{"version":3,"sources":["components/activitylog.js"],"names":["define","events","globalize","dom","datefns","dfnshelper","userSettings","serverNotifications","connectionManager","renderList","elem","apiClient","result","startIndex","limit","innerHTML","Items","map","i","getEntryHtml","entry","html","color","icon","Severity","UserId","UserPrimaryImageTag","getUserImageUrl","type","tag","Name","formatRelative","Date","parse","locale","getLocale","ShortOverview","Overview","concat","Id","translate","join","reloadData","instance","parseInt","getAttribute","minDate","hasUserId","setTime","getTime","ApiClient","getJSON","getUrl","toISOString","then","setAttribute","activityContainer","parentWithClass","length","classList","remove","add","items","onActivityLogUpdate","e","data","options","this","serverId","element","onListClick","btnEntryInfo","target","id","item","filter","toString","showItemOverview","require","alert","text","ActivityLog","addEventListener","bind","getApiClient","onUpdate","updateFn","on","sendMessage","prototype","destroy","off"],"mappings":"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","file":"activitylog.js","sourcesContent":["define(['events', 'globalize', 'dom', 'date-fns', 'dfnshelper', 'userSettings', 'serverNotifications', 'connectionManager', 'emby-button', 'listViewStyle'], function (events, globalize, dom, datefns, dfnshelper, userSettings, serverNotifications, connectionManager) {\n    'use strict';\n\n    function getEntryHtml(entry, apiClient) {\n        var html = '';\n        html += '<div class=\"listItem listItem-border\">';\n        var color = '#00a4dc';\n        var icon = 'notifications';\n\n        if ('Error' == entry.Severity || 'Fatal' == entry.Severity || 'Warn' == entry.Severity) {\n            color = '#cc0000';\n            icon = 'notification_important';\n        }\n\n        if (entry.UserId && entry.UserPrimaryImageTag) {\n            html += '<span class=\"listItemIcon material-icons dvr\" style=\"width:2em!important;height:2em!important;padding:0;color:transparent;background-color:' + color + \";background-image:url('\" + apiClient.getUserImageUrl(entry.UserId, {\n                type: 'Primary',\n                tag: entry.UserPrimaryImageTag\n            }) + \"');background-repeat:no-repeat;background-position:center center;background-size: cover;\\\"></span>\";\n        } else {\n            html += '<span class=\"listItemIcon material-icons ' + icon + '\" style=\"background-color:' + color + '\"></span>';\n        }\n\n        html += '<div class=\"listItemBody three-line\">';\n        html += '<div class=\"listItemBodyText\">';\n        html += entry.Name;\n        html += '</div>';\n        html += '<div class=\"listItemBodyText secondary\">';\n        html += datefns.formatRelative(Date.parse(entry.Date), Date.parse(new Date()), { locale: dfnshelper.getLocale() });\n        html += '</div>';\n        html += '<div class=\"listItemBodyText secondary listItemBodyText-nowrap\">';\n        html += entry.ShortOverview || '';\n        html += '</div>';\n        html += '</div>';\n\n        if (entry.Overview) {\n            html += `<button type=\"button\" is=\"paper-icon-button-light\" class=\"btnEntryInfo\" data-id=\"${entry.Id}\" title=\"${globalize.translate('Info')}\">\n                       <span class=\"material-icons info\"></span>\n                    </button>`;\n        }\n\n        html += '</div>';\n\n        return html;\n    }\n\n    function renderList(elem, apiClient, result, startIndex, limit) {\n        elem.innerHTML = result.Items.map(function (i) {\n            return getEntryHtml(i, apiClient);\n        }).join('');\n    }\n\n    function reloadData(instance, elem, apiClient, startIndex, limit) {\n        if (null == startIndex) {\n            startIndex = parseInt(elem.getAttribute('data-activitystartindex') || '0');\n        }\n\n        limit = limit || parseInt(elem.getAttribute('data-activitylimit') || '7');\n        var minDate = new Date();\n        var hasUserId = 'false' !== elem.getAttribute('data-useractivity');\n\n        if (hasUserId) {\n            minDate.setTime(minDate.getTime() - 24 * 60 * 60 * 1000); // one day back\n        } else {\n            minDate.setTime(minDate.getTime() - 7 * 24 * 60 * 60 * 1000); // one week back\n        }\n\n        ApiClient.getJSON(ApiClient.getUrl('System/ActivityLog/Entries', {\n            startIndex: startIndex,\n            limit: limit,\n            minDate: minDate.toISOString(),\n            hasUserId: hasUserId\n        })).then(function (result) {\n            elem.setAttribute('data-activitystartindex', startIndex);\n            elem.setAttribute('data-activitylimit', limit);\n            if (!startIndex) {\n                var activityContainer = dom.parentWithClass(elem, 'activityContainer');\n\n                if (activityContainer) {\n                    if (result.Items.length) {\n                        activityContainer.classList.remove('hide');\n                    } else {\n                        activityContainer.classList.add('hide');\n                    }\n                }\n            }\n\n            instance.items = result.Items;\n            renderList(elem, apiClient, result, startIndex, limit);\n        });\n    }\n\n    function onActivityLogUpdate(e, apiClient, data) {\n        var options = this.options;\n\n        if (options && options.serverId === apiClient.serverId()) {\n            reloadData(this, options.element, apiClient);\n        }\n    }\n\n    function onListClick(e) {\n        var btnEntryInfo = dom.parentWithClass(e.target, 'btnEntryInfo');\n\n        if (btnEntryInfo) {\n            var id = btnEntryInfo.getAttribute('data-id');\n            var items = this.items;\n\n            if (items) {\n                var item = items.filter(function (i) {\n                    return i.Id.toString() === id;\n                })[0];\n\n                if (item) {\n                    showItemOverview(item);\n                }\n            }\n        }\n    }\n\n    function showItemOverview(item) {\n        require(['alert'], function (alert) {\n            alert({\n                text: item.Overview\n            });\n        });\n    }\n\n    function ActivityLog(options) {\n        this.options = options;\n        var element = options.element;\n        element.classList.add('activityLogListWidget');\n        element.addEventListener('click', onListClick.bind(this));\n        var apiClient = connectionManager.getApiClient(options.serverId);\n        reloadData(this, element, apiClient);\n        var onUpdate = onActivityLogUpdate.bind(this);\n        this.updateFn = onUpdate;\n        events.on(serverNotifications, 'ActivityLogEntry', onUpdate);\n        apiClient.sendMessage('ActivityLogEntryStart', '0,1500');\n    }\n\n    ActivityLog.prototype.destroy = function () {\n        var options = this.options;\n\n        if (options) {\n            options.element.classList.remove('activityLogListWidget');\n            connectionManager.getApiClient(options.serverId).sendMessage('ActivityLogEntryStop', '0,1500');\n        }\n\n        var onUpdate = this.updateFn;\n\n        if (onUpdate) {\n            events.off(serverNotifications, 'ActivityLogEntry', onUpdate);\n        }\n\n        this.items = null;\n        this.options = null;\n    };\n\n    return ActivityLog;\n});\n"]}