{"version":3,"sources":["components/slideshow/slideshow.js"],"names":["define","dialogHelper","inputManager","connectionManager","layoutManager","focusManager","browser","appHost","dom","transitionEndEventName","whichTransitionEvent","useFakeZoomImage","safari","getImgUrl","item","user","apiClient","getApiClient","ServerId","imageOptions","BackdropImageTags","length","getBackdropImageUrl","options","type","maxWidth","width","maxHeight","height","quality","tag","getScaledImageUrl","Id","MediaType","Policy","EnableContentDownloading","getItemDownloadUrl","getImageUrl","ImageTags","AlbumId","AlbumPrimaryImageTag","getIcon","icon","cssClass","canFocus","autoFocus","setUserScalable","scalable","err","console","error","swiperInstance","dialog","currentOptions","hideTimeout","lastMouseMoveData","createElements","createDialog","exitAnimationDuration","interactive","size","scrollY","exitAnimation","removeOnClose","classList","add","html","tv","actionButtonsOnTop","mobile","supports","innerHTML","querySelector","addEventListener","e","close","btnPause","playPause","btnDownload","download","btnShare","share","open","then","on","window","onInputCommand","document","PointerEvent","onPointerMove","onDialogClosed","loadSwiper","slides","items","require","Swiper","direction","loop","zoom","minRatio","toggle","autoplay","keyboard","enabled","preloadImages","slidesPerView","slidesPerColumn","initialSlide","startIndex","speed","navigation","nextEl","prevEl","virtual","cache","renderSlide","getSwiperSlideHtml","addSlidesBefore","addSlidesAfter","onAutoplayStart","onAutoplayStop","onZoomChange","btnSlideshowPause","replace","scale","imageEl","slideEl","zoomImage","style","contains","setTimeout","callback","removeEventListener","remove","parseFloat","transitionDuration","index","getSwiperSlideHtmlFromSlide","getSwiperSlideHtmlFromItem","originalImage","concat","title","subtitle","description","getCurrentImageInfo","slide","url","getAttribute","shareUrl","itemId","serverId","imageInfo","fileDownloader","navigator","play","start","pause","stop","destroy","off","body","showOsd","bottom","slideUpToShow","element","onFinish","focus","animate","requestAnimationFrame","keyframes","transform","offsetHeight","opacity","offset","duration","iterations","easing","onfinish","startHideTimer","stopHideTimer","clearTimeout","hideOsd","slideDownToHide","event","pointerType","eventX","screenX","eventY","screenY","obj","x","y","Math","abs","detail","command","chromecast","this","show","hide"],"mappings":"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","file":"slideshow.js","sourcesContent":["/**\n * Image viewer component\n * @module components/slideshow/slideshow\n */\ndefine(['dialogHelper', 'inputManager', 'connectionManager', 'layoutManager', 'focusManager', 'browser', 'apphost', 'dom', 'css!./style', 'material-icons', 'paper-icon-button-light'], function (dialogHelper, inputManager, connectionManager, layoutManager, focusManager, browser, appHost, dom) {\n    'use strict';\n\n    /**\n     * Name of transition event.\n     */\n    const transitionEndEventName = dom.whichTransitionEvent();\n\n    /**\n     * Flag to use fake image to fix blurry zoomed image.\n     * At least WebKit doesn't restore quality for zoomed images.\n     */\n    const useFakeZoomImage = browser.safari;\n\n    /**\n     * Retrieves an item's image URL from the API.\n     * @param {object|string} item - Item used to generate the image URL.\n     * @param {object} options - Options of the image.\n     * @param {object} apiClient - API client instance used to retrieve the image.\n     * @returns {null|string} URL of the item's image.\n     */\n    function getImageUrl(item, options, apiClient) {\n        options = options || {};\n        options.type = options.type || 'Primary';\n\n        if (typeof (item) === 'string') {\n            return apiClient.getScaledImageUrl(item, options);\n        }\n\n        if (item.ImageTags && item.ImageTags[options.type]) {\n            options.tag = item.ImageTags[options.type];\n            return apiClient.getScaledImageUrl(item.Id, options);\n        }\n\n        if (options.type === 'Primary') {\n            if (item.AlbumId && item.AlbumPrimaryImageTag) {\n\n                options.tag = item.AlbumPrimaryImageTag;\n                return apiClient.getScaledImageUrl(item.AlbumId, options);\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Retrieves a backdrop's image URL from the API.\n     * @param {object} item - Item used to generate the image URL.\n     * @param {object} options - Options of the image.\n     * @param {object} apiClient - API client instance used to retrieve the image.\n     * @returns {null|string} URL of the item's backdrop.\n     */\n    function getBackdropImageUrl(item, options, apiClient) {\n        options = options || {};\n        options.type = options.type || 'Backdrop';\n\n        // If not resizing, get the original image\n        if (!options.maxWidth && !options.width && !options.maxHeight && !options.height) {\n            options.quality = 100;\n        }\n\n        if (item.BackdropImageTags && item.BackdropImageTags.length) {\n\n            options.tag = item.BackdropImageTags[0];\n            return apiClient.getScaledImageUrl(item.Id, options);\n        }\n\n        return null;\n    }\n\n    /**\n     * Dispatches a request for an item's image to its respective handler.\n     * @param {object} item - Item used to generate the image URL.\n     * @returns {string} URL of the item's image.\n     */\n    function getImgUrl(item, user) {\n        var apiClient = connectionManager.getApiClient(item.ServerId);\n        var imageOptions = {};\n\n        if (item.BackdropImageTags && item.BackdropImageTags.length) {\n            return getBackdropImageUrl(item, imageOptions, apiClient);\n        } else {\n            if (item.MediaType === 'Photo' && user && user.Policy.EnableContentDownloading) {\n                return apiClient.getItemDownloadUrl(item.Id);\n            }\n            imageOptions.type = 'Primary';\n            return getImageUrl(item, imageOptions, apiClient);\n        }\n    }\n\n    /**\n     * Generates a button using the specified icon, classes and properties.\n     * @param {string} icon - Name of the material icon on the button\n     * @param {string} cssClass - CSS classes to assign to the button\n     * @param {boolean} canFocus - Flag to set the tabindex attribute on the button to -1.\n     * @param {boolean} autoFocus - Flag to set the autofocus attribute on the button.\n     * @returns {string} The HTML markup of the button.\n     */\n    function getIcon(icon, cssClass, canFocus, autoFocus) {\n        var tabIndex = canFocus ? '' : ' tabindex=\"-1\"';\n        autoFocus = autoFocus ? ' autofocus' : '';\n        return '<button is=\"paper-icon-button-light\" class=\"autoSize ' + cssClass + '\"' + tabIndex + autoFocus + '><span class=\"material-icons slideshowButtonIcon ' + icon + '\"></span></button>';\n    }\n\n    /**\n     * Sets the viewport meta tag to enable or disable scaling by the user.\n     * @param {boolean} scalable - Flag to set the scalability of the viewport.\n     */\n    function setUserScalable(scalable) {\n        try {\n            appHost.setUserScalable(scalable);\n        } catch (err) {\n            console.error('error in appHost.setUserScalable: ' + err);\n        }\n    }\n\n    return function (options) {\n        var self = this;\n        /** Initialized instance of Swiper. */\n        var swiperInstance;\n        /** Initialized instance of the dialog containing the Swiper instance. */\n        var dialog;\n        /** Options of the slideshow components */\n        var currentOptions;\n        /** ID of the timeout used to hide the OSD. */\n        var hideTimeout;\n        /** Last coordinates of the mouse pointer. */\n        var lastMouseMoveData;\n        /** Visibility status of the OSD. */\n        var _osdOpen = false;\n\n        // Use autoplay on Chromecast since it is non-interactive.\n        if (browser.chromecast) options.interactive = false;\n\n        /**\n         * Creates the HTML markup for the dialog and the OSD.\n         * @param {Object} options - Options used to create the dialog and slideshow.\n         */\n        function createElements(options) {\n            currentOptions = options;\n\n            dialog = dialogHelper.createDialog({\n                exitAnimationDuration: options.interactive ? 400 : 800,\n                size: 'fullscreen',\n                autoFocus: false,\n                scrollY: false,\n                exitAnimation: 'fadeout',\n                removeOnClose: true\n            });\n\n            dialog.classList.add('slideshowDialog');\n\n            var html = '';\n\n            html += '<div class=\"slideshowSwiperContainer\"><div class=\"swiper-wrapper\"></div></div>';\n\n            if (options.interactive && !layoutManager.tv) {\n                var actionButtonsOnTop = layoutManager.mobile;\n\n                html += getIcon('keyboard_arrow_left', 'btnSlideshowPrevious slideshowButton hide-mouse-idle-tv', false);\n                html += getIcon('keyboard_arrow_right', 'btnSlideshowNext slideshowButton hide-mouse-idle-tv', false);\n\n                html += '<div class=\"topActionButtons\">';\n                if (actionButtonsOnTop) {\n                    if (appHost.supports('filedownload') && options.user && options.user.Policy.EnableContentDownloading) {\n                        html += getIcon('file_download', 'btnDownload slideshowButton', true);\n                    }\n                    if (appHost.supports('sharing')) {\n                        html += getIcon('share', 'btnShare slideshowButton', true);\n                    }\n                }\n                html += getIcon('close', 'slideshowButton btnSlideshowExit hide-mouse-idle-tv', false);\n                html += '</div>';\n\n                if (!actionButtonsOnTop) {\n                    html += '<div class=\"slideshowBottomBar hide\">';\n\n                    html += getIcon('play_arrow', 'btnSlideshowPause slideshowButton', true, true);\n                    if (appHost.supports('filedownload') && options.user && options.user.Policy.EnableContentDownloading) {\n                        html += getIcon('file_download', 'btnDownload slideshowButton', true);\n                    }\n                    if (appHost.supports('sharing')) {\n                        html += getIcon('share', 'btnShare slideshowButton', true);\n                    }\n\n                    html += '</div>';\n                }\n\n            } else {\n                html += '<div class=\"slideshowImage\"></div><h1 class=\"slideshowImageText\"></h1>';\n            }\n\n            dialog.innerHTML = html;\n\n            if (options.interactive && !layoutManager.tv) {\n                dialog.querySelector('.btnSlideshowExit').addEventListener('click', function (e) {\n                    dialogHelper.close(dialog);\n                });\n\n                var btnPause = dialog.querySelector('.btnSlideshowPause');\n                if (btnPause) {\n                    btnPause.addEventListener('click', playPause);\n                }\n\n                var btnDownload = dialog.querySelector('.btnDownload');\n                if (btnDownload) {\n                    btnDownload.addEventListener('click', download);\n                }\n\n                var btnShare = dialog.querySelector('.btnShare');\n                if (btnShare) {\n                    btnShare.addEventListener('click', share);\n                }\n            }\n\n            setUserScalable(true);\n\n            dialogHelper.open(dialog).then(function () {\n                setUserScalable(false);\n            });\n\n            inputManager.on(window, onInputCommand);\n            /* eslint-disable-next-line compat/compat */\n            document.addEventListener((window.PointerEvent ? 'pointermove' : 'mousemove'), onPointerMove);\n\n            dialog.addEventListener('close', onDialogClosed);\n\n            loadSwiper(dialog, options);\n        }\n\n        /**\n         * Handles OSD changes when the autoplay is started.\n         */\n        function onAutoplayStart() {\n            var btnSlideshowPause = dialog.querySelector('.btnSlideshowPause .material-icons');\n            if (btnSlideshowPause) {\n                btnSlideshowPause.classList.replace('play_arrow', 'pause');\n            }\n        }\n\n        /**\n         * Handles OSD changes when the autoplay is stopped.\n         */\n        function onAutoplayStop() {\n            var btnSlideshowPause = dialog.querySelector('.btnSlideshowPause .material-icons');\n            if (btnSlideshowPause) {\n                btnSlideshowPause.classList.replace('pause', 'play_arrow');\n            }\n        }\n\n        /**\n         * Handles zoom changes.\n         */\n        function onZoomChange(scale, imageEl, slideEl) {\n            const zoomImage = slideEl.querySelector('.swiper-zoom-fakeimg');\n\n            if (zoomImage) {\n                zoomImage.style.width = zoomImage.style.height = scale * 100 + '%';\n\n                if (scale > 1) {\n                    if (zoomImage.classList.contains('swiper-zoom-fakeimg-hidden')) {\n                        // Await for Swiper style changes\n                        setTimeout(() => {\n                            const callback = () => {\n                                imageEl.removeEventListener(transitionEndEventName, callback);\n                                zoomImage.classList.remove('swiper-zoom-fakeimg-hidden');\n                            };\n\n                            // Swiper set 'transition-duration: 300ms' for auto zoom\n                            // and 'transition-duration: 0s' for touch zoom\n                            const transitionDuration = parseFloat(imageEl.style.transitionDuration.replace(/[a-z]/i, ''));\n\n                            if (transitionDuration > 0) {\n                                imageEl.addEventListener(transitionEndEventName, callback);\n                            } else {\n                                callback();\n                            }\n                        }, 0);\n                    }\n                } else {\n                    zoomImage.classList.add('swiper-zoom-fakeimg-hidden');\n                }\n            }\n        }\n\n        /**\n         * Initializes the Swiper instance and binds the relevant events.\n         * @param {HTMLElement} dialog - Element containing the dialog.\n         * @param {Object} options - Options used to initialize the Swiper instance.\n         */\n        function loadSwiper(dialog, options) {\n            var slides;\n            if (currentOptions.slides) {\n                slides = currentOptions.slides;\n            } else {\n                slides = currentOptions.items;\n            }\n\n            require(['swiper'], function (Swiper) {\n                swiperInstance = new Swiper(dialog.querySelector('.slideshowSwiperContainer'), {\n                    direction: 'horizontal',\n                    // Loop is disabled due to the virtual slides option not supporting it.\n                    loop: false,\n                    zoom: {\n                        minRatio: 1,\n                        toggle: true\n                    },\n                    autoplay: !options.interactive,\n                    keyboard: {\n                        enabled: true\n                    },\n                    preloadImages: true,\n                    slidesPerView: 1,\n                    slidesPerColumn: 1,\n                    initialSlide: options.startIndex || 0,\n                    speed: 240,\n                    navigation: {\n                        nextEl: '.btnSlideshowNext',\n                        prevEl: '.btnSlideshowPrevious'\n                    },\n                    // Virtual slides reduce memory consumption for large libraries while allowing preloading of images;\n                    virtual: {\n                        slides: slides,\n                        cache: true,\n                        renderSlide: getSwiperSlideHtml,\n                        addSlidesBefore: 1,\n                        addSlidesAfter: 1\n                    }\n                });\n\n                swiperInstance.on('autoplayStart', onAutoplayStart);\n                swiperInstance.on('autoplayStop', onAutoplayStop);\n\n                if (useFakeZoomImage) {\n                    swiperInstance.on('zoomChange', onZoomChange);\n                }\n            });\n        }\n\n        /**\n         * Renders the HTML markup of a slide for an item or a slide.\n         * @param {Object} item - The item used to render the slide.\n         * @param {number} index - The index of the item in the Swiper instance.\n         * @returns {string} The HTML markup of the slide.\n         */\n        function getSwiperSlideHtml(item, index) {\n            if (currentOptions.slides) {\n                return getSwiperSlideHtmlFromSlide(item);\n            } else {\n                return getSwiperSlideHtmlFromItem(item);\n            }\n        }\n\n        /**\n         * Renders the HTML markup of a slide for an item.\n         * @param {Object} item - Item used to generate the slide.\n         * @returns {string} The HTML markup of the slide.\n         */\n        function getSwiperSlideHtmlFromItem(item) {\n            return getSwiperSlideHtmlFromSlide({\n                originalImage: getImgUrl(item, currentOptions.user),\n                //title: item.Name,\n                //description: item.Overview\n                Id: item.Id,\n                ServerId: item.ServerId\n            });\n        }\n\n        /**\n         * Renders the HTML markup of a slide for a slide object.\n         * @param {Object} item - Slide object used to generate the slide.\n         * @returns {string} The HTML markup of the slide.\n         */\n        function getSwiperSlideHtmlFromSlide(item) {\n            var html = '';\n            html += '<div class=\"swiper-slide\" data-original=\"' + item.originalImage + '\" data-itemid=\"' + item.Id + '\" data-serverid=\"' + item.ServerId + '\">';\n            html += '<div class=\"swiper-zoom-container\">';\n            if (useFakeZoomImage) {\n                html += `<div class=\"swiper-zoom-fakeimg swiper-zoom-fakeimg-hidden\" style=\"background-image: url('${item.originalImage}')\"></div>`;\n            }\n            html += '<img src=\"' + item.originalImage + '\" class=\"swiper-slide-img\">';\n            html += '</div>';\n            if (item.title || item.subtitle) {\n                html += '<div class=\"slideText\">';\n                html += '<div class=\"slideTextInner\">';\n                if (item.title) {\n                    html += '<h1 class=\"slideTitle\">';\n                    html += item.title;\n                    html += '</h1>';\n                }\n                if (item.description) {\n                    html += '<div class=\"slideSubtitle\">';\n                    html += item.description;\n                    html += '</div>';\n                }\n                html += '</div>';\n                html += '</div>';\n            }\n            html += '</div>';\n\n            return html;\n        }\n\n        /**\n         * Fetches the information of the currently displayed slide.\n         * @returns {null|{itemId: string, shareUrl: string, serverId: string, url: string}} Object containing the information of the currently displayed slide.\n         */\n        function getCurrentImageInfo() {\n            if (swiperInstance) {\n                var slide = document.querySelector('.swiper-slide-active');\n\n                if (slide) {\n                    return {\n                        url: slide.getAttribute('data-original'),\n                        shareUrl: slide.getAttribute('data-original'),\n                        itemId: slide.getAttribute('data-itemid'),\n                        serverId: slide.getAttribute('data-serverid')\n                    };\n                }\n                return null;\n            } else {\n                return null;\n            }\n        }\n\n        /**\n         * Starts a download for the currently displayed slide.\n         */\n        function download() {\n            var imageInfo = getCurrentImageInfo();\n\n            require(['fileDownloader'], function (fileDownloader) {\n                fileDownloader.download([imageInfo]);\n            });\n        }\n\n        /**\n         * Shares the currently displayed slide using the browser's built-in sharing feature.\n         */\n        function share() {\n            var imageInfo = getCurrentImageInfo();\n\n            navigator.share({\n                url: imageInfo.shareUrl\n            });\n        }\n\n        /**\n         * Starts the autoplay feature of the Swiper instance.\n         */\n        function play() {\n            if (swiperInstance.autoplay) {\n                swiperInstance.autoplay.start();\n            }\n        }\n\n        /**\n         * Pauses the autoplay feature of the Swiper instance;\n         */\n        function pause() {\n            if (swiperInstance.autoplay) {\n                swiperInstance.autoplay.stop();\n            }\n        }\n\n        /**\n         * Toggles the autoplay feature of the Swiper instance.\n         */\n        function playPause() {\n            var paused = !dialog.querySelector('.btnSlideshowPause .material-icons').classList.contains('pause');\n            if (paused) {\n                play();\n            } else {\n                pause();\n            }\n        }\n\n        /**\n         * Closes the dialog and destroys the Swiper instance.\n         */\n        function onDialogClosed() {\n            var swiper = swiperInstance;\n            if (swiper) {\n                swiper.destroy(true, true);\n                swiperInstance = null;\n            }\n\n            inputManager.off(window, onInputCommand);\n            /* eslint-disable-next-line compat/compat */\n            document.removeEventListener((window.PointerEvent ? 'pointermove' : 'mousemove'), onPointerMove);\n            // Shows page scrollbar\n            document.body.classList.remove('hide-scroll');\n            document.body.classList.add('force-scroll');\n        }\n\n        /**\n         * Shows the OSD.\n         */\n        function showOsd() {\n            var bottom = dialog.querySelector('.slideshowBottomBar');\n            if (bottom) {\n                slideUpToShow(bottom);\n                startHideTimer();\n            }\n        }\n\n        /**\n         * Hides the OSD.\n         */\n        function hideOsd() {\n            var bottom = dialog.querySelector('.slideshowBottomBar');\n            if (bottom) {\n                slideDownToHide(bottom);\n            }\n        }\n\n        /**\n         * Starts the timer used to automatically hide the OSD.\n         */\n        function startHideTimer() {\n            stopHideTimer();\n            hideTimeout = setTimeout(hideOsd, 3000);\n        }\n\n        /**\n         * Stops the timer used to automatically hide the OSD.\n         */\n        function stopHideTimer() {\n            if (hideTimeout) {\n                clearTimeout(hideTimeout);\n                hideTimeout = null;\n            }\n        }\n\n        /**\n         * Shows the OSD by sliding it into view.\n         * @param {HTMLElement} element - Element containing the OSD.\n         */\n        function slideUpToShow(element) {\n            if (!element.classList.contains('hide')) {\n                return;\n            }\n\n            _osdOpen = true;\n            element.classList.remove('hide');\n\n            var onFinish = function () {\n                focusManager.focus(element.querySelector('.btnSlideshowPause'));\n            };\n\n            if (!element.animate) {\n                onFinish();\n                return;\n            }\n\n            requestAnimationFrame(function () {\n                var keyframes = [\n                    { transform: 'translate3d(0,' + element.offsetHeight + 'px,0)', opacity: '.3', offset: 0 },\n                    { transform: 'translate3d(0,0,0)', opacity: '1', offset: 1 }\n                ];\n                var timing = { duration: 300, iterations: 1, easing: 'ease-out' };\n                element.animate(keyframes, timing).onfinish = onFinish;\n            });\n        }\n\n        /**\n         * Hides the OSD by sliding it out of view.\n         * @param {HTMLElement} element - Element containing the OSD.\n         */\n        function slideDownToHide(element) {\n            if (element.classList.contains('hide')) {\n                return;\n            }\n\n            var onFinish = function () {\n                element.classList.add('hide');\n                _osdOpen = false;\n            };\n\n            if (!element.animate) {\n                onFinish();\n                return;\n            }\n\n            requestAnimationFrame(function () {\n                var keyframes = [\n                    { transform: 'translate3d(0,0,0)', opacity: '1', offset: 0 },\n                    { transform: 'translate3d(0,' + element.offsetHeight + 'px,0)', opacity: '.3', offset: 1 }\n                ];\n                var timing = { duration: 300, iterations: 1, easing: 'ease-out' };\n                element.animate(keyframes, timing).onfinish = onFinish;\n            });\n        }\n\n        /**\n         * Shows the OSD when moving the mouse pointer or touching the screen.\n         * @param {Event} event - Pointer movement event.\n         */\n        function onPointerMove(event) {\n            var pointerType = event.pointerType || (layoutManager.mobile ? 'touch' : 'mouse');\n\n            if (pointerType === 'mouse') {\n                var eventX = event.screenX || 0;\n                var eventY = event.screenY || 0;\n\n                var obj = lastMouseMoveData;\n                if (!obj) {\n                    lastMouseMoveData = {\n                        x: eventX,\n                        y: eventY\n                    };\n                    return;\n                }\n\n                // if coord are same, it didn't move\n                if (Math.abs(eventX - obj.x) < 10 && Math.abs(eventY - obj.y) < 10) {\n                    return;\n                }\n\n                obj.x = eventX;\n                obj.y = eventY;\n\n                showOsd();\n            }\n        }\n\n        /**\n         * Dispatches keyboard inputs to their proper handlers.\n         * @param {Event} event - Keyboard input event.\n         */\n        function onInputCommand(event) {\n            switch (event.detail.command) {\n                case 'up':\n                case 'down':\n                case 'select':\n                case 'menu':\n                case 'info':\n                    showOsd();\n                    break;\n                case 'play':\n                    play();\n                    break;\n                case 'pause':\n                    pause();\n                    break;\n                case 'playpause':\n                    playPause();\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        /**\n         * Shows the slideshow component.\n         */\n        self.show = function () {\n            createElements(options);\n            // Hides page scrollbar\n            document.body.classList.remove('force-scroll');\n            document.body.classList.add('hide-scroll');\n        };\n\n        /**\n         * Hides the slideshow element.\n         */\n        self.hide = function () {\n            if (dialog) {\n                dialogHelper.close(dialog);\n            }\n        };\n    };\n});\n"]}