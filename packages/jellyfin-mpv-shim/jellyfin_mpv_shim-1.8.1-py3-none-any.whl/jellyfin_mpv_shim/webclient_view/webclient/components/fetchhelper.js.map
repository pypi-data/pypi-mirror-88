{"version":3,"sources":["components/fetchhelper.js"],"names":["define","_exports","_slicedToArray","arr","i","_arrayWithHoles","Array","isArray","_iterableToArrayLimit","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","_unsupportedIterableToArray","o","minLen","_arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","from","test","_nonIterableRest","TypeError","len","arr2","getFetchPromise","request","headers","dataType","accept","fetchRequest","method","type","credentials","contentType","data","body","paramsToString","url","query","paramString","concat","timeout","fetchWithTimeout","options","timeoutMs","console","debug","Promise","resolve","reject","setTimeout","fetch","then","response","clearTimeout","error","params","entries","filter","_ref","_ref2","v","map","_ref3","_ref4","k","encodeURIComponent","join","defineProperty","ajax","Error","status","json","get","toLowerCase","startsWith","text"],"mappings":"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","file":"fetchhelper.js","sourcesContent":["/* eslint-disable indent */\n    export function getFetchPromise(request) {\n\n        const headers = request.headers || {};\n\n        if (request.dataType === 'json') {\n            headers.accept = 'application/json';\n        }\n\n        const fetchRequest = {\n            headers: headers,\n            method: request.type,\n            credentials: 'same-origin'\n        };\n\n        let contentType = request.contentType;\n\n        if (request.data) {\n\n            if (typeof request.data === 'string') {\n                fetchRequest.body = request.data;\n            } else {\n                fetchRequest.body = paramsToString(request.data);\n\n                contentType = contentType || 'application/x-www-form-urlencoded; charset=UTF-8';\n            }\n        }\n\n        if (contentType) {\n\n            headers['Content-Type'] = contentType;\n        }\n\n        let url = request.url;\n\n        if (request.query) {\n            const paramString = paramsToString(request.query);\n            if (paramString) {\n                url += `?${paramString}`;\n            }\n        }\n\n        if (!request.timeout) {\n            return fetch(url, fetchRequest);\n        }\n\n        return fetchWithTimeout(url, fetchRequest, request.timeout);\n    }\n\n    function fetchWithTimeout(url, options, timeoutMs) {\n\n        console.debug(`fetchWithTimeout: timeoutMs: ${timeoutMs}, url: ${url}`);\n\n        return new Promise(function (resolve, reject) {\n\n            const timeout = setTimeout(reject, timeoutMs);\n\n            options = options || {};\n            options.credentials = 'same-origin';\n\n            fetch(url, options).then(function (response) {\n                clearTimeout(timeout);\n\n                console.debug(`fetchWithTimeout: succeeded connecting to url: ${url}`);\n\n                resolve(response);\n            }, function (error) {\n\n                clearTimeout(timeout);\n\n                console.debug(`fetchWithTimeout: timed out connecting to url: ${url}`);\n\n                reject(error);\n            });\n        });\n    }\n\n    /**\n     * @param params {Record<string, string | number | boolean>}\n     * @returns {string} Query string\n     */\n    function paramsToString(params) {\n        return Object.entries(params)\n            // eslint-disable-next-line no-unused-vars\n            .filter(([_, v]) => v !== null && v !== undefined && v !== '')\n            .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)\n            .join('&');\n    }\n\n    export function ajax(request) {\n        if (!request) {\n            throw new Error('Request cannot be null');\n        }\n\n        request.headers = request.headers || {};\n\n        console.debug(`requesting url: ${request.url}`);\n\n        return getFetchPromise(request).then(function (response) {\n            console.debug(`response status: ${response.status}, url: ${request.url}`);\n            if (response.status < 400) {\n                if (request.dataType === 'json' || request.headers.accept === 'application/json') {\n                    return response.json();\n                } else if (request.dataType === 'text' || (response.headers.get('Content-Type') || '').toLowerCase().startsWith('text/')) {\n                    return response.text();\n                } else {\n                    return response;\n                }\n            } else {\n                return Promise.reject(response);\n            }\n        }, function (err) {\n            console.error(`request failed to url: ${request.url}`);\n            throw err;\n        });\n    }\n/* eslint-enable indent */\n"]}