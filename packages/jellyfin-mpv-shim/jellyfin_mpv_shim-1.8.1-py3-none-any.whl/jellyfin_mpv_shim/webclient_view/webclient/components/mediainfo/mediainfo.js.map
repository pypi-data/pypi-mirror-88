{"version":3,"sources":["components/mediainfo/mediainfo.js"],"names":["define","datetime","globalize","appRouter","itemHelper","indicators","getEndsAt","item","MediaType","RunTimeTicks","StartDate","endDate","Date","getTime","displayTime","getDisplayTime","translate","getMediaInfoItem","m","cssClass","mediaInfoText","html","text","fillPrimaryMediaInfo","elem","options","getPrimaryMediaInfoHtml","innerHTML","afterFill","endsAt","endsAtElem","querySelector","dynamicEndTime","interval","setInterval","document","body","contains","clearInterval","lnkChannel","addEventListener","onChannelLinkClick","e","channelId","this","getAttribute","serverId","showItem","preventDefault","interactive","getMediaInfoHtml","date","minutes","count","miscInfo","showFolderRuntime","Type","SongCount","ChildCount","push","getDisplayRunningTime","originalAirDate","PremiereDate","parseISO8601Date","toLocaleDateString","console","error","RecordAnyTime","RecordAnyChannel","ChannelName","year","ProductionYear","Status","EndDate","getFullYear","programIndicator","IsLive","IsPremiere","IsSeries","IsRepeat","EpisodeTitle","episodeTitle","getDisplayName","includeIndexNumber","episodeTitleIndexNumber","IsMovie","runtime","Math","round","OfficialRating","Video3DFormat","Width","Height","container","Container","map","join","getStarIconsHtml","CommunityRating","toFixed","HasSubtitles","subtitles","CriticRating","criticRating","getMissingIndicator","getSecondaryMediaInfoHtml","getProgramInfoHtml","programTime","startDate","weekday","month","day","ChannelNumber","ChannelId","getRouteUrl","ServerId","Name","Id","timerIndicator","timerHtml","getTimerIndicator","status","TimerId","SeriesTimerId","getResolutionText","i","width","height","IsInterlaced","fill","getEndsAtFromPosition","runtimeTicks","positionTicks","includeText","fillSecondaryMediaInfo","getMediaInfoStats","list","videoStream","MediaSources","MediaStreams","filter","audioStream","getAudioStreamForDisplay","mediaSource","Index","DefaultAudioStreamIndex","VideoType","type","resolutionText","Codec","channelText","channels","Channels","audioCodec","toLowerCase","Profile","DateCreated","enableDateAddedDisplay","dateCreated"],"mappings":"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","file":"mediainfo.js","sourcesContent":["define(['datetime', 'globalize', 'appRouter', 'itemHelper', 'indicators', 'material-icons', 'css!./mediainfo.css', 'programStyles', 'emby-button'], function (datetime, globalize, appRouter, itemHelper, indicators) {\n    'use strict';\n\n    function getTimerIndicator(item) {\n\n        var status;\n\n        if (item.Type === 'SeriesTimer') {\n            return '<span class=\"material-icons mediaInfoItem mediaInfoIconItem mediaInfoTimerIcon fiber_smart_record\"></span>';\n        } else if (item.TimerId || item.SeriesTimerId) {\n\n            status = item.Status || 'Cancelled';\n        } else if (item.Type === 'Timer') {\n\n            status = item.Status;\n        } else {\n            return '';\n        }\n\n        if (item.SeriesTimerId) {\n\n            if (status !== 'Cancelled') {\n                return '<span class=\"material-icons mediaInfoItem mediaInfoIconItem mediaInfoTimerIcon fiber_smart_record\"></span>';\n            }\n\n            return '<span class=\"material-icons mediaInfoItem mediaInfoIconItem fiber_smart_record\"></span>';\n        }\n\n        return '<span class=\"material-icons mediaInfoItem mediaInfoIconItem mediaInfoTimerIcon fiber_manual_record\"></span>';\n    }\n\n    function getProgramInfoHtml(item, options) {\n        var html = '';\n\n        var miscInfo = [];\n        var text;\n        var date;\n\n        if (item.StartDate && options.programTime !== false) {\n\n            try {\n\n                text = '';\n\n                date = datetime.parseISO8601Date(item.StartDate);\n\n                if (options.startDate !== false) {\n                    text += datetime.toLocaleDateString(date, { weekday: 'short', month: 'short', day: 'numeric' });\n                }\n\n                text += ' ' + datetime.getDisplayTime(date);\n\n                if (item.EndDate) {\n                    date = datetime.parseISO8601Date(item.EndDate);\n                    text += ' - ' + datetime.getDisplayTime(date);\n                }\n\n                miscInfo.push(text);\n            } catch (e) {\n                console.error('error parsing date: ' + item.StartDate);\n            }\n        }\n\n        if (item.ChannelNumber) {\n            miscInfo.push('CH ' + item.ChannelNumber);\n        }\n\n        if (item.ChannelName) {\n\n            if (options.interactive && item.ChannelId) {\n                miscInfo.push({\n                    html: '<a is=\"emby-linkbutton\" class=\"button-flat mediaInfoItem\" href=\"' + appRouter.getRouteUrl({\n\n                        ServerId: item.ServerId,\n                        Type: 'TvChannel',\n                        Name: item.ChannelName,\n                        Id: item.ChannelId\n\n                    }) + '\">' + item.ChannelName + '</a>'\n                });\n            } else {\n                miscInfo.push(item.ChannelName);\n            }\n        }\n\n        if (options.timerIndicator !== false) {\n            var timerHtml = getTimerIndicator(item);\n            if (timerHtml) {\n                miscInfo.push({\n                    html: timerHtml\n                });\n            }\n        }\n\n        html += miscInfo.map(function (m) {\n            return getMediaInfoItem(m);\n        }).join('');\n\n        return html;\n    }\n\n    function getMediaInfoHtml(item, options) {\n        var html = '';\n\n        var miscInfo = [];\n        options = options || {};\n        var text;\n        var date;\n        var minutes;\n        var count;\n\n        var showFolderRuntime = item.Type === 'MusicAlbum' || item.MediaType === 'MusicArtist' || item.MediaType === 'Playlist' || item.MediaType === 'MusicGenre';\n\n        if (showFolderRuntime) {\n\n            count = item.SongCount || item.ChildCount;\n\n            if (count) {\n\n                miscInfo.push(globalize.translate('TrackCount', count));\n            }\n\n            if (item.RunTimeTicks) {\n                miscInfo.push(datetime.getDisplayRunningTime(item.RunTimeTicks));\n            }\n        } else if (item.Type === 'PhotoAlbum' || item.Type === 'BoxSet') {\n\n            count = item.ChildCount;\n\n            if (count) {\n\n                miscInfo.push(globalize.translate('ItemCount', count));\n            }\n        }\n\n        if ((item.Type === 'Episode' || item.MediaType === 'Photo') && options.originalAirDate !== false) {\n\n            if (item.PremiereDate) {\n\n                try {\n                    date = datetime.parseISO8601Date(item.PremiereDate);\n\n                    text = datetime.toLocaleDateString(date);\n                    miscInfo.push(text);\n                } catch (e) {\n                    console.error('error parsing date: ' + item.PremiereDate);\n                }\n            }\n        }\n\n        if (item.Type === 'SeriesTimer') {\n            if (item.RecordAnyTime) {\n\n                miscInfo.push(globalize.translate('Anytime'));\n            } else {\n                miscInfo.push(datetime.getDisplayTime(item.StartDate));\n            }\n\n            if (item.RecordAnyChannel) {\n                miscInfo.push(globalize.translate('AllChannels'));\n            } else {\n                miscInfo.push(item.ChannelName || globalize.translate('OneChannel'));\n            }\n        }\n\n        if (item.StartDate && item.Type !== 'Program' && item.Type !== 'SeriesTimer') {\n\n            try {\n                date = datetime.parseISO8601Date(item.StartDate);\n\n                text = datetime.toLocaleDateString(date);\n                miscInfo.push(text);\n\n                if (item.Type !== 'Recording') {\n                    text = datetime.getDisplayTime(date);\n                    miscInfo.push(text);\n                }\n            } catch (e) {\n                console.error('error parsing date: ' + item.StartDate);\n            }\n        }\n\n        if (options.year !== false && item.ProductionYear && item.Type === 'Series') {\n\n            if (item.Status === 'Continuing') {\n                miscInfo.push(globalize.translate('SeriesYearToPresent', item.ProductionYear));\n\n            } else if (item.ProductionYear) {\n\n                text = item.ProductionYear;\n\n                if (item.EndDate) {\n\n                    try {\n\n                        var endYear = datetime.parseISO8601Date(item.EndDate).getFullYear();\n\n                        if (endYear !== item.ProductionYear) {\n                            text += '-' + datetime.parseISO8601Date(item.EndDate).getFullYear();\n                        }\n\n                    } catch (e) {\n                        console.error('error parsing date: ' + item.EndDate);\n                    }\n                }\n\n                miscInfo.push(text);\n            }\n        }\n\n        if (item.Type === 'Program') {\n\n            if (options.programIndicator !== false) {\n                if (item.IsLive) {\n                    miscInfo.push({\n                        html: '<div class=\"mediaInfoProgramAttribute mediaInfoItem liveTvProgram\">' + globalize.translate('Live') + '</div>'\n                    });\n                } else if (item.IsPremiere) {\n                    miscInfo.push({\n                        html: '<div class=\"mediaInfoProgramAttribute mediaInfoItem premiereTvProgram\">' + globalize.translate('Premiere') + '</div>'\n                    });\n                } else if (item.IsSeries && !item.IsRepeat) {\n                    miscInfo.push({\n                        html: '<div class=\"mediaInfoProgramAttribute mediaInfoItem newTvProgram\">' + globalize.translate('AttributeNew') + '</div>'\n                    });\n                } else if (item.IsSeries && item.IsRepeat) {\n                    miscInfo.push({\n                        html: '<div class=\"mediaInfoProgramAttribute mediaInfoItem repeatTvProgram\">' + globalize.translate('Repeat') + '</div>'\n                    });\n                }\n            }\n\n            if ((item.IsSeries || item.EpisodeTitle) && options.episodeTitle !== false) {\n\n                text = itemHelper.getDisplayName(item, {\n                    includeIndexNumber: options.episodeTitleIndexNumber\n                });\n\n                if (text) {\n                    miscInfo.push(text);\n                }\n            } else if (item.IsMovie && item.ProductionYear && options.originalAirDate !== false) {\n                miscInfo.push(item.ProductionYear);\n            } else if (item.PremiereDate && options.originalAirDate !== false) {\n\n                try {\n                    date = datetime.parseISO8601Date(item.PremiereDate);\n                    text = globalize.translate('OriginalAirDateValue', datetime.toLocaleDateString(date));\n                    miscInfo.push(text);\n                } catch (e) {\n                    console.error('error parsing date: ' + item.PremiereDate);\n                }\n            } else if (item.ProductionYear) {\n                miscInfo.push(item.ProductionYear);\n            }\n        }\n\n        if (options.year !== false) {\n            if (item.Type !== 'Series' && item.Type !== 'Episode' && item.Type !== 'Person' && item.MediaType !== 'Photo' && item.Type !== 'Program' && item.Type !== 'Season') {\n\n                if (item.ProductionYear) {\n\n                    miscInfo.push(item.ProductionYear);\n                } else if (item.PremiereDate) {\n\n                    try {\n                        text = datetime.parseISO8601Date(item.PremiereDate).getFullYear();\n                        miscInfo.push(text);\n                    } catch (e) {\n                        console.error('error parsing date: ' + item.PremiereDate);\n                    }\n                }\n            }\n        }\n\n        if (item.RunTimeTicks && item.Type !== 'Series' && item.Type !== 'Program' && item.Type !== 'Book' && !showFolderRuntime && options.runtime !== false) {\n\n            if (item.Type === 'Audio') {\n\n                miscInfo.push(datetime.getDisplayRunningTime(item.RunTimeTicks));\n\n            } else {\n                minutes = item.RunTimeTicks / 600000000;\n\n                minutes = minutes || 1;\n\n                miscInfo.push(Math.round(minutes) + ' mins');\n            }\n        }\n\n        if (item.OfficialRating && item.Type !== 'Season' && item.Type !== 'Episode') {\n            miscInfo.push({\n                text: item.OfficialRating,\n                cssClass: 'mediaInfoOfficialRating'\n            });\n        }\n\n        if (item.Video3DFormat) {\n            miscInfo.push('3D');\n        }\n\n        if (item.MediaType === 'Photo' && item.Width && item.Height) {\n            miscInfo.push(item.Width + 'x' + item.Height);\n        }\n\n        if (options.container !== false && item.Type === 'Audio' && item.Container) {\n            miscInfo.push(item.Container);\n        }\n\n        html += miscInfo.map(function (m) {\n            return getMediaInfoItem(m);\n        }).join('');\n\n        html += getStarIconsHtml(item);\n\n        if (item.HasSubtitles && options.subtitles !== false) {\n            html += '<div class=\"mediaInfoItem mediaInfoText closedCaptionMediaInfoText\">CC</div>';\n        }\n\n        if (item.CriticRating && options.criticRating !== false) {\n\n            if (item.CriticRating >= 60) {\n                html += '<div class=\"mediaInfoItem mediaInfoCriticRating mediaInfoCriticRatingFresh\">' + item.CriticRating + '</div>';\n            } else {\n                html += '<div class=\"mediaInfoItem mediaInfoCriticRating mediaInfoCriticRatingRotten\">' + item.CriticRating + '</div>';\n            }\n        }\n\n        if (options.endsAt !== false) {\n\n            var endsAt = getEndsAt(item);\n            if (endsAt) {\n                html += getMediaInfoItem(endsAt, 'endsAt');\n            }\n        }\n\n        html += indicators.getMissingIndicator(item);\n\n        return html;\n    }\n\n    function getEndsAt(item) {\n\n        if (item.MediaType === 'Video' && item.RunTimeTicks) {\n\n            if (!item.StartDate) {\n                var endDate = new Date().getTime() + (item.RunTimeTicks / 10000);\n                endDate = new Date(endDate);\n\n                var displayTime = datetime.getDisplayTime(endDate);\n                return globalize.translate('EndsAtValue', displayTime);\n            }\n        }\n\n        return null;\n    }\n\n    function getEndsAtFromPosition(runtimeTicks, positionTicks, includeText) {\n\n        var endDate = new Date().getTime() + ((runtimeTicks - (positionTicks || 0)) / 10000);\n        endDate = new Date(endDate);\n\n        var displayTime = datetime.getDisplayTime(endDate);\n\n        if (includeText === false) {\n            return displayTime;\n        }\n        return globalize.translate('EndsAtValue', displayTime);\n    }\n\n    function getMediaInfoItem(m, cssClass) {\n\n        cssClass = cssClass ? (cssClass + ' mediaInfoItem') : 'mediaInfoItem';\n        var mediaInfoText = m;\n\n        if (typeof (m) !== 'string' && typeof (m) !== 'number') {\n\n            if (m.html) {\n                return m.html;\n            }\n            mediaInfoText = m.text;\n            cssClass += ' ' + m.cssClass;\n        }\n        return '<div class=\"' + cssClass + '\">' + mediaInfoText + '</div>';\n    }\n\n    function getStarIconsHtml(item) {\n        var html = '';\n\n        if (item.CommunityRating) {\n            html += '<div class=\"starRatingContainer mediaInfoItem\">';\n\n            html += '<span class=\"material-icons starIcon star\"></span>';\n            html += item.CommunityRating.toFixed(1);\n            html += '</div>';\n        }\n\n        return html;\n    }\n\n    function dynamicEndTime(elem, item) {\n\n        var interval = setInterval(function () {\n\n            if (!document.body.contains(elem)) {\n\n                clearInterval(interval);\n                return;\n            }\n\n            elem.innerHTML = getEndsAt(item);\n\n        }, 60000);\n    }\n\n    function fillPrimaryMediaInfo(elem, item, options) {\n        var html = getPrimaryMediaInfoHtml(item, options);\n\n        elem.innerHTML = html;\n        afterFill(elem, item, options);\n    }\n\n    function fillSecondaryMediaInfo(elem, item, options) {\n        var html = getSecondaryMediaInfoHtml(item, options);\n\n        elem.innerHTML = html;\n        afterFill(elem, item, options);\n    }\n\n    function afterFill(elem, item, options) {\n\n        if (options.endsAt !== false) {\n            var endsAtElem = elem.querySelector('.endsAt');\n            if (endsAtElem) {\n                dynamicEndTime(endsAtElem, item);\n            }\n        }\n\n        var lnkChannel = elem.querySelector('.lnkChannel');\n        if (lnkChannel) {\n            lnkChannel.addEventListener('click', onChannelLinkClick);\n        }\n    }\n\n    function onChannelLinkClick(e) {\n\n        var channelId = this.getAttribute('data-id');\n        var serverId = this.getAttribute('data-serverid');\n\n        appRouter.showItem(channelId, serverId);\n\n        e.preventDefault();\n        return false;\n    }\n\n    function getPrimaryMediaInfoHtml(item, options) {\n\n        options = options || {};\n        if (options.interactive == null) {\n            options.interactive = false;\n        }\n\n        return getMediaInfoHtml(item, options);\n    }\n\n    function getSecondaryMediaInfoHtml(item, options) {\n\n        options = options || {};\n        if (options.interactive == null) {\n            options.interactive = false;\n        }\n        if (item.Type === 'Program') {\n            return getProgramInfoHtml(item, options);\n        }\n\n        return '';\n    }\n\n    function getResolutionText(i) {\n\n        var width = i.Width;\n        var height = i.Height;\n\n        if (width && height) {\n\n            if (width >= 3800 || height >= 2000) {\n                return '4K';\n            }\n            if (width >= 2500 || height >= 1400) {\n                if (i.IsInterlaced) {\n                    return '1440i';\n                }\n                return '1440p';\n            }\n            if (width >= 1800 || height >= 1000) {\n                if (i.IsInterlaced) {\n                    return '1080i';\n                }\n                return '1080p';\n            }\n            if (width >= 1200 || height >= 700) {\n                if (i.IsInterlaced) {\n                    return '720i';\n                }\n                return '720p';\n            }\n            if (width >= 700 || height >= 400) {\n\n                if (i.IsInterlaced) {\n                    return '480i';\n                }\n                return '480p';\n            }\n\n        }\n        return null;\n    }\n\n    function getAudioStreamForDisplay(item) {\n\n        if (!item.MediaSources) {\n            return null;\n        }\n\n        var mediaSource = item.MediaSources[0];\n        if (!mediaSource) {\n            return null;\n        }\n\n        return (mediaSource.MediaStreams || []).filter(function (i) {\n            return i.Type === 'Audio' && (i.Index === mediaSource.DefaultAudioStreamIndex || mediaSource.DefaultAudioStreamIndex == null);\n        })[0];\n    }\n\n    function getMediaInfoStats(item, options) {\n\n        options = options || {};\n\n        var list = [];\n\n        var mediaSource = (item.MediaSources || [])[0] || {};\n\n        var videoStream = (mediaSource.MediaStreams || []).filter(function (i) {\n            return i.Type === 'Video';\n        })[0] || {};\n        var audioStream = getAudioStreamForDisplay(item) || {};\n\n        if (item.VideoType === 'Dvd') {\n            list.push({\n                type: 'mediainfo',\n                text: 'Dvd'\n            });\n        }\n\n        if (item.VideoType === 'BluRay') {\n            list.push({\n                type: 'mediainfo',\n                text: 'BluRay'\n            });\n        }\n\n        //if (mediaSource.Container) {\n        //    html += '<div class=\"mediaInfoIcon mediaInfoText\">' + mediaSource.Container + '</div>';\n        //}\n\n        var resolutionText = getResolutionText(videoStream);\n        if (resolutionText) {\n            list.push({\n                type: 'mediainfo',\n                text: resolutionText\n            });\n        }\n\n        if (videoStream.Codec) {\n            list.push({\n                type: 'mediainfo',\n                text: videoStream.Codec\n            });\n        }\n\n        var channels = audioStream.Channels;\n        var channelText;\n\n        if (channels === 8) {\n\n            channelText = '7.1';\n\n        } else if (channels === 7) {\n\n            channelText = '6.1';\n\n        } else if (channels === 6) {\n\n            channelText = '5.1';\n\n        } else if (channels === 2) {\n\n            channelText = '2.0';\n        }\n\n        if (channelText) {\n            list.push({\n                type: 'mediainfo',\n                text: channelText\n            });\n        }\n\n        var audioCodec = (audioStream.Codec || '').toLowerCase();\n\n        if ((audioCodec === 'dca' || audioCodec === 'dts') && audioStream.Profile) {\n            list.push({\n                type: 'mediainfo',\n                text: audioStream.Profile\n            });\n        } else if (audioStream.Codec) {\n            list.push({\n                type: 'mediainfo',\n                text: audioStream.Codec\n            });\n        }\n\n        if (item.DateCreated && itemHelper.enableDateAddedDisplay(item)) {\n\n            var dateCreated = datetime.parseISO8601Date(item.DateCreated);\n\n            list.push({\n                type: 'added',\n                text: globalize.translate('AddedOnValue', datetime.toLocaleDateString(dateCreated) + ' ' + datetime.getDisplayTime(dateCreated))\n            });\n        }\n\n        return list;\n    }\n\n    return {\n        getMediaInfoHtml: getPrimaryMediaInfoHtml,\n        fill: fillPrimaryMediaInfo,\n        getEndsAt: getEndsAt,\n        getEndsAtFromPosition: getEndsAtFromPosition,\n        getPrimaryMediaInfoHtml: getPrimaryMediaInfoHtml,\n        getSecondaryMediaInfoHtml: getSecondaryMediaInfoHtml,\n        fillPrimaryMediaInfo: fillPrimaryMediaInfo,\n        fillSecondaryMediaInfo: fillSecondaryMediaInfo,\n        getMediaInfoStats: getMediaInfoStats,\n        getResolutionText: getResolutionText\n    };\n});\n"]}