{"version":3,"sources":["components/prompt/prompt.js"],"names":["define","browser","dialogHelper","layoutManager","scrollHelper","globalize","dom","require","tv","xboxOne","window","confirm","options","label","text","replaceAll","str","find","replace","split","join","result","prompt","Promise","resolve","reject","template","title","showDialog","dialogOptions","removeOnClose","scrollY","size","submitValue","dlg","createDialog","classList","add","innerHTML","translateHtml","centerFocus","on","querySelector","addEventListener","e","close","description","setInputProperties","txtInput","setAttribute","value","preventDefault","stopPropagation","setTimeout","confirmText","translate","style","minWidth","Math","min","getWindowSize","innerWidth","open","then","off"],"mappings":"AAAA,aAAAA,OAAO,CAAC,UAAW,eAAgB,gBAAiB,eAAgB,YAAa,MAAO,UAAW,iBAAkB,cAAe,0BAA2B,aAAc,oBAAoB,SAASC,QAASC,aAAcC,cAAeC,aAAcC,UAAWC,IAAKC,SAwF1Q,OAAKN,QAAQO,IAAMP,QAAQQ,UAAYC,OAAOC,QACnC,SAAUC,SACU,iBAAZA,UACPA,QAAU,CACNC,MAAO,GACPC,KAAMF,UAId,IAAIC,MA9FZ,SAASE,WAAWC,IAAKC,KAAMC,SAC3B,OAAOF,IAAIG,MAAMF,MAAMG,KAAKF,SA6FZH,CAAWH,QAAQC,OAAS,GAAI,QAAS,MACjDQ,OAASC,OAAOT,MAAOD,QAAQE,MAAQ,IAE3C,OAAIO,OACOE,QAAQC,QAAQH,QAEhBE,QAAQE,OAAOJ,SAIvB,SAAUT,SACb,OAAO,IAAIW,SAAQ,SAAUC,QAASC,QAClClB,QAAQ,CAAC,gCAAgC,SAAUmB,UACxB,iBAAZd,UACPA,QAAU,CACNe,MAAO,GACPb,KAAMF,UA/F9B,SAASgB,WAAWhB,QAASc,UACzB,IAAIG,cAAgB,CAChBC,eAAe,EACfC,SAAS,GAGT5B,cAAcK,KACdqB,cAAcG,KAAO,cAGzB,IA2BIC,YA3BAC,IAAMhC,aAAaiC,aAAaN,eA+CpC,OA7CAK,IAAIE,UAAUC,IAAI,cAElBH,IAAII,UAAYjC,UAAUkC,cAAcb,SAAU,QAE9CvB,cAAcK,GACdJ,aAAaoC,YAAYC,GAAGP,IAAIQ,cAAc,uBAAuB,IAErER,IAAIQ,cAAc,uBAAuBN,UAAUC,IAAI,2BACvDH,IAAIE,UAAUC,IAAI,6BAGtBH,IAAIQ,cAAc,cAAcC,iBAAiB,SAAS,SAAUC,GAChE1C,aAAa2C,MAAMX,QAGvBA,IAAIQ,cAAc,0BAA0BJ,UAAY1B,QAAQe,OAAS,GAErEf,QAAQkC,YACRZ,IAAIQ,cAAc,qBAAqBJ,UAAY1B,QAAQkC,YAE3DZ,IAAIQ,cAAc,qBAAqBN,UAAUC,IAAI,QA3C7D,SAASU,mBAAmBb,IAAKtB,SAC7B,IAAIoC,SAAWd,IAAIQ,cAAc,aAE7BM,SAASnC,MACTmC,SAASnC,MAAMD,QAAQC,OAAS,IAEhCmC,SAASC,aAAa,QAASrC,QAAQC,OAAS,IAEpDmC,SAASE,MAAQtC,QAAQsC,OAAS,GAsClCH,CAAmBb,IAAKtB,SAIxBsB,IAAIQ,cAAc,QAAQC,iBAAiB,UAAU,SAAUC,GAW3D,OATAX,YAAcC,IAAIQ,cAAc,aAAaQ,MAC7CN,EAAEO,iBACFP,EAAEQ,kBAGFC,YAAW,WACPnD,aAAa2C,MAAMX,OACpB,MAEI,KAGXA,IAAIQ,cAAc,eAAeJ,UAAY1B,QAAQ0C,aAAejD,UAAUkD,UAAU,YAExFrB,IAAIsB,MAAMC,SAAYC,KAAKC,IAAI,IAAKrD,IAAIsD,gBAAgBC,WAAa,IAAO,KAErE3D,aAAa4D,KAAK5B,KAAK6B,MAAK,WAK/B,OAJI5D,cAAcK,IACdJ,aAAaoC,YAAYwB,IAAI9B,IAAIQ,cAAc,uBAAuB,GAGtET,aAGOV,QAAQE,YAiCXG,CAAWhB,QAASc,UAAUqC,KAAKvC,QAASC","file":"prompt.js","sourcesContent":["define(['browser', 'dialogHelper', 'layoutManager', 'scrollHelper', 'globalize', 'dom', 'require', 'material-icons', 'emby-button', 'paper-icon-button-light', 'emby-input', 'formDialogStyle'], function(browser, dialogHelper, layoutManager, scrollHelper, globalize, dom, require) {\n    'use strict';\n\n    function replaceAll(str, find, replace) {\n        return str.split(find).join(replace);\n    }\n\n    function setInputProperties(dlg, options) {\n        var txtInput = dlg.querySelector('#txtInput');\n\n        if (txtInput.label) {\n            txtInput.label(options.label || '');\n        } else {\n            txtInput.setAttribute('label', options.label || '');\n        }\n        txtInput.value = options.value || '';\n    }\n\n    function showDialog(options, template) {\n        var dialogOptions = {\n            removeOnClose: true,\n            scrollY: false\n        };\n\n        if (layoutManager.tv) {\n            dialogOptions.size = 'fullscreen';\n        }\n\n        var dlg = dialogHelper.createDialog(dialogOptions);\n\n        dlg.classList.add('formDialog');\n\n        dlg.innerHTML = globalize.translateHtml(template, 'core');\n\n        if (layoutManager.tv) {\n            scrollHelper.centerFocus.on(dlg.querySelector('.formDialogContent'), false);\n        } else {\n            dlg.querySelector('.dialogContentInner').classList.add('dialogContentInner-mini');\n            dlg.classList.add('dialog-fullscreen-lowres');\n        }\n\n        dlg.querySelector('.btnCancel').addEventListener('click', function (e) {\n            dialogHelper.close(dlg);\n        });\n\n        dlg.querySelector('.formDialogHeaderTitle').innerHTML = options.title || '';\n\n        if (options.description) {\n            dlg.querySelector('.fieldDescription').innerHTML = options.description;\n        } else {\n            dlg.querySelector('.fieldDescription').classList.add('hide');\n        }\n\n        setInputProperties(dlg, options);\n\n        var submitValue;\n\n        dlg.querySelector('form').addEventListener('submit', function (e) {\n\n            submitValue = dlg.querySelector('#txtInput').value;\n            e.preventDefault();\n            e.stopPropagation();\n\n            // Important, don't close the dialog until after the form has completed submitting, or it will cause an error in Chrome\n            setTimeout(function () {\n                dialogHelper.close(dlg);\n            }, 300);\n\n            return false;\n        });\n\n        dlg.querySelector('.submitText').innerHTML = options.confirmText || globalize.translate('ButtonOk');\n\n        dlg.style.minWidth = (Math.min(400, dom.getWindowSize().innerWidth - 50)) + 'px';\n\n        return dialogHelper.open(dlg).then(function () {\n            if (layoutManager.tv) {\n                scrollHelper.centerFocus.off(dlg.querySelector('.formDialogContent'), false);\n            }\n\n            if (submitValue) {\n                return submitValue;\n            } else {\n                return Promise.reject();\n            }\n        });\n    }\n\n    if ((browser.tv || browser.xboxOne) && window.confirm) {\n        return function (options) {\n            if (typeof options === 'string') {\n                options = {\n                    label: '',\n                    text: options\n                };\n            }\n\n            var label = replaceAll(options.label || '', '<br/>', '\\n');\n            var result = prompt(label, options.text || '');\n\n            if (result) {\n                return Promise.resolve(result);\n            } else {\n                return Promise.reject(result);\n            }\n        };\n    } else {\n        return function (options) {\n            return new Promise(function (resolve, reject) {\n                require(['text!./prompt.template.html'], function (template) {\n                    if (typeof options === 'string') {\n                        options = {\n                            title: '',\n                            text: options\n                        };\n                    }\n                    showDialog(options, template).then(resolve, reject);\n                });\n            });\n        };\n    }\n});\n"]}