{"version":3,"sources":["components/refreshdialog/refreshdialog.js"],"names":["define","dom","shell","dialogHelper","loading","layoutManager","connectionManager","appRouter","globalize","centerFocus","elem","horiz","on","require","scrollHelper","fn","onSubmit","e","show","dlg","parentWithClass","target","options","this","apiClient","getApiClient","serverId","replaceAllMetadata","querySelector","value","mode","replaceAllImages","checked","itemIds","forEach","itemId","refreshItem","Recursive","ImageRefreshMode","MetadataRefreshMode","ReplaceAllImages","ReplaceAllMetadata","close","toast","translate","hide","preventDefault","RefreshDialog","prototype","dialogOptions","removeOnClose","scrollY","tv","size","createDialog","classList","add","html","getEditorHtml","innerHTML","addEventListener","bind","remove","dispatchEvent","CustomEvent","Promise","resolve","reject","open"],"mappings":"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","file":"refreshdialog.js","sourcesContent":["define(['dom', 'shell', 'dialogHelper', 'loading', 'layoutManager', 'connectionManager', 'appRouter', 'globalize', 'emby-input', 'emby-checkbox', 'paper-icon-button-light', 'emby-select', 'material-icons', 'css!./../formdialog', 'emby-button'], function (dom, shell, dialogHelper, loading, layoutManager, connectionManager, appRouter, globalize) {\n    'use strict';\n\n    function getEditorHtml() {\n\n        var html = '';\n\n        html += '<div class=\"formDialogContent smoothScrollY\" style=\"padding-top:2em;\">';\n        html += '<div class=\"dialogContentInner dialog-content-centered\">';\n        html += '<form style=\"margin:auto;\">';\n\n        html += '<div class=\"fldSelectPlaylist selectContainer\">';\n        html += '<select is=\"emby-select\" id=\"selectMetadataRefreshMode\" label=\"' + globalize.translate('LabelRefreshMode') + '\">';\n        html += '<option value=\"scan\">' + globalize.translate('ScanForNewAndUpdatedFiles') + '</option>';\n        html += '<option value=\"missing\">' + globalize.translate('SearchForMissingMetadata') + '</option>';\n        html += '<option value=\"all\" selected>' + globalize.translate('ReplaceAllMetadata') + '</option>';\n        html += '</select>';\n        html += '</div>';\n\n        html += '<label class=\"checkboxContainer hide fldReplaceExistingImages\">';\n        html += '<input type=\"checkbox\" is=\"emby-checkbox\" class=\"chkReplaceImages\" />';\n        html += '<span>' + globalize.translate('ReplaceExistingImages') + '</span>';\n        html += '</label>';\n\n        html += '<div class=\"fieldDescription\">';\n        html += globalize.translate('RefreshDialogHelp');\n        html += '</div>';\n\n        html += '<input type=\"hidden\" class=\"fldSelectedItemIds\" />';\n\n        html += '<br />';\n        html += '<div class=\"formDialogFooter\">';\n        html += '<button is=\"emby-button\" type=\"submit\" class=\"raised btnSubmit block formDialogFooterItem button-submit\">' + globalize.translate('Refresh') + '</button>';\n        html += '</div>';\n\n        html += '</form>';\n        html += '</div>';\n        html += '</div>';\n\n        return html;\n    }\n\n    function centerFocus(elem, horiz, on) {\n        require(['scrollHelper'], function (scrollHelper) {\n            var fn = on ? 'on' : 'off';\n            scrollHelper.centerFocus[fn](elem, horiz);\n        });\n    }\n\n    function onSubmit(e) {\n\n        loading.show();\n\n        var instance = this;\n        var dlg = dom.parentWithClass(e.target, 'dialog');\n        var options = instance.options;\n\n        var apiClient = connectionManager.getApiClient(options.serverId);\n\n        var replaceAllMetadata = dlg.querySelector('#selectMetadataRefreshMode').value === 'all';\n\n        var mode = dlg.querySelector('#selectMetadataRefreshMode').value === 'scan' ? 'Default' : 'FullRefresh';\n        var replaceAllImages = mode === 'FullRefresh' && dlg.querySelector('.chkReplaceImages').checked;\n\n        options.itemIds.forEach(function (itemId) {\n            apiClient.refreshItem(itemId, {\n\n                Recursive: true,\n                ImageRefreshMode: mode,\n                MetadataRefreshMode: mode,\n                ReplaceAllImages: replaceAllImages,\n                ReplaceAllMetadata: replaceAllMetadata\n            });\n        });\n\n        dialogHelper.close(dlg);\n\n        require(['toast'], function (toast) {\n            toast(globalize.translate('RefreshQueued'));\n        });\n\n        loading.hide();\n\n        e.preventDefault();\n        return false;\n    }\n\n    function RefreshDialog(options) {\n        this.options = options;\n    }\n\n    RefreshDialog.prototype.show = function () {\n\n        var dialogOptions = {\n            removeOnClose: true,\n            scrollY: false\n        };\n\n        if (layoutManager.tv) {\n            dialogOptions.size = 'fullscreen';\n        } else {\n            dialogOptions.size = 'small';\n        }\n\n        var dlg = dialogHelper.createDialog(dialogOptions);\n\n        dlg.classList.add('formDialog');\n\n        var html = '';\n        var title = globalize.translate('RefreshMetadata');\n\n        html += '<div class=\"formDialogHeader\">';\n        html += '<button is=\"paper-icon-button-light\" class=\"btnCancel autoSize\" tabindex=\"-1\"><span class=\"material-icons arrow_back\"></span></button>';\n        html += '<h3 class=\"formDialogHeaderTitle\">';\n        html += title;\n        html += '</h3>';\n\n        html += '</div>';\n\n        html += getEditorHtml();\n\n        dlg.innerHTML = html;\n\n        dlg.querySelector('form').addEventListener('submit', onSubmit.bind(this));\n\n        dlg.querySelector('#selectMetadataRefreshMode').addEventListener('change', function () {\n\n            if (this.value === 'scan') {\n                dlg.querySelector('.fldReplaceExistingImages').classList.add('hide');\n            } else {\n                dlg.querySelector('.fldReplaceExistingImages').classList.remove('hide');\n            }\n        });\n\n        if (this.options.mode) {\n            dlg.querySelector('#selectMetadataRefreshMode').value = this.options.mode;\n        }\n\n        dlg.querySelector('#selectMetadataRefreshMode').dispatchEvent(new CustomEvent('change'));\n\n        dlg.querySelector('.btnCancel').addEventListener('click', function () {\n\n            dialogHelper.close(dlg);\n        });\n\n        if (layoutManager.tv) {\n            centerFocus(dlg.querySelector('.formDialogContent'), false, true);\n        }\n\n        return new Promise(function (resolve, reject) {\n\n            if (layoutManager.tv) {\n                centerFocus(dlg.querySelector('.formDialogContent'), false, false);\n            }\n\n            dlg.addEventListener('close', resolve);\n            dialogHelper.open(dlg);\n        });\n    };\n\n    return RefreshDialog;\n});\n"]}