{"version":3,"sources":["components/playback/volumeosd.js"],"names":["define","_events","_playbackManager","_dom","_browser","_iconosd","_materialIcons","_interopRequireDefault","obj","__esModule","default","currentPlayer","osdElement","iconElement","progressElement","enableAnimation","hideTimeout","onHideComplete","this","classList","add","clearHideTimeout","clearTimeout","hideOsd","elem","offsetWidth","requestAnimationFrame","dom","addEventListener","whichTransitionEvent","once","call","onVolumeChanged","e","ensureOsdElement","browser","supportsCssAnimation","document","createElement","innerHTML","getOsdElementHtml","html","querySelector","body","appendChild","updatePlayerVolumeState","isMuted","volume","remove","style","width","getVolume","showOsd","removeEventListener","setTimeout","bindToPlayer","player","releaseCurrentPlayer","events","off","on","playbackManager","getCurrentPlayer"],"mappings":"AAAAA,OAAO,CAAC,SAAU,kBAAmB,MAAO,UAAW,gBAAiB,mBAAmB,SAAUC,QAASC,iBAAkBC,KAAMC,SAAUC,SAAUC,gBACxJ,aAOA,SAASC,uBAAuBC,KAAO,OAAOA,KAAOA,IAAIC,WAAaD,IAAM,CAAEE,QAASF,KADzF,IAAIG,cACAC,WACAC,YACAC,gBAEAC,gBAsCAC,YAJJ,SAASC,iBACLC,KAAKC,UAAUC,IAAI,QA0BvB,SAASC,mBACDL,cACAM,aAAaN,aACbA,YAAc,MAItB,SAASO,UAELF,mBAEA,IAAIG,KAAOZ,WACPY,OAEIT,iBAEKS,KAAKC,YAEVC,uBAAsB,WAClBF,KAAKL,UAAUC,IAAI,kBAEnBO,KAAAA,QAAIC,iBAAiBJ,KAAMG,KAAAA,QAAIE,uBAAwBZ,eAAgB,CACnEa,MAAM,QAIdb,eAAec,KAAKP,OA2BhC,SAASQ,gBAAgBC,IAtGzB,SAASC,mBAEL,IAAIV,KAAOZ,WACNY,OAEDT,gBAAkBoB,SAAAA,QAAQC,wBAE1BZ,KAAOa,SAASC,cAAc,QACzBnB,UAAUC,IAAI,QACnBI,KAAKL,UAAUC,IAAI,WACnBI,KAAKL,UAAUC,IAAI,kBACnBI,KAAKL,UAAUC,IAAI,aACnBI,KAAKe,UAtBb,SAASC,oBAOL,MAJQ,6DAEA,mFAARC,6IAiBqBD,GAEjB3B,YAAcW,KAAKkB,cAAc,mBACjC5B,gBAAkBU,KAAKkB,cAAc,yBAErCL,SAASM,KAAKC,YAAYpB,MAC1BZ,WAAaY,MAwFjBU,GA1BJ,SAASW,wBAAwBC,QAASC,QAElClC,cACAA,YAAYM,UAAU6B,OAAO,aAAc,aAC3CnC,YAAYM,UAAUC,IAAI0B,QAAU,aAAe,cAEnDhC,kBACAA,gBAAgBmC,MAAMC,OAASH,QAAU,GAAK,KAqBlDF,CAJa3B,KAIkB4B,UAJlB5B,KAIoCiC,aAjFrD,SAASC,UAEL/B,mBAEA,IAAIG,KAAOZ,WAEXe,KAAAA,QAAI0B,oBAAoB7B,KAAMG,KAAAA,QAAIE,uBAAwBZ,eAAgB,CACtEa,MAAM,IAGVN,KAAKL,UAAU6B,OAAO,QAGjBxB,KAAKC,YAEVC,uBAAsB,WAClBF,KAAKL,UAAU6B,OAAO,kBAEtBhC,YAAcsC,WAAW/B,QAAS,QAiEtC6B,GAGJ,SAASG,aAAaC,QAEdA,SAAW7C,iBAxBnB,SAAS8C,uBAEL,IAAID,OAAS7C,cAET6C,SACAE,QAAAA,QAAOC,IAAIH,OAAQ,eAAgBxB,iBACnC0B,QAAAA,QAAOC,IAAIH,OAAQ,eAAgBjC,SACnCZ,cAAgB,MAqBpB8C,GAEA9C,cAAgB6C,OAEXA,SAILjC,UACAmC,QAAAA,QAAOE,GAAGJ,OAAQ,eAAgBxB,iBAClC0B,QAAAA,QAAOE,GAAGJ,OAAQ,eAAgBjC,WAzJtCtB,QAAAM,uBAAAN,SACAC,iBAAAK,uBAAAL,kBACAC,KAAAI,uBAAAJ,MACAC,SAAAG,uBAAAH,UAyJAsD,QAAAA,QAAOE,GAAGC,iBAAAA,QAAiB,gBAAgB,WACvCN,aAAaM,iBAAAA,QAAgBC,uBAGjCP,aAAaM,iBAAAA,QAAgBC","file":"volumeosd.js","sourcesContent":["import events from 'events';\nimport playbackManager from 'playbackManager';\nimport dom from 'dom';\nimport browser from 'browser';\nimport 'css!./iconosd';\nimport 'material-icons';\n\nvar currentPlayer;\nvar osdElement;\nvar iconElement;\nvar progressElement;\n\nvar enableAnimation;\n\nfunction getOsdElementHtml() {\n    var html = '';\n\n    html += '<span class=\"material-icons iconOsdIcon volume_up\"></span>';\n\n    html += '<div class=\"iconOsdProgressOuter\"><div class=\"iconOsdProgressInner\"></div></div>';\n\n    return html;\n}\n\nfunction ensureOsdElement() {\n\n    var elem = osdElement;\n    if (!elem) {\n\n        enableAnimation = browser.supportsCssAnimation();\n\n        elem = document.createElement('div');\n        elem.classList.add('hide');\n        elem.classList.add('iconOsd');\n        elem.classList.add('iconOsd-hidden');\n        elem.classList.add('volumeOsd');\n        elem.innerHTML = getOsdElementHtml();\n\n        iconElement = elem.querySelector('.material-icons');\n        progressElement = elem.querySelector('.iconOsdProgressInner');\n\n        document.body.appendChild(elem);\n        osdElement = elem;\n    }\n}\n\nfunction onHideComplete() {\n    this.classList.add('hide');\n}\n\nvar hideTimeout;\nfunction showOsd() {\n\n    clearHideTimeout();\n\n    var elem = osdElement;\n\n    dom.removeEventListener(elem, dom.whichTransitionEvent(), onHideComplete, {\n        once: true\n    });\n\n    elem.classList.remove('hide');\n\n    // trigger reflow\n    void elem.offsetWidth;\n\n    requestAnimationFrame(function () {\n        elem.classList.remove('iconOsd-hidden');\n\n        hideTimeout = setTimeout(hideOsd, 3000);\n    });\n}\n\nfunction clearHideTimeout() {\n    if (hideTimeout) {\n        clearTimeout(hideTimeout);\n        hideTimeout = null;\n    }\n}\n\nfunction hideOsd() {\n\n    clearHideTimeout();\n\n    var elem = osdElement;\n    if (elem) {\n\n        if (enableAnimation) {\n            // trigger reflow\n            void elem.offsetWidth;\n\n            requestAnimationFrame(function () {\n                elem.classList.add('iconOsd-hidden');\n\n                dom.addEventListener(elem, dom.whichTransitionEvent(), onHideComplete, {\n                    once: true\n                });\n            });\n        } else {\n            onHideComplete.call(elem);\n        }\n    }\n}\n\nfunction updatePlayerVolumeState(isMuted, volume) {\n\n    if (iconElement) {\n        iconElement.classList.remove('volume_off', 'volume_up');\n        iconElement.classList.add(isMuted ? 'volume_off' : 'volume_up');\n    }\n    if (progressElement) {\n        progressElement.style.width = (volume || 0) + '%';\n    }\n}\n\nfunction releaseCurrentPlayer() {\n\n    var player = currentPlayer;\n\n    if (player) {\n        events.off(player, 'volumechange', onVolumeChanged);\n        events.off(player, 'playbackstop', hideOsd);\n        currentPlayer = null;\n    }\n}\n\nfunction onVolumeChanged(e) {\n\n    var player = this;\n\n    ensureOsdElement();\n\n    updatePlayerVolumeState(player.isMuted(), player.getVolume());\n\n    showOsd();\n}\n\nfunction bindToPlayer(player) {\n\n    if (player === currentPlayer) {\n        return;\n    }\n\n    releaseCurrentPlayer();\n\n    currentPlayer = player;\n\n    if (!player) {\n        return;\n    }\n\n    hideOsd();\n    events.on(player, 'volumechange', onVolumeChanged);\n    events.on(player, 'playbackstop', hideOsd);\n}\n\nevents.on(playbackManager, 'playerchange', function () {\n    bindToPlayer(playbackManager.getCurrentPlayer());\n});\n\nbindToPlayer(playbackManager.getCurrentPlayer());\n"]}