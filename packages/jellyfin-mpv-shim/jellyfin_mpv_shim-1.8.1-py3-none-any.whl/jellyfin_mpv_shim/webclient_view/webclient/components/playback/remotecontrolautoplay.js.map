{"version":3,"sources":["components/playback/remotecontrolautoplay.js"],"names":["define","_events","_playbackManager","_interopRequireDefault","obj","__esModule","default","events","on","playbackManager","e","newPlayer","newTarget","oldPlayer","isLocalPlayer","console","debug","transferPlayback","state","getPlayerState","item","NowPlayingItem","getPlaylist","then","playlist","playlistIds","map","x","Id","resumePositionTicks","PlayState","PositionTicks","playlistIndex","indexOf","stop","play","ids","serverId","ServerId","startPositionTicks","startIndex"],"mappings":"AAAAA,OAAO,CAAC,SAAU,oBAAoB,SAAUC,QAASC,kBACvD,aAKA,SAASC,uBAAuBC,KAAO,OAAOA,KAAOA,IAAIC,WAAaD,IAAM,CAAEE,QAASF,KANzFH,QAAAE,uBAAAF,SACAC,iBAAAC,uBAAAD,kBA2BAK,QAAAA,QAAOC,GAAGC,iBAAAA,QAAiB,gBAAgB,SAACC,EAAGC,UAAWC,UAAWC,WAC5DA,WAAcF,YAIdE,UAAUC,cAKXH,UAAUG,cACVC,QAAQC,MAAM,wEApCtB,SAASC,iBAAiBJ,UAAWF,WACjC,IAAMO,MAAQT,iBAAAA,QAAgBU,eAAeN,WACvCO,KAAOF,MAAMG,eAEdD,MAILX,iBAAAA,QAAgBa,YAAYT,WAAWU,MAAK,SAAAC,UACxC,IAAMC,YAAcD,SAASE,KAAI,SAAAC,GAAC,OAAIA,EAAEC,MAElCC,qBADYX,MAAMY,WAAa,IACCC,eAAiB,EACjDC,cAAgBP,YAAYQ,QAAQb,KAAKQ,KAAO,EAEtDnB,iBAAAA,QAAgByB,KAAKrB,WAAWU,MAAK,WACjCd,iBAAAA,QAAgB0B,KAAK,CACjBC,IAAKX,YACLY,SAAUjB,KAAKkB,SACfC,mBAAoBV,oBACpBW,WAAYR,eACbrB,iBAoBXM,CAAiBJ,UAAWF,WATxBI,QAAQC,MAAM","file":"remotecontrolautoplay.js","sourcesContent":["import events from 'events';\nimport playbackManager from 'playbackManager';\n\nfunction transferPlayback(oldPlayer, newPlayer) {\n    const state = playbackManager.getPlayerState(oldPlayer);\n    const item = state.NowPlayingItem;\n\n    if (!item) {\n        return;\n    }\n\n    playbackManager.getPlaylist(oldPlayer).then(playlist => {\n        const playlistIds = playlist.map(x => x.Id);\n        const playState = state.PlayState || {};\n        const resumePositionTicks = playState.PositionTicks || 0;\n        const playlistIndex = playlistIds.indexOf(item.Id) || 0;\n\n        playbackManager.stop(oldPlayer).then(() => {\n            playbackManager.play({\n                ids: playlistIds,\n                serverId: item.ServerId,\n                startPositionTicks: resumePositionTicks,\n                startIndex: playlistIndex\n            }, newPlayer);\n        });\n    });\n}\n\nevents.on(playbackManager, 'playerchange', (e, newPlayer, newTarget, oldPlayer) => {\n    if (!oldPlayer || !newPlayer) {\n        return;\n    }\n\n    if (!oldPlayer.isLocalPlayer) {\n        console.debug('Skipping remote control autoplay because oldPlayer is not a local player');\n        return;\n    }\n\n    if (newPlayer.isLocalPlayer) {\n        console.debug('Skipping remote control autoplay because newPlayer is a local player');\n        return;\n    }\n\n    transferPlayback(oldPlayer, newPlayer);\n});\n"]}