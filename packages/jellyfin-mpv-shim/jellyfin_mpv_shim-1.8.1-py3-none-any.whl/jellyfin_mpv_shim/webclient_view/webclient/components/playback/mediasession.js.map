{"version":3,"sources":["components/playback/mediasession.js"],"names":["define","_playbackManager","_nowPlayingHelper","_events","_connectionManager","_interopRequireDefault","obj","__esModule","default","currentPlayer","seriesImageUrl","item","options","arguments","length","undefined","type","Type","SeriesPrimaryImageTag","tag","connectionManager","getApiClient","ServerId","getScaledImageUrl","SeriesId","SeriesThumbImageTag","ParentThumbImageTag","ParentThumbItemId","imageUrl","ImageTags","Id","AlbumId","AlbumPrimaryImageTag","getImageUrl","imageOptions","url","height","maxHeight","src","sizes","getImageUrls","imageSizes","list","forEach","size","push","updatePlayerState","player","state","eventName","NowPlayingItem","isVideo","MediaType","isLocalPlayer","playState","PlayState","parts","nowPlayingHelper","getNowPlayingNames","artist","text","title","album","Album","itemId","duration","parseInt","RunTimeTicks","currentTime","PositionTicks","isPaused","IsPaused","canSeek","CanSeek","navigator","mediaSession","metadata","MediaMetadata","artwork","itemImageUrl","window","NativeShell","updateMediaSession","action","position","hideMediaControls","onGeneralEvent","e","this","playbackManager","getPlayerState","onStateChanged","onPlaybackStart","onPlaybackStopped","hideMediaSession","bindToPlayer","releaseCurrentPlayer","events","off","on","execute","name","setActionHandler","object","wantedTime","seekTime","seekPercent","getCurrentPlayer"],"mappings":"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","file":"mediasession.js","sourcesContent":["import playbackManager from 'playbackManager';\nimport nowPlayingHelper from 'nowPlayingHelper';\nimport events from 'events';\nimport connectionManager from 'connectionManager';\n/* eslint-disable indent */\n\n    // Reports media playback to the device for lock screen control\n\n    let currentPlayer;\n\n    function seriesImageUrl(item, options = {}) {\n        options.type = options.type || 'Primary';\n\n        if (item.Type !== 'Episode') {\n            return null;\n        } else if (options.type === 'Primary' && item.SeriesPrimaryImageTag) {\n            options.tag = item.SeriesPrimaryImageTag;\n\n            return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.SeriesId, options);\n        } else if (options.type === 'Thumb') {\n            if (item.SeriesThumbImageTag) {\n                options.tag = item.SeriesThumbImageTag;\n\n                return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.SeriesId, options);\n            } else if (item.ParentThumbImageTag) {\n                options.tag = item.ParentThumbImageTag;\n\n                return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.ParentThumbItemId, options);\n            }\n        }\n\n        return null;\n    }\n\n    function imageUrl(item, options = {}) {\n        options.type = options.type || 'Primary';\n\n        if (item.ImageTags && item.ImageTags[options.type]) {\n            options.tag = item.ImageTags[options.type];\n\n            return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.Id, options);\n        } else if (item.AlbumId && item.AlbumPrimaryImageTag) {\n            options.tag = item.AlbumPrimaryImageTag;\n\n            return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.AlbumId, options);\n        }\n\n        return null;\n    }\n\n    function getImageUrl(item, imageOptions = {}) {\n        const url = seriesImageUrl(item, imageOptions) || imageUrl(item, imageOptions);\n\n        if (url) {\n            const height = imageOptions.height || imageOptions.maxHeight;\n\n            return {\n                src: url,\n                sizes: height + 'x' + height\n            };\n        } else {\n            return null;\n        }\n    }\n\n    function getImageUrls(item, imageSizes = [96, 128, 192, 256, 384, 512]) {\n        const list = [];\n\n        imageSizes.forEach((size) => {\n            const url = getImageUrl(item, {height: size});\n            if (url !== null) {\n                list.push(url);\n            }\n        });\n\n        return list;\n    }\n\n    function updatePlayerState(player, state, eventName) {\n        // Don't go crazy reporting position changes\n        if (eventName === 'timeupdate') {\n            // Only report if this item hasn't been reported yet, or if there's an actual playback change.\n            // Don't report on simple time updates\n            return;\n        }\n\n        const item = state.NowPlayingItem;\n\n        if (!item) {\n            hideMediaControls();\n            return;\n        }\n\n        if (eventName === 'init') { // transform \"init\" event into \"timeupdate\" to restraint update rate\n            eventName = 'timeupdate';\n        }\n\n        const isVideo = item.MediaType === 'Video';\n        const isLocalPlayer = player.isLocalPlayer || false;\n\n        // Local players do their own notifications\n        if (isLocalPlayer && isVideo) {\n            return;\n        }\n\n        const playState = state.PlayState || {};\n        const parts = nowPlayingHelper.getNowPlayingNames(item);\n        const artist = parts[parts.length - 1].text;\n        const title = parts.length === 1 ? '' : parts[0].text;\n\n        const album = item.Album || '';\n        const itemId = item.Id;\n\n        // Convert to ms\n        const duration = parseInt(item.RunTimeTicks ? (item.RunTimeTicks / 10000) : 0);\n        const currentTime = parseInt(playState.PositionTicks ? (playState.PositionTicks / 10000) : 0);\n\n        const isPaused = playState.IsPaused || false;\n        const canSeek = playState.CanSeek || false;\n\n        if ('mediaSession' in navigator) {\n             /* eslint-disable-next-line compat/compat */\n            navigator.mediaSession.metadata = new MediaMetadata({\n                title: title,\n                artist: artist,\n                album: album,\n                artwork: getImageUrls(item)\n            });\n        } else {\n            let itemImageUrl = seriesImageUrl(item, { maxHeight: 3000 }) || imageUrl(item, { maxHeight: 3000 });\n\n            window.NativeShell.updateMediaSession({\n                action: eventName,\n                isLocalPlayer: isLocalPlayer,\n                itemId: itemId,\n                title: title,\n                artist: artist,\n                album: album,\n                duration: duration,\n                position: currentTime,\n                imageUrl: itemImageUrl,\n                canSeek: canSeek,\n                isPaused: isPaused\n            });\n        }\n    }\n\n    function onGeneralEvent(e) {\n        const state = playbackManager.getPlayerState(this);\n\n        updatePlayerState(this, state, e.type);\n    }\n\n    function onStateChanged(e, state) {\n        updatePlayerState(this, state, 'statechange');\n    }\n\n    function onPlaybackStart(e, state) {\n        updatePlayerState(this, state, e.type);\n    }\n\n    function onPlaybackStopped() {\n        hideMediaControls();\n    }\n\n    function releaseCurrentPlayer() {\n        if (currentPlayer) {\n            events.off(currentPlayer, 'playbackstart', onPlaybackStart);\n            events.off(currentPlayer, 'playbackstop', onPlaybackStopped);\n            events.off(currentPlayer, 'unpause', onGeneralEvent);\n            events.off(currentPlayer, 'pause', onGeneralEvent);\n            events.off(currentPlayer, 'statechange', onStateChanged);\n            events.off(currentPlayer, 'timeupdate', onGeneralEvent);\n\n            currentPlayer = null;\n\n            hideMediaControls();\n        }\n    }\n\n    function hideMediaControls() {\n        if ('mediaSession' in navigator) {\n             /* eslint-disable-next-line compat/compat */\n            navigator.mediaSession.metadata = null;\n        } else {\n            window.NativeShell.hideMediaSession();\n        }\n    }\n\n    function bindToPlayer(player) {\n        releaseCurrentPlayer();\n\n        if (!player) {\n            return;\n        }\n\n        currentPlayer = player;\n\n        const state = playbackManager.getPlayerState(player);\n        updatePlayerState(player, state, 'init');\n\n        events.on(currentPlayer, 'playbackstart', onPlaybackStart);\n        events.on(currentPlayer, 'playbackstop', onPlaybackStopped);\n        events.on(currentPlayer, 'unpause', onGeneralEvent);\n        events.on(currentPlayer, 'pause', onGeneralEvent);\n        events.on(currentPlayer, 'statechange', onStateChanged);\n        events.on(currentPlayer, 'timeupdate', onGeneralEvent);\n    }\n\n    function execute(name) {\n        playbackManager[name](currentPlayer);\n    }\n\n    if ('mediaSession' in navigator) {\n        /* eslint-disable-next-line compat/compat */\n        navigator.mediaSession.setActionHandler('previoustrack', function () {\n            execute('previousTrack');\n        });\n\n        /* eslint-disable-next-line compat/compat */\n        navigator.mediaSession.setActionHandler('nexttrack', function () {\n            execute('nextTrack');\n        });\n\n        /* eslint-disable-next-line compat/compat */\n        navigator.mediaSession.setActionHandler('play', function () {\n            execute('unpause');\n        });\n\n        /* eslint-disable-next-line compat/compat */\n        navigator.mediaSession.setActionHandler('pause', function () {\n            execute('pause');\n        });\n\n        /* eslint-disable-next-line compat/compat */\n        navigator.mediaSession.setActionHandler('seekbackward', function () {\n            execute('rewind');\n        });\n\n        /* eslint-disable-next-line compat/compat */\n        navigator.mediaSession.setActionHandler('seekforward', function () {\n            execute('fastForward');\n        });\n\n        /* eslint-disable-next-line compat/compat */\n        navigator.mediaSession.setActionHandler('seekto', function (object) {\n            let item = playbackManager.getPlayerState(currentPlayer).NowPlayingItem;\n            // Convert to ms\n            let duration = parseInt(item.RunTimeTicks ? (item.RunTimeTicks / 10000) : 0);\n            let wantedTime = object.seekTime * 1000;\n            playbackManager.seekPercent(wantedTime / duration * 100, currentPlayer);\n        });\n    }\n\n    events.on(playbackManager, 'playerchange', function () {\n        bindToPlayer(playbackManager.getCurrentPlayer());\n    });\n\n    bindToPlayer(playbackManager.getCurrentPlayer());\n\n/* eslint-enable indent */\n"]}