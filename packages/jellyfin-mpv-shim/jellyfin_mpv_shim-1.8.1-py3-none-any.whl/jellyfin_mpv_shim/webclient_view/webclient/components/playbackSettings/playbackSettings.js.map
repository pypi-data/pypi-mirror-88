{"version":3,"sources":["components/playbackSettings/playbackSettings.js"],"names":["define","require","browser","appSettings","appHost","focusManager","qualityoptions","globalize","loading","connectionManager","dom","events","fillSkipLengths","select","innerHTML","map","option","name","translate","value","o","join","setMaxBitrateIntoField","isInNetwork","mediatype","options","getAudioQualityOptions","currentMaxBitrate","maxStreamingBitrate","isAutomaticBitrateEnabled","enableAutomaticBitrateDetection","enableAuto","getVideoQualityOptions","i","bitrate","setMaxBitrateFromField","loadForm","context","user","userSettings","apiClient","loggedInUserId","getCurrentUserId","userId","Id","showHideQualityFields","Policy","EnableVideoPlaybackTranscoding","querySelector","classList","remove","add","supports","EnableAudioPlaybackTranscoding","getEndpointInfo","then","endpointInfo","IsInNetwork","getCultures","allCultures","populateLanguages","languages","html","length","culture","ThreeLetterISOLanguageName","DisplayName","Configuration","AudioLanguagePreference","checked","EnableNextEpisodeAutoPlay","getNamedConfiguration","cinemaConfig","EnableIntrosForMovies","EnableIntrosForEpisodes","tizen","web0s","PlayDefaultAudioTrack","enableCinemaMode","enableNextVideoInfoOverlay","enableSystemExternalPlayers","fillChromecastQuality","maxChromecastBitrate","chromecastVersion","selectSkipForwardLength","skipForwardLength","selectSkipBackLength","skipBackLength","showOrHideEpisodesField","hide","save","instance","enableSaveConfirmation","show","getUser","saveUser","userSettingsInstance","updateUserConfiguration","toast","trigger","onSubmit","e","self","this","getApiClient","serverId","setUserInfo","element","preventDefault","PlaybackSettings","embed","template","translateDocument","addEventListener","bind","enableSaveButton","loadData","autoFocus","prototype","dataLoaded","submit","call","destroy"],"mappings":"AAAA,aAAAA,OAAO,CAAC,UAAW,UAAW,cAAe,UAAW,eAAgB,iBAAkB,YAAa,UAAW,oBAAqB,MAAO,SAAU,cAAe,kBAAkB,SAAUC,QAASC,QAASC,YAAaC,QAASC,aAAcC,eAAgBC,UAAWC,QAASC,kBAAmBC,IAAKC,QAGjT,SAASC,gBAAgBC,QAIrBA,OAAOC,UAFO,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IAEPC,KAAI,SAAUC,QACrC,MAAO,CACHC,KAAMV,UAAUW,UAAU,eAAgBF,QAC1CG,MAAgB,IAATH,WAEZD,KAAI,SAAUK,GACb,MAAO,kBAAoBA,EAAED,MAAQ,KAAOC,EAAEH,KAAO,eACtDI,KAAK,IAmBZ,SAASC,uBAAuBT,OAAQU,YAAaC,WAEjD,IAAIC,QAAwB,UAAdD,UAAwBlB,eAAeoB,uBAAuB,CAExEC,kBAAmBxB,YAAYyB,oBAAoBL,YAAaC,WAChEK,0BAA2B1B,YAAY2B,gCAAgCP,YAAaC,WACpFO,YAAY,IAEXzB,eAAe0B,uBAAuB,CAEvCL,kBAAmBxB,YAAYyB,oBAAoBL,YAAaC,WAChEK,0BAA2B1B,YAAY2B,gCAAgCP,YAAaC,WACpFO,YAAY,IAIhBlB,OAAOC,UAAYW,QAAQV,KAAI,SAAUkB,GAGrC,MAAO,mBAAqBA,EAAEC,SAAW,IAAM,KAAOD,EAAEhB,KAAO,eAChEI,KAAK,IAEJlB,YAAY2B,gCAAgCP,YAAaC,WACzDX,OAAOM,MAAQ,GAEfN,OAAOM,MAAQhB,YAAYyB,oBAAoBL,YAAaC,WAsBpE,SAASW,uBAAuBtB,OAAQU,YAAaC,UAAWL,OAExDN,OAAOM,OACPhB,YAAYyB,oBAAoBL,YAAaC,UAAWX,OAAOM,OAC/DhB,YAAY2B,gCAAgCP,YAAaC,WAAW,IAEpErB,YAAY2B,gCAAgCP,YAAaC,WAAW,GA2D5E,SAASY,SAASC,QAASC,KAAMC,aAAcC,WAE3C,IAAIC,eAAiBD,UAAUE,mBAC3BC,OAASL,KAAKM,IA1DtB,SAASC,sBAAsBR,QAASC,KAAME,WAQ1C,GANIF,KAAKQ,OAAOC,+BACZV,QAAQW,cAAc,wBAAwBC,UAAUC,OAAO,QAE/Db,QAAQW,cAAc,wBAAwBC,UAAUE,IAAI,QAG5D/C,QAAQgD,SAAS,eAWjB,OATAf,QAAQW,cAAc,6BAA6BC,UAAUC,OAAO,QACpEb,QAAQW,cAAc,4BAA4BC,UAAUC,OAAO,aAE/DZ,KAAKQ,OAAOO,+BACZhB,QAAQW,cAAc,wBAAwBC,UAAUC,OAAO,QAE/Db,QAAQW,cAAc,wBAAwBC,UAAUE,IAAI,SAMpEX,UAAUc,kBAAkBC,MAAK,SAAUC,cAEnCA,aAAaC,aAEbpB,QAAQW,cAAc,6BAA6BC,UAAUC,OAAO,QAEpEb,QAAQW,cAAc,4BAA4BC,UAAUE,IAAI,QAChEd,QAAQW,cAAc,wBAAwBC,UAAUE,IAAI,UAG5Dd,QAAQW,cAAc,6BAA6BC,UAAUE,IAAI,QAEjEd,QAAQW,cAAc,4BAA4BC,UAAUC,OAAO,QAE/DZ,KAAKQ,OAAOO,+BACZhB,QAAQW,cAAc,wBAAwBC,UAAUC,OAAO,QAE/Db,QAAQW,cAAc,wBAAwBC,UAAUE,IAAI,YAqBxEN,CAAsBR,QAASC,KAAME,WAErCA,UAAUkB,cAAcH,MAAK,SAAUI,cAvI3C,SAASC,kBAAkB/C,OAAQgD,WAE/B,IAAIC,KAAO,GAEXA,MAAQ,oBAAsBvD,UAAUW,UAAU,eAAiB,YAEnE,IAAK,IAAIe,EAAI,EAAG8B,OAASF,UAAUE,OAAQ9B,EAAI8B,OAAQ9B,IAAK,CAExD,IAAI+B,QAAUH,UAAU5B,GAExB6B,MAAQ,kBAAoBE,QAAQC,2BAA6B,KAAOD,QAAQE,YAAc,YAGlGrD,OAAOC,UAAYgD,KA4HfF,CAAkBvB,QAAQW,cAAc,wBAAyBW,aAEjEtB,QAAQW,cAAc,uBAAwBX,SAASlB,MAAQmB,KAAK6B,cAAcC,yBAA2B,GAC7G/B,QAAQW,cAAc,uBAAuBqB,QAAU/B,KAAK6B,cAAcG,4BAA6B,KAI3G9B,UAAU+B,sBAAsB,cAAchB,MAAK,SAAUiB,cAErDA,aAAaC,uBAAyBD,aAAaE,wBACnDrC,QAAQW,cAAc,sBAAsBC,UAAUC,OAAO,QAE7Db,QAAQW,cAAc,sBAAsBC,UAAUE,IAAI,WAI9D/C,QAAQgD,SAAS,yBAA2BT,SAAWF,eACvDJ,QAAQW,cAAc,sBAAsBC,UAAUC,OAAO,QAE7Db,QAAQW,cAAc,sBAAsBC,UAAUE,IAAI,QAG1DR,SAAWF,iBAAmBH,KAAKQ,OAAOC,gCAAkCT,KAAKQ,OAAOO,iCACxFhB,QAAQW,cAAc,oBAAoBC,UAAUC,OAAO,QAEvD9C,QAAQgD,SAAS,eAAiBd,KAAKQ,OAAOC,+BAC9CV,QAAQW,cAAc,yBAAyBC,UAAUC,OAAO,QAEhEb,QAAQW,cAAc,yBAAyBC,UAAUE,IAAI,UAGjEd,QAAQW,cAAc,oBAAoBC,UAAUE,IAAI,QACxDd,QAAQW,cAAc,yBAAyBC,UAAUE,IAAI,SAG7DjD,QAAQyE,OAASzE,QAAQ0E,MACzBvC,QAAQW,cAAc,8BAA8BC,UAAUE,IAAI,QAElEd,QAAQW,cAAc,8BAA8BC,UAAUC,OAAO,QAGzEb,QAAQW,cAAc,6BAA6BqB,QAAU/B,KAAK6B,cAAcU,wBAAyB,EACzGxC,QAAQW,cAAc,wBAAwBqB,QAAU9B,aAAauC,mBACrEzC,QAAQW,cAAc,8BAA8BqB,QAAU9B,aAAawC,6BAC3E1C,QAAQW,cAAc,2BAA2BqB,QAAUlE,YAAY6E,8BAEvE1D,uBAAuBe,QAAQW,cAAc,iCAAiC,EAAM,SACpF1B,uBAAuBe,QAAQW,cAAc,gCAAgC,EAAO,SACpF1B,uBAAuBe,QAAQW,cAAc,gCAAgC,EAAO,SA5IxF,SAASiC,sBAAsBpE,QAE3B,IAAIY,QAAUnB,eAAe0B,uBAAuB,CAEhDL,kBAAmBxB,YAAY+E,uBAC/BrD,2BAA4B1B,YAAY+E,uBACxCnD,YAAY,IAGhBlB,OAAOC,UAAYW,QAAQV,KAAI,SAAUkB,GAGrC,MAAO,mBAAqBA,EAAEC,SAAW,IAAM,KAAOD,EAAEhB,KAAO,eAChEI,KAAK,IAERR,OAAOM,MAAQhB,YAAY+E,wBAA0B,GA+HrDD,CAAsB5C,QAAQW,cAAc,kCAEdX,QAAQW,cAAc,4BAC5B7B,MAAQoB,aAAa4C,oBAE7C,IAAIC,wBAA0B/C,QAAQW,cAAc,4BACpDpC,gBAAgBwE,yBAChBA,wBAAwBjE,MAAQoB,aAAa8C,oBAE7C,IAAIC,qBAAuBjD,QAAQW,cAAc,yBACjDpC,gBAAgB0E,sBAChBA,qBAAqBnE,MAAQoB,aAAagD,iBAhF9C,SAASC,wBAAwBnD,QAASC,KAAME,WAExCtC,QAAQyE,OAASzE,QAAQ0E,MACzBvC,QAAQW,cAAc,uBAAuBC,UAAUE,IAAI,QAI/Dd,QAAQW,cAAc,uBAAuBC,UAAUC,OAAO,QA2E9DsC,CAAwBnD,SAExB7B,QAAQiF,OA2BZ,SAASC,KAAKC,SAAUtD,QAASM,OAAQJ,aAAcC,UAAWoD,wBAE9DpF,QAAQqF,OAERrD,UAAUsD,QAAQnD,QAAQY,MAAK,SAAUjB,OA5B7C,SAASyD,SAAS1D,QAASC,KAAM0D,qBAAsBxD,WAqBnD,OAnBArC,YAAY6E,4BAA4B3C,QAAQW,cAAc,2BAA2BqB,SAEzFlE,YAAY+E,qBAAqB7C,QAAQW,cAAc,iCAAiC7B,OAExFgB,uBAAuBE,QAAQW,cAAc,iCAAiC,EAAM,SACpFb,uBAAuBE,QAAQW,cAAc,gCAAgC,EAAO,SACpFb,uBAAuBE,QAAQW,cAAc,gCAAgC,EAAO,SAEpFV,KAAK6B,cAAcC,wBAA0B/B,QAAQW,cAAc,wBAAwB7B,MAC3FmB,KAAK6B,cAAcU,sBAAwBxC,QAAQW,cAAc,6BAA6BqB,QAC9F/B,KAAK6B,cAAcG,0BAA4BjC,QAAQW,cAAc,uBAAuBqB,QAE5F2B,qBAAqBlB,iBAAiBzC,QAAQW,cAAc,wBAAwBqB,SAEpF2B,qBAAqBjB,2BAA2B1C,QAAQW,cAAc,8BAA8BqB,SACpG2B,qBAAqBb,kBAAkB9C,QAAQW,cAAc,4BAA4B7B,OACzF6E,qBAAqBX,kBAAkBhD,QAAQW,cAAc,4BAA4B7B,OACzF6E,qBAAqBT,eAAelD,QAAQW,cAAc,yBAAyB7B,OAE5EqB,UAAUyD,wBAAwB3D,KAAKM,GAAIN,KAAK6B,gBASnD4B,CAAS1D,QAASC,KAAMC,aAAcC,WAAWe,MAAK,WAElD/C,QAAQiF,OACJG,wBACA3F,QAAQ,CAAC,UAAU,SAAUiG,OACzBA,MAAM3F,UAAUW,UAAU,qBAIlCP,OAAOwF,QAAQR,SAAU,YAE1B,WACCnF,QAAQiF,aAKpB,SAASW,SAASC,GAEd,IAAIC,KAAOC,KACP/D,UAAY/B,kBAAkB+F,aAAaF,KAAK7E,QAAQgF,UACxD9D,OAAS2D,KAAK7E,QAAQkB,OACtBJ,aAAe+D,KAAK7E,QAAQc,aAYhC,OAVAA,aAAamE,YAAY/D,OAAQH,WAAWe,MAAK,WAE7C,IAAIqC,uBAAyBU,KAAK7E,QAAQmE,uBAC1CF,KAAKY,KAAMA,KAAK7E,QAAQkF,QAAShE,OAAQJ,aAAcC,UAAWoD,2BAIlES,GACAA,EAAEO,kBAEC,EAuBX,SAASC,iBAAiBpF,SAEtB8E,KAAK9E,QAAUA,QAtBnB,SAASqF,MAAMrF,QAAS6E,MAEpBrG,QAAQ,CAAC,0CAA0C,SAAU8G,UAEzDtF,QAAQkF,QAAQ7F,UAAYP,UAAUyG,kBAAkBD,SAAU,QAElEtF,QAAQkF,QAAQ3D,cAAc,QAAQiE,iBAAiB,SAAUb,SAASc,KAAKZ,OAE3E7E,QAAQ0F,kBACR1F,QAAQkF,QAAQ3D,cAAc,YAAYC,UAAUC,OAAO,QAG/DoD,KAAKc,WAED3F,QAAQ4F,WACRhH,aAAagH,UAAU5F,QAAQkF,YASvCG,CAAMrF,QAAS8E,MAkCnB,OA/BAM,iBAAiBS,UAAUF,SAAW,WAElC,IAAId,KAAOC,KACPlE,QAAUiE,KAAK7E,QAAQkF,QAE3BnG,QAAQqF,OAER,IAAIlD,OAAS2D,KAAK7E,QAAQkB,OACtBH,UAAY/B,kBAAkB+F,aAAaF,KAAK7E,QAAQgF,UACxDlE,aAAe+D,KAAK7E,QAAQc,aAEhCC,UAAUsD,QAAQnD,QAAQY,MAAK,SAAUjB,MAErCC,aAAamE,YAAY/D,OAAQH,WAAWe,MAAK,WAE7C+C,KAAKiB,YAAa,EAElBnF,SAASC,QAASC,KAAMC,aAAcC,kBAKlDqE,iBAAiBS,UAAUE,OAAS,WAChCpB,SAASqB,KAAKlB,OAGlBM,iBAAiBS,UAAUI,QAAU,WAEjCnB,KAAK9E,QAAU,MAGZoF","file":"playbackSettings.js","sourcesContent":["define(['require', 'browser', 'appSettings', 'apphost', 'focusManager', 'qualityoptions', 'globalize', 'loading', 'connectionManager', 'dom', 'events', 'emby-select', 'emby-checkbox'], function (require, browser, appSettings, appHost, focusManager, qualityoptions, globalize, loading, connectionManager, dom, events) {\n    'use strict';\n\n    function fillSkipLengths(select) {\n\n        var options = [5, 10, 15, 20, 25, 30];\n\n        select.innerHTML = options.map(function (option) {\n            return {\n                name: globalize.translate('ValueSeconds', option),\n                value: option * 1000\n            };\n        }).map(function (o) {\n            return '<option value=\"' + o.value + '\">' + o.name + '</option>';\n        }).join('');\n    }\n\n    function populateLanguages(select, languages) {\n\n        var html = '';\n\n        html += \"<option value=''>\" + globalize.translate('AnyLanguage') + '</option>';\n\n        for (var i = 0, length = languages.length; i < length; i++) {\n\n            var culture = languages[i];\n\n            html += \"<option value='\" + culture.ThreeLetterISOLanguageName + \"'>\" + culture.DisplayName + '</option>';\n        }\n\n        select.innerHTML = html;\n    }\n\n    function setMaxBitrateIntoField(select, isInNetwork, mediatype) {\n\n        var options = mediatype === 'Audio' ? qualityoptions.getAudioQualityOptions({\n\n            currentMaxBitrate: appSettings.maxStreamingBitrate(isInNetwork, mediatype),\n            isAutomaticBitrateEnabled: appSettings.enableAutomaticBitrateDetection(isInNetwork, mediatype),\n            enableAuto: true\n\n        }) : qualityoptions.getVideoQualityOptions({\n\n            currentMaxBitrate: appSettings.maxStreamingBitrate(isInNetwork, mediatype),\n            isAutomaticBitrateEnabled: appSettings.enableAutomaticBitrateDetection(isInNetwork, mediatype),\n            enableAuto: true\n\n        });\n\n        select.innerHTML = options.map(function (i) {\n\n            // render empty string instead of 0 for the auto option\n            return '<option value=\"' + (i.bitrate || '') + '\">' + i.name + '</option>';\n        }).join('');\n\n        if (appSettings.enableAutomaticBitrateDetection(isInNetwork, mediatype)) {\n            select.value = '';\n        } else {\n            select.value = appSettings.maxStreamingBitrate(isInNetwork, mediatype);\n        }\n    }\n\n    function fillChromecastQuality(select) {\n\n        var options = qualityoptions.getVideoQualityOptions({\n\n            currentMaxBitrate: appSettings.maxChromecastBitrate(),\n            isAutomaticBitrateEnabled: !appSettings.maxChromecastBitrate(),\n            enableAuto: true\n        });\n\n        select.innerHTML = options.map(function (i) {\n\n            // render empty string instead of 0 for the auto option\n            return '<option value=\"' + (i.bitrate || '') + '\">' + i.name + '</option>';\n        }).join('');\n\n        select.value = appSettings.maxChromecastBitrate() || '';\n    }\n\n    function setMaxBitrateFromField(select, isInNetwork, mediatype, value) {\n\n        if (select.value) {\n            appSettings.maxStreamingBitrate(isInNetwork, mediatype, select.value);\n            appSettings.enableAutomaticBitrateDetection(isInNetwork, mediatype, false);\n        } else {\n            appSettings.enableAutomaticBitrateDetection(isInNetwork, mediatype, true);\n        }\n    }\n\n    function showHideQualityFields(context, user, apiClient) {\n\n        if (user.Policy.EnableVideoPlaybackTranscoding) {\n            context.querySelector('.videoQualitySection').classList.remove('hide');\n        } else {\n            context.querySelector('.videoQualitySection').classList.add('hide');\n        }\n\n        if (appHost.supports('multiserver')) {\n\n            context.querySelector('.fldVideoInNetworkQuality').classList.remove('hide');\n            context.querySelector('.fldVideoInternetQuality').classList.remove('hide');\n\n            if (user.Policy.EnableAudioPlaybackTranscoding) {\n                context.querySelector('.musicQualitySection').classList.remove('hide');\n            } else {\n                context.querySelector('.musicQualitySection').classList.add('hide');\n            }\n\n            return;\n        }\n\n        apiClient.getEndpointInfo().then(function (endpointInfo) {\n\n            if (endpointInfo.IsInNetwork) {\n\n                context.querySelector('.fldVideoInNetworkQuality').classList.remove('hide');\n\n                context.querySelector('.fldVideoInternetQuality').classList.add('hide');\n                context.querySelector('.musicQualitySection').classList.add('hide');\n            } else {\n\n                context.querySelector('.fldVideoInNetworkQuality').classList.add('hide');\n\n                context.querySelector('.fldVideoInternetQuality').classList.remove('hide');\n\n                if (user.Policy.EnableAudioPlaybackTranscoding) {\n                    context.querySelector('.musicQualitySection').classList.remove('hide');\n                } else {\n                    context.querySelector('.musicQualitySection').classList.add('hide');\n                }\n            }\n        });\n    }\n\n    function showOrHideEpisodesField(context, user, apiClient) {\n\n        if (browser.tizen || browser.web0s) {\n            context.querySelector('.fldEpisodeAutoPlay').classList.add('hide');\n            return;\n        }\n\n        context.querySelector('.fldEpisodeAutoPlay').classList.remove('hide');\n    }\n\n    function loadForm(context, user, userSettings, apiClient) {\n\n        var loggedInUserId = apiClient.getCurrentUserId();\n        var userId = user.Id;\n\n        showHideQualityFields(context, user, apiClient);\n\n        apiClient.getCultures().then(function (allCultures) {\n\n            populateLanguages(context.querySelector('#selectAudioLanguage'), allCultures);\n\n            context.querySelector('#selectAudioLanguage', context).value = user.Configuration.AudioLanguagePreference || '';\n            context.querySelector('.chkEpisodeAutoPlay').checked = user.Configuration.EnableNextEpisodeAutoPlay || false;\n        });\n\n        // hide cinema mode options if disabled at server level\n        apiClient.getNamedConfiguration('cinemamode').then(function (cinemaConfig) {\n\n            if (cinemaConfig.EnableIntrosForMovies || cinemaConfig.EnableIntrosForEpisodes) {\n                context.querySelector('.cinemaModeOptions').classList.remove('hide');\n            } else {\n                context.querySelector('.cinemaModeOptions').classList.add('hide');\n            }\n        });\n\n        if (appHost.supports('externalplayerintent') && userId === loggedInUserId) {\n            context.querySelector('.fldExternalPlayer').classList.remove('hide');\n        } else {\n            context.querySelector('.fldExternalPlayer').classList.add('hide');\n        }\n\n        if (userId === loggedInUserId && (user.Policy.EnableVideoPlaybackTranscoding || user.Policy.EnableAudioPlaybackTranscoding)) {\n            context.querySelector('.qualitySections').classList.remove('hide');\n\n            if (appHost.supports('chromecast') && user.Policy.EnableVideoPlaybackTranscoding) {\n                context.querySelector('.fldChromecastQuality').classList.remove('hide');\n            } else {\n                context.querySelector('.fldChromecastQuality').classList.add('hide');\n            }\n        } else {\n            context.querySelector('.qualitySections').classList.add('hide');\n            context.querySelector('.fldChromecastQuality').classList.add('hide');\n        }\n\n        if (browser.tizen || browser.web0s) {\n            context.querySelector('.fldEnableNextVideoOverlay').classList.add('hide');\n        } else {\n            context.querySelector('.fldEnableNextVideoOverlay').classList.remove('hide');\n        }\n\n        context.querySelector('.chkPlayDefaultAudioTrack').checked = user.Configuration.PlayDefaultAudioTrack || false;\n        context.querySelector('.chkEnableCinemaMode').checked = userSettings.enableCinemaMode();\n        context.querySelector('.chkEnableNextVideoOverlay').checked = userSettings.enableNextVideoInfoOverlay();\n        context.querySelector('.chkExternalVideoPlayer').checked = appSettings.enableSystemExternalPlayers();\n\n        setMaxBitrateIntoField(context.querySelector('.selectVideoInNetworkQuality'), true, 'Video');\n        setMaxBitrateIntoField(context.querySelector('.selectVideoInternetQuality'), false, 'Video');\n        setMaxBitrateIntoField(context.querySelector('.selectMusicInternetQuality'), false, 'Audio');\n\n        fillChromecastQuality(context.querySelector('.selectChromecastVideoQuality'));\n\n        var selectChromecastVersion = context.querySelector('.selectChromecastVersion');\n        selectChromecastVersion.value = userSettings.chromecastVersion();\n\n        var selectSkipForwardLength = context.querySelector('.selectSkipForwardLength');\n        fillSkipLengths(selectSkipForwardLength);\n        selectSkipForwardLength.value = userSettings.skipForwardLength();\n\n        var selectSkipBackLength = context.querySelector('.selectSkipBackLength');\n        fillSkipLengths(selectSkipBackLength);\n        selectSkipBackLength.value = userSettings.skipBackLength();\n\n        showOrHideEpisodesField(context, user, apiClient);\n\n        loading.hide();\n    }\n\n    function saveUser(context, user, userSettingsInstance, apiClient) {\n\n        appSettings.enableSystemExternalPlayers(context.querySelector('.chkExternalVideoPlayer').checked);\n\n        appSettings.maxChromecastBitrate(context.querySelector('.selectChromecastVideoQuality').value);\n\n        setMaxBitrateFromField(context.querySelector('.selectVideoInNetworkQuality'), true, 'Video');\n        setMaxBitrateFromField(context.querySelector('.selectVideoInternetQuality'), false, 'Video');\n        setMaxBitrateFromField(context.querySelector('.selectMusicInternetQuality'), false, 'Audio');\n\n        user.Configuration.AudioLanguagePreference = context.querySelector('#selectAudioLanguage').value;\n        user.Configuration.PlayDefaultAudioTrack = context.querySelector('.chkPlayDefaultAudioTrack').checked;\n        user.Configuration.EnableNextEpisodeAutoPlay = context.querySelector('.chkEpisodeAutoPlay').checked;\n\n        userSettingsInstance.enableCinemaMode(context.querySelector('.chkEnableCinemaMode').checked);\n\n        userSettingsInstance.enableNextVideoInfoOverlay(context.querySelector('.chkEnableNextVideoOverlay').checked);\n        userSettingsInstance.chromecastVersion(context.querySelector('.selectChromecastVersion').value);\n        userSettingsInstance.skipForwardLength(context.querySelector('.selectSkipForwardLength').value);\n        userSettingsInstance.skipBackLength(context.querySelector('.selectSkipBackLength').value);\n\n        return apiClient.updateUserConfiguration(user.Id, user.Configuration);\n    }\n\n    function save(instance, context, userId, userSettings, apiClient, enableSaveConfirmation) {\n\n        loading.show();\n\n        apiClient.getUser(userId).then(function (user) {\n\n            saveUser(context, user, userSettings, apiClient).then(function () {\n\n                loading.hide();\n                if (enableSaveConfirmation) {\n                    require(['toast'], function (toast) {\n                        toast(globalize.translate('SettingsSaved'));\n                    });\n                }\n\n                events.trigger(instance, 'saved');\n\n            }, function () {\n                loading.hide();\n            });\n        });\n    }\n\n    function onSubmit(e) {\n\n        var self = this;\n        var apiClient = connectionManager.getApiClient(self.options.serverId);\n        var userId = self.options.userId;\n        var userSettings = self.options.userSettings;\n\n        userSettings.setUserInfo(userId, apiClient).then(function () {\n\n            var enableSaveConfirmation = self.options.enableSaveConfirmation;\n            save(self, self.options.element, userId, userSettings, apiClient, enableSaveConfirmation);\n        });\n\n        // Disable default form submission\n        if (e) {\n            e.preventDefault();\n        }\n        return false;\n    }\n\n    function embed(options, self) {\n\n        require(['text!./playbackSettings.template.html'], function (template) {\n\n            options.element.innerHTML = globalize.translateDocument(template, 'core');\n\n            options.element.querySelector('form').addEventListener('submit', onSubmit.bind(self));\n\n            if (options.enableSaveButton) {\n                options.element.querySelector('.btnSave').classList.remove('hide');\n            }\n\n            self.loadData();\n\n            if (options.autoFocus) {\n                focusManager.autoFocus(options.element);\n            }\n        });\n    }\n\n    function PlaybackSettings(options) {\n\n        this.options = options;\n\n        embed(options, this);\n    }\n\n    PlaybackSettings.prototype.loadData = function () {\n\n        var self = this;\n        var context = self.options.element;\n\n        loading.show();\n\n        var userId = self.options.userId;\n        var apiClient = connectionManager.getApiClient(self.options.serverId);\n        var userSettings = self.options.userSettings;\n\n        apiClient.getUser(userId).then(function (user) {\n\n            userSettings.setUserInfo(userId, apiClient).then(function () {\n\n                self.dataLoaded = true;\n\n                loadForm(context, user, userSettings, apiClient);\n            });\n        });\n    };\n\n    PlaybackSettings.prototype.submit = function () {\n        onSubmit.call(this);\n    };\n\n    PlaybackSettings.prototype.destroy = function () {\n\n        this.options = null;\n    };\n\n    return PlaybackSettings;\n});\n"]}