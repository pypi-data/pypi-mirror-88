{"version":3,"sources":["components/syncPlay/playbackPermissionManager.js"],"names":["define","_exports","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","value","default","_default","PlaybackPermissionManager","_classCallCheck","instance","Constructor","TypeError","this","_createClass","protoProps","staticProps","prototype","check","Promise","resolve","reject","media","createTestMediaElement","elem","document","createElement","classList","add","body","appendChild","volume","src","play","then","catch","error","finally","destroyTestMediaElement","pause","remove"],"mappings":"AAAAA,OAAO,CAAC,YAAY,SAAUC,UAC5B,aASA,SAASC,kBAAkBC,OAAQC,OAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,IAAIE,WAAaH,MAAMC,GAAIE,WAAWC,WAAaD,WAAWC,aAAc,EAAOD,WAAWE,cAAe,EAAU,UAAWF,aAAYA,WAAWG,UAAW,GAAMC,OAAOC,eAAeT,OAAQI,WAAWM,IAAKN,aAP7SI,OAAOC,eAAeX,SAAU,aAAc,CAC5Ca,OAAO,IAETb,SAASc,aAAU,EAsCnB,IA+BIC,SAzBS,IANgC,WAC3C,SAASC,6BArCX,SAASC,gBAAgBC,SAAUC,aAAe,KAAMD,oBAAoBC,aAAgB,MAAM,IAAIC,UAAU,qCAsC5GH,CAAgBI,KAAML,2BAwBxB,OA1DF,SAASM,aAAaH,YAAaI,WAAYC,aAAmJ,OAAhID,YAAYtB,kBAAkBkB,YAAYM,UAAWF,YAAiBC,aAAavB,kBAAkBkB,YAAaK,aAAqBL,YAqCvMG,CAAaN,0BAA2B,CAAC,CACvCJ,IAAK,QAMLC,MAAO,SAASa,QApBd,OAAO,IAAIC,SAAQ,SAACC,QAASC,QACzB,IAAMC,MAjClB,SAASC,yBAEL,IAAMC,KAAOC,SAASC,cAAc,SASpC,OARAF,KAAKG,UAAUC,IAAI,wBACnBJ,KAAKG,UAAUC,IAAI,QAEnBH,SAASI,KAAKC,YAAYN,MAE1BA,KAAKO,OAAS,EACdP,KAAKQ,IAAM,2BAEJR,KAsBeD,GACdD,MAAMW,OAAOC,MAAK,WACdd,aACDe,OAAM,SAACC,OACNf,OAAOe,UACRC,SAAQ,YApBvB,SAASC,wBAAyBd,MAC9BA,KAAKe,QACLf,KAAKgB,SAmBOF,CAAwBhB,iBA2B7Bd,0BA1BoC,IAiC7ChB,SAASc,QAAUC","file":"playbackPermissionManager.js","sourcesContent":["/**\n * Creates an audio element that plays a silent sound.\n * @returns {HTMLMediaElement} The audio element.\n */\nfunction createTestMediaElement () {\n\n    const elem = document.createElement('audio');\n    elem.classList.add('testMediaPlayerAudio');\n    elem.classList.add('hide');\n\n    document.body.appendChild(elem);\n\n    elem.volume = 1; // Volume should not be zero to trigger proper permissions\n    elem.src = 'assets/audio/silence.mp3'; // Silent sound\n\n    return elem;\n}\n\n/**\n * Destroys a media element.\n * @param {HTMLMediaElement} elem The element to destroy.\n */\nfunction destroyTestMediaElement (elem) {\n    elem.pause();\n    elem.remove();\n}\n\n/**\n * Class that manages the playback permission.\n */\nclass PlaybackPermissionManager {\n    /**\n     * Tests playback permission. Grabs the permission when called inside a click event (or any other valid user interaction).\n     * @returns {Promise} Promise that resolves succesfully if playback permission is allowed.\n     */\n    check () {\n        return new Promise((resolve, reject) => {\n            const media = createTestMediaElement();\n            media.play().then(() => {\n                resolve();\n            }).catch((error) => {\n                reject(error);\n            }).finally(() => {\n                destroyTestMediaElement(media);\n            });\n        });\n    }\n}\n\n/** PlaybackPermissionManager singleton. */\nexport default new PlaybackPermissionManager();\n"]}