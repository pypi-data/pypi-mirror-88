{"version":3,"sources":["components/recordingcreator/recordinghelper.js"],"names":["define","globalize","loading","connectionManager","changeRecordingToSeries","apiClient","timerId","programId","confirmTimerCancellation","show","getItem","getCurrentUserId","then","item","IsSeries","getNewLiveTvTimerDefaults","timerDefaults","createLiveTvSeriesTimer","hide","sendToast","translate","cancelTimerWithConfirmation","serverId","cancelTimer","Promise","resolve","reject","require","confirm","text","primary","confirmText","cancelText","getApiClient","hideLoading","cancelLiveTvTimer","createRecording","isSeries","createLiveTvTimer","msg","toast","toggleRecording","timerStatus","seriesTimerId","hasTimer","showMultiCancellationPrompt","dialog","items","push","name","id","type","buttons","result","cancelLiveTvSeriesTimer","cancelSeriesTimerWithConfirmation"],"mappings":"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","file":"recordinghelper.js","sourcesContent":["define(['globalize', 'loading', 'connectionManager'], function (globalize, loading, connectionManager) {\n    'use strict';\n\n    function changeRecordingToSeries(apiClient, timerId, programId, confirmTimerCancellation) {\n\n        loading.show();\n\n        return apiClient.getItem(apiClient.getCurrentUserId(), programId).then(function (item) {\n\n            if (item.IsSeries) {\n                // create series\n                return apiClient.getNewLiveTvTimerDefaults({ programId: programId }).then(function (timerDefaults) {\n\n                    return apiClient.createLiveTvSeriesTimer(timerDefaults).then(function () {\n\n                        loading.hide();\n                        sendToast(globalize.translate('SeriesRecordingScheduled'));\n                    });\n                });\n            } else {\n                // cancel\n                if (confirmTimerCancellation) {\n                    return cancelTimerWithConfirmation(timerId, apiClient.serverId());\n                }\n\n                return cancelTimer(apiClient.serverId(), timerId, true);\n            }\n        });\n    }\n\n    function cancelTimerWithConfirmation(timerId, serverId) {\n\n        return new Promise(function (resolve, reject) {\n\n            require(['confirm'], function (confirm) {\n\n                confirm({\n\n                    text: globalize.translate('MessageConfirmRecordingCancellation'),\n                    primary: 'delete',\n                    confirmText: globalize.translate('HeaderCancelRecording'),\n                    cancelText: globalize.translate('HeaderKeepRecording')\n\n                }).then(function () {\n\n                    loading.show();\n\n                    var apiClient = connectionManager.getApiClient(serverId);\n                    cancelTimer(apiClient, timerId, true).then(resolve, reject);\n\n                }, reject);\n            });\n        });\n    }\n\n    function cancelSeriesTimerWithConfirmation(timerId, serverId) {\n\n        return new Promise(function (resolve, reject) {\n\n            require(['confirm'], function (confirm) {\n\n                confirm({\n\n                    text: globalize.translate('MessageConfirmRecordingCancellation'),\n                    primary: 'delete',\n                    confirmText: globalize.translate('HeaderCancelSeries'),\n                    cancelText: globalize.translate('HeaderKeepSeries')\n\n                }).then(function () {\n\n                    loading.show();\n\n                    var apiClient = connectionManager.getApiClient(serverId);\n                    apiClient.cancelLiveTvSeriesTimer(timerId).then(function () {\n\n                        require(['toast'], function (toast) {\n                            toast(globalize.translate('SeriesCancelled'));\n                        });\n\n                        loading.hide();\n                        resolve();\n                    }, reject);\n\n                }, reject);\n            });\n        });\n    }\n\n    function cancelTimer(apiClient, timerId, hideLoading) {\n        loading.show();\n        return apiClient.cancelLiveTvTimer(timerId).then(function () {\n\n            if (hideLoading !== false) {\n                loading.hide();\n                sendToast(globalize.translate('RecordingCancelled'));\n            }\n        });\n    }\n\n    function createRecording(apiClient, programId, isSeries) {\n\n        loading.show();\n        return apiClient.getNewLiveTvTimerDefaults({ programId: programId }).then(function (item) {\n\n            var promise = isSeries ?\n                apiClient.createLiveTvSeriesTimer(item) :\n                apiClient.createLiveTvTimer(item);\n\n            return promise.then(function () {\n\n                loading.hide();\n                sendToast(globalize.translate('RecordingScheduled'));\n            });\n        });\n    }\n\n    function sendToast(msg) {\n        require(['toast'], function (toast) {\n            toast(msg);\n        });\n    }\n\n    function showMultiCancellationPrompt(serverId, programId, timerId, timerStatus, seriesTimerId) {\n        return new Promise(function (resolve, reject) {\n\n            require(['dialog'], function (dialog) {\n\n                var items = [];\n\n                items.push({\n                    name: globalize.translate('HeaderKeepRecording'),\n                    id: 'cancel',\n                    type: 'submit'\n                });\n\n                if (timerStatus === 'InProgress') {\n                    items.push({\n                        name: globalize.translate('HeaderStopRecording'),\n                        id: 'canceltimer',\n                        type: 'cancel'\n                    });\n                } else {\n                    items.push({\n                        name: globalize.translate('HeaderCancelRecording'),\n                        id: 'canceltimer',\n                        type: 'cancel'\n                    });\n                }\n\n                items.push({\n                    name: globalize.translate('HeaderCancelSeries'),\n                    id: 'cancelseriestimer',\n                    type: 'cancel'\n                });\n\n                dialog({\n\n                    text: globalize.translate('MessageConfirmRecordingCancellation'),\n                    buttons: items\n\n                }).then(function (result) {\n\n                    var apiClient = connectionManager.getApiClient(serverId);\n\n                    if (result === 'canceltimer') {\n                        loading.show();\n\n                        cancelTimer(apiClient, timerId, true).then(resolve, reject);\n                    } else if (result === 'cancelseriestimer') {\n\n                        loading.show();\n\n                        apiClient.cancelLiveTvSeriesTimer(seriesTimerId).then(function () {\n\n                            require(['toast'], function (toast) {\n                                toast(globalize.translate('SeriesCancelled'));\n                            });\n\n                            loading.hide();\n                            resolve();\n                        }, reject);\n                    } else {\n                        resolve();\n                    }\n\n                }, reject);\n            });\n        });\n    }\n\n    function toggleRecording(serverId, programId, timerId, timerStatus, seriesTimerId) {\n        var apiClient = connectionManager.getApiClient(serverId);\n        var hasTimer = timerId && timerStatus !== 'Cancelled';\n        if (seriesTimerId && hasTimer) {\n            // cancel\n            return showMultiCancellationPrompt(serverId, programId, timerId, timerStatus, seriesTimerId);\n        } else if (hasTimer && programId) {\n            // change to series recording, if possible\n            // otherwise cancel individual recording\n            return changeRecordingToSeries(apiClient, timerId, programId, true);\n        } else if (programId) {\n            // schedule recording\n            return createRecording(apiClient, programId);\n        } else {\n            return Promise.reject();\n        }\n    }\n\n    return {\n        cancelTimer: cancelTimer,\n        createRecording: createRecording,\n        changeRecordingToSeries: changeRecordingToSeries,\n        toggleRecording: toggleRecording,\n        cancelTimerWithConfirmation: cancelTimerWithConfirmation,\n        cancelSeriesTimerWithConfirmation: cancelSeriesTimerWithConfirmation\n    };\n});\n"]}