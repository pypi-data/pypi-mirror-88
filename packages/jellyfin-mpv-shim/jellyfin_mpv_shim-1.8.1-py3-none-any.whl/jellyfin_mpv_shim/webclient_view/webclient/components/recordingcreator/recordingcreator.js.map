{"version":3,"sources":["components/recordingcreator/recordingcreator.js"],"names":["define","dialogHelper","globalize","layoutManager","mediaInfo","appHost","connectionManager","require","loading","scrollHelper","datetime","imageLoader","recordingFields","events","currentDialog","closeAction","currentRecordingFields","closeDialog","close","reload","context","programId","serverId","refreshRecordingStateOnly","show","apiClient","getApiClient","promise1","getNewLiveTvTimerDefaults","promise2","getLiveTvProgram","getCurrentUserId","Promise","all","then","responses","program","renderRecording","defaultTimer","imgUrl","getImageUrl","item","imageHeight","imageTags","ImageTags","PrimaryImageTag","Primary","getScaledImageUrl","Id","type","maxHeight","tag","Thumb","imageContainer","querySelector","innerHTML","toUrl","split","classList","remove","lazyChildren","add","Name","Genres","join","Overview","formDialogFooter","now","Date","parseISO8601Date","StartDate","EndDate","getPrimaryMediaInfoHtml","getSecondaryMediaInfoHtml","hide","defaults","showEditor","itemId","resolve","reject","template","dialogOptions","removeOnClose","scrollY","tv","size","dlg","createDialog","html","onRecordingChanged","translateDocument","addEventListener","off","executeCloseAction","action","playbackManager","play","ids","ChannelId","hasChanged","centerFocus","on","init","parent","open"],"mappings":"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","file":"recordingcreator.js","sourcesContent":["define(['dialogHelper', 'globalize', 'layoutManager', 'mediaInfo', 'apphost', 'connectionManager', 'require', 'loading', 'scrollHelper', 'datetime', 'imageLoader', 'recordingFields', 'events', 'emby-checkbox', 'emby-button', 'emby-collapse', 'emby-input', 'paper-icon-button-light', 'css!./../formdialog', 'css!./recordingcreator', 'material-icons'], function (dialogHelper, globalize, layoutManager, mediaInfo, appHost, connectionManager, require, loading, scrollHelper, datetime, imageLoader, recordingFields, events) {\n    'use strict';\n\n    var currentDialog;\n    var closeAction;\n    var currentRecordingFields;\n\n    function closeDialog() {\n\n        dialogHelper.close(currentDialog);\n    }\n\n    function init(context) {\n\n        context.querySelector('.btnPlay').addEventListener('click', function () {\n\n            closeAction = 'play';\n            closeDialog();\n        });\n\n        context.querySelector('.btnCancel').addEventListener('click', function () {\n\n            closeAction = null;\n            closeDialog();\n        });\n    }\n\n    function getImageUrl(item, apiClient, imageHeight) {\n\n        var imageTags = item.ImageTags || {};\n\n        if (item.PrimaryImageTag) {\n            imageTags.Primary = item.PrimaryImageTag;\n        }\n\n        if (imageTags.Primary) {\n\n            return apiClient.getScaledImageUrl(item.Id, {\n                type: 'Primary',\n                maxHeight: imageHeight,\n                tag: item.ImageTags.Primary\n            });\n        } else if (imageTags.Thumb) {\n\n            return apiClient.getScaledImageUrl(item.Id, {\n                type: 'Thumb',\n                maxHeight: imageHeight,\n                tag: item.ImageTags.Thumb\n            });\n        }\n\n        return null;\n    }\n\n    function renderRecording(context, defaultTimer, program, apiClient, refreshRecordingStateOnly) {\n\n        if (!refreshRecordingStateOnly) {\n            var imgUrl = getImageUrl(program, apiClient, 200);\n            var imageContainer = context.querySelector('.recordingDialog-imageContainer');\n\n            if (imgUrl) {\n                imageContainer.innerHTML = '<img src=\"' + require.toUrl('.').split('?')[0] + '/empty.png\" data-src=\"' + imgUrl + '\" class=\"recordingDialog-img lazy\" />';\n                imageContainer.classList.remove('hide');\n\n                imageLoader.lazyChildren(imageContainer);\n            } else {\n                imageContainer.innerHTML = '';\n                imageContainer.classList.add('hide');\n            }\n\n            context.querySelector('.recordingDialog-itemName').innerHTML = program.Name;\n            context.querySelector('.formDialogHeaderTitle').innerHTML = program.Name;\n            context.querySelector('.itemGenres').innerHTML = (program.Genres || []).join(' / ');\n            context.querySelector('.itemOverview').innerHTML = program.Overview || '';\n\n            var formDialogFooter = context.querySelector('.formDialogFooter');\n            var now = new Date();\n            if (now >= datetime.parseISO8601Date(program.StartDate, true) && now < datetime.parseISO8601Date(program.EndDate, true)) {\n                formDialogFooter.classList.remove('hide');\n            } else {\n                formDialogFooter.classList.add('hide');\n            }\n\n            context.querySelector('.itemMiscInfoPrimary').innerHTML = mediaInfo.getPrimaryMediaInfoHtml(program);\n        }\n\n        context.querySelector('.itemMiscInfoSecondary').innerHTML = mediaInfo.getSecondaryMediaInfoHtml(program, {\n        });\n\n        loading.hide();\n    }\n\n    function reload(context, programId, serverId, refreshRecordingStateOnly) {\n\n        loading.show();\n\n        var apiClient = connectionManager.getApiClient(serverId);\n\n        var promise1 = apiClient.getNewLiveTvTimerDefaults({ programId: programId });\n        var promise2 = apiClient.getLiveTvProgram(programId, apiClient.getCurrentUserId());\n\n        Promise.all([promise1, promise2]).then(function (responses) {\n\n            var defaults = responses[0];\n            var program = responses[1];\n\n            renderRecording(context, defaults, program, apiClient, refreshRecordingStateOnly);\n        });\n    }\n\n    function executeCloseAction(action, programId, serverId) {\n\n        if (action === 'play') {\n\n            require(['playbackManager'], function (playbackManager) {\n\n                var apiClient = connectionManager.getApiClient(serverId);\n\n                apiClient.getLiveTvProgram(programId, apiClient.getCurrentUserId()).then(function (item) {\n\n                    playbackManager.play({\n                        ids: [item.ChannelId],\n                        serverId: serverId\n                    });\n                });\n            });\n            return;\n        }\n    }\n\n    function showEditor(itemId, serverId) {\n\n        return new Promise(function (resolve, reject) {\n\n            closeAction = null;\n\n            loading.show();\n\n            require(['text!./recordingcreator.template.html'], function (template) {\n\n                var dialogOptions = {\n                    removeOnClose: true,\n                    scrollY: false\n                };\n\n                if (layoutManager.tv) {\n                    dialogOptions.size = 'fullscreen';\n                } else {\n                    dialogOptions.size = 'small';\n                }\n\n                var dlg = dialogHelper.createDialog(dialogOptions);\n\n                dlg.classList.add('formDialog');\n                dlg.classList.add('recordingDialog');\n\n                var html = '';\n\n                html += globalize.translateDocument(template, 'core');\n\n                dlg.innerHTML = html;\n\n                currentDialog = dlg;\n\n                function onRecordingChanged() {\n                    reload(dlg, itemId, serverId, true);\n                }\n\n                dlg.addEventListener('close', function () {\n\n                    events.off(currentRecordingFields, 'recordingchanged', onRecordingChanged);\n                    executeCloseAction(closeAction, itemId, serverId);\n\n                    if (currentRecordingFields && currentRecordingFields.hasChanged()) {\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                });\n\n                if (layoutManager.tv) {\n                    scrollHelper.centerFocus.on(dlg.querySelector('.formDialogContent'), false);\n                }\n\n                init(dlg);\n\n                reload(dlg, itemId, serverId);\n\n                currentRecordingFields = new recordingFields({\n                    parent: dlg.querySelector('.recordingFields'),\n                    programId: itemId,\n                    serverId: serverId\n                });\n\n                events.on(currentRecordingFields, 'recordingchanged', onRecordingChanged);\n\n                dialogHelper.open(dlg);\n            });\n        });\n    }\n\n    return {\n        show: showEditor\n    };\n});\n"]}