{"version":3,"sources":["components/recordingcreator/recordingbutton.js"],"names":["define","globalize","connectionManager","require","loading","appHost","dom","recordingHelper","events","onRecordingButtonClick","e","item","this","serverId","ServerId","programId","Id","timerId","TimerId","timerStatus","Status","seriesTimerId","SeriesTimerId","instance","toggleRecording","then","refresh","setButtonIcon","button","icon","inner","querySelector","classList","remove","add","RecordingButton","options","refreshItem","itemId","clickFn","bind","addEventListener","passive","prototype","apiClient","getApiClient","self","getItem","getCurrentUserId","getIndicatorIcon","status","Type","destroy","removeEventListener"],"mappings":"AAAA,aAAAA,OAAO,CAAC,YAAa,oBAAqB,UAAW,UAAW,UAAW,MAAO,kBAAmB,SAAU,0BAA2B,cAAe,0BAA0B,SAAUC,UAAWC,kBAAmBC,QAASC,QAASC,QAASC,IAAKC,gBAAiBC,QAGxQ,SAASC,uBAAuBC,GAE5B,IAAIC,KAAOC,KAAKD,KAEhB,GAAIA,KAAM,CAEN,IAAIE,SAAWF,KAAKG,SAChBC,UAAYJ,KAAKK,GACjBC,QAAUN,KAAKO,QACfC,YAAcR,KAAKS,OACnBC,cAAgBV,KAAKW,cAErBC,SAAWX,KAEfL,gBAAgBiB,gBAAgBX,SAAUE,UAAWE,QAASE,YAAaE,eAAeI,MAAK,WAC3FF,SAASG,QAAQb,SAAUE,eAKvC,SAASY,cAAcC,OAAQC,MAC3B,IAAIC,MAAQF,OAAOG,cAAc,mBACjCD,MAAME,UAAUC,OAAO,sBACvBH,MAAME,UAAUC,OAAO,uBACvBH,MAAME,UAAUE,IAAIL,MAGxB,SAASM,gBAAgBC,SACrBxB,KAAKwB,QAAUA,QAEf,IAAIR,OAASQ,QAAQR,OAErBD,cAAcC,OAAQ,uBAElBQ,QAAQzB,KACRC,KAAKyB,YAAYD,QAAQzB,MAClByB,QAAQE,QAAUF,QAAQvB,UACjCD,KAAKc,QAAQU,QAAQE,OAAQF,QAAQvB,UAGzC,IAAI0B,QAAU9B,uBAAuB+B,KAAK5B,MAC1CA,KAAK2B,QAAUA,QAEfjC,IAAImC,iBAAiBb,OAAQ,QAASW,QAAS,CAC3CG,SAAS,IAyEjB,OA3CAP,gBAAgBQ,UAAUjB,QAAU,SAAUb,SAAUyB,QAEpD,IAAIM,UAAY1C,kBAAkB2C,aAAahC,UAC3CiC,KAAOlC,KACXgC,UAAUG,QAAQH,UAAUI,mBAAoBV,QAAQb,MAAK,SAAUd,MACnEmC,KAAKT,YAAY1B,UAIzBwB,gBAAgBQ,UAAUN,YAAc,SAAU1B,MAE9C,IACIiB,OADUhB,KAAKwB,QACER,OACrBhB,KAAKD,KAAOA,KACZgB,cAAcC,OAxClB,SAASqB,iBAAiBtC,MAEtB,IAAIuC,OAEJ,GAAkB,gBAAdvC,KAAKwC,KACL,MAAO,qBACJ,GAAIxC,KAAKO,SAAWP,KAAKW,cAE5B4B,OAASvC,KAAKS,QAAU,gBACrB,CAAA,GAAkB,UAAdT,KAAKwC,KAIZ,MAAO,sBAFPD,OAASvC,KAAKS,OAKlB,OAAIT,KAAKW,eAEU,cAAX4B,OACO,qBAIR,sBAiBeD,CAAiBtC,OAEnCA,KAAKO,SAA4C,eAAhCP,KAAKS,QAAU,aAChCQ,OAAOI,UAAUE,IAAI,wBAErBN,OAAOI,UAAUC,OAAO,yBAIhCE,gBAAgBQ,UAAUS,QAAU,WAEhC,IAAIhB,QAAUxB,KAAKwB,QAEnB,GAAIA,QAAS,CACT,IAAIR,OAASQ,QAAQR,OAEjBW,QAAU3B,KAAK2B,QAEfA,SACAjC,IAAI+C,oBAAoBzB,OAAQ,QAASW,QAAS,CAC9CG,SAAS,IAKrB9B,KAAKwB,QAAU,KACfxB,KAAKD,KAAO,MAGTwB","file":"recordingbutton.js","sourcesContent":["define(['globalize', 'connectionManager', 'require', 'loading', 'apphost', 'dom', 'recordingHelper', 'events', 'paper-icon-button-light', 'emby-button', 'css!./recordingfields'], function (globalize, connectionManager, require, loading, appHost, dom, recordingHelper, events) {\n    'use strict';\n\n    function onRecordingButtonClick(e) {\n\n        var item = this.item;\n\n        if (item) {\n\n            var serverId = item.ServerId;\n            var programId = item.Id;\n            var timerId = item.TimerId;\n            var timerStatus = item.Status;\n            var seriesTimerId = item.SeriesTimerId;\n\n            var instance = this;\n\n            recordingHelper.toggleRecording(serverId, programId, timerId, timerStatus, seriesTimerId).then(function () {\n                instance.refresh(serverId, programId);\n            });\n        }\n    }\n\n    function setButtonIcon(button, icon) {\n        var inner = button.querySelector('.material-icons');\n        inner.classList.remove('fiber_smart_record');\n        inner.classList.remove('fiber_manual_record');\n        inner.classList.add(icon);\n    }\n\n    function RecordingButton(options) {\n        this.options = options;\n\n        var button = options.button;\n\n        setButtonIcon(button, 'fiber_manual_record');\n\n        if (options.item) {\n            this.refreshItem(options.item);\n        } else if (options.itemId && options.serverId) {\n            this.refresh(options.itemId, options.serverId);\n        }\n\n        var clickFn = onRecordingButtonClick.bind(this);\n        this.clickFn = clickFn;\n\n        dom.addEventListener(button, 'click', clickFn, {\n            passive: true\n        });\n    }\n\n    function getIndicatorIcon(item) {\n\n        var status;\n\n        if (item.Type === 'SeriesTimer') {\n            return 'fiber_smart_record';\n        } else if (item.TimerId || item.SeriesTimerId) {\n\n            status = item.Status || 'Cancelled';\n        } else if (item.Type === 'Timer') {\n\n            status = item.Status;\n        } else {\n            return 'fiber_manual_record';\n        }\n\n        if (item.SeriesTimerId) {\n\n            if (status !== 'Cancelled') {\n                return 'fiber_smart_record';\n            }\n        }\n\n        return 'fiber_manual_record';\n    }\n\n    RecordingButton.prototype.refresh = function (serverId, itemId) {\n\n        var apiClient = connectionManager.getApiClient(serverId);\n        var self = this;\n        apiClient.getItem(apiClient.getCurrentUserId(), itemId).then(function (item) {\n            self.refreshItem(item);\n        });\n    };\n\n    RecordingButton.prototype.refreshItem = function (item) {\n\n        var options = this.options;\n        var button = options.button;\n        this.item = item;\n        setButtonIcon(button, getIndicatorIcon(item));\n\n        if (item.TimerId && (item.Status || 'Cancelled') !== 'Cancelled') {\n            button.classList.add('recordingIcon-active');\n        } else {\n            button.classList.remove('recordingIcon-active');\n        }\n    };\n\n    RecordingButton.prototype.destroy = function () {\n\n        var options = this.options;\n\n        if (options) {\n            var button = options.button;\n\n            var clickFn = this.clickFn;\n\n            if (clickFn) {\n                dom.removeEventListener(button, 'click', clickFn, {\n                    passive: true\n                });\n            }\n        }\n\n        this.options = null;\n        this.item = null;\n    };\n\n    return RecordingButton;\n});\n"]}