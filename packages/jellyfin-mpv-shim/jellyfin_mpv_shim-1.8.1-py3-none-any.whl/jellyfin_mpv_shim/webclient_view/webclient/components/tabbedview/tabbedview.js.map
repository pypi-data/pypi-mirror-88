{"version":3,"sources":["components/tabbedview/tabbedview.js"],"names":["define","backdrop","mainTabsManager","layoutManager","onViewDestroy","e","tabControllers","this","forEach","t","destroy","view","params","currentTabController","initialTabIndex","onBeforeTabChange","TabbedView","self","currentTabIndex","parseInt","tab","getDefaultTabIndex","parentId","loadTab","index","previousIndex","validateTabLoad","Promise","resolve","then","getTabController","controller","refresh","refreshed","onResume","autoFocus","tv","getTabContainers","querySelectorAll","onTabChange","newIndex","detail","selectedTabIndex","previousTabController","onPause","addEventListener","bind","setTabs","getTabs","prototype","options","setTitle","clear","Emby","Page"],"mappings":"AAAA,aAAAA,OAAO,CAAC,WAAY,kBAAmB,gBAAiB,cAAc,SAAUC,SAAUC,gBAAiBC,eAGvG,SAASC,cAAcC,GAEnB,IAAIC,eAAiBC,KAAKD,eAEtBA,iBACAA,eAAeE,SAAQ,SAAUC,GACzBA,EAAEC,SACFD,EAAEC,aAIVH,KAAKD,eAAiB,MAG1BC,KAAKI,KAAO,KACZJ,KAAKK,OAAS,KACdL,KAAKM,qBAAuB,KAC5BN,KAAKO,gBAAkB,KAG3B,SAASC,qBAIT,SAASC,WAAWL,KAAMC,QAEtBL,KAAKD,eAAiB,GACtBC,KAAKI,KAAOA,KACZJ,KAAKK,OAASA,OAEd,IAAIK,KAAOV,KAEPW,gBAAkBC,SAASP,OAAOQ,KAAOb,KAAKc,mBAAmBT,OAAOU,WAQ5E,SAASC,QAAQC,MAAOC,gBALxB,SAASC,gBAAgBF,OAErB,OAAOP,KAAKS,gBAAkBT,KAAKS,gBAAgBF,OAASG,QAAQC,WAKpEF,CAAgBF,OAAOK,MAAK,WACxBZ,KAAKa,iBAAiBN,OAAOK,MAAK,SAAUE,YAExC,IAAIC,SAAWD,WAAWE,UAE1BF,WAAWG,SAAS,CAChBC,UAA4B,MAAjBV,eAAyBtB,cAAciC,GAClDJ,QAASA,UAGbD,WAAWE,WAAY,EAEvBf,gBAAkBM,MAClBP,KAAKJ,qBAAuBkB,iBAKxC,SAASM,mBACL,OAAO1B,KAAK2B,iBAAiB,eAGjC,SAASC,YAAYlC,GACjB,IAAImC,SAAWrB,SAASd,EAAEoC,OAAOC,kBAC7BjB,cAAgBpB,EAAEoC,OAAOhB,cAEzBkB,sBAAyC,MAAjBlB,cAAwB,KAAOR,KAAKX,eAAemB,eAC3EkB,uBAAyBA,sBAAsBC,SAC/CD,sBAAsBC,UAG1BrB,QAAQiB,SAAUf,eAxCtBlB,KAAKO,gBAAkBI,gBA2CvBP,KAAKkC,iBAAiB,iBAAkBtC,KAAKqC,QAAQE,KAAKvC,OAE1DI,KAAKkC,iBAAiB,kBAAkB,SAAUxC,GAE9CH,gBAAgB6C,QAAQpC,KAAMO,gBAAiBD,KAAK+B,QAASX,iBAAkBtB,kBAAmBwB,aAAa,MAGnH5B,KAAKkC,iBAAiB,YAAY,SAAUxC,GAExCY,KAAKiB,SAAS7B,EAAEoC,WAGpB9B,KAAKkC,iBAAiB,cAAezC,cAAc0C,KAAKvC,OA8B5D,OA3BAS,WAAWiC,UAAUf,SAAW,SAAUgB,SAEtC3C,KAAK4C,WACLlD,SAASmD,QAET,IAAIvC,qBAAuBN,KAAKM,qBAE3BA,qBAEMA,sBAAwBA,qBAAqBqB,UACpDrB,qBAAqBqB,SAAS,IAF9BhC,gBAAgBwC,iBAAiBnC,KAAKO,kBAM9CE,WAAWiC,UAAUL,QAAU,WAE3B,IAAI/B,qBAAuBN,KAAKM,qBAE5BA,sBAAwBA,qBAAqB+B,SAC7C/B,qBAAqB+B,WAI7B5B,WAAWiC,UAAUE,SAAW,WAC5BE,KAAKC,KAAKH,SAAS,KAGhBnC","file":"tabbedview.js","sourcesContent":["define(['backdrop', 'mainTabsManager', 'layoutManager', 'emby-tabs'], function (backdrop, mainTabsManager, layoutManager) {\n    'use strict';\n\n    function onViewDestroy(e) {\n\n        var tabControllers = this.tabControllers;\n\n        if (tabControllers) {\n            tabControllers.forEach(function (t) {\n                if (t.destroy) {\n                    t.destroy();\n                }\n            });\n\n            this.tabControllers = null;\n        }\n\n        this.view = null;\n        this.params = null;\n        this.currentTabController = null;\n        this.initialTabIndex = null;\n    }\n\n    function onBeforeTabChange() {\n\n    }\n\n    function TabbedView(view, params) {\n\n        this.tabControllers = [];\n        this.view = view;\n        this.params = params;\n\n        var self = this;\n\n        var currentTabIndex = parseInt(params.tab || this.getDefaultTabIndex(params.parentId));\n        this.initialTabIndex = currentTabIndex;\n\n        function validateTabLoad(index) {\n\n            return self.validateTabLoad ? self.validateTabLoad(index) : Promise.resolve();\n        }\n\n        function loadTab(index, previousIndex) {\n\n            validateTabLoad(index).then(function () {\n                self.getTabController(index).then(function (controller) {\n\n                    var refresh = !controller.refreshed;\n\n                    controller.onResume({\n                        autoFocus: previousIndex == null && layoutManager.tv,\n                        refresh: refresh\n                    });\n\n                    controller.refreshed = true;\n\n                    currentTabIndex = index;\n                    self.currentTabController = controller;\n                });\n            });\n        }\n\n        function getTabContainers() {\n            return view.querySelectorAll('.tabContent');\n        }\n\n        function onTabChange(e) {\n            var newIndex = parseInt(e.detail.selectedTabIndex);\n            var previousIndex = e.detail.previousIndex;\n\n            var previousTabController = previousIndex == null ? null : self.tabControllers[previousIndex];\n            if (previousTabController && previousTabController.onPause) {\n                previousTabController.onPause();\n            }\n\n            loadTab(newIndex, previousIndex);\n        }\n\n        view.addEventListener('viewbeforehide', this.onPause.bind(this));\n\n        view.addEventListener('viewbeforeshow', function (e) {\n\n            mainTabsManager.setTabs(view, currentTabIndex, self.getTabs, getTabContainers, onBeforeTabChange, onTabChange, false);\n        });\n\n        view.addEventListener('viewshow', function (e) {\n\n            self.onResume(e.detail);\n        });\n\n        view.addEventListener('viewdestroy', onViewDestroy.bind(this));\n    }\n\n    TabbedView.prototype.onResume = function (options) {\n\n        this.setTitle();\n        backdrop.clear();\n\n        var currentTabController = this.currentTabController;\n\n        if (!currentTabController) {\n            mainTabsManager.selectedTabIndex(this.initialTabIndex);\n        } else if (currentTabController && currentTabController.onResume) {\n            currentTabController.onResume({});\n        }\n    };\n\n    TabbedView.prototype.onPause = function () {\n\n        var currentTabController = this.currentTabController;\n\n        if (currentTabController && currentTabController.onPause) {\n            currentTabController.onPause();\n        }\n    };\n\n    TabbedView.prototype.setTitle = function () {\n        Emby.Page.setTitle('');\n    };\n\n    return TabbedView;\n});\n"]}